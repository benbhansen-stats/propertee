[{"path":"www.github.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 flexida authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"www.github.com/articles/CovarianceAdjustment.html","id":"data-and-design","dir":"Articles","previous_headings":"","what":"Data and Design","title":"Covariance Adjustment for Randomized Trials","text":"data come state Tennessee’s Student-Teacher Achievement Ratio (STAR) experiment. Students randomly assigned three possible classroom conditions: small (13 17 students per teacher), regular class (22 25 students per teacher), regular--aide class (22 25 students full-time teacher’s aide). Student compliance constant years: Taking kindergarten treatment intended treatment, proceed intent--treat analysis, ignoring actual classroom attendance grades 1 3. Additionally, collapse regular regular+aide categories single category compare effect small classrooms regular classrooms, including teacher’s aides. illustrate workflow researcher midst trial, split data two data sets, one representing student information might known prior assignment second representing outcome information available intervention administered. students blocked schools, randomized within school, establish design based stratifications. Including set weights use later. Post-treatment outcomes include normalized reading math scores several years. Missing values imputed within group (treatment/control) mean students grouped within classrooms teacher, assignment classroom type performed individual level within schools. interested treatment effects different ethnicities composing study population.","code":"data(STARdata) with(STARdata, table(stark, star1), useNA = \"always\") #>               star1 #> stark          regular small regular+aide #>   regular          737   126          663 #>   small             60  1293           48 #>   regular+aide     761   122          706 with(STARdata, table(star2, star3), useNA = \"always\") #>               star3 #> star2          regular small regular+aide #>   regular         1485   167          152 #>   small             37  1564           35 #>   regular+aide      76    40         1858 STARdata$treatment <- STARdata$stark == \"small\" STARdata$treatment[is.na(STARdata$treatment)] <- FALSE table(STARdata$treatment) #>  #> FALSE  TRUE  #>  9698  1900 STARdata$studentid <- as.character(seq_len(nrow(STARdata))) STAR_pre <- STARdata[, c(\"studentid\", \"treatment\",                      \"gender\", \"ethnicity\", \"birth\", \"lunchk\",  # individual demographics                      \"schoolk\", \"degreek\", \"ladderk\", \"experiencek\", \"tethnicityk\", # school and teacher demographics                      \"systemk\", \"schoolidk\" # school ID information                      )] STAR_school <- data.frame(schoolidk = as.numeric(names(table(STAR_pre$schoolidk))),                           school_n = tapply(STAR_pre$treatment,                                             STAR_pre$schoolidk,                                             FUN = length),                           school_n1 = tapply(STAR_pre$treatment,                                             STAR_pre$schoolidk,                                             FUN = sum)) STAR_school$school_n0 <- with(STAR_school, school_n - school_n1) STAR_pre <- merge(STAR_pre, STAR_school, by = \"schoolidk\", all.x = TRUE) STAR_pre$E_Z         <- with(STAR_pre, school_n1 / school_n) STAR_pre$weight_ate  <- with(STAR_pre,                              treatment / E_Z + (1 - treatment) / (1 - E_Z)) STAR_pre$weight_ett  <- with(STAR_pre,                              treatment + (1 - treatment) * E_Z / (1 - E_Z)) STAR_pre$weight_etc  <- with(STAR_pre,                              treatment * (1 - E_Z) / E_Z + (1 - treatment)) STAR_post <- rbind(   data.frame(studentid = STARdata$studentid, year = \"k\", read = STARdata$readk, math = STARdata$mathk, strings.as.factors = FALSE),   data.frame(studentid = STARdata$studentid, year = \"1\", read = STARdata$read1, math = STARdata$math1, strings.as.factors = FALSE),   data.frame(studentid = STARdata$studentid, year = \"2\", read = STARdata$read2, math = STARdata$math2, strings.as.factors = FALSE),   data.frame(studentid = STARdata$studentid, year = \"3\", read = STARdata$read3, math = STARdata$math3, strings.as.factors = FALSE))  ## imputation to within group means STAR_pre_post <- merge(STAR_pre, STAR_post, by = \"studentid\", all = TRUE) ## STAR_design <- rct_design(treatment ~ cluster(studentid) + strata(schoolidk), data = STAR_pre) STAR_design <- rct_design(treatment ~ cluster(studentid), data = STAR_pre) #ggplot(STAR_pre_post, aes(x = read, group = treatment)) + geom_boxplot() + facet_wrap(~ ethnicity)"},{"path":"www.github.com/articles/CovarianceAdjustment.html","id":"covariance-model","dir":"Articles","previous_headings":"","what":"Covariance Model","title":"Covariance Adjustment for Randomized Trials","text":"","code":"rhs <- ~ gender + ethnicity + birth + lunchk +   ladderk + experiencek + tethnicityk + year  covariance_y0_read <- lm(update(rhs, read ~ .), data = STAR_pre_post, subset = !treatment) covariance_y0_math <- lm(update(rhs, math ~ .), data = STAR_pre_post, subset = !treatment)  ## of !! is to turn numeric into logical covariance_y1_read <- lm(update(rhs, read ~ .), data = STAR_pre_post, subset = !!treatment) covariance_y1_math <- lm(update(rhs, math ~ .), data = STAR_pre_post, subset = !!treatment)"},{"path":"www.github.com/articles/CovarianceAdjustment.html","id":"outcome-analysis","dir":"Articles","previous_headings":"","what":"Outcome Analysis","title":"Covariance Adjustment for Randomized Trials","text":"Let \\(y_1\\) \\(y_0\\) potential outcomes, let \\(Z\\) binary treatment indicator, posit Stable Unit Treatment Value assumption holds \\(Y = Z y_1 - (1 - Z) y_0\\). finite population \\(n\\) units, define average treament effect \\[\\Delta = \\frac{1}{n} \\sum_{=1}^n y_{i1} - y_{i0}.\\] Suppose model \\(y_{i0} = g(x_i ; \\beta_0)\\). fitting parameters \\(\\hat \\beta_0\\), let \\(\\hat y_{i0} = g(x_i ; \\hat \\beta_0)\\). Adding subtracting estimated potential outcomes changing average treatment effect: \\[\\Delta = \\frac{1}{n} \\sum_{=1}^n y_{i1} - y_{i0} + \\hat y_{i0} - \\hat y_{i0} = \\frac{1}{n} \\sum_{=1}^n (y_{i1} - \\hat y_{i0})  - \\frac{1}{n} \\sum_{=1}^n (y_{i0} - \\hat y_{i0}).\\] Additionally, binary treatment vector \\(Z\\), can decompose average treatment effect effect treated group (.e., \\(Z = 1\\)) effect control group (.e., \\(Z = 0\\)): \\[ \\begin{aligned} \\Delta &= \\frac{1}{n} \\sum_{=1}^n Z_i\\left[(y_{i1} - \\hat y_{i0})  - (y_{i0} - \\hat y_{i0})\\right] + \\\\  & \\quad  \\frac{1}{n} \\sum_{=1}^n (1 - Z_i) \\left[(y_{i1} - \\hat y_{i0})  - (y_{i0} - \\hat y_{i0})\\right]  \\\\  &= \\frac{n_1}{n} \\delta(Z) + \\frac{n_0}{n} \\delta(1 - Z), \\end{aligned} \\] \\(n_1 = \\sum_{=1}^n Z_i\\) \\(n_0 = \\sum_{=1}^n 1 - Z_i\\). \\(Z\\) represents random vector, taking expectation yields expected treatment effect treated units \\[ \\begin{aligned} \\delta_1 &= E(\\delta(Z)) =  \\frac{1}{n_1} \\sum_{=1}^n E(Z_i) \\left[(y_{i1} - \\hat y_{i0}) - (y_{i0} - \\hat y_{i0})\\right]\\\\ &= \\frac{1}{n} \\sum_{=1}^n \\left[\\frac{n}{n_1} E(Z_i)\\right] (y_{i1} - \\hat y_{i0}) - \\frac{1}{n} \\sum_{=1}^n \\left[\\frac{n}{n_1} E(Z_i)\\right] (y_{i10} - \\hat y_{i0}) , \\end{aligned} \\] expected treatment effect control units \\(\\delta_0 = E(\\delta(1 - Z))\\), analogously. estimate \\(\\Delta\\), \\(\\delta_1\\), \\(\\delta_0\\), introduce difference Hajek estimators, \\[ d(w) =\\frac{\\sum_{=1} w_i Z_i (Y_i - \\hat y_{i0})}{\\sum_{=1}^n w_i Z_i} - \\frac{\\sum_{=1} w_i (1 - Z_i) (Y_i - \\hat y_{i0})}{\\sum_{=1}^n w_i (1 - Z_i)}. \\] \\(\\Delta\\): \\(w_i = Z_i/E(Z_i) + (1 - Z)/E(1 - Z_i)\\). case completely randomized designs, \\(E(Z_i) = n_1/n\\), \\(E(1 - Z_i) = n_0/n\\), estimator reduces well known difference means estimator. \\(\\delta_1\\): \\(w_i = Z_i + (1 - Z_i) E(Z_i) / E(1 - Z_i)\\). \\(\\delta_0\\): \\(w_i = Z_i E(1 - Z_i) / E(Z_i) + (1 - Z_i)\\). weights may also include case weights multiplied subgroup indicators estimate subgroup specific effects. demonstrate function, implement estimator directly also show can estimated using suite tools. begin using various covariance models impute missing potential outcomes individual treatment effects.","code":"dw <- function(w, z, y, y0_hat) {   tmp <- na.omit(data.frame(w, z, y, y0_hat))   with(tmp,     sum(w * z * (y - y0_hat)) / sum(w * z) -       sum(w * (1 - z) * (y - y0_hat)) / sum(w * (1 - z))   ) } STAR_pre_post_k <- STAR_pre_post[STAR_pre_post$year == \"k\",]  pred <- function(mod) {   predict(mod, newdata = STAR_pre_post_k, type = \"response\") }  STAR_pre_post_k$read_y0_hat <- pred(covariance_y0_read) STAR_pre_post_k$read_y1_hat <- pred(covariance_y1_read) STAR_pre_post_k$math_y0_hat <- pred(covariance_y0_math) STAR_pre_post_k$math_y1_hat <- pred(covariance_y1_math)"},{"path":[]},{"path":"www.github.com/articles/CovarianceAdjustment.html","id":"reading-scores","dir":"Articles","previous_headings":"Outcome Analysis > Effect of Treatment on the Treated","what":"Reading Scores","title":"Covariance Adjustment for Randomized Trials","text":"treatment effects, compute point estimates using lm function direct calculation. following currently implemented, represents expected interface.","code":"## overall treatment effects on the treated ett_read_lm <- lm(read ~ treatment,                   data = STAR_pre_post_k,                   weights = weight_ett,                   offset = read_y0_hat) coef(ett_read_lm)[2] #> treatmentTRUE  #>      5.976525  with(STAR_pre_post_k, dw(weight_ett, treatment, read, read_y0_hat)) #> [1] 5.976525  ## ETT within subgroups ett_read_ethnicity_lm <- lm(read ~ treatment * ethnicity,                                data = STAR_pre_post_k,                                weights = weight_ett,                                offset = read_y0_hat)  data.frame(eth = levels(STAR_pre_post_k$ethnicity),            ett = coef(ett_read_ethnicity_lm)[2] + c(cauc = 0, coef(ett_read_ethnicity_lm)[8:12])) #>                                      eth        ett #> cauc                                cauc   5.992359 #> treatmentTRUE:ethnicityafam         afam   5.357006 #> treatmentTRUE:ethnicityasian       asian -21.865925 #> treatmentTRUE:ethnicityhispanic hispanic  42.501192 #> treatmentTRUE:ethnicityamindian amindian  22.944953 #> treatmentTRUE:ethnicityother       other   8.497310  aggregate(seq_len(nrow(STAR_pre_post_k)),           by=list(STAR_pre_post_k$ethnicity),           function(x) with(STAR_pre_post_k[x,],                            dw(weight_ett, treatment, read, read_y0_hat))) #>    Group.1          x #> 1     cauc   5.992359 #> 2     afam   5.357006 #> 3    asian -21.865925 #> 4 hispanic  42.501192 #> 5 amindian  22.944953 #> 6    other   8.497310 STAR_ett    <- ett(STAR_design) ## notice the formula does not mention the blocking factor ett_read_lm <- lm(read ~ treatment, offset = cov_adj(covariance_y0_read), weights = STAR_ett)"},{"path":[]},{"path":"www.github.com/articles/CovarianceAdjustment.html","id":"reading-scores-1","dir":"Articles","previous_headings":"Outcome Analysis > Average Treatment Effects","what":"Reading Scores","title":"Covariance Adjustment for Randomized Trials","text":"following currently implemented, represents expected interface.","code":"## overall ATE ate_read_lm <- lm(read ~ treatment,                   data = STAR_pre_post_k,                   weights = weight_ate,                   offset = read_y0_hat) coef(ate_read_lm)[2] #> treatmentTRUE  #>      6.466883  with(STAR_pre_post_k, dw(weight_ate, treatment, read, read_y0_hat)) #> [1] 6.466883  ate_read_ethnicity_lm <- lm(read ~ treatment * ethnicity,                             data = STAR_pre_post_k,                             weights = weight_ate,                             offset = read_y0_hat)  data.frame(eth = levels(STAR_pre_post_k$ethnicity),            ate = coef(ate_read_ethnicity_lm)[2] + c(cauc = 0, coef(ate_read_ethnicity_lm)[8:12])) #>                                      eth        ate #> cauc                                cauc   6.528351 #> treatmentTRUE:ethnicityafam         afam   5.803404 #> treatmentTRUE:ethnicityasian       asian -25.056263 #> treatmentTRUE:ethnicityhispanic hispanic  46.511727 #> treatmentTRUE:ethnicityamindian amindian  22.944953 #> treatmentTRUE:ethnicityother       other   9.965636  aggregate(seq_len(nrow(STAR_pre_post_k)),           by = list(STAR_pre_post_k$ethnicity),           function(x) with(STAR_pre_post_k[x,],                            dw(weight_ate, treatment, read, read_y0_hat)                            )           ) #>    Group.1          x #> 1     cauc   6.528351 #> 2     afam   5.803404 #> 3    asian -25.056263 #> 4 hispanic  46.511727 #> 5 amindian  22.944953 #> 6    other   9.965636 STAR_ate    <- ate(STAR_design) ## notice the formula does not mention the blocking factor ate_read_lm <- lm(read ~ treatment, offset=cov_adj(covariance_y0_read),                   data = filter(STAR_post, year = \"k\"), weights = STAR_ate)"},{"path":"www.github.com/articles/LinearModelVarianceEstimation.html","id":"combined-model","dir":"Articles","previous_headings":"","what":"Combined model","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Consider two sets background variables treatment assignments, \\(x\\) \\(z\\) dimension \\(p_x\\) \\(p_z\\), respectively. allow correlation variables, assume matrix \\(\\begin{pmatrix} X & Z \\end{pmatrix}' \\begin{pmatrix} X & Z \\end{pmatrix}\\) inverse (think results work generalized inverses, exist makes dimesionality coefficients little tricky). \\[Y = \\alpha'x + \\beta'z + \\epsilon, \\quad E(\\epsilon) = 0, \\text{Var}(\\epsilon) = \\sigma^2\\] Standard results give us \\[ \\begin{pmatrix} \\hat \\alpha_1 \\\\ \\hat \\beta_1 \\end{pmatrix} = \\begin{pmatrix} X'X & X'Z \\\\ Z'X & Z'Z \\end{pmatrix}^{-1} \\begin{pmatrix} X'y \\\\ Z'y \\end{pmatrix} \\] variance estimators \\[\\sigma^2 \\begin{pmatrix} X'X & X'Z \\\\ Z'X & Z'Z \\end{pmatrix}^{-1}\\] Results blocked matrices (e.g., Matrix Cookbook) give variance just \\(\\hat \\beta\\) \\[\\text{Var}(\\hat \\beta_1) = \\sigma^2 \\left[Z'Z - Z' X (X'X)^{-1} X'Z\\right]^{-1}\\] Write \\(H = - X (X'X)^{-1} X'\\), matrix creates residuals regression \\(x\\) alone. , \\[\\text{Var}(\\hat \\beta_1) = \\sigma^2 \\left[Z'H Z\\right]^{-1}\\]","code":""},{"path":"www.github.com/articles/LinearModelVarianceEstimation.html","id":"two-regressions","dir":"Articles","previous_headings":"","what":"Two regressions","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Let \\(\\hat \\alpha_2\\) \\(\\hat \\beta_2\\) estimators first regression \\(Y\\) \\(x\\) alone regressing \\(Y - \\hat \\alpha_2'x\\) \\(Z\\). standard results \\[\\hat \\alpha_2 = (X'X)^{-1} X' y\\] \\[\\hat \\beta_2 = (Z'Z)^{-1} Z' (y - X \\hat \\alpha_2)  = (Z'Z)^{-1} Z'(y - X (X'X)^{-1} X' y) = (Z'Z)^{-1} Z' H y\\] variance \\(\\hat \\beta_2\\) \\[\\text{Var}(\\hat \\beta_2) = \\sigma^2 (Z'Z)^{-1} Z' H Z (Z'Z)^{-1}\\] Consider SVD \\(Z = UDV'\\). \\[\\text{Var}(\\hat \\beta_2) = \\sigma^2 V D^{-2} V' V D U' H U D V' V D^{-2} V' = \\sigma^2 V D^{-1} U' H U D^{-1} V' = \\sigma^2 \\left[Z^{-}\\right]' H^{-} Z^{-} \\] \\(Z^{-}\\) generalized inverse \\(Z\\) \\(H\\) generalized inverse idempotent.","code":""},{"path":"www.github.com/articles/LinearModelVarianceEstimation.html","id":"estimating-sigma2","dir":"Articles","previous_headings":"","what":"Estimating \\(\\sigma^2\\)","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Define \\(G = - Z(Z'Z)^{-1}Z'\\) first model, usual estimator \\(\\sigma^2\\) \\[ \\begin{aligned} \\hat \\sigma_1^2 &= \\frac{1}{n - (p_x + p_z)} (y - X \\hat \\alpha_1 - Z \\hat \\beta_1)' (y - X \\hat \\alpha_1 - Z \\hat \\beta_1) \\\\ &= \\frac{1}{n - (p_x + p_z)} y' \\left[- \\begin{pmatrix} X & Z \\end{pmatrix} \\begin{pmatrix} X'X & X'Z \\\\ Z'X & Z'Z \\end{pmatrix}^{-1} \\begin{pmatrix} X & Z \\end{pmatrix}' \\right] y\\\\ &= \\frac{1}{n - (p_x + p_z)} y' \\left[- X (X'GX)^{-1} X'G - Z(Z'HZ)^{-1} Z'H \\right] y \\end{aligned} \\] second case, usual naive estimate variance take account fact \\(\\hat \\alpha_2\\) random \\[  \\begin{aligned} \\hat \\sigma_2^2     &= \\frac{1}{n - p_z} (y - X \\hat \\alpha_2 - Z \\hat \\beta_2)' (y - X \\hat \\alpha_2 - Z \\hat \\beta_2) \\\\   &= \\frac{1}{n - p_z} y' (H - Z (Z'Z)^{-1} Z' H )' (H - Z (Z'Z)^{-1} Z' H) y \\\\   &= \\frac{1}{n - p_z} y' [(- Z (Z'Z)^{-1} Z') H ]' (- Z (Z'Z)^{-1} Z') H y \\\\   &= \\frac{1}{n - p_z} y' H G H y  \\end{aligned} \\]","code":""},{"path":"www.github.com/articles/LinearModelVarianceEstimation.html","id":"todo","dir":"Articles","previous_headings":"","what":"TODO","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Relate estimating equations joint sequential models. Chapter 7 Boos Stefanski’s textbook contains relevant material combined model. errors--variables textbook extensions sequential models. Implement tests. See test.cov_adj.R verifications results.","code":""},{"path":"www.github.com/articles/RDD.html","id":"data-and-design","dir":"Articles","previous_headings":"","what":"Data and Design","title":"Regression Discontinuity Designs","text":"data example randomly simulated using synthpop package R based data originally collected Lindo, Sanders, Oreopoulos (2010; hereafter LSO). (original real data can found ; code simulate fake data can found .) major public university, students cumulative grade point average (GPA) pre-specified cutoff placed academic probation (AP). Students AP given extra support, threatened suspension GPAs improve. See LSO details. Along LSO, consider students end first year university. university consisted three campuses, AP cutoff varied campus. simplify matters, centered student’s first year GPA campus’s cutoff, creating new variable \\(R_i\\equiv GPA_i -c_{campus[]}\\), \\(GPA_i\\) student \\(\\)’s first-year GPA, \\(c_{campus[]}\\) AP cutoff student \\(\\)’s campus. student \\(\\) placed AP \\(R_i<0\\) avoids AP \\(R_i\\ge 0\\). attempt estimate average effect AP placement nextGPA, students’ subsequent GPA (either summer following academic semester). figure plots average nextGPA students distinct R values (.e. centered first-year GPA). cutoff AP, 0, denoted dotted line. sizes points proportional natural log numbers students unique value R.","code":"data(lsoSynth) figDat <- aggregate(lsoSynth[,c('nextGPA','lhsgrade_pct')],by=list(R=lsoSynth$R),                     FUN=mean,na.rm=TRUE) figDat$n <- as.vector(table(lsoSynth$R))  with(figDat,      plot(R,nextGPA,cex=log(n+1)/3,main='Average Subsequent GPA\\n as a function of 1st-Year GPA,\\n Centered at AP Cutoff')) abline(v=0,lty=2)"},{"path":[]},{"path":"www.github.com/articles/RDD.html","id":"regression-discontinuity-designs","dir":"Articles","previous_headings":"Background","what":"Regression Discontinuity Designs","title":"Regression Discontinuity Designs","text":"characterizes discontinuity (RD) designs, including LSO study, treatment assigned function numeric “running variable” \\(R\\), along prespecified cutoff value \\(c\\), treatment assigned subjects \\(\\) \\(R_i>c\\), \\(R_i<c\\). \\(Z_i\\) denote’s \\(\\)’s treatment assignment, write \\(Z_i=\\mathbf{1}\\{R_i<c\\}\\) \\(\\mathbf{1}\\{R_i<c\\}\\), \\(\\mathbf{1}\\{x\\}\\) indicator function–equal 1 \\(x\\) true 0 otherwise. LSO study, \\(\\) indexes students, centered first-year GPA $R_i $ running variable, treatment study AP placement. $ Z_i={R_i<0} $. (“fuzzy” RD designs, \\(R\\)’s value relative \\(c\\) doesn’t completely determine treatment, merely affects probability treatment, subjects , say, \\(R_i>c\\) likely treated \\(R_i<c\\); fuzzy RD designs, \\(Z_i=\\mathbf{1}\\{R_i>c\\}\\) typically modeled instrument treatment receipt.) RD designs hold privileged place causal inference, unlike observational study designs, mechanism treatment assignment known. , \\(R\\) confounder. hand, since \\(Z\\) completely determined \\(R\\), subjects values \\(R\\) different values \\(Z\\), common observational study techniques, matching \\(R\\), impossible. Instead, necessary adjust \\(R\\) modeling–typically regression.","code":""},{"path":"www.github.com/articles/RDD.html","id":"analyzing-rd-designs-with-ancova","dir":"Articles","previous_headings":"Background","what":"Analyzing RD Designs with ANCOVA","title":"Regression Discontinuity Designs","text":"Traditionally, typical way analyze data RD designs ANCOVA, fitting regression model \\[Y_i=\\beta_0+\\beta_1R_i+\\beta_2Z_i+\\epsilon_i\\] \\(Y_i\\) outcome interest measured subject \\(\\) (example nextGPA), \\(\\epsilon_i\\) random regression error. , regression coefficient \\(Z\\), \\(\\beta_2\\), taken estimate treatment effect. Common methodological updates ANCOVA approach include interaction term \\(Z_i\\) \\(R_i\\), substitution semi-parametric regression, local linear polynomial models, linear ordinary least squares. suitable conditions, ANCOVA model said estimate “Local Average Treatment Effect” (LATE). \\(Y_1\\) \\(Y_0\\) potential outcomes \\(Y\\), LATE defined \\[\\displaystyle\\lim_{r\\rightarrow c^+} E(Y_1|R=r)-\\displaystyle\\lim_{r\\rightarrow c^-} E(Y_0|R=r)\\] equivalently \\[\\displaystyle\\lim_{\\Delta\\rightarrow 0^+} E(Y_1-Y_0 |R\\(c-\\Delta,c+\\Delta))\\] \\(E\\) denotes expectation–, LATE limit average treatment effects subjects \\(R\\) ever-shrinking regions around \\(c\\). Among considerations, LATE target suggests data analysts restrict attention subjects \\(R\\) falling within bandwidth \\(b>0\\) \\(c\\), e.g. fitting model subjects \\(\\) within “window analysis” \\(\\mathcal{W}=\\{:R_i\\(c-b,c+b)\\}\\). number methods proposed select \\(b\\), including cross validation, non-parametric modeling second derivative \\(f(r)=E(Y|R=r)\\), specification tests.","code":""},{"path":"www.github.com/articles/RDD.html","id":"the-flexida-approach-to-rd-designs","dir":"Articles","previous_headings":"Background","what":"The flexida Approach to RD Designs","title":"Regression Discontinuity Designs","text":"flexida approach RD designs breaks data analysis three steps: Conduct specification tests choose bandwidth \\(b>0\\), along , possibly, data exclusions, resulting analysis sample \\(W\\). Fit covariance model \\(Y_{i0}=g(R_i,x_i;\\beta)\\), modeling \\(Y_{i0}\\) function running variable \\(R_i\\) (optionally) covariates \\(\\mathbf{x}_i\\). Fitting covariance model control subjects, designs, entail extrapolation model fit subjects \\(R_i\\(c-b,c)\\) subjects \\(R_i\\(c,c+b)\\), vice-versa, undesirable. Instead, fit covariance model full analysis sample \\(\\mathcal{W}\\), including treated untreated subjects. However, since interested modeling \\(Y_0\\), \\(Y_1\\) \\(Y\\), rather fitting \\(g(\\cdot)\\), fit extended model \\[\\tilde{g}(R_i,x_i,Z_i;\\beta,\\gamma)=g(R_i,x_i;\\beta)+\\gamma Z_i\\] including term treatment assignment. estimate \\(\\gamma\\) , essence, provisional estimate treatment effect. Let \\(\\widehat{Y}_{i0}=g(R_i,x_i;\\hat{\\beta})\\), using model \\(Y_0\\)—including term \\(Z\\)—along \\(\\hat{\\beta}\\) estimated step 2. estimate average treatment effect subjects \\(W\\) using difference means estimator: \\[ d_{\\hat{\\beta}}=\\frac{\\sum_{\\W} Z_i(Y_i-\\widehat{Y}_{i0})}{\\sum_{\\W} Z_i}-\\frac{\\sum_{\\W} (1-Z_i)(Y_i-\\widehat{Y}_{i0})}{\\sum_{\\W} (1-Z_i)} \\] estimator \\(d_{\\hat{\\beta}}\\) consistent model \\(g(R_i,x_i;\\beta_0)\\), \\(\\beta_0\\) probability limit \\(\\hat{\\beta}\\), successfully removes confounding due \\(R\\), .e. \\(Y_0-g(R_i,x_i;\\beta_0) \\perp \\!\\!\\! \\perp Z\\) \\(\\\\mathcal{W}\\).","code":""},{"path":[]},{"path":"www.github.com/articles/RDD.html","id":"determining-the-window-of-analysis","dir":"Articles","previous_headings":"Analyzing an RD design in flexida","what":"Determining the window of analysis","title":"Regression Discontinuity Designs","text":"extensive literature determining appropriate window analysis RD design. See, instance, Imbens Kalyanaraman (2012) Sales Hansen (2020). stage analysis beyond scope vignette, require flexida package. purpose example, focus analysis \\(\\mathcal{W}=\\{:R_i\\[-0.5,0.5]\\}\\).","code":""},{"path":"www.github.com/articles/RDD.html","id":"initializing-the-rd-design-object","dir":"Articles","previous_headings":"Analyzing an RD design in flexida","what":"Initializing the RD Design Object","title":"Regression Discontinuity Designs","text":"general, flexida design objects require users specify unit- cluster-id variable, corresponds level treatment assignment–words, units assigned conditions. necessary combining results across different models datasets, estimating correct design-based standard errors. lsoSynth, clusters, individual students assigned academic probation individual basis. dataset include ID variable, variable takes unique value row . use row-names. Defining RD design requires, minimum, identifying running variable(s) \\(R\\), well \\(R\\) determines treatment assignment. example,","code":"lsoSynth$id <- rownames(lsoSynth) lsoSynth$Z <- lsoSynth$R<0  lsoSynthW <- subset(lsoSynth,abs(R)<=0.5)  #lsoSynthW$id <- 1:nrow(lsoSynthW) des <- rd_design(Z ~ forcing(R) + unitid(id), data=lsoSynth, subset=abs(lsoSynth$R) <= 0.5)"},{"path":"www.github.com/articles/RDD.html","id":"modeling-y_c-as-a-function-of-r","dir":"Articles","previous_headings":"Analyzing an RD design in flexida","what":"Modeling \\(Y_C\\) as a function of \\(R\\)","title":"Regression Discontinuity Designs","text":"consider two potential models \\(\\tilde{g}(\\cdot)\\) \\(Y_C\\) function \\(R\\). First, standard OLS model: second bounded-influence polynomial model type recommended Sales & Hansen (2020): [Put something evaluating ?]","code":"### this doesn't work: g1 <- lm(nextGPA ~ R + Z, data = lsoSynth, weights = ett(des) ##this works, but it's annoying to enter in the subset expression a 2nd time: g1 <- lm(nextGPA ~ R + Z, data = lsoSynth, subset = abs(R) <= 0.5) g2 <- if(requireNamespace(\"robustbase\", quietly = TRUE)){   robustbase::lmrob(nextGPA~poly(R,5)+Z,data=lsoSynthW) } else g1"},{"path":"www.github.com/articles/RDD.html","id":"estimating-effects","dir":"Articles","previous_headings":"Analyzing an RD design in flexida","what":"Estimating Effects","title":"Regression Discontinuity Designs","text":"","code":"yhat1 <- predict(g1,data.frame(R=forcings(des)[[1]],Z=FALSE)) yhat2 <- predict(g2,data.frame(R=forcings(des)[[1]],Z=FALSE))  plot(yhat1,yhat2) ### method 1:  mean(lsoSynthW$nextGPA[lsoSynthW$Z]-yhat1[lsoSynthW$Z])-   mean(lsoSynthW$nextGPA[!lsoSynthW$Z]-yhat1[!lsoSynthW$Z]) #> [1] 0.2553202  #### method 2: coef(lm(nextGPA~Z, offset=yhat1,data=lsoSynthW))['ZTRUE'] #>     ZTRUE  #> 0.2553202 ### method 1:  mean(lsoSynthW$nextGPA[lsoSynthW$Z]-yhat2[lsoSynthW$Z])-   mean(lsoSynthW$nextGPA[!lsoSynthW$Z]-yhat2[!lsoSynthW$Z]) #> [1] 0.2295554  #### method 2: coef(lm(nextGPA~Z, offset=yhat2,data=lsoSynthW))['ZTRUE'] #>     ZTRUE  #> 0.2295554"},{"path":[]},{"path":"www.github.com/articles/not-for-cran/non-binary-weights.html","id":"storage-of-non-binary-treatment","dir":"Articles > Not-for-cran","previous_headings":"","what":"Storage of non-binary treatment","title":"Non-Binary Treatment","text":"design’s treatment dichotomized, keep orignal treatment place, add slot dichotomy can evaluate dichotomy either two functions (treatment() user-facing, .bin_txt() internal)","code":"des2@structure ##    dose cid1 cid2 ## 1    50    1    1 ## 2   250    1    2 ## 3   100    2    1 ## 4   200    2    2 ## 5   300    3    1 ## 6    50    3    2 ## 7   250    4    1 ## 8   100    4    2 ## 9   200    5    1 ## 10  300    5    2 des2@dichotomy ## dose >= 200 ~ dose < 100 treatment(des2) ##    dose ## 1    50 ## 2   250 ## 3   100 ## 4   200 ## 5   300 ## 6    50 ## 7   250 ## 8   100 ## 9   200 ## 10  300 treatment(des2, binary = TRUE) ##    z__ ## 1    0 ## 2    1 ## 3   NA ## 4    1 ## 5    1 ## 6    0 ## 7    1 ## 8   NA ## 9    1 ## 10   1 .bin_txt(des2) ##  [1]  0  1 NA  1  1  0  1 NA  1  1"},{"path":"www.github.com/articles/not-for-cran/non-binary-weights.html","id":"weighteddesign","dir":"Articles > Not-for-cran","previous_headings":"","what":"WeightedDesign","title":"Non-Binary Treatment","text":"ensures @Design slot inside WeightedDesign object binary 0/1 treatment either direct 0/1 treatment, presence dichotomy slot. two helper functions check :","code":"wght <- ate(des2, data = simdata) .bin_txt(wght@Design) ##  [1]  0  1 NA  1  1  0  1 NA  1  1 is_dichotomized(des1) ## [1] FALSE has_binary_treatment(des1) ## [1] TRUE is_dichotomized(des2) ## [1] TRUE has_binary_treatment(des2) ## [1] FALSE"},{"path":"www.github.com/articles/sandwich_infrastructure.html","id":"context","dir":"Articles","previous_headings":"","what":"Context","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"user specified comparative study design separately fitted covariance model. E.g.: data frames C Q_ describe covariance quasiexperimental samples, potentially different levels aggregation. instance C might give student data Q_ table classrooms. samples describe may disjoint, identical overlapping. Next uses lm() (perhaps lm()-wrapper ’ll offer) calculate directly adjusted1 estimates intention--treat effect: Q may Q_, Q_ may describe aggregates units described Q; offset similar predict(cmod, newdata=Q, type=\"response\") given; weights Horwitz-Thompson, inverse probability assignment type. point m class lm, additional information tucked away m[['model']]: data frame special columns (weights) offset(cov_adj(cmod)). writing, flexida package implements S4 class WeightedDesign extends base numeric vector type encodes information beyond unit weights necessary standard error calculations, arranges m[['model']][['(weights)']] type. note describes two planned classes appropriate m[['model']][['offset(cov_adj(cmod))']]: SandwichLayer, fallback option PreSandwichLayer, use call cov_adj() producing object able locate necessary information. Standard errors obtained subsequent steps, e.g.  “cid1” “cid2” column names clusters(des), altcid1 altcid2 corresponding column names C, keys_data_frame rows aligned C columns including “cid1” “cid2.” Either way, m coerced class DirectAdjusted, acquired @Design slot information des, m[['model']] column offset(cov_adj(cmod)) class SandwichLayer. Together objects contain necessary additional information perform standard error calculations : attend structure design, recorded des; propagate errors fitting covariance model cmod standard errors reported treat * gender coefficients.","code":"des <- obs_design(treat ~ strata(district) + cluster(school, classroom),                   data =Q_) cmod <- glm(promotion ~ pretest + gender,             family=binomial(), data = C) m <- lm(promotion ~ treat * gender, data = Q,         offset = cov_adj(cmod),         weights = ate(des)) coef(m) # spits out effect estimates vcov(as.DirectAdjusted(m)) m <- as.DirectAdjusted(m,                        by=list(cmod=c(cid1=altcid1, cid2=altcid2))                ) vcov(m) m <- as.DirectAdjusted(m,                        by=keys_data_frame) vcov(m)"},{"path":"www.github.com/articles/sandwich_infrastructure.html","id":"formal-class-structure-proposal","dir":"Articles","previous_headings":"","what":"Formal class structure proposal","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"Like existing class WeightedDesign, PreSandwichLayer SandwichLayer classes extend base numeric vector type, numeric vectors (predictions) @.Data slots. PreSandwichLayer SandwichLayer also @prediction_gradient slot, numeric matrix dimension Regarding .SandwichLayer(): Turning PreSandwichLayer, x, SandwichLayer amounts providing mapping rows model.matrix(x) sandwich::estfun(x) units assignment recorded des. mapping recorded @keys data frame, many rows model.matrix(x) many columns unit--assignment (clustering) variables corresponding Design. mapping can effected via expand.model.frame(x, vars, <...>). =NULL, vars vector names unit--assignment variables given design, desvars say. Otherwise named character vector giving crosswalk, second argument expand.model.frame() [desvars], names switched column names inthe data frame expand.model.frame() returns favor desvars. order vcov.DirectAdjusted(m) work, following functions must methods applicable m@fitted_covariance_model: model.matrix(), sandwich::estfun(), sandwich::bread(). similar requirements sandwich::vcovHC().","code":"c(nrow(@.Data), length(coef(fitted_covariance_model)))"},{"path":"www.github.com/articles/sandwich_infrastructure.html","id":"basis-in-known-extensions-of-huber-white-setup-to-chained-estimators","dir":"Articles","previous_headings":"","what":"Basis in known extensions of Huber-White setup to chained estimators","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"reference formulas stacked estimating equations Carroll, Ruppert, Stefanski Crainiceanu (2006, p.373), covariance model psi functions (estimating equations) \\(\\phi(\\tilde{\\mathbf{Y}}, \\alpha)\\) parameters \\(\\alpha\\), Fisher information estimating-equation covariance matrices \\(A_{11}\\) \\(B_{11}\\) respectively; direct adjustment model’s \\(\\psi(\\tilde{\\mathbf{Y}}, \\tau, \\alpha)\\), treat coefficients \\(\\tau\\), sandwich components \\(A_{22}\\) \\(B_{22}\\). (symbols “\\(\\phi()\\),” “\\(\\psi()\\)” “\\(\\alpha\\)” used Carroll et al use , “\\(\\tau\\)” corresponds “\\(\\mathcal{B}\\).”) take \\(\\) range units assignment (clusters) elements2. Carroll et al development missing \\(n^{-1}\\) factors right equations defining \\(A_{n,\\, 11}, \\ldots, B_{n,\\, 22}\\). avoid ambiguities mapping external subroutines’ understanding “\\(n\\)”3, let’s address error leaving displays -, striking leading \\(n^{-1}\\) factors display (.34) subsequent expression \\(\\mathrm{var}(\\hat{\\mathcal{B}})\\): .e., turn B matrices sums means. Carroll et al’s formulas \\(A_{11}\\), \\(A_{21}\\) \\(A_{22}\\) apply, although design-based standard errors call different calculations \\(B_{11}\\), \\(B_{12}\\) \\(B_{22}\\). (get around putting multidecker sandwich together, ’ll need cognizant fact Bs means sums, ready compensate fact divided different \\(ns\\) figuring means \\(A_{11}\\) \\(A_{22}\\), example.) Denote clusters/units assignment represented covariance quasiexperimental samples \\(\\mathcal{C}\\) \\(\\mathcal{Q}\\) respectively.","code":""},{"path":"www.github.com/articles/sandwich_infrastructure.html","id":"required-materials-for-se-calculations","dir":"Articles","previous_headings":"","what":"Required materials for SE calculations","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"estimate variances covariances \\(\\tau\\), ’ll need assemble following materials. Sufficient information \\(\\mathcal{C}\\) \\(\\mathcal{Q}\\) identify intersection \\(\\mathcal{C}\\cap\\mathcal{Q}\\), needed estimate \\(B_{21}\\); Matrices estimating functions \\(\\{\\phi(\\tilde{\\mathbf{Y}}_i; \\hat{\\alpha}): \\\\mathcal{C}\\cap\\mathcal{Q}\\}\\) \\(\\{\\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, \\hat{\\alpha}): \\\\mathcal{C}\\cap\\mathcal{Q}\\}\\), needed \\(B_{21}\\); quasiexperimental sample \\(\\mathcal{Q}\\), matrices \\[\\nabla_{\\alpha} \\{\\sum_{j \\}\\psi(\\tilde{\\mathbf{Y}}_j, \\hat{\\tau}, {\\alpha}): \\\\mathcal{Q}\\} \\vert_{\\alpha=\\hat\\alpha},\\] corresponding \\(A_{21}\\), “\\(j \\\\)” means “elements \\(j\\) cluster \\(\\)” “\\(\\sum_{j \\} \\psi(\\tilde{\\mathbf{Y}}_j, \\hat{\\tau}, {\\alpha})\\)” interpreted mean “\\(\\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, {\\alpha})\\)” clustering; Estimates direct adjustment model’s “bread matrix” \\((n_\\mathcal{Q}^{-1} A_{22})^{-1} = \\{\\frac{1}{\\# \\mathcal{Q}}\\nabla_\\tau \\sum_{\\\\mathcal{Q}} \\mathbb{E}[\\psi(\\tilde{\\mathbf{Y}}_i, \\tau, \\hat{\\alpha})] \\vert_{\\tau=\\hat\\tau}\\}^{-1}\\), .e. inverse Fisher information w.r.t. \\(\\tau\\) , along “meat matrix” \\(n_\\mathcal{Q}^{-1} B_{22} = n_\\mathcal{Q}^{-1} \\mathrm{Cov}[\\sum_{\\\\mathcal{Q}} \\psi(\\tilde{\\mathbf{Y}}_i, {\\tau}, {\\alpha})]_{({\\tau}, {\\alpha})=(\\hat{\\tau}, \\hat{\\alpha})}\\); covariance model’s bread matrix \\((n_\\mathcal{C}^{-1} \\hat{}_{11})^{-1} = \\{n_\\mathcal{C}^{-1}\\sum_{\\\\mathcal{C}} \\nabla_\\alpha [\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\}^{-1}\\); covariance estimation conventional “model-based” setup , estimates covariance model’s B matrix \\(n_\\mathcal{C}^{-1}B_{11} = n_\\mathcal{C}^{-1} \\mathrm{Cov}[\\sum_{\\\\mathcal{C}}\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\) (“clustered” covariance estimate). (5), observed information \\(n_\\mathcal{C}^{-1}\\sum_{\\\\mathcal{C}} \\nabla_\\alpha [\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\) preferred “observed expected” information, \\(n_\\mathcal{C}^{-1}\\sum_{\\\\mathcal{C}} \\nabla_\\alpha \\mathbb{E} [\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\), observed information agnostic whether expectation calculated conditioning potential outcomes, ie finite population perspective, conditioning treatment assignment, model based perspective. special case quantile regression4, observed information isn’t ordinarily used standard error calculations, may take get. Regarding (6), \\(B_{11}\\) needed design-based standard errors, setting observations outside quasiexperimental sample contribute covariance model’s B matrix. quasiexperimental sample observations , ’ll access direct adjustment model fit. also \\(\\{\\phi(\\tilde{\\mathbf{Y}}_i; \\hat{\\alpha}): \\\\mathcal{Q}\\}\\) \\(\\{\\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, \\hat{\\alpha}): \\\\mathcal{Q}\\}\\), can use materials estimate \\(B_{12}\\) \\(B_{22}\\).","code":""},{"path":"www.github.com/articles/sandwich_infrastructure.html","id":"software-implementation-comments-on-16-above-including-contents-of-sandwichveganlayerlayerkit-objects","dir":"Articles","previous_headings":"","what":"Software implementation comments on 1–6 above, including contents of {Sandwich/Vegan}{Layer/LayerKit} objects","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"1. SandwichLayer object s_l_o carries keys data frame identify rows model.matrix(s_l_o) units assignment (named separate Design object). association can many-one (one-many); required named units appear design. covmod won’t aware cluster associations, assembling info runtime calls trickery, well means users override trickery directly provide key variables design need. NA keys indicates unit appearing Design. 2. Estimating functions may need aggregated (summed) cluster level calculation \\(B_{21}\\). dedicated function calculate \\(B_{21}\\) cluster-aggregated estimating function matrices. 3. PreSandwichLayer SandwichLayer @prediction_gradient slot numeric matrix. matrix many rows entries .Data vector, many columns estimating equations. @prediction_gradient slot carries \\(\\{\\nabla_\\alpha f_{\\alpha}(\\tilde{\\mathbf{Y}}_j)|_\\alpha=\\hat\\alpha\\}\\), \\(j\\) ranges rows Q – elements clusters distinction exists – \\(f_\\alpha(\\mathbf{Y})\\) represents prediction data \\(\\mathbf{Y}\\) fitted model class(cov_mod) parameters \\(\\alpha\\). \\(\\psi()\\)’s use “predictions” covariance model, , first derivative covariance model predictions applied data \\(\\mathcal{Q}\\) provide sufficient information covariance model complete calculation \\(\\{\\nabla_{\\alpha} \\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, {\\alpha}) \\vert_{\\alpha=\\hat\\alpha}: \\\\mathcal{Q}\\}\\). glm similarly typed objects cmod, predictions joint function family(cmod) model.matrix generated process creating predictions cmod. 4. SandwichLayer class isn’t implicated (4). can take extant calculations direct adjustment model’s information matrix, proviso keep track whatever scaling calculations may applied. design-based SEs ’ll need B matrix calculation. model-based SEs can plug extant routines \\(B_{22}\\) also, careful ensure clustering units assignment (named Design object). Scaling matrices default conventions sandwich package. (haven’t considered whether use HC0–3 etc \\(B_{22}\\) calls corresponding adjustment estimation \\(B_{21}\\) /\\(B_{11}\\), whether heuristics animating adjustments make sense context.) 5. sandwich::bread() used retrieve \\(A_{11}^{-1}\\). can take extant calculations covariance model’s information matrix, defaulting scaling conventions implemented sandwich package. 6. sandwich::meatCL() used retrieve \\(B_{11}\\). now try implement HC0 & HC1. (haven’t considered whether use HC0–3 etc \\(B_{11}\\) calls corresponding adjustment estimation \\(B_{21}\\) /\\(B_{22}\\), whether heuristics animating adjustments make sense context.)","code":""},{"path":[]},{"path":"www.github.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"www.github.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2022). flexida: Package (One Line, Title Case). R package version 0.0.0.9000, https://github.com/benbhansen-stats/flexida.","code":"@Manual{,   title = {flexida: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/benbhansen-stats/flexida}, }"},{"path":[]},{"path":"www.github.com/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (One Line, Title Case)","text":"Flexida enables flexible direct adjustment design-informed standard errors optional prior covariance adjustment. Random trials often utilize clustering blocking assigning treatment status way simplify implementation. design information must utilized future analyses. Using Flexida, user can generate Design object keep track design structure. (Also supported observational studies (obs_design) regression discontinuity designs (rdd_design requires forcing() variable well.) order pass design information model using weights= argument, functions ett() ate() used convert Design numeric vector Design object attribute. Note Design created teacher level data (teacherdata), analysis carried student level (studentdata); ate() (alternative ett()) expand weights appropriately. Optionally, can also include covariance adjustment model cov_adj() function.","code":"des <- rct_design(txt ~ cluster(teacher) + block(school), data = teacherdata) lm(y ~ txt, data = studentdata, weights = ate(des)) covadjmod <- lm(y ~ x1 + x2 + ..., data = studentdata, subset = !txt) lm(y ~ txt, studentdata, weights = ett(des),    offset = cov_adj(covadjmod, data = studentdata) )"},{"path":"www.github.com/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"What the Package Does (One Line, Title Case)","text":"may use RStudio develop flexida, opening flexida.Rproj file. suggest ensure required dependencies installed running prefer changes include unit tests demonstrating problem showing new feature added. test suite uses testthat package write run tests. (Please ensure latest version testthat (least v0.11.0), older versions stored tests different directory, may test properly.) See tests/testthat directory examples. can run test suite via Build -> Test Package. New features include inline Roxygen documentation. can generate .Rd documents Roxygen code using Build -> Document, using Make describe . Finally, can use Build -> Build Reload Build -> Clean Rebuild load updated version flexida current RStudio session. Alternatively, install developed version permanently, use Build -> Build Binary Version, followed can revert back current CRAN version prefer use RStudio, can develop using Make. make test: Run full test suite. make document: Update documentation Roxygen inline comments. make interactive: Start interactive session flexida loaded. (make interactive-emacs starts session inside emacs.) make check: Run R CMD check package make build: Build binary package. make vignette: Builds vignettes vignettes/ directory make clean: Removes files built make vignette, make document make    check. generally necessary, can useful debugging. change ready, make pull request github.","code":"devtools::install_deps(dependencies = TRUE) install.packages(\"../flexida_VERSION.tgz\", repo=NULL) remove.packages(\"flexida\") install.packages(\"flexida\")"},{"path":"www.github.com/index.html","id":"white-space-changes","dir":"","previous_headings":"","what":"White space changes","title":"What the Package Does (One Line, Title Case)","text":"ease searches commit history: Commit white space changes occur lines substantive changes. Avoid committing trailing white spaces. RStudio, options enable automatically removing white space end lines trailing whitespaces Settings, Code -> Saving. emacs, can remove white spaces ends lines M-x delete-trailing-whitespace. automatically whenever save, add following init file: remove trailing lines saving, can also add :","code":"(add-hook 'before-save-hook (lambda ()                              (delete-trailing-whitespace))) (setq delete-trailing-lines t)"},{"path":"www.github.com/index.html","id":"internal-functions","dir":"","previous_headings":"","what":"Internal functions","title":"What the Package Does (One Line, Title Case)","text":"internal functions (use ) prefaced “.” (e.g. .myfunc <- function()). Internal functions documented using roxygen described , given @keywords internal tag ensure get indexed. (Generally internally functions @export’d exceptions may arise.) period development, documenting internal function, add \"_pkgdown.yml\" file appropriate category. flexida goes public, remove .","code":""},{"path":"www.github.com/index.html","id":"referring-to-functions","dir":"","previous_headings":"","what":"Referring to functions","title":"What the Package Does (One Line, Title Case)","text":"documentation refers another function (internal package otherwise), please include trailing (), help pkgdown provide appropriate link (see https://pkgdown.r-lib.org/articles/linking.html). E.g. \\code{lm()} \\code{cov_adj()} \\code{lme4::lmer()}.","code":""},{"path":"www.github.com/reference/DesignSpecials.html","id":null,"dir":"Reference","previous_headings":"","what":"Special terms in Design creation formula — unit_of_assignment","title":"Special terms in Design creation formula — unit_of_assignment","text":"special function used definition Design class objects. identify units assignment, blocks forcing variables.","code":""},{"path":"www.github.com/reference/DesignSpecials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special terms in Design creation formula — unit_of_assignment","text":"","code":"unit_of_assignment(...)  unitid(...)  cluster(...)  uoa(...)  block(...)  forcing(...)"},{"path":"www.github.com/reference/DesignSpecials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special terms in Design creation formula — unit_of_assignment","text":"... number variables length.","code":""},{"path":"www.github.com/reference/DesignSpecials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Special terms in Design creation formula — unit_of_assignment","text":"variables appropriate labels","code":""},{"path":"www.github.com/reference/DesignSpecials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Special terms in Design creation formula — unit_of_assignment","text":"functions use outside formula creating Design. unit_of_assignment, uoa, cluster unitid aliases ; must include one one Design. choice use impact analysis, output display.","code":""},{"path":"www.github.com/reference/Design_extract_dichotomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace dichotomy — dichotomy","title":"Extract or replace dichotomy — dichotomy","text":"Extract replace dichotomy","code":""},{"path":"www.github.com/reference/Design_extract_dichotomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace dichotomy — dichotomy","text":"","code":"dichotomy(x)  # S4 method for Design dichotomy(x)  dichotomy(x) <- value  # S4 method for Design dichotomy(x) <- value"},{"path":"www.github.com/reference/Design_extract_dichotomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace dichotomy — dichotomy","text":"x Design object value Replacement dichotomy formula, NULL remove","code":""},{"path":"www.github.com/reference/Design_extract_dichotomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace dichotomy — dichotomy","text":"Dichomization formula","code":""},{"path":"www.github.com/reference/Design_extractreplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessors and Replacers for Design objects — treatment","title":"Accessors and Replacers for Design objects — treatment","text":"treatment(), argument binary FALSE, treatment variable passed Design returned one-column data.frame. binary = TRUE passed, Design either binary treatment variable, dichotomy, binary one-column data.frame returned. Design access binary treatment (non-binary treatment dichotomy specified), error.","code":""},{"path":"www.github.com/reference/Design_extractreplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessors and Replacers for Design objects — treatment","text":"","code":"treatment(x, ...)  # S4 method for Design treatment(x, binary = FALSE, ...)  treatment(x) <- value  # S4 method for Design treatment(x) <- value  units_of_assignment(x)  # S4 method for Design units_of_assignment(x)  units_of_assignment(x) <- value  # S4 method for Design units_of_assignment(x) <- value  clusters(x)  # S4 method for Design clusters(x)  clusters(x) <- value  # S4 method for Design clusters(x) <- value  unitids(x)  # S4 method for Design unitids(x)  unitids(x) <- value  # S4 method for Design unitids(x) <- value  blocks(x)  # S4 method for Design blocks(x)  blocks(x) <- value  # S4 method for Design blocks(x) <- value  forcings(x)  # S4 method for Design forcings(x)  forcings(x) <- value  # S4 method for Design forcings(x) <- value"},{"path":"www.github.com/reference/Design_extractreplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessors and Replacers for Design objects — treatment","text":"x Design object ... Ignored. binary Logical; FALSE (default), return data.frame containing named treatment variable. TRUE x formula @dichotomy, return data.frame containing binary treatment variable name \"z__\". Errors TRUE treatment non-binary @dichotomy NULL . value Replacement. Either vector/matrix appropriate dimension, named data.frame renaming variable well.","code":""},{"path":"www.github.com/reference/Design_extractreplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessors and Replacers for Design objects — treatment","text":"data.frame containing treatment variable","code":""},{"path":"www.github.com/reference/Design_extractreplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessors and Replacers for Design objects — treatment","text":"one-column data.frame returned treatment() named entered Design creation, dichotomy Design, column name \"__z\".","code":""},{"path":"www.github.com/reference/Design_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Design object with the given specifications. — rct_design","title":"Generates a Design object with the given specifications. — rct_design","text":"Generates randomized control treatment Design (rct_design()), observational Design (obs_design()), regression discontinuity Design (rd_design()).","code":""},{"path":"www.github.com/reference/Design_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Design object with the given specifications. — rct_design","text":"","code":"rct_design(formula, data, subset = NULL, dichotomy = NULL)  rd_design(formula, data, subset = NULL, dichotomy = NULL)  obs_design(formula, data, subset = NULL, dichotomy = NULL)"},{"path":"www.github.com/reference/Design_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Design object with the given specifications. — rct_design","text":"formula defines Design components data data set. subset optionally subset data creating Design object dichotomy optionally, formula defining dichotomy treatment variable already 0/1 logical. See details.","code":""},{"path":"www.github.com/reference/Design_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Design object with the given specifications. — rct_design","text":"Design object requested type use analysis","code":""},{"path":"www.github.com/reference/Design_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a Design object with the given specifications. — rct_design","text":"formula must include exactly one unit_of_assignment(), uoa(), cluster(), unitid() identify units assignment (one variables). defining rd_design, formula must also include forcing() entry. formula may optionally include block() entry well. treatment variable passed left-hand side formula can either logical, numeric, character. anything else, attemped converted one (example, factor ordered converted numeric levels numeric, otherwise character. treatment logical numeric values 0 1, order generate weights ate() ett(), dichotomy argument must used identify treatment control groups. Design creation functions (rct_design(), rd_design(), obs_design()) support dichotomy argument, instead dichotomy can passed ett() ate() directly. dichotomy argument formula consisting conditional statement left-hand side (identifying treatment levels associated \"treatment\") right hand side (identifying treatment levels associated \"control\"). example, treatment variable called dose, might write: dichotomy = dose > 250 ~ dose <= 250 conditionals need assign values treatment control treatment, example, dose > 300 ~ dose < 200 handle 200 <= dose <= 300. Units assignment treatment values assigned either treatment control assumed recieve either, maintained Design proper standard error calculations. period (.) can used assign units assignment. example, written example dichotomy = dose > 250 ~ . dichotomy = . ~ dose <= 250 dichotomy formula supports Relational Operators, Logical Operators, %%. Note can specify conditional logic treatment formula (e.g. rct_design(dose > 250 ~ unitOfAssignment(...) suggest instead passing treatment variable directly using dichotomy. Otherwise changing dichotomy require re-creating Design, instead simply using dichotomy(design) <- passing dichotomy ate() ett().","code":""},{"path":"www.github.com/reference/PreSandwichLayer.show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"Show PreSandwichLayer SandwichLayer","code":""},{"path":"www.github.com/reference/PreSandwichLayer.show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"","code":"# S4 method for PreSandwichLayer show(object)"},{"path":"www.github.com/reference/PreSandwichLayer.show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"object PreSandwichLayer object","code":""},{"path":"www.github.com/reference/PreSandwichLayer.show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"invisible copy object","code":""},{"path":"www.github.com/reference/PreSandwichLayer.subset.html","id":null,"dir":"Reference","previous_headings":"","what":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"PreSandwichLayer SandwichLayer subsetting","code":""},{"path":"www.github.com/reference/PreSandwichLayer.subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"","code":"# S4 method for PreSandwichLayer subset(x, subset)  # S4 method for PreSandwichLayer [(x, i)"},{"path":"www.github.com/reference/PreSandwichLayer.subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"x PreSandwichLayer object subset Logical vector identifying values keep drop indices specifying elements extract replace. See help(\"[\") details.","code":""},{"path":"www.github.com/reference/PreSandwichLayer.subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"x subset x subset ","code":""},{"path":"www.github.com/reference/STARdata.html","id":null,"dir":"Reference","previous_headings":"","what":"STAR data — STARdata","title":"STAR data — STARdata","text":"STAR data","code":""},{"path":"www.github.com/reference/STARdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STAR data — STARdata","text":"","code":"STARdata"},{"path":"www.github.com/reference/STARdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"STAR data — STARdata","text":"STAR data set ???","code":""},{"path":"www.github.com/reference/WeightCreators.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Direct Adjusted Weights — ett","title":"Generate Direct Adjusted Weights — ett","text":"Generate Direct Adjusted Weights","code":""},{"path":"www.github.com/reference/WeightCreators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Direct Adjusted Weights — ett","text":"","code":"ett(design = NULL, dichotomy = NULL, by = NULL, data = NULL)  ate(design = NULL, dichotomy = NULL, by = NULL, data = NULL)"},{"path":"www.github.com/reference/WeightCreators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Direct Adjusted Weights — ett","text":"design Design object created one rct_design(), rd_design(), obs_design(). dichotomy optional; formula defining dichotomy treatment variable already 0/1. See details help rct_design() e.g. details. optional; named vector list connecting names cluster/unit assignment variables design cluster/unit assignment variables data. Names represent variables Design; values represent variables data. needed variable names differ. data optionally data analysis performed . May excluded functions included weights argument model.","code":""},{"path":"www.github.com/reference/WeightCreators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Direct Adjusted Weights — ett","text":"WeightedDesign object","code":""},{"path":"www.github.com/reference/WeightedDesign.subset.html","id":null,"dir":"Reference","previous_headings":"","what":"WeightedDesign subsetting — subset,WeightedDesign-method","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"WeightedDesign subsetting","code":""},{"path":"www.github.com/reference/WeightedDesign.subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign subset(x, subset)  # S4 method for WeightedDesign [(x, i)"},{"path":"www.github.com/reference/WeightedDesign.subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"x WeightedDesign object subset Logical vector identifying values keep drop indices specifying elements extract replace. See help(\"[\") details.","code":""},{"path":"www.github.com/reference/WeightedDesign.subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"x subset x subset ","code":""},{"path":"www.github.com/reference/WeightedDesignOps.html","id":null,"dir":"Reference","previous_headings":"","what":"WeightedDesign Ops — +,WeightedDesign,numeric-method","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"WeightedDesigns support addition subtraction, support reasonable operations.","code":""},{"path":"www.github.com/reference/WeightedDesignOps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"","code":"# S4 method for WeightedDesign,numeric +(e1, e2)  # S4 method for numeric,WeightedDesign +(e1, e2)  # S4 method for WeightedDesign,numeric -(e1, e2)  # S4 method for numeric,WeightedDesign -(e1, e2)  # S4 method for WeightedDesign,numeric *(e1, e2)  # S4 method for numeric,WeightedDesign *(e1, e2)  # S4 method for WeightedDesign,numeric /(e1, e2)  # S4 method for numeric,WeightedDesign /(e1, e2)  # S4 method for WeightedDesign c(x, ..., force_dichotomy_equal = FALSE)"},{"path":"www.github.com/reference/WeightedDesignOps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"e1 WeightedDesign numeric e2 numeric WeightedDesign x WeightedDesign ... number WeightedDesign objects equivalent Design. force_dichotomy_equal FALSE (default), Designs considered equivalent even dichotomy differs. TRUE, @dichotomy must also equal.","code":""},{"path":"www.github.com/reference/WeightedDesignOps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"Concatenating WeightedDesigns c() requires individual WeightedDesigns come Design (except dichotomy, see ) target (e.g created ate() created ett(), mixing--matching). arguments c() must WeightedDesign. One exception concatenting WeightedDesigns Design different dichotomies. may cases treatment continuous multiple levels, need combine weights general design, different dichotomys. Therefore multiple WeightedDesigns can combined identical except @dichotomy slots. resulting object CombinedWeightedDesign tracks individual dichotomy.","code":""},{"path":"www.github.com/reference/adopters.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Treatment from Design — adopters","title":"Obtain Treatment from Design — adopters","text":"included predictor model formula weights (via ate() ett() passed weights= argument) covariance adjustment model (via cov_adj() passed offset= argument) included, extract treatment variable Design.","code":""},{"path":"www.github.com/reference/adopters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Treatment from Design — adopters","text":"","code":"adopters(design = NULL, data = NULL)"},{"path":"www.github.com/reference/adopters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Treatment from Design — adopters","text":"design Optional Design. Design identified model (usually neither weights (ate() ett()) covariate adjustment model (cov_adj()) found), Design can passed diretly. data Optional data set. default adopters() attempt identify appropriate data, fails (want overwrite ), can pass data .","code":""},{"path":"www.github.com/reference/adopters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Treatment from Design — adopters","text":"treatment variable placed regression formula.","code":""},{"path":"www.github.com/reference/adopters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain Treatment from Design — adopters","text":"adopters() can used situation, useful scenarios treatment variable non-binary Design contains Dichotomy. example, say q 3-level ordinal treatment variable, binary comparison interest captured dichotomy = q == 3 ~ q < 3. fit model including q predictor, e.g. lm(y ~ q, ...), lm treat q full ordinal variable. hand, calling lm(y ~ adopters(), weights = ate(des), ...), adopters() generate appropriate binary variable allow estimation treatment effects.","code":""},{"path":"www.github.com/reference/as.SandwichLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"Convert PreSandwichLayer SandwichLayer via Design Object","code":""},{"path":"www.github.com/reference/as.SandwichLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"","code":"as.SandwichLayer(x, design, by = NULL)"},{"path":"www.github.com/reference/as.SandwichLayer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"x PreSandwichLayer object. design Design object created one rct_design(), rd_design(), obs_design(). optional; named vector list connecting names cluster/unit assignment variables design cluster/unit assignment variables data. Names represent variables Design; values represent variables data. needed variable names differ.","code":""},{"path":"www.github.com/reference/as.SandwichLayer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"SandwichLayer object","code":""},{"path":"www.github.com/reference/as_lmitt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert lm object into DirectAdjusted — as.lmitt","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"Convert lm object DirectAdjusted","code":""},{"path":"www.github.com/reference/as_lmitt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"","code":"as.lmitt(x, design = NULL)  as.DirectAdjusted(x, design = NULL)"},{"path":"www.github.com/reference/as_lmitt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"x lm object weights containing WeightedDesign design Optional, explicitly specify Design used. Design specified elsewhere x (e.g. passed argument ate(), ett(), cov_adj() adopters()) found automatically need passed well. (different Design objects passed (either lm weights covariance adjustment, argument), error produced.)","code":""},{"path":"www.github.com/reference/as_lmitt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"DirectAdjusted object","code":""},{"path":"www.github.com/reference/confint-DirectAdjusted-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-Covariance matrix — confint,DirectAdjusted-method","title":"Variance-Covariance matrix — confint,DirectAdjusted-method","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/reference/confint-DirectAdjusted-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-Covariance matrix — confint,DirectAdjusted-method","text":"","code":"# S4 method for DirectAdjusted confint(object, parm, level = 0.95, ...)"},{"path":"www.github.com/reference/confint-DirectAdjusted-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-Covariance matrix — confint,DirectAdjusted-method","text":"object DirectAdjusted parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... Add'l arguments","code":""},{"path":"www.github.com/reference/confint-DirectAdjusted-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-Covariance matrix — confint,DirectAdjusted-method","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/reference/cov_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance Adjustment for Treatment Estimation — cov_adj","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"Covariance Adjustment Treatment Estimation","code":""},{"path":"www.github.com/reference/cov_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"","code":"cov_adj(model, newdata = NULL, design = NULL)"},{"path":"www.github.com/reference/cov_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"model model inherits glm, lm,  robustbase::lmrob object newdata Optional; data.frame new data design Optional Design.","code":""},{"path":"www.github.com/reference/cov_adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"Covariate adjusted outcomes","code":""},{"path":"www.github.com/reference/cov_adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"","code":"data(STARdata) STARdata$treatment <- STARdata$stark == \"small\" STARdata$treatment[is.na(STARdata$treatment)] <- FALSE STARdata$studentid <- as.character(seq_len(nrow(STARdata)))  covariance_y0_read <- lm(readk ~ gender + ethnicity + lunchk +                                  ladderk + experiencek + tethnicityk,                          data = STARdata, subset = !treatment)  STARdata_design <- rct_design(treatment ~ cluster(studentid), data = STARdata) STARdata_ate    <- ate(STARdata_design, data = STARdata) STARdata_ett    <- ett(STARdata_design, data = STARdata)  ett_read <- lm(readk ~ treatment,                offset = cov_adj(covariance_y0_read, newdata = STARdata),                data = STARdata,                weights = STARdata_ett) #> Warning: Some covariance adjustments are NA; be careful of dropping these observations when fitting the design model coef(ett_read) #>   (Intercept) treatmentTRUE  #> -2.003983e-12  5.554179e+00   ate_read <- lm(readk ~ treatment,                offset = cov_adj(covariance_y0_read, newdata = STARdata),                data = STARdata,                weights = STARdata_ate) #> Warning: Some covariance adjustments are NA; be careful of dropping these observations when fitting the design model coef(ate_read) #>   (Intercept) treatmentTRUE  #> -1.983940e-12  5.554179e+00   ate_read_eth <- lm(readk ~ treatment * ethnicity,                    offset = cov_adj(covariance_y0_read, newdata = STARdata),                    data = STARdata,                    weights = STARdata_ate) #> Warning: Some covariance adjustments are NA; be careful of dropping these observations when fitting the design model coef(ate_read_eth) #>                     (Intercept)                   treatmentTRUE  #>                   -1.945133e-12                    5.901494e+00  #>                   ethnicityafam                  ethnicityasian  #>                   -1.441592e-13                   -8.113289e-13  #>               ethnicityhispanic               ethnicityamindian  #>                    2.223058e-12                    3.822258e-12  #>                  ethnicityother     treatmentTRUE:ethnicityafam  #>                   -4.934694e-13                   -1.289929e+00  #>    treatmentTRUE:ethnicityasian treatmentTRUE:ethnicityhispanic  #>                   -2.494972e+01                    3.214437e+01  #> treatmentTRUE:ethnicityamindian    treatmentTRUE:ethnicityother  #>                    1.391799e+01                    3.202748e+00"},{"path":"www.github.com/reference/design_data_concordance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for variable agreement within units of assignment — design_data_concordance","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"Useful debugging purposes ensure concordance variables Design data.","code":""},{"path":"www.github.com/reference/design_data_concordance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"","code":"design_data_concordance(design, data, by = NULL, warn_on_nonexistence = TRUE)"},{"path":"www.github.com/reference/design_data_concordance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"design Design object data Data set, presumably used create design. optional; named vector list connecting names variables design variables data. Names represent variables design; values represent variables data. needed variable names differ. warn_on_nonexistence Default TRUE. variable exist data, flagged? FALSE, silently move variable exist data.","code":""},{"path":"www.github.com/reference/design_data_concordance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"Invisibly TRUE warnings produced, FALSE warnings produced.","code":""},{"path":"www.github.com/reference/design_data_concordance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"Consider following scenario: Design generated dataset, \"data1\", includes block variable \"b1\". Within unique cluster/unit assignment \"data1\", must case \"b1\" constant. (Otherwise creation Design fail.) Next, model fit includes weights generated Design, dataset \"data2\". \"data2\", block variable \"b1\" also exists, due issue data cleaning, agree \"b1\" \"data1\". cause errors, either directly (via actual error messages) simply produce nonsense results. design_data_concordance() designed help debug scenarios providing information whether variables \"data1\" (used creation Design) \"data2\" (new dataset passed design_data_concordance()) inconsistencies.","code":""},{"path":"www.github.com/reference/design_treatment_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Design has access to a binary treatment — is_dichotomized","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"functions determine Design dichotomized (is_dichotomized()) access binary treatment variable (has_binary_treatment()) either (is_binary_or_dichotomized()).","code":""},{"path":"www.github.com/reference/design_treatment_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"","code":"is_dichotomized(des)  has_binary_treatment(des)  is_binary_or_dichotomized(des)"},{"path":"www.github.com/reference/design_treatment_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"des Design","code":""},{"path":"www.github.com/reference/design_treatment_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"Logical; see details.","code":""},{"path":"www.github.com/reference/design_treatment_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"is_dichotomized() checks presence @dichotomy slot Design, either passed directly various *_design() Design creators, added afterwards dichotomy(my_design)<-. has_binary_treatment() returns TRUE treatment numeric values 0 1, logical. also allows NA treatment. is_binary_or_dichotomized returns TRUE either is_dichotomized() has_binary_treatment() return TRUE.","code":""},{"path":"www.github.com/reference/designconversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Design between types — as_rct_design","title":"Convert Design between types — as_rct_design","text":"functions convert Design RD, RCT Obs types. Converting RD requires addition forcing variable (see forcing= argument), converting RD requires consenting dropping forcing variable (see loseforcing= argument).","code":""},{"path":"www.github.com/reference/designconversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Design between types — as_rct_design","text":"","code":"as_rct_design(Design, ..., loseforcing = FALSE)  as_obs_design(Design, ..., loseforcing = FALSE)  as_rd_design(Design, data, ..., forcing)"},{"path":"www.github.com/reference/designconversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Design between types — as_rct_design","text":"Design Design convert ... addiitonal options present loseforcing Converting RD another Design type error avoid losing forcing variable. Setting loseforcing =   TRUE allows conversion automatically drop forcing variable. Default FALSE. data Converting RD requires adding forcing variable, requires access original data. forcing Converting RD requires adding forcing variable. entered update formula, e.g. \"~ . + forcing(forcevar)\".","code":""},{"path":"www.github.com/reference/designconversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Design between types — as_rct_design","text":"Design updated type","code":""},{"path":"www.github.com/reference/designconversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Design between types — as_rct_design","text":"","code":"des <- rct_design(z ~ cluster(cid1, cid2), data = simdata) des #> Randomized Control Trial #>  #>  Structure Variables  #>  --------- ---------  #>  Treatment z          #>  Cluster   cid1, cid2 #>  as_obs_design(des) #> Observational Study #>  #>  Structure Variables  #>  --------- ---------  #>  Treatment z          #>  Cluster   cid1, cid2 #>  as_rd_design(des, simdata, forcing = ~ . + forcing(force)) #> Regression Discontinuity Design #>  #>  Structure Variables  #>  --------- ---------  #>  Treatment z          #>  Cluster   cid1, cid2 #>  Forcing   force      #>  des2 <- rd_design(o ~ unitid(cid1, cid2) + forcing(force), data = simdata) des2 #> Regression Discontinuity Design #>  #>  Structure Variables  #>  --------- ---------  #>  Treatment o          #>  Unitid    cid1, cid2 #>  Forcing   force      #>  # as_rct_design(des2) # this will produce an error as_rct_design(des2, loseforcing = TRUE) #> Randomized Control Trial #>  #>  Structure Variables  #>  --------- ---------  #>  Treatment o          #>  Unitid    cid1, cid2 #>"},{"path":"www.github.com/reference/dot-apply_dichotomy.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"Given treatment variable (passed named data.frame) dichotomy formula (see help rct_design() details specification), returns vector containing 0, 1, NA.","code":""},{"path":"www.github.com/reference/dot-apply_dichotomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"","code":".apply_dichotomy(txt, dichotomy)"},{"path":"www.github.com/reference/dot-apply_dichotomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"txt named data.frame containing single column treatment, produed treatment(mydesign). dichotomy dichotomization formula. See details Details help rct_design().","code":""},{"path":"www.github.com/reference/dot-apply_dichotomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"vector binary treatments","code":""},{"path":"www.github.com/reference/dot-bin_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Extracts treatment as binary vector if possible or\nelse errors. — .bin_txt","title":"(Internal) Extracts treatment as binary vector if possible or\nelse errors. — .bin_txt","text":"Design @dichotomy, treatment variable consisting 0/1 NA, returns binary treatment. Otherwise (non-binary treatment lacks dichotomy) errors.","code":""},{"path":"www.github.com/reference/dot-bin_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Extracts treatment as binary vector if possible or\nelse errors. — .bin_txt","text":"","code":".bin_txt(des)"},{"path":"www.github.com/reference/dot-bin_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Extracts treatment as binary vector if possible or\nelse errors. — .bin_txt","text":"des Design","code":""},{"path":"www.github.com/reference/dot-bin_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Extracts treatment as binary vector if possible or\nelse errors. — .bin_txt","text":"vector binary treatments","code":""},{"path":"www.github.com/reference/dot-check_by.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) A few checks to ensure by= is valid — .check_by","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"Thie ensures = argument proper type, named, consists unique entries.","code":""},{"path":"www.github.com/reference/dot-check_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"","code":".check_by(by)"},{"path":"www.github.com/reference/dot-check_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"named vector list connecting names cluster/unit assignment variables design cluster/unit assignment variables data. Names represent variables Design; values represent variables data.","code":""},{"path":"www.github.com/reference/dot-check_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"NULL errors found","code":""},{"path":"www.github.com/reference/dot-check_design_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"Checks performed: Ensure presence exactly one unit_of_assignment(), cluster() unitid(). Disallow multiple block() multiple forcing() terms. Disallow forcing() unless RDD.","code":""},{"path":"www.github.com/reference/dot-check_design_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"","code":".check_design_formula(form, allow_forcing = FALSE)"},{"path":"www.github.com/reference/dot-check_design_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"form formula passed .new_Design() allow_forcing Binary whether forcing() allowed (TRUE RDD, FALSE RCT Obs).","code":""},{"path":"www.github.com/reference/dot-check_design_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"TRUE checks pass, otherwise errors.","code":""},{"path":"www.github.com/reference/dot-convert_to_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Ensures replacement column for Design is a\ndata.frame. — .convert_to_data.frame","title":"(Internal) Ensures replacement column for Design is a\ndata.frame. — .convert_to_data.frame","text":"Helper function Design replacers ensure replacement properly named data.frame","code":""},{"path":"www.github.com/reference/dot-convert_to_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Ensures replacement column for Design is a\ndata.frame. — .convert_to_data.frame","text":"","code":".convert_to_data.frame(value, design, type)"},{"path":"www.github.com/reference/dot-convert_to_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Ensures replacement column for Design is a\ndata.frame. — .convert_to_data.frame","text":"value vector data.frame containing replacement. design Design type One \"t\", \"f\", \"u\" \"b\"","code":""},{"path":"www.github.com/reference/dot-convert_to_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Ensures replacement column for Design is a\ndata.frame. — .convert_to_data.frame","text":"data.frame containing named column(s)","code":""},{"path":"www.github.com/reference/dot-convert_to_data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Ensures replacement column for Design is a\ndata.frame. — .convert_to_data.frame","text":"given replacement set values (e.g vector matrix), ensures replacement named data.frame. Input vector: Since named, vector can used replace existing component. existing component 1 column, uses name first column. Input matrix data.frame: unnamed replacing existing component, must columns original component. (less columns, uses name first columns.) named, can replace number columns.","code":""},{"path":"www.github.com/reference/dot-fallback_data_search.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Fallback brute force method to locate data in the\ncall stack. — .fallback_data_search","title":"(Internal) Fallback brute force method to locate data in the\ncall stack. — .fallback_data_search","text":"try intelligent finding appropriate data. fails, may need brute force method just loops frames looks data object.","code":""},{"path":"www.github.com/reference/dot-fallback_data_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Fallback brute force method to locate data in the\ncall stack. — .fallback_data_search","text":"","code":".fallback_data_search()"},{"path":"www.github.com/reference/dot-fallback_data_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Fallback brute force method to locate data in the\ncall stack. — .fallback_data_search","text":"found, data.","code":""},{"path":"www.github.com/reference/dot-get_ca_and_prediction_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Get the a vector of ","title":"(Internal) Get the a vector of ","text":"(Internal) Get vector \"response\" predictions covariance model gradient respect fitted coefficients","code":""},{"path":"www.github.com/reference/dot-get_ca_and_prediction_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Get the a vector of ","text":"","code":".get_ca_and_prediction_gradient(model, newdata = NULL)"},{"path":"www.github.com/reference/dot-get_ca_and_prediction_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Get the a vector of ","text":"model model inherits glm, lm,  robustbase::lmrob object newdata Optional; data.frame new data","code":""},{"path":"www.github.com/reference/dot-get_ca_and_prediction_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Get the a vector of ","text":"Covariate adjusted outcomes gradient respect parameters covariance model (list numeric vector matrix)","code":""},{"path":"www.github.com/reference/dot-get_data_from_model.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Locate data in call stack — .get_data_from_model","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"Whenever function model (ate()/ett()/cov_adj()/adopters()) called without explicit data= argument, attempt extract data model .","code":""},{"path":"www.github.com/reference/dot-get_data_from_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"","code":".get_data_from_model(which_fn, form = NULL, by = NULL)"},{"path":"www.github.com/reference/dot-get_data_from_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"which_fn Identify calling function, \"weights\" \"adopters\", helps separate logic two functions. form Formula apply model.frame(). See details translation cluster ID names, passed weights.","code":""},{"path":"www.github.com/reference/dot-get_data_from_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"data.frame","code":""},{"path":"www.github.com/reference/dot-get_data_from_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"form specifies columns data needed. current use cases (ate()/ett() adopters()), unit assignment variables, e.g. form = ~ clustervar, enable merging UOA level variables model data. However, can easily expanded variables needed.","code":""},{"path":"www.github.com/reference/dot-get_design.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Locate a Design in the call stack — .get_design","title":"(Internal) Locate a Design in the call stack — .get_design","text":"adopters()/ate()/ett()/cov_adj() need Design operate. called model without design= argument, function sees can find Design another functions.","code":""},{"path":"www.github.com/reference/dot-get_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Locate a Design in the call stack — .get_design","text":"","code":".get_design(NULL_on_error = FALSE)"},{"path":"www.github.com/reference/dot-get_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Locate a Design in the call stack — .get_design","text":"NULL_on_error TRUE, returns NULL Design object found rather throwing error.","code":""},{"path":"www.github.com/reference/dot-get_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Locate a Design in the call stack — .get_design","text":"Design, NULL NULL_on_error TRUE Design found.","code":""},{"path":"www.github.com/reference/dot-get_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Locate a Design in the call stack — .get_design","text":"Note never look inside adopters() (gets complicated formulas), weights cov_adj(). E.g. lm(y ~ adopters(), weights = ate(des), offest = cov_adj(mod1)) lm(y ~ adopters(), weights = ate(), offest = cov_adj(mod1, design = des)) work, lm(y ~ adopters(des), weights = ate(), offest = cov_adj(mod1)) fail.","code":""},{"path":"www.github.com/reference/dot-join_design_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Expand unit of assignment level weights to the level of\nthe data — .join_design_weights","title":"(Internal) Expand unit of assignment level weights to the level of\nthe data — .join_design_weights","text":"Helper function called creation weights via ate() ett()","code":""},{"path":"www.github.com/reference/dot-join_design_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Expand unit of assignment level weights to the level of\nthe data — .join_design_weights","text":"","code":".join_design_weights(weights, design, target, data)"},{"path":"www.github.com/reference/dot-join_design_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Expand unit of assignment level weights to the level of\nthe data — .join_design_weights","text":"weights vector weights sorted according Design design Design target One \"ate\" \"ett\" data New data","code":""},{"path":"www.github.com/reference/dot-join_design_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Expand unit of assignment level weights to the level of\nthe data — .join_design_weights","text":"WeightedDesign","code":""},{"path":"www.github.com/reference/dot-merge_preserve_order.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Merge data.frames ensuring order of first\ndata.frame is maintained — .merge_preserve_order","title":"(Internal) Merge data.frames ensuring order of first\ndata.frame is maintained — .merge_preserve_order","text":"(Internal) Merge data.frames ensuring order first data.frame maintained","code":""},{"path":"www.github.com/reference/dot-merge_preserve_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Merge data.frames ensuring order of first\ndata.frame is maintained — .merge_preserve_order","text":"","code":".merge_preserve_order(x, ...)"},{"path":"www.github.com/reference/dot-merge_preserve_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Merge data.frames ensuring order of first\ndata.frame is maintained — .merge_preserve_order","text":"x data.frame whose ordering maintained ... Additional arguments merge(), particularly second data.frame = argument.","code":""},{"path":"www.github.com/reference/dot-merge_preserve_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Merge data.frames ensuring order of first\ndata.frame is maintained — .merge_preserve_order","text":"Merged data.frame ordering x.","code":""},{"path":"www.github.com/reference/dot-new_Design.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Create a new Design object. — .new_Design","title":"(Internal) Create a new Design object. — .new_Design","text":"Helper function create new Design. Called internally rct_design(), rd_design() obs_design().","code":""},{"path":"www.github.com/reference/dot-new_Design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Create a new Design object. — .new_Design","text":"","code":".new_Design(   form,   data,   type,   subset = NULL,   call = NULL,   dichotomy = stats::formula() )"},{"path":"www.github.com/reference/dot-new_Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Create a new Design object. — .new_Design","text":"form Formula create Design, see help rcr_design(), rd_design() obs_design() details. data data set type One \"RCT\", \"RD\", \"Obs\" subset subset information call call generating Design. dichotomy present, dichotomization formula","code":""},{"path":"www.github.com/reference/dot-new_Design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Create a new Design object. — .new_Design","text":"new Design object","code":""},{"path":"www.github.com/reference/dot-remove_forcing.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"preparation converting RD Design another Design, strip forcing variable entirely. removed data (@structure @column_index), well formula stored @call.","code":""},{"path":"www.github.com/reference/dot-remove_forcing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"","code":".remove_forcing(des)"},{"path":"www.github.com/reference/dot-remove_forcing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"des Design","code":""},{"path":"www.github.com/reference/dot-remove_forcing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"Design without forcing variable","code":""},{"path":"www.github.com/reference/dot-remove_forcing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"Note output Design fail validity check (validObject()) due RD Design requiring forcing variable, change @type immediately.","code":""},{"path":"www.github.com/reference/dot-rename_model_frame_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"calling model.frame() formula input .new_Design(), names columns include functino names, e.g. \"cluster(clustvar)\". function strips .","code":""},{"path":"www.github.com/reference/dot-rename_model_frame_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"","code":".rename_model_frame_columns(modframe)"},{"path":"www.github.com/reference/dot-rename_model_frame_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"modframe data.frame.","code":""},{"path":"www.github.com/reference/dot-rename_model_frame_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"data.frame function calls removed","code":""},{"path":"www.github.com/reference/dot-show_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) show helper for\nPreSandwichLayer/SandwichLayer — .show_layer","title":"(Internal) show helper for\nPreSandwichLayer/SandwichLayer — .show_layer","text":"(Internal) show helper PreSandwichLayer/SandwichLayer","code":""},{"path":"www.github.com/reference/dot-show_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) show helper for\nPreSandwichLayer/SandwichLayer — .show_layer","text":"","code":".show_layer(object)"},{"path":"www.github.com/reference/dot-show_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) show helper for\nPreSandwichLayer/SandwichLayer — .show_layer","text":"object PreSandwichLayer SandwichLayer","code":""},{"path":"www.github.com/reference/dot-show_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) show helper for\nPreSandwichLayer/SandwichLayer — .show_layer","text":"object, invisibly","code":""},{"path":"www.github.com/reference/dot-update_by.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Use by to update Design with new variable\nnames — .update_by","title":"(Internal) Use by to update Design with new variable\nnames — .update_by","text":"Helper function used update variable names Design user passes = argument align variable names data sets.","code":""},{"path":"www.github.com/reference/dot-update_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Use by to update Design with new variable\nnames — .update_by","text":"","code":".update_by(design, data, by)"},{"path":"www.github.com/reference/dot-update_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Use by to update Design with new variable\nnames — .update_by","text":"design Design data Data set named vector list connecting names cluster/unit assignment variables design cluster/unit assignment variables data. Names represent variables Design; values represent variables data.","code":""},{"path":"www.github.com/reference/dot-update_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Use by to update Design with new variable\nnames — .update_by","text":"Design updated variable names","code":""},{"path":"www.github.com/reference/dot-update_call_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Updates des@call's formula with the currently defined\nvariable names. — .update_call_formula","title":"(Internal) Updates des@call's formula with the currently defined\nvariable names. — .update_call_formula","text":"Helper function update call appropriate variable names modified. Called within Design replacers.","code":""},{"path":"www.github.com/reference/dot-update_call_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Updates des@call's formula with the currently defined\nvariable names. — .update_call_formula","text":"","code":".update_call_formula(design)"},{"path":"www.github.com/reference/dot-update_call_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Updates des@call's formula with the currently defined\nvariable names. — .update_call_formula","text":"design Design","code":""},{"path":"www.github.com/reference/dot-update_call_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Updates des@call's formula with the currently defined\nvariable names. — .update_call_formula","text":"updated formula","code":""},{"path":"www.github.com/reference/dot-update_call_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Updates des@call's formula with the currently defined\nvariable names. — .update_call_formula","text":"return stuck design via des@call$formula <- .update_call_formula(des)","code":""},{"path":"www.github.com/reference/dot-update_form_to_unit_of_assignment.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Rename cluster/unitid/uoa in a formula to\nunit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","title":"(Internal) Rename cluster/unitid/uoa in a formula to\nunit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"Internally, always refer cluster/unitid/uoa \"unit_of_assignment\"","code":""},{"path":"www.github.com/reference/dot-update_form_to_unit_of_assignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Rename cluster/unitid/uoa in a formula to\nunit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"","code":".update_form_to_unit_of_assignment(form)"},{"path":"www.github.com/reference/dot-update_form_to_unit_of_assignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Rename cluster/unitid/uoa in a formula to\nunit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"form formula passed .new_Design()","code":""},{"path":"www.github.com/reference/dot-update_form_to_unit_of_assignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Rename cluster/unitid/uoa in a formula to\nunit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"formula \"cluster\"/\"unitid\"/\"uoa\" replace \"unit_of_assignment\"","code":""},{"path":"www.github.com/reference/dot-update_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Replaces type columns in design with\nnew — .update_structure","title":"(Internal) Replaces type columns in design with\nnew — .update_structure","text":"Assumes .convert_to_data.frame() already called new","code":""},{"path":"www.github.com/reference/dot-update_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Replaces type columns in design with\nnew — .update_structure","text":"","code":".update_structure(design, new, type)"},{"path":"www.github.com/reference/dot-update_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Replaces type columns in design with\nnew — .update_structure","text":"design Design new named data.frame replacement, output .convert_to_data.frame(). type One \"t\", \"f\", \"u\" \"b\\\".","code":""},{"path":"www.github.com/reference/dot-update_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Replaces type columns in design with\nnew — .update_structure","text":"updated Design","code":""},{"path":"www.github.com/reference/dot-weights_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Worker function for weight calculation — .weights_calc","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"Called ate() ett().","code":""},{"path":"www.github.com/reference/dot-weights_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"","code":".weights_calc(design, target, dichotomy, by, data)"},{"path":"www.github.com/reference/dot-weights_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"design Design object created one rct_design(), rd_design(), obs_design(). target One \"ate\" \"ett\"; ate() ett() chooses automatically. dichotomy optional; formula defining dichotomy treatment variable already 0/1. See details help rct_design() e.g. details. optional; named vector list connecting names cluster/unit assignment variables design cluster/unit assignment variables data. Names represent variables Design; values represent variables data. needed variable names differ. data optionally data analysis performed . May excluded functions included weights argument model.","code":""},{"path":"www.github.com/reference/dot-weights_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"WeightedDesign object","code":""},{"path":"www.github.com/reference/dot-weights_calc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"Josh Errickson","code":""},{"path":"www.github.com/reference/lmitt.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Model for Intention To Treat — lmitt","title":"Linear Model for Intention To Treat — lmitt","text":"Generates linear model object allows proper estimation variances accounting study design.","code":""},{"path":"www.github.com/reference/lmitt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Model for Intention To Treat — lmitt","text":"","code":"lmitt(obj, design = NULL, ...)  # S3 method for formula lmitt(obj, design = NULL, ...)  # S3 method for lm lmitt(obj, design = NULL, ...)"},{"path":"www.github.com/reference/lmitt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Model for Intention To Treat — lmitt","text":"obj formula lm object. See details. design Optional, explicitly specify Design used. Design specified elsewhere model (e.g. passed argument ate(), ett(), cov_adj() adopters()) found automatically need passed well. (different Design objects passed (either lm weights covariance adjustment, argument), error produced.) Alternatively, formula creating design (type passed first argument rd_design(), rct_design(), obs_design(). ... Additional arguments passed lm(). Ignored obj already lm object.","code":""},{"path":"www.github.com/reference/lmitt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Model for Intention To Treat — lmitt","text":"DirectAdjusted model.","code":""},{"path":"www.github.com/reference/lmitt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Model for Intention To Treat — lmitt","text":"first argument lmitt, obj, specifies linear regression model. formula specified exactly lm(), one deviation. Rather including treatment variable name, helper function adopters() used place. example, outcome y, call lmitt(y ~ adopters(), design = ...). formula contain least one adopters(), right hand side formula treated series strataification variables. means formula y ~ x + q replaced y ~ x:adopters() + q:adopters() lmitt estimate treatment effect within level x q. adopters() found anywhere right hand side obj, modification made. additional arguments lm() can passed .... See help lm() list possible argument. commonly used scenario weights= pass ate() ett(), offset= pass cov_adj(). Alternatively, obj can pre-created lm object. modification made formula object. See help .lmitt() details conversion.","code":""},{"path":"www.github.com/reference/lsoSynth.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake data — lsoSynth","title":"Fake data — lsoSynth","text":"Fake data","code":""},{"path":"www.github.com/reference/lsoSynth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake data — lsoSynth","text":"","code":"lsoSynth"},{"path":"www.github.com/reference/lsoSynth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fake data — lsoSynth","text":"data.frame ?? rows ?? columns. ???","code":""},{"path":"www.github.com/reference/print.summary.Design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of Design object — print.summary.Design","title":"Print summary of Design object — print.summary.Design","text":"Print summary Design object","code":""},{"path":"www.github.com/reference/print.summary.Design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of Design object — print.summary.Design","text":"","code":"# S3 method for summary.Design print(x, ..., max_unit_print = 3)"},{"path":"www.github.com/reference/print.summary.Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of Design object — print.summary.Design","text":"x summary.Design object ... args max_unit_print Maximum number treatment levels print treatment table","code":""},{"path":"www.github.com/reference/print.summary.Design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of Design object — print.summary.Design","text":"object, invisibly","code":""},{"path":"www.github.com/reference/sandwich_elements_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Compute variance blocks — .get_b12","title":"(Internal) Compute variance blocks — .get_b12","text":"(Internal) Compute variance blocks","code":""},{"path":"www.github.com/reference/sandwich_elements_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Compute variance blocks — .get_b12","text":"","code":".get_b12(x)  .get_a22_inverse(x)  .get_b22(x, ...)  .get_a11_inverse(x)  .get_b11(x, ...)  .get_a21(x)"},{"path":"www.github.com/reference/sandwich_elements_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Compute variance blocks — .get_b12","text":"x DirectAdjusted model ... Arguments passed sandwich::meatCL","code":""},{"path":"www.github.com/reference/sandwich_elements_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Compute variance blocks — .get_b12","text":".get_b12(): \\(p\\times k\\) matrix \\(p\\) number terms covariance model \\(k\\) number terms DirectAdjusted model .get_a22_inverse(): \\(1\\times1\\) matrix .get_b22(): \\((p+1)\\times(p+1)\\) matrix dimensions given number terms DirectAdjusted model (\\(p\\)) Intercept term. \\(2\\times2\\) matrix given dichotomous handling treatment variables package use covariance model offer covariance adjustment. .get_a11_inverse(): \\((p+1)\\times(p+1)\\) matrix dimensions given number terms covariance model (\\(p\\)) Intercept term. .get_b11(): \\((p+1)\\times(p+1)\\) matrix dimensions given number terms covariance model (\\(p\\)) Intercept term .get_a12(): \\((p+1)\\times2\\) matrix number rows given number terms covariance model (\\(p\\)) Intercept term, number columns given treatment intercept terms direct adjustment model","code":""},{"path":"www.github.com/reference/sandwich_elements_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Compute variance blocks — .get_b12","text":"B12 block covariance matrix cluster-level estimating equations covariance direct adjustment models. row term covariance model column term direct adjustment model. row appear experimental design covariance model data, contribution matrix 0. Thus, overlap two datasets, return matrix 0's. A22 block diagonal element inverse expected Fisher Information matrix corresponding treatment estimate. shown Details .get_b22(), estimating equations generalized linear model canonical link function can written $$\\psi_i = (r_i / Var(y_i)) * (d\\mu_i/d\\eta_i) * x_i$$ expected information matrix A22 negative Jacobian \\(\\psi_i\\), likelihood theory variance-covariance matrix \\(\\psi_i\\): $$\\psi_{}\\psi_{}^{T} = E[(r_i / Var(y_i) * (d\\mu_i/d\\eta_i))^{2}] *   x_ix_i' = (d\\mu_i/d\\eta_i)^{2} / Var(y_i) * x_ix_i'$$ Considering whole sample, can expressed matrix form \\(X'WX\\). output function inverse diagonal element corresponding treatment estimate. B22 block refers clustered variance estimate treatment effect estimate. stats package offers family objects canonical link functions, log-likelihood generalized linear model can written terms linear predictor $$L(y_i, \\beta, \\phi, w_i) = w_i * (y_i * \\beta'x_i - b(\\beta'x_i)) /   \\phi + h(y_i; \\phi)$$ estimating equations \\(\\psi_i\\) given score function can expressed $$\\psi_i = E[w_i * (y_i -   \\mu(\\beta'x_i)) * x_i / \\phi]$$ section 4.4 second edition Categorical Data Analysis, Agresti shows derivative mean function respect linear predictor equivalent weighted variance observation divided estimate dispersion parameter. Thus, estimating equations can also written $$\\psi_i = (r_i / Var(y_i)) * (d\\mu_i/d\\eta_i) * x_i$$ matrix \\(C\\) dimension \\(n\\times J\\) formed indicate unit subject design belongs , \\(J\\) number units level treatment assignment. treatment assignment-level estimating equations obtained via \\(C'\\psi\\), \\(\\psi\\) matrix estimating equations subject level. A11 block \\(p\\times p\\) matrix corresponding unscaled inverse observed Fisher information covariance model. observed information given estimate negative Jacobian model's estimating equations. unscaled version provided divides number observations used fit covariance model. B11 block block sandwich variance estimator corresponding variance-covariance matrix covariance model coefficient estimates. estimates returned potentially clustered (clustering experimental design) rows covariance model data also exist design. overlap two datasets, variance-covariance matrix estimated assuming observations independent. A21 block block sandwich variance estimator corresponding gradient direct adjustment model respect covariates. information needed calculation stored DirectAdjusted object's SandwichLayer offset. block crossproduct prediction gradient gradient conditional mean vector direct adjustment model summed cluster level. words, take matrix $$\\sum(d\\psi_i   / d\\alpha) = -\\sum(w_i/\\phi) * (d\\mu(\\eta_i) / d\\eta_i) *   (d\\upsilon(\\zeta_i) / d\\zeta_i) * (x_i c_i)x_i'$$ \\(\\mu\\) \\(\\eta_i\\) conditional mean function linear predictor ith cluster direct adjustment model, \\(\\upsilon\\) \\(\\zeta_i\\) conditional mean function linear predictor ith cluster covariance model.","code":""},{"path":"www.github.com/reference/sandwich_elements_calc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Internal) Compute variance blocks — .get_b12","text":"Agresti, Alan. Categorical Data Analysis. 2003. Open WorldCat, https://nbn-resolving.org/urn:nbn:de:101:1-201502241089.","code":""},{"path":"www.github.com/reference/show-Design-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a Design — show,Design-method","title":"Show a Design — show,Design-method","text":"Show Design","code":""},{"path":"www.github.com/reference/show-Design-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a Design — show,Design-method","text":"","code":"# S4 method for Design show(object)"},{"path":"www.github.com/reference/show-Design-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a Design — show,Design-method","text":"object Design object","code":""},{"path":"www.github.com/reference/show-Design-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a Design — show,Design-method","text":"invisible copy object","code":""},{"path":"www.github.com/reference/show-DirectAdjusted-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an DirectAdjusted — show,DirectAdjusted-method","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"Show DirectAdjusted","code":""},{"path":"www.github.com/reference/show-DirectAdjusted-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"","code":"# S4 method for DirectAdjusted show(object)"},{"path":"www.github.com/reference/show-DirectAdjusted-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"object DirectAdjusted object","code":""},{"path":"www.github.com/reference/show-DirectAdjusted-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"invisible copy object","code":""},{"path":"www.github.com/reference/show-WeightedDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a WeightedDesign — show,WeightedDesign-method","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"Show WeightedDesign","code":""},{"path":"www.github.com/reference/show-WeightedDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign show(object)"},{"path":"www.github.com/reference/show-WeightedDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"object WeightedDesignDesign object","code":""},{"path":"www.github.com/reference/show-WeightedDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"invisible copy object","code":""},{"path":"www.github.com/reference/simdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data with cluster-level treatment assignment — simdata","title":"Simulated data with cluster-level treatment assignment — simdata","text":"Simulated data cluster-level treatment assignment","code":""},{"path":"www.github.com/reference/simdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data with cluster-level treatment assignment — simdata","text":"","code":"simdata"},{"path":"www.github.com/reference/simdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data with cluster-level treatment assignment — simdata","text":"data.frame 100 rows 7 columns. cid1 First level clustering ID cid2 Second level clustering ID bid Block ID force Forcing variable z Binary treatment indicator o 4-level ordered treatment variable dose Dose treatment variable x predictor y outcome","code":""},{"path":"www.github.com/reference/summary.Design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary of Design object — summary.Design","title":"Create summary of Design object — summary.Design","text":"Create summary Design object","code":""},{"path":"www.github.com/reference/summary.Design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary of Design object — summary.Design","text":"","code":"# S3 method for Design summary(object, ...)"},{"path":"www.github.com/reference/summary.Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary of Design object — summary.Design","text":"object Design object ... args","code":""},{"path":"www.github.com/reference/summary.Design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary of Design object — summary.Design","text":"object class summary.Design","code":""},{"path":"www.github.com/reference/treatment_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify treatment variable in DirectAdjusted object — treatment_name","title":"Identify treatment variable in DirectAdjusted object — treatment_name","text":"Identify treatment variable DirectAdjusted object","code":""},{"path":"www.github.com/reference/treatment_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify treatment variable in DirectAdjusted object — treatment_name","text":"","code":"treatment_name(x)"},{"path":"www.github.com/reference/treatment_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify treatment variable in DirectAdjusted object — treatment_name","text":"x DirectAdjusted model","code":""},{"path":"www.github.com/reference/treatment_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify treatment variable in DirectAdjusted object — treatment_name","text":"Name treatment model.","code":""},{"path":"www.github.com/reference/treatment_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify treatment variable in DirectAdjusted object — treatment_name","text":"","code":"data(simdata) des <- rct_design(z ~ unitid(cid1, cid2), data = simdata) mod <- lm(y ~ z, data = simdata, weights = ett(des)) damod <- as.lmitt(mod) damod$coef[treatment_name(damod)] #>         z  #> 0.1206368  des2 <- rct_design(dose ~ unitid(cid1, cid2), data = simdata,                    dichotomy = dose > 200 ~ . ) mod2 <- lm(y ~ adopters(), data = simdata, weights = ett(des2)) damod2 <- as.lmitt(mod2) damod2$coef[treatment_name(damod2)] #> adopters()  #>  0.3096089"},{"path":"www.github.com/reference/treatment_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate table of number of units/clusters within each treatment\nlevel — treatment_table","title":"Generate table of number of units/clusters within each treatment\nlevel — treatment_table","text":"Returns table number units assignment treatment group, sorted size groups","code":""},{"path":"www.github.com/reference/treatment_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate table of number of units/clusters within each treatment\nlevel — treatment_table","text":"","code":"treatment_table(design, ...)"},{"path":"www.github.com/reference/treatment_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate table of number of units/clusters within each treatment\nlevel — treatment_table","text":"design Design object ... add'l optional arguments table","code":""},{"path":"www.github.com/reference/treatment_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate table of number of units/clusters within each treatment\nlevel — treatment_table","text":"table treatment units","code":""},{"path":"www.github.com/reference/treatment_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate table of number of units/clusters within each treatment\nlevel — treatment_table","text":"","code":"des <- rd_design(z ~ uoa(cid1, cid2) + forcing(force), data = simdata) treatment_table(des) #> z #> 0 1  #> 6 4"},{"path":"www.github.com/reference/var_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Return names of variables defining the Design — var_names","title":"Return names of variables defining the Design — var_names","text":"Return names variables defining Design","code":""},{"path":"www.github.com/reference/var_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return names of variables defining the Design — var_names","text":"","code":"var_names(x, type)"},{"path":"www.github.com/reference/var_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return names of variables defining the Design — var_names","text":"x Design x type one \"t\", \"u\", \"b\", \"f\"; \"treatment\", \"unit_of_assignment\", \"block\", \"forcing\"","code":""},{"path":"www.github.com/reference/var_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return names of variables defining the Design — var_names","text":"character vector variable names given type","code":""},{"path":"www.github.com/reference/var_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return names of variables defining the Design — var_names","text":"","code":"des <- obs_design(o ~ unitid(cid1, cid2), data = simdata) var_names(des, \"t\") #> [1] \"o\" var_names(des, \"u\") #> [1] \"cid1\" \"cid2\" var_names(des, \"b\") #> character(0)"},{"path":"www.github.com/reference/var_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of variables identifying a Design — var_table","title":"Table of variables identifying a Design — var_table","text":"Returns table containing variables identified structure","code":""},{"path":"www.github.com/reference/var_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of variables identifying a Design — var_table","text":"","code":"var_table(design, compress = TRUE, report_all = FALSE)"},{"path":"www.github.com/reference/var_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of variables identifying a Design — var_table","text":"design Design object compress multiple variables compressed comma-separated string? Default TRUE. report_all report possible structures even exist Design? Default FALSE.","code":""},{"path":"www.github.com/reference/var_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of variables identifying a Design — var_table","text":"matrix variables Design structure","code":""},{"path":"www.github.com/reference/var_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of variables identifying a Design — var_table","text":"compress TRUE, result always two columns. FALSE, result number columns equal largest number variables particular role, plus one. E.g., call rct_design(z ~ unitid(, b, c, d) ... 4+1=5 columns output matrix. report_all TRUE, matrix guaranteed 3 rows (design RCT Obs) 4 rows (design RD). FALSE, matrix minimum 2 rows (treatment cluster/unitid/unif assignment), additional rows blocks forcing included Design.","code":""},{"path":"www.github.com/reference/var_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of variables identifying a Design — var_table","text":"","code":"des <- rct_design(z ~ cluster(cid1, cid2) + block(bid), data = simdata) var_table(des) #>      Structure   Variables    #> [1,] \"Treatment\" \"z\"          #> [2,] \"Cluster\"   \"cid1, cid2\" #> [3,] \"Block\"     \"bid\"        var_table(des, compress = FALSE) #>      Structure   Variable 1 Variable 2 #> [1,] \"Treatment\" \"z\"        NA         #> [2,] \"Cluster\"   \"cid1\"     \"cid2\"     #> [3,] \"Block\"     \"bid\"      NA"},{"path":"www.github.com/reference/vcov-DirectAdjusted-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-Covariance matrix — vcov,DirectAdjusted-method","title":"Variance-Covariance matrix — vcov,DirectAdjusted-method","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/reference/vcov-DirectAdjusted-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-Covariance matrix — vcov,DirectAdjusted-method","text":"","code":"# S4 method for DirectAdjusted vcov(object, ...)"},{"path":"www.github.com/reference/vcov-DirectAdjusted-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-Covariance matrix — vcov,DirectAdjusted-method","text":"object DirectAdjusted ... Add'l arguments","code":""},{"path":"www.github.com/reference/vcov-DirectAdjusted-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-Covariance matrix — vcov,DirectAdjusted-method","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/reference/vcovDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute direct adjustment sandwich variance estimator — vcovDA","title":"Compute direct adjustment sandwich variance estimator — vcovDA","text":"Compute direct adjustment sandwich variance estimator","code":""},{"path":"www.github.com/reference/vcovDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute direct adjustment sandwich variance estimator — vcovDA","text":"","code":"vcovDA(x, ...)"},{"path":"www.github.com/reference/vcovDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute direct adjustment sandwich variance estimator — vcovDA","text":"x DirectAdjusted model ... Arguments passed sandwich::meatCL","code":""},{"path":"www.github.com/reference/vcovDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute direct adjustment sandwich variance estimator — vcovDA","text":"\\((p+2)\\times(p+2)\\) matrix dimensions given number terms covariance model (p), treatment term, intercept term","code":""},{"path":"www.github.com/reference/vcovDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute direct adjustment sandwich variance estimator — vcovDA","text":"vcovDA() provides covariance-adjusted cluster-robust variance estimates treatment effects.","code":""},{"path":"www.github.com/reference/weights-WeightedDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"Extract Weights WeightedDesign","code":""},{"path":"www.github.com/reference/weights-WeightedDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign weights(object, ...)"},{"path":"www.github.com/reference/weights-WeightedDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"object WeightedDesign object ... Ignored","code":""},{"path":"www.github.com/reference/weights-WeightedDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"vector weights","code":""}]
