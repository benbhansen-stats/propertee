[{"path":"www.github.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 propertee authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"www.github.com/dev/articles/CovarianceAdjustment.html","id":"data-and-design","dir":"Articles","previous_headings":"","what":"Data and Design","title":"Covariance Adjustment for Randomized Trials","text":"data come state Tennessee’s Student-Teacher Achievement Ratio (STAR) experiment. Students randomly assigned three possible classroom conditions: small (13 17 students per teacher), regular class (22 25 students per teacher), regular--aide class (22 25 students full-time teacher’s aide). Student compliance constant years: Taking kindergarten treatment intended treatment, proceed intent--treat analysis, ignoring actual classroom attendance grades 1 3. Additionally, collapse regular regular+aide categories single category compare effect small classrooms regular classrooms, including teacher’s aides. illustrate workflow researcher midst trial, split data two data sets, one representing student information might known prior assignment second representing outcome information available intervention administered. students blocked schools, randomized within school, establish design based stratifications. Including set weights use later. Post-treatment outcomes include normalized reading math scores several years. Missing values imputed within group (treatment/control) mean students grouped within classrooms teacher, assignment classroom type performed individual level within schools. interested treatment effects different ethnicities composing study population.","code":"data(STARdata) with(STARdata, table(stark, star1), useNA = \"always\") #>               star1 #> stark          regular small regular+aide #>   regular          737   126          663 #>   small             60  1293           48 #>   regular+aide     761   122          706 with(STARdata, table(star2, star3), useNA = \"always\") #>               star3 #> star2          regular small regular+aide #>   regular         1485   167          152 #>   small             37  1564           35 #>   regular+aide      76    40         1858 STARdata$treatment <- STARdata$stark == \"small\" STARdata$treatment[is.na(STARdata$treatment)] <- FALSE table(STARdata$treatment) #>  #> FALSE  TRUE  #>  9698  1900 STARdata$studentid <- as.character(seq_len(nrow(STARdata))) STAR_pre <- STARdata[, c(\"studentid\", \"treatment\",                      \"gender\", \"ethnicity\", \"birth\", \"lunchk\",  # individual demographics                      \"schoolk\", \"degreek\", \"ladderk\", \"experiencek\", \"tethnicityk\", # school and teacher demographics                      \"systemk\", \"schoolidk\" # school ID information                      )] STAR_school <- data.frame(schoolidk = as.numeric(names(table(STAR_pre$schoolidk))),                           school_n = tapply(STAR_pre$treatment,                                             STAR_pre$schoolidk,                                             FUN = length),                           school_n1 = tapply(STAR_pre$treatment,                                             STAR_pre$schoolidk,                                             FUN = sum)) STAR_school$school_n0 <- with(STAR_school, school_n - school_n1) STAR_pre <- merge(STAR_pre, STAR_school, by = \"schoolidk\", all.x = TRUE) STAR_pre$E_Z         <- with(STAR_pre, school_n1 / school_n) STAR_pre$weight_ate  <- with(STAR_pre,                              treatment / E_Z + (1 - treatment) / (1 - E_Z)) STAR_pre$weight_ett  <- with(STAR_pre,                              treatment + (1 - treatment) * E_Z / (1 - E_Z)) STAR_pre$weight_etc  <- with(STAR_pre,                              treatment * (1 - E_Z) / E_Z + (1 - treatment)) STAR_post <- rbind(   data.frame(studentid = STARdata$studentid, year = \"k\", read = STARdata$readk, math = STARdata$mathk, strings.as.factors = FALSE),   data.frame(studentid = STARdata$studentid, year = \"1\", read = STARdata$read1, math = STARdata$math1, strings.as.factors = FALSE),   data.frame(studentid = STARdata$studentid, year = \"2\", read = STARdata$read2, math = STARdata$math2, strings.as.factors = FALSE),   data.frame(studentid = STARdata$studentid, year = \"3\", read = STARdata$read3, math = STARdata$math3, strings.as.factors = FALSE))  ## imputation to within group means STAR_pre_post <- merge(STAR_pre, STAR_post, by = \"studentid\", all = TRUE) ## STAR_design <- rct_design(treatment ~ cluster(studentid) + strata(schoolidk), data = STAR_pre) STAR_design <- rct_design(treatment ~ cluster(studentid), data = STAR_pre) #ggplot(STAR_pre_post, aes(x = read, group = treatment)) + geom_boxplot() + facet_wrap(~ ethnicity)"},{"path":"www.github.com/dev/articles/CovarianceAdjustment.html","id":"covariance-model","dir":"Articles","previous_headings":"","what":"Covariance Model","title":"Covariance Adjustment for Randomized Trials","text":"","code":"rhs <- ~ gender + ethnicity + birth + lunchk +   ladderk + experiencek + tethnicityk + year  covariance_y0_read <- lm(update(rhs, read ~ .), data = STAR_pre_post, subset = !treatment) covariance_y0_math <- lm(update(rhs, math ~ .), data = STAR_pre_post, subset = !treatment)  ## of !! is to turn numeric into logical covariance_y1_read <- lm(update(rhs, read ~ .), data = STAR_pre_post, subset = !!treatment) covariance_y1_math <- lm(update(rhs, math ~ .), data = STAR_pre_post, subset = !!treatment)"},{"path":"www.github.com/dev/articles/CovarianceAdjustment.html","id":"outcome-analysis","dir":"Articles","previous_headings":"","what":"Outcome Analysis","title":"Covariance Adjustment for Randomized Trials","text":"Let \\(y_1\\) \\(y_0\\) potential outcomes, let \\(Z\\) binary treatment indicator, posit Stable Unit Treatment Value assumption holds \\(Y = Z y_1 - (1 - Z) y_0\\). finite population \\(n\\) units, define average treament effect \\[\\Delta = \\frac{1}{n} \\sum_{=1}^n y_{i1} - y_{i0}.\\] Suppose model \\(y_{i0} = g(x_i ; \\beta_0)\\). fitting parameters \\(\\hat \\beta_0\\), let \\(\\hat y_{i0} = g(x_i ; \\hat \\beta_0)\\). Adding subtracting estimated potential outcomes changing average treatment effect: \\[\\Delta = \\frac{1}{n} \\sum_{=1}^n y_{i1} - y_{i0} + \\hat y_{i0} - \\hat y_{i0} = \\frac{1}{n} \\sum_{=1}^n (y_{i1} - \\hat y_{i0})  - \\frac{1}{n} \\sum_{=1}^n (y_{i0} - \\hat y_{i0}).\\] Additionally, binary treatment vector \\(Z\\), can decompose average treatment effect effect treated group (.e., \\(Z = 1\\)) effect control group (.e., \\(Z = 0\\)): \\[ \\begin{aligned} \\Delta &= \\frac{1}{n} \\sum_{=1}^n Z_i\\left[(y_{i1} - \\hat y_{i0})  - (y_{i0} - \\hat y_{i0})\\right] + \\\\ & \\quad  \\frac{1}{n} \\sum_{=1}^n (1 - Z_i) \\left[(y_{i1} - \\hat y_{i0})  - (y_{i0} - \\hat y_{i0})\\right]  \\\\ &= \\frac{n_1}{n} \\delta(Z) + \\frac{n_0}{n} \\delta(1 - Z), \\end{aligned} \\] \\(n_1 = \\sum_{=1}^n Z_i\\) \\(n_0 = \\sum_{=1}^n 1 - Z_i\\). \\(Z\\) represents random vector, taking expectation yields expected treatment effect treated units \\[ \\begin{aligned} \\delta_1 &= E(\\delta(Z)) =  \\frac{1}{n_1} \\sum_{=1}^n E(Z_i) \\left[(y_{i1} - \\hat y_{i0}) - (y_{i0} - \\hat y_{i0})\\right]\\\\ &= \\frac{1}{n} \\sum_{=1}^n \\left[\\frac{n}{n_1} E(Z_i)\\right] (y_{i1} - \\hat y_{i0}) - \\frac{1}{n} \\sum_{=1}^n \\left[\\frac{n}{n_1} E(Z_i)\\right] (y_{i10} - \\hat y_{i0}) , \\end{aligned} \\] expected treatment effect control units \\(\\delta_0 = E(\\delta(1 - Z))\\), analogously. estimate \\(\\Delta\\), \\(\\delta_1\\), \\(\\delta_0\\), introduce difference Hajek estimators, \\[ d(w) =\\frac{\\sum_{=1} w_i Z_i (Y_i - \\hat y_{i0})}{\\sum_{=1}^n w_i Z_i} - \\frac{\\sum_{=1} w_i (1 - Z_i) (Y_i - \\hat y_{i0})}{\\sum_{=1}^n w_i (1 - Z_i)}. \\] \\(\\Delta\\): \\(w_i = Z_i/E(Z_i) + (1 - Z)/E(1 - Z_i)\\). case completely randomized designs, \\(E(Z_i) = n_1/n\\), \\(E(1 - Z_i) = n_0/n\\), estimator reduces well known difference means estimator. \\(\\delta_1\\): \\(w_i = Z_i + (1 - Z_i) E(Z_i) / E(1 - Z_i)\\). \\(\\delta_0\\): \\(w_i = Z_i E(1 - Z_i) / E(Z_i) + (1 - Z_i)\\). weights may also include case weights multiplied subgroup indicators estimate subgroup specific effects. demonstrate function, implement estimator directly also show can estimated using suite tools. begin using various covariance models impute missing potential outcomes individual treatment effects.","code":"dw <- function(w, z, y, y0_hat) {   tmp <- na.omit(data.frame(w, z, y, y0_hat))   with(tmp,     sum(w * z * (y - y0_hat)) / sum(w * z) -       sum(w * (1 - z) * (y - y0_hat)) / sum(w * (1 - z))   ) } STAR_pre_post_k <- STAR_pre_post[STAR_pre_post$year == \"k\",]  pred <- function(mod) {   predict(mod, newdata = STAR_pre_post_k, type = \"response\") }  STAR_pre_post_k$read_y0_hat <- pred(covariance_y0_read) STAR_pre_post_k$read_y1_hat <- pred(covariance_y1_read) STAR_pre_post_k$math_y0_hat <- pred(covariance_y0_math) STAR_pre_post_k$math_y1_hat <- pred(covariance_y1_math)"},{"path":[]},{"path":"www.github.com/dev/articles/CovarianceAdjustment.html","id":"reading-scores","dir":"Articles","previous_headings":"Outcome Analysis > Effect of Treatment on the Treated","what":"Reading Scores","title":"Covariance Adjustment for Randomized Trials","text":"treatment effects, compute point estimates using lm function direct calculation. following currently implemented, represents expected interface.","code":"## overall treatment effects on the treated ett_read_lm <- lm(read ~ treatment,                   data = STAR_pre_post_k,                   weights = weight_ett,                   offset = read_y0_hat) coef(ett_read_lm)[2] #> treatmentTRUE  #>      5.976525  with(STAR_pre_post_k, dw(weight_ett, treatment, read, read_y0_hat)) #> [1] 5.976525  ## ETT within subgroups ett_read_ethnicity_lm <- lm(read ~ treatment * ethnicity,                                data = STAR_pre_post_k,                                weights = weight_ett,                                offset = read_y0_hat)  data.frame(eth = levels(STAR_pre_post_k$ethnicity),            ett = coef(ett_read_ethnicity_lm)[2] + c(cauc = 0, coef(ett_read_ethnicity_lm)[8:12])) #>                                      eth        ett #> cauc                                cauc   5.992359 #> treatmentTRUE:ethnicityafam         afam   5.357006 #> treatmentTRUE:ethnicityasian       asian -21.865925 #> treatmentTRUE:ethnicityhispanic hispanic  42.501192 #> treatmentTRUE:ethnicityamindian amindian  22.944953 #> treatmentTRUE:ethnicityother       other   8.497310  aggregate(seq_len(nrow(STAR_pre_post_k)),           by=list(STAR_pre_post_k$ethnicity),           function(x) with(STAR_pre_post_k[x,],                            dw(weight_ett, treatment, read, read_y0_hat))) #>    Group.1          x #> 1     cauc   5.992359 #> 2     afam   5.357006 #> 3    asian -21.865925 #> 4 hispanic  42.501192 #> 5 amindian  22.944953 #> 6    other   8.497310 STAR_ett    <- ett(STAR_design) ## notice the formula does not mention the blocking factor ett_read_lm <- lm(read ~ treatment, offset = cov_adj(covariance_y0_read), weights = STAR_ett)"},{"path":[]},{"path":"www.github.com/dev/articles/CovarianceAdjustment.html","id":"reading-scores-1","dir":"Articles","previous_headings":"Outcome Analysis > Average Treatment Effects","what":"Reading Scores","title":"Covariance Adjustment for Randomized Trials","text":"following currently implemented, represents expected interface.","code":"## overall ATE ate_read_lm <- lm(read ~ treatment,                   data = STAR_pre_post_k,                   weights = weight_ate,                   offset = read_y0_hat) coef(ate_read_lm)[2] #> treatmentTRUE  #>      6.466883  with(STAR_pre_post_k, dw(weight_ate, treatment, read, read_y0_hat)) #> [1] 6.466883  ate_read_ethnicity_lm <- lm(read ~ treatment * ethnicity,                             data = STAR_pre_post_k,                             weights = weight_ate,                             offset = read_y0_hat)  data.frame(eth = levels(STAR_pre_post_k$ethnicity),            ate = coef(ate_read_ethnicity_lm)[2] + c(cauc = 0, coef(ate_read_ethnicity_lm)[8:12])) #>                                      eth        ate #> cauc                                cauc   6.528351 #> treatmentTRUE:ethnicityafam         afam   5.803404 #> treatmentTRUE:ethnicityasian       asian -25.056263 #> treatmentTRUE:ethnicityhispanic hispanic  46.511727 #> treatmentTRUE:ethnicityamindian amindian  22.944953 #> treatmentTRUE:ethnicityother       other   9.965636  aggregate(seq_len(nrow(STAR_pre_post_k)),           by = list(STAR_pre_post_k$ethnicity),           function(x) with(STAR_pre_post_k[x,],                            dw(weight_ate, treatment, read, read_y0_hat)                            )           ) #>    Group.1          x #> 1     cauc   6.528351 #> 2     afam   5.803404 #> 3    asian -25.056263 #> 4 hispanic  46.511727 #> 5 amindian  22.944953 #> 6    other   9.965636 STAR_ate    <- ate(STAR_design) ## notice the formula does not mention the blocking factor ate_read_lm <- lm(read ~ treatment, offset=cov_adj(covariance_y0_read),                   data = filter(STAR_post, year = \"k\"), weights = STAR_ate)"},{"path":"www.github.com/dev/articles/LinearModelVarianceEstimation.html","id":"combined-model","dir":"Articles","previous_headings":"","what":"Combined model","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Consider two sets background variables treatment assignments, \\(x\\) \\(z\\) dimension \\(p_x\\) \\(p_z\\), respectively, treated nonrandom fixed conditioning. allow correlation variables, assume matrix \\(\\begin{pmatrix} X & Z \\end{pmatrix}' \\begin{pmatrix} X & Z \\end{pmatrix}\\) inverse (think results work generalized inverses, exist makes dimesionality coefficients little tricky). \\[Y = \\alpha'x + \\beta'z + \\epsilon, \\quad E(\\epsilon) = 0, \\text{Var}(\\epsilon) = \\sigma^2\\] Standard results give us \\[ \\begin{pmatrix} \\hat \\alpha_1 \\\\ \\hat \\beta_1 \\end{pmatrix} = \\begin{pmatrix} X'X & X'Z \\\\ Z'X & Z'Z \\end{pmatrix}^{-1} \\begin{pmatrix} X'y \\\\ Z'y \\end{pmatrix} \\] variance estimators \\[\\sigma^2 \\begin{pmatrix} X'X & X'Z \\\\ Z'X & Z'Z \\end{pmatrix}^{-1}\\] Results blocked matrices (e.g., Matrix Cookbook) give variance just \\(\\hat \\beta\\) \\[\\text{Var}(\\hat \\beta_1) = \\sigma^2 \\left[Z'Z - Z' X (X'X)^{-1} X'Z\\right]^{-1}\\] Write \\(H = - X (X'X)^{-1} X'\\), matrix creates residuals regression \\(x\\) alone. , \\[\\text{Var}(\\hat \\beta_1) = \\sigma^2 \\left[Z'H Z\\right]^{-1}\\] \\(\\hat \\beta_1\\) arises coefficient regression \\(HY\\) \\(HZ\\) (-called Frisch-Waugh-Lovell Theorem). consequence, \\[\\hat \\beta_1 = (Z'HZ)^{-1}(Z'Hy) .\\]","code":""},{"path":"www.github.com/dev/articles/LinearModelVarianceEstimation.html","id":"two-regressions","dir":"Articles","previous_headings":"","what":"Two regressions","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Let \\(\\hat \\alpha_2\\) \\(\\hat \\beta_2\\) estimators first regression \\(Y\\) \\(x\\) alone regressing \\(Y - \\hat \\alpha_2'x\\), \\(YH\\) \\(H\\) defined , \\(Z\\). Standard results give \\[\\hat \\alpha_2 = (X'X)^{-1} X' y\\] \\[\\hat \\beta_2 = (Z'Z)^{-1} Z' (y - X \\hat \\alpha_2)  = (Z'Z)^{-1} Z'(y - X (X'X)^{-1} X' y) = (Z'Z)^{-1} Z' H y\\] \\(Z\\) \\(X\\) taken nonrandom, may pass \\(\\hat \\beta_1\\) \\(\\hat \\beta_2\\) via nonrandom linear transformations, follows: \\[\\hat \\beta_1 = (Z'HZ)^{-1}(Z'Z) \\hat \\beta_2;\\quad \\hat \\beta_2 = (Z'Z)^{-1}(Z'HZ) \\hat \\beta_1 .\\] Accordingly \\[ \\operatorname{Cov}(\\hat \\beta_1) = (Z'HZ)^{-1}(Z'Z) \\operatorname{Cov}(\\hat \\beta_{2})(Z'Z) (Z'HZ)^{-1}\\] may serve basis tests.","code":""},{"path":"www.github.com/dev/articles/LinearModelVarianceEstimation.html","id":"todo","dir":"Articles","previous_headings":"","what":"TODO","title":"Variance Estimation Testing Using A Simple Linear Specification","text":"Implement tests.","code":""},{"path":"www.github.com/dev/articles/RDD.html","id":"data-and-design","dir":"Articles","previous_headings":"","what":"Data and Design","title":"Regression Discontinuity Designs","text":"data example randomly simulated using synthpop package R based data originally collected Lindo, Sanders, Oreopoulos (2010; hereafter LSO). (original real data can found ; code simulate fake data can found .) major public university, students cumulative grade point average (GPA) pre-specified cutoff placed academic probation (AP). Students AP given extra support, threatened suspension GPAs improve. See LSO details. Along LSO, consider students end first year university. university consisted three campuses, AP cutoff varied campus. simplify matters, centered student’s first year GPA campus’s cutoff, creating new variable \\(R_i\\equiv GPA_i -c_{campus[]}\\), \\(GPA_i\\) student \\(\\)’s first-year GPA, \\(c_{campus[]}\\) AP cutoff student \\(\\)’s campus. student \\(\\) placed AP \\(R_i<0\\) avoids AP \\(R_i\\ge 0\\). attempt estimate average effect AP placement nextGPA, students’ subsequent GPA (either summer following academic semester). figure plots average nextGPA students distinct R values (.e. centered first-year GPA). cutoff AP, 0, denoted dotted line. sizes points proportional natural log numbers students unique value R.","code":"data(lsoSynth) figDat <- aggregate(lsoSynth[,c('nextGPA','lhsgrade_pct')],by=list(R=lsoSynth$R),                     FUN=mean,na.rm=TRUE) figDat$n <- as.vector(table(lsoSynth$R))  with(figDat,      plot(R,nextGPA,cex=log(n+1)/3,main='Average Subsequent GPA\\n as a function of 1st-Year GPA,\\n Centered at AP Cutoff')) abline(v=0,lty=2)"},{"path":[]},{"path":"www.github.com/dev/articles/RDD.html","id":"regression-discontinuity-designs","dir":"Articles","previous_headings":"Background","what":"Regression Discontinuity Designs","title":"Regression Discontinuity Designs","text":"characterizes discontinuity (RD) designs, including LSO study, treatment assigned function numeric “running variable” \\(R\\), along prespecified cutoff value \\(c\\), treatment assigned subjects \\(\\) \\(R_i>c\\), \\(R_i<c\\). \\(Z_i\\) denote’s \\(\\)’s treatment assignment, write \\(Z_i=\\mathbf{1}\\{R_i<c\\}\\) \\(\\mathbf{1}\\{R_i<c\\}\\), \\(\\mathbf{1}\\{x\\}\\) indicator function–equal 1 \\(x\\) true 0 otherwise. LSO study, \\(\\) indexes students, centered first-year GPA $R_i $ running variable, treatment study AP placement. $ Z_i={R_i<0} $. (“fuzzy” RD designs, \\(R\\)’s value relative \\(c\\) doesn’t completely determine treatment, merely affects probability treatment, subjects , say, \\(R_i>c\\) likely treated \\(R_i<c\\); fuzzy RD designs, \\(Z_i=\\mathbf{1}\\{R_i>c\\}\\) typically modeled instrument treatment receipt.) RD designs hold privileged place causal inference, unlike observational study designs, mechanism treatment assignment known. , \\(R\\) confounder. hand, since \\(Z\\) completely determined \\(R\\), subjects values \\(R\\) different values \\(Z\\), common observational study techniques, matching \\(R\\), impossible. Instead, necessary adjust \\(R\\) modeling–typically regression.","code":""},{"path":"www.github.com/dev/articles/RDD.html","id":"analyzing-rd-designs-with-ancova","dir":"Articles","previous_headings":"Background","what":"Analyzing RD Designs with ANCOVA","title":"Regression Discontinuity Designs","text":"Traditionally, typical way analyze data RD designs ANCOVA, fitting regression model \\[Y_i=\\beta_0+\\beta_1R_i+\\beta_2Z_i+\\epsilon_i\\] \\(Y_i\\) outcome interest measured subject \\(\\) (example nextGPA), \\(\\epsilon_i\\) random regression error. , regression coefficient \\(Z\\), \\(\\beta_2\\), taken estimate treatment effect. Common methodological updates ANCOVA approach include interaction term \\(Z_i\\) \\(R_i\\), substitution semi-parametric regression, local linear polynomial models, linear ordinary least squares. suitable conditions, ANCOVA model said estimate “Local Average Treatment Effect” (LATE). \\(Y_1\\) \\(Y_0\\) potential outcomes \\(Y\\), LATE defined \\[\\displaystyle\\lim_{r\\rightarrow c^+} E(Y_1|R=r)-\\displaystyle\\lim_{r\\rightarrow c^-} E(Y_0|R=r)\\] equivalently \\[\\displaystyle\\lim_{\\Delta\\rightarrow 0^+} E(Y_1-Y_0 |R\\(c-\\Delta,c+\\Delta))\\] \\(E\\) denotes expectation–, LATE limit average treatment effects subjects \\(R\\) ever-shrinking regions around \\(c\\). Among considerations, LATE target suggests data analysts restrict attention subjects \\(R\\) falling within bandwidth \\(b>0\\) \\(c\\), e.g. fitting model subjects \\(\\) within “window analysis” \\(\\mathcal{W}=\\{:R_i\\(c-b,c+b)\\}\\). number methods proposed select \\(b\\), including cross validation, non-parametric modeling second derivative \\(f(r)=E(Y|R=r)\\), specification tests.","code":""},{"path":"www.github.com/dev/articles/RDD.html","id":"the-propertee-approach-to-rd-designs","dir":"Articles","previous_headings":"Background","what":"The propertee Approach to RD Designs","title":"Regression Discontinuity Designs","text":"propertee approach RD designs breaks data analysis three steps: Conduct specification tests choose bandwidth \\(b>0\\), along , possibly, data exclusions, resulting analysis sample \\(W\\). Fit covariance model \\(Y_{i0}=g(R_i,x_i;\\beta)\\), modeling \\(Y_{i0}\\) function running variable \\(R_i\\) (optionally) covariates \\(\\mathbf{x}_i\\). Fitting covariance model control subjects, designs, entail extrapolation model fit subjects \\(R_i\\(c-b,c)\\) subjects \\(R_i\\(c,c+b)\\), vice-versa, undesirable. Instead, fit covariance model full analysis sample \\(\\mathcal{W}\\), including treated untreated subjects. However, since interested modeling \\(Y_0\\), \\(Y_1\\) \\(Y\\), rather fitting \\(g(\\cdot)\\), fit extended model \\[\\tilde{g}(R_i,x_i,Z_i;\\beta,\\gamma)=g(R_i,x_i;\\beta)+\\gamma Z_i\\] including term treatment assignment. estimate \\(\\gamma\\) , essence, provisional estimate treatment effect. Let \\(\\widehat{Y}_{i0}=g(R_i,x_i;\\hat{\\beta})\\), using model \\(Y_0\\)—including term \\(Z\\)—along \\(\\hat{\\beta}\\) estimated step 2. estimate average treatment effect subjects \\(W\\) using difference means estimator: \\[ d_{\\hat{\\beta}}=\\frac{\\sum_{\\W} Z_i(Y_i-\\widehat{Y}_{i0})}{\\sum_{\\W} Z_i}-\\frac{\\sum_{\\W} (1-Z_i)(Y_i-\\widehat{Y}_{i0})}{\\sum_{\\W} (1-Z_i)} \\] estimator \\(d_{\\hat{\\beta}}\\) consistent model \\(g(R_i,x_i;\\beta_0)\\), \\(\\beta_0\\) probability limit \\(\\hat{\\beta}\\), successfully removes confounding due \\(R\\), .e. \\(Y_0-g(R_i,x_i;\\beta_0) \\perp \\!\\!\\! \\perp Z\\) \\(\\\\mathcal{W}\\).","code":""},{"path":[]},{"path":"www.github.com/dev/articles/RDD.html","id":"determining-the-window-of-analysis","dir":"Articles","previous_headings":"Analyzing an RD design in propertee","what":"Determining the window of analysis","title":"Regression Discontinuity Designs","text":"extensive literature determining appropriate window analysis RD design. See, instance, Imbens Kalyanaraman (2012) Sales Hansen (2020). stage analysis beyond scope vignette, require propertee package. purpose example, focus analysis \\(\\mathcal{W}=\\{:R_i\\[-0.5,0.5]\\}\\).","code":""},{"path":"www.github.com/dev/articles/RDD.html","id":"initializing-the-rd-design-object","dir":"Articles","previous_headings":"Analyzing an RD design in propertee","what":"Initializing the RD Design Object","title":"Regression Discontinuity Designs","text":"general, propertee design objects require users specify unit- cluster-id variable, corresponds level treatment assignment–words, units assigned conditions. necessary combining results across different models datasets, estimating correct design-based standard errors. lsoSynth, clusters, individual students assigned academic probation individual basis. dataset include ID variable, variable takes unique value row . use row-names. Defining RD design requires, minimum, identifying running variable(s) \\(R\\), well \\(R\\) determines treatment assignment. example,","code":"lsoSynth$id <- rownames(lsoSynth) lsoSynth$Z <- lsoSynth$R<0  lsoSynthW <- subset(lsoSynth,abs(R)<=0.5)  #lsoSynthW$id <- 1:nrow(lsoSynthW) des <- rd_design(Z ~ forcing(R) + unitid(id), data=lsoSynth, subset=abs(lsoSynth$R) <= 0.5)"},{"path":"www.github.com/dev/articles/RDD.html","id":"modeling-y_c-as-a-function-of-r","dir":"Articles","previous_headings":"Analyzing an RD design in propertee","what":"Modeling \\(Y_C\\) as a function of \\(R\\)","title":"Regression Discontinuity Designs","text":"consider two potential models \\(\\tilde{g}(\\cdot)\\) \\(Y_C\\) function \\(R\\). First, standard OLS model: second bounded-influence polynomial model type recommended Sales & Hansen (2020): [Put something evaluating ?]","code":"### this doesn't work: g1 <- lm(nextGPA ~ R + Z, data = lsoSynth, weights = ett(des) ##this works, but it's annoying to enter in the subset expression a 2nd time: g1 <- lm(nextGPA ~ R + Z, data = lsoSynth, subset = abs(R) <= 0.5) g2 <- if(requireNamespace(\"robustbase\", quietly = TRUE)){   robustbase::lmrob(nextGPA~poly(R,5)+Z,data=lsoSynthW) } else g1"},{"path":"www.github.com/dev/articles/RDD.html","id":"estimating-effects","dir":"Articles","previous_headings":"Analyzing an RD design in propertee","what":"Estimating Effects","title":"Regression Discontinuity Designs","text":"","code":"yhat1 <- predict(g1,data.frame(R=forcings(des)[[1]],Z=FALSE)) yhat2 <- predict(g2,data.frame(R=forcings(des)[[1]],Z=FALSE))  plot(yhat1,yhat2) ### method 1:  mean(lsoSynthW$nextGPA[lsoSynthW$Z]-yhat1[lsoSynthW$Z])-   mean(lsoSynthW$nextGPA[!lsoSynthW$Z]-yhat1[!lsoSynthW$Z]) #> [1] 0.2553202  #### method 2: coef(lm(nextGPA~Z, offset=yhat1,data=lsoSynthW))['ZTRUE'] #>     ZTRUE  #> 0.2553202 ### method 1:  mean(lsoSynthW$nextGPA[lsoSynthW$Z]-yhat2[lsoSynthW$Z])-   mean(lsoSynthW$nextGPA[!lsoSynthW$Z]-yhat2[!lsoSynthW$Z]) #> [1] 0.2295554  #### method 2: coef(lm(nextGPA~Z, offset=yhat2,data=lsoSynthW))['ZTRUE'] #>     ZTRUE  #> 0.2295554"},{"path":[]},{"path":"www.github.com/dev/articles/geex_vs_propertee.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"propertee vs. geex","text":"provide basic validation model-based sandwich standard errors provided comparing estimates package (Saul Hudgens, 2020). two examples, one one without clustering, estimate standard error intent--treat (ITT) effect estimate adjusted covariates using prior covariance model. M-estimation framework, prior covariance model defines one set estimating equations, covariate-adjusted intent--treat effect estimate defines another. One can stack togther use package obtain joint estimates model coefficients ITT effect, one can fit covariance model first, use package feed necessary information first-stage estimating equations variance estimation ITT effect estimate. demonstrate equivalence two appraoches .","code":""},{"path":"www.github.com/dev/articles/geex_vs_propertee.html","id":"example-with-non-clustered-data","dir":"Articles","previous_headings":"","what":"Example with non-clustered data","title":"propertee vs. geex","text":"","code":"set.seed(980) n <- 60 cmod_df <- data.frame(   \"uid\" = seq_len(n),   \"z\" = c(rep(0, 3 * n/4), rep(1, n/4)),   \"x1\" = rnorm(n, sd = 2),   \"x2\" = rep(c(rep(0, n/4), rep(1, n/4)), 2) ) eps <- rnorm(nrow(cmod_df)) theta <- c(75, 0.1, -0.5, 2.5) cmod_df$y <- model.matrix(~ x1 + x2 + z, cmod_df) %*% theta + eps  cmod_df$in_q <- c(rep(0, n/2), rep(1, n/2)) q_df <- cmod_df[cmod_df$in_q == 1,]  cmod <- lm(y ~ x1 + x2, cmod_df) des <- rct_design(z ~ unitid(uid), q_df) damod <- lmitt(y ~ 1, design = des, data = q_df, weights = ate(des), offset = cov_adj(cmod))  estFun <- function(data){   function(theta) {     # covariance model eqns     Xstar <- model.matrix(y ~ x1 + x2, data)     cmod_eqns <- drop(data$y - Xstar %*% theta[1:3]) * Xstar          # itt model eqns     X <- model.matrix(y ~ x1 + x2, data)     Z <- model.matrix(y ~ z, data)     if (data$in_q == 1) {       damod_eqns <- drop(data$weight * (data$y - X %*% theta[1:3] - Z %*% theta[4:5])) * Z     } else {       damod_eqns <- rep(0, 2)     }          out <- c(cmod_eqns, damod_eqns)     return(out)   } }  geexRes <- geex::m_estimate(estFun,                             data = cbind(cmod_df,                                          \"weight\" = c(rep(1, n/2), ate(des, data = q_df))),                             root_control = geex::setup_root_control(start = rep(0.1,5))) print(paste(\"geex estimate of var(tau_hat):\", round(geexRes@vcov[5,5], 8))) #> [1] \"geex estimate of var(tau_hat): 0.11107375\" print(paste(\"propertee estimate of var(tau_hat):\",             round(vcovDA(damod, type = \"CR0\", cadjust = FALSE)[2,2], 8))) #> [1] \"propertee estimate of var(tau_hat): 0.11107375\""},{"path":"www.github.com/dev/articles/geex_vs_propertee.html","id":"example-with-clustered-data","dir":"Articles","previous_headings":"","what":"Example with clustered data","title":"propertee vs. geex","text":"","code":"set.seed(50) nc <- 4 mi <- 20 cmod_df <- data.frame(   \"cid\" = rep(seq_len(4), each = mi),   \"uid\" = rep(seq_len(mi), nc),   \"z\" = c(rep(0, 3 * mi), rep(1, mi)),   \"x1\" = rbinom(nc * mi, 1, 0.5),   \"x2\" = rnorm(nc * mi) )  theta <- c(75, 7.5, -1, 2.5) error_sd <- round(runif(nc, 1, 3), 1) icc <- 0.2 eps <- rnorm(nrow(cmod_df)) Sigma <- matrix(0, nrow = nrow(cmod_df), ncol = nrow(cmod_df)) for (i in (seq_len(nc) - 1)) {   msk <- cmod_df$cid == (i + 1)   Sigma[msk, msk] <- diag(error_sd[i + 1] - icc, nrow = sum(msk)) + icc } A <- chol(Sigma) eps <- t(A) %*% eps cmod_df$y <- model.matrix(~ x1 + x2 + z, cmod_df) %*% theta + eps  cmod_df$in_q <- c(rep(0, mi), rep(1, 3 * mi)) q_df <- cmod_df[cmod_df$in_q == 1,]  cmod <- lm(y ~ x1 + x2, cmod_df) des <- rct_design(z ~ cluster(cid), q_df) damod <- lmitt(y ~ 1, design = des, data = q_df, weights = ate(des), offset = cov_adj(cmod))  clusterEstFunc <- function(data){   function(theta) {     # covariance model eqns     Xstar <- model.matrix(y ~ x1 + x2, data)     cmod_agg_func <- ifelse(dim(Xstar)[2] > 1, colSums, sum)     cmod_eqns <- cmod_agg_func(drop(data$y - Xstar %*% theta[1:3]) * Xstar)          # itt model eqns     X <- model.matrix(y ~ x1 + x2, data)     Z <- model.matrix(y ~ z, data)     damod_agg_func <- ifelse(dim(Z)[2] > 1, colSums, sum)     if (unique(data$in_q) == 1) {       damod_eqns <- damod_agg_func(         drop(data$weight * (data$y - X %*% theta[1:3] - Z %*% theta[4:5])) * Z)     } else {       damod_eqns <- rep(0, 2)     }          out <- c(cmod_eqns, damod_eqns)     return(out)   } }  geexRes <- geex::m_estimate(clusterEstFunc,                             data = cbind(cmod_df,                                          \"weight\" = c(rep(1, mi), ate(des, data = q_df))),                             units = \"cid\",                             root_control = geex::setup_root_control(start = rep(0.1,5)))  print(paste(\"geex estimate of var(tau_hat):\", round(geexRes@vcov[5,5], 8))) #> [1] \"geex estimate of var(tau_hat): 0.03520556\" print(paste(\"propertee estimate of var(tau_hat):\",             round(vcovDA(damod, type = \"CR0\", cadjust = FALSE)[2,2], 8))) #> [1] \"propertee estimate of var(tau_hat): 0.03520556\""},{"path":"www.github.com/dev/articles/geex_vs_propertee.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"propertee vs. geex","text":"Saul BC, Hudgens MG (2020). “Calculus M-Estimation R geex.” Journal Statistical Software, 92(2), 1–15. doi: 10.18637/jss.v092.i02.","code":""},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"main-features","dir":"Articles","previous_headings":"","what":"Main Features","title":"Introduction to propertee","text":"propertee package, Prognostic Regression Offsets Propagation ERrors (Treatment Effect Estimation), facilitates direct adjustment experiments observational studies design-informed standard errors flexible options covariance adjustment. uses explicit specification study design provide probability assignment weights standard errors appropriately reflect design. covariance adjustment Hajek (one-way) fixed effects estimates, enables offsetting outcome predictions dedicated covariance model, standard error calculations propagating error appropriate covariance model. main workflow consists two main steps one optional step: Generate Design object encodes study design, including unit assignment, treatment status unit assignment, optionally block information. accomplished obs_design(), rct_design() rd_design() functions. Optionally, fit covariate adjustment model. Fit model estimate treatment effect, accounting design information, optionally covariate adjustment. done via lmitt() function.","code":""},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"Introduction to propertee","text":"example dataset comes state Tennessee’s Student-Teacher Achievement Ratio (STAR) experiment. Students randomly assigned three possible classroom conditions: small (13 17 students per teacher), regular class (22 25 students per teacher), regular--aide class (22 25 students full-time teacher’s aide). simplicity first example, examine single binary treatment - “small” classrooms versus “regular” “regular+aide” classrooms. basic example, see propertee makes easy handle non-binary treatment variables introducing dichotomys. outcome interest reading score end kindergarten. students blocked schools via schoolidk variable: Students assigned units, need unique identifier per student. currently exist, can easily generated:","code":"data(STARdata) table(STARdata$stark) #>  #>      regular        small regular+aide  #>         2194         1900         2231 STARdata$starkbinary <- STARdata$stark == \"small\" table(STARdata$starkbinary) #>  #> FALSE  TRUE  #>  4425  1900 summary(STARdata$readk) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   315.0   414.0   433.0   436.7   453.0   627.0    5809 length(unique(STARdata$schoolidk)) #> [1] 80 head(table(STARdata$schoolidk)) #>  #>   1   2   3   4   5   6  #>  74  54 100  60  61  54 STARdata$studentid <- seq_len(nrow(STARdata)) head(STARdata$studentid) #> [1] 1 2 3 4 5 6"},{"path":[]},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"defining-the-design","dir":"Articles","previous_headings":"A Basic Example","what":"Defining the Design","title":"Introduction to propertee","text":"three _design functions (rct_design(), obj_design(), rd_design()) operate similarly. first argument important, encodes design information use formula. left-hand side formula identifies treatment variable. right-hand side formula consists following potential pieces information: unit_of_assignment(): identifies variable(s) indicate units assignment. required designs. alias uoa() can used place. block(): identifies variable(s) contain block information. Optional. forcing(): regression discontinuity designs (rd_design()), identifies variable(s) contain forcing information. define Design example: one variable needed identify unit assignment, block, forcing, can included. example, perhaps schoolidk may unique within district, potentially unique across districts. ’d use something like block(districtid, schoolidk) _design function.","code":"des <- obs_design(starkbinary ~ unit_of_assignment(studentid) + block(schoolidk),                   data = STARdata, na.fail = FALSE) summary(des) #> Observational Study #>  #>  Structure          Variables   #>  ---------          ---------   #>  Treatment          starkbinary #>  Unit of Assignment studentid   #>  Block              schoolidk   #>  #> Number of units per Treatment group:  #>  Txt Grp Num Units #>    FALSE      4425 #>     TRUE      1900"},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"estimating-the-treatment-effect","dir":"Articles","previous_headings":"A Basic Example","what":"Estimating the treatment effect","title":"Introduction to propertee","text":"main function estimating treatment effects lmitt() function. takes three main required arguments: formula specifying outcome desired treatment effect. data set containing outcome information. Design. Note data set need data set generated Design; however need include variables identify units assignment. (variable names differ, = argument can used link , though recommend renaming reduce likelihood issues.) example, may one dataset containing school-level information, separate dataset containing student-level information. Assume school unit assignment. course merge two data-sets, propertee can instead use school-level data define Design, student-level data estimate treatment effect. formula entering lmitt() can take one two forms: estimate main treatment effect outcome variable y, estimate subgroup specific treatment effects level x outcome y, x categorical. continuous x, main effect treatment-x interaction effect estimated. Therefore, estimate treatment effect example, can run: data includes ethnicity; can estimate subgroup effects ethnicity:","code":"y ~ 1 y ~ x te <- lmitt(readk ~ 1, data = STARdata, design = des) #> The Design object contains block-level information, but it is not used in this model. Block information is used when weights are defined via `ate()` or `ett()` or if the `absorb=TRUE` argument is passed. summary(te) #>  #> Call: #> lmitt(readk ~ 1, data = STARdata, design = des) #>  #>  Treatment Effects : #>                  Estimate Std. Error t value Pr(>|t|)     #> starkbinary.TRUE   5.4632     0.9207   5.934 3.13e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Std. Error calculated via type \"CR0\" te_s <- lmitt(readk ~ ethnicity, data = STARdata, design = des) #> The Design object contains block-level information, but it is not used in this model. Block information is used when weights are defined via `ate()` or `ett()` or if the `absorb=TRUE` argument is passed. summary(te_s) #> Warning: The following subgroups do not have sufficient degrees of freedom for #> standard error estimates and will be returned as NA: ethnicityamindian #>  #> Call: #> lmitt(readk ~ ethnicity, data = STARdata, design = des) #>  #>  Treatment Effects : #>                                    Estimate Std. Error t value Pr(>|t|)     #> starkbinary.TRUE_ethnicitycauc        4.717      1.147   4.112 3.97e-05 *** #> starkbinary.TRUE_ethnicityafam        6.607      1.468   4.500 6.94e-06 *** #> starkbinary.TRUE_ethnicityasian      -9.939     21.021  -0.473   0.6364     #> starkbinary.TRUE_ethnicityhispanic   35.667     18.635   1.914   0.0557 .   #> starkbinary.TRUE_ethnicityamindian   19.000         NA      NA       NA     #> starkbinary.TRUE_ethnicityother      13.333     26.857   0.496   0.6196     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> Std. Error calculated via type \"CR0\""},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"including-design-weights","dir":"Articles","previous_headings":"A Basic Example","what":"Including design weights","title":"Introduction to propertee","text":"Design weights can easily included estimation. propertee supports average treatment effect (ATE) effect treatment treated (ETT) weights. include one weights, simply include weights = \"ate\" weights = \"ett\" argument lmitt(): Internally, call ate() ett() functions can used directly. included inside lmitt(), need specify additional arguments ate() ett(), enabling easy functions weights. example weight variable, say wgt, include weights = wgt*ate() lmitt() call.","code":"lmitt(readk ~ 1, data = STARdata, design = des, weights = \"ate\") #> starkbinary.TRUE  #>         6.116683 lmitt(readk ~ 1, data = STARdata, design = des, weights = \"ett\") #> starkbinary.TRUE  #>         5.650771 head(ate(des, data = STARdata)) #> [1] 0.000000 3.965517 4.705882 0.000000 1.445946 0.000000"},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"covariance-adjustment-models","dir":"Articles","previous_headings":"A Basic Example","what":"Covariance Adjustment models","title":"Introduction to propertee","text":", lmitt() allow covariates; e.g. something like lmitt(y ~ 1 + control_var,... fail. adjust covariates, separate covariate model fit. model supports predict() function work. cov_adj() function can used process covariance adjustment model produce required values; output can passed offset=. Similarly weight functions, cov_adj() attempts locate correct arguments (case, mainly data= argument) use model command; cov_adj() fall back using data covariance model, safer use newdata= argument calling cov_adj() outside model. Also, similarly weights, cov_adj() can used normal modeling commands well.","code":"camod <- lm(readk ~ gender + birth + lunchk, data = STARdata) lmitt(readk ~ 1, data = STARdata, design = des,       weights = \"ate\", offset = cov_adj(camod)) #> Warning in validityMethod(object): Some covariance adjustments are NA; be #> careful of dropping these observations when fitting the ITT effect model #> starkbinary.TRUE  #>         6.050889 head(cov_adj(camod, newdata = STARdata)) #> [1]       NA 448.8500 450.2802       NA 425.4395       NA lm(readk ~ starkbinary, data = STARdata, weights = ate(des),    offset = cov_adj(camod)) #> Warning in validityMethod(object): Some covariance adjustments are NA; be #> careful of dropping these observations when fitting the ITT effect model #>  #> Call: #> lm(formula = readk ~ starkbinary, data = STARdata, weights = ate(des),  #>     offset = cov_adj(camod)) #>  #> Coefficients: #>     (Intercept)  starkbinaryTRUE   #>          -1.684            6.051"},{"path":"www.github.com/dev/articles/intro-to-propertee.html","id":"absorbing-blocks","dir":"Articles","previous_headings":"A Basic Example","what":"Absorbing Blocks","title":"Introduction to propertee","text":"fixed effects blocks desired, can absorbed away avoid estimating, absorb=TRUE argument can passed.","code":"lmitt(readk ~ 1, data = STARdata, design = des, absorb = TRUE) #> starkbinary.TRUE  #>          5.14933"},{"path":"www.github.com/dev/articles/non-binary-treatment.html","id":"binary-treatment","dir":"Articles","previous_headings":"","what":"Binary Treatment","title":"Non-binary Treatment Specification","text":"creating Design, handling binary treatment variables straightforward. treatment variable either numeric values 0/1, logical, lmitt() estimate treatment effect difference outcome treated group (1 TRUE) versus control group (0 FALSE).","code":""},{"path":"www.github.com/dev/articles/non-binary-treatment.html","id":"missing-treatment-status","dir":"Articles","previous_headings":"Binary Treatment","what":"Missing treatment status","title":"Non-binary Treatment Specification","text":"cases (binary non-binary), missing values allowed units assignment missing treatment values excluded models fit via lmitt().","code":""},{"path":"www.github.com/dev/articles/non-binary-treatment.html","id":"non-binary-treatment","dir":"Articles","previous_headings":"","what":"Non-binary Treatment","title":"Non-binary Treatment Specification","text":"However, _design() functions can take (reasonable) form treatment assignment. treatment variable numeric non-binary values, treated continuous treatment effect lmitt(y ~ 1, ... estimate single coefficient treatment. treatment variable character, treated multi-level treatment variable lmitt(y ~ 1, ... estimate treatment effects reference category. reference category first level defined according R’s comparison characters. factor ordered objects tricky deal , Design can created factor ordered treatment variables, lmitt() refuse estimate model. strongly recommended recode variable numeric character, can use dichotomy (see ). Note weights (ate() ett(), weights=\"ate\" weights =\"ett\") support binary treatment variables error anything except binary numeric logical.","code":""},{"path":"www.github.com/dev/articles/non-binary-treatment.html","id":"dichotomzing-a-non-binary-treatment","dir":"Articles","previous_headings":"Non-binary Treatment","what":"Dichotomzing a Non-binary Treatment","title":"Non-binary Treatment Specification","text":"Design creation functions ett()/ate() support dichotomy= argument. dichotomy presented formula, left-hand side logical statement defining inclusion treatment group, right-hand side logical statement defining inclusion control group. example, defines units assignment dose 200 treated units, units assignment dose 200 control units. . can used define either group inverse . example, dichotomy defined either units assignment assigned either treatment control assumed NA treatment status ignored estimation treatment effects. dichotomy, units assignment range (100,300) ignored.","code":"dose > 200 ~ dose <= 200 dose > 200 ~ . . ~ dose <= 200 dose >= 300 ~ dose <= 100"},{"path":"www.github.com/dev/articles/non-binary-treatment.html","id":"an-example","dir":"Articles","previous_headings":"Non-binary Treatment","what":"An Example","title":"Non-binary Treatment Specification","text":"place dichotomy directly Design object: can also place dichotomy _design() call direcly: Alternatively, dichotomy can passed ate()/ett() functions. Design already dichotomy, used, passing additional dichotomy weight functions replaces Design’s dichotomy.","code":"data(simdata) table(simdata$dose) #>  #>  50 100 200 250 300  #>  10  10  10  10  10 des1 <- rct_design(dose ~ uoa(cid1, cid2), data = simdata) summary(des1) #> Randomized Control Trial #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          dose       #>  Unit of Assignment cid1, cid2 #>  #> Number of units per Treatment group:  #>  Txt Grp Num Units #>       50         2 #>      100         2 #>      200         2 #>      ...           #> 2 smaller treatment groups excluded. #> Use `dtable` function to view full results. dichotomy(des1) <- dose >= 300 ~ dose <= 100 summary(des1) #> Randomized Control Trial #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          dose       #>  Unit of Assignment cid1, cid2 #>  #> Dichotomy rule: dose >= 300 ~ dose <= 100 #>  #> Number of units per Treatment group:  #>  Txt Grp Num Units #>        0         4 #>        1         2 des2 <- rct_design(dose ~ uoa(cid1, cid2), data = simdata,                    dichotomy = dose >= 300 ~ dose <= 100) summary(des2) #> Randomized Control Trial #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          dose       #>  Unit of Assignment cid1, cid2 #>  #> Dichotomy rule: dose >= 300 ~ dose <= 100 #>  #> Number of units per Treatment group:  #>  Txt Grp Num Units #>        0         4 #>        1         2 head(ate(des2, data = simdata)) #> [1] 1.5 1.5 1.5 1.5 0.0 0.0 head(ate(des2, data = simdata,          dichotomy = dose != 300 ~ .)) #> Warning in .weights_calc(design = design, target = \"ate\", dichotomy = #> dichotomy, : design is already dichotomized; over-writing with new `dichotomy` #> [1] 1.25 1.25 1.25 1.25 1.25 1.25"},{"path":"www.github.com/dev/articles/not-for-cran/geex_vs_propertee.html","id":"overview","dir":"Articles > Not-for-cran","previous_headings":"","what":"Overview","title":"propertee vs. geex","text":"provide basic validation model-based sandwich standard errors provided comparing estimates package (Saul Hudgens, 2020). two examples, one one without clustering, estimate standard error intent--treat (ITT) effect estimate adjusted covariates using prior covariance model. M-estimation framework, prior covariance model defines one set estimating equations, covariate-adjusted intent--treat effect estimate defines another. One can stack togther use package obtain joint estimates model coefficients ITT effect, one can fit covariance model first, use package feed necessary information first-stage estimating equations variance estimation ITT effect estimate. demonstrate equivalence two appraoches .","code":""},{"path":"www.github.com/dev/articles/not-for-cran/geex_vs_propertee.html","id":"example-with-non-clustered-data","dir":"Articles > Not-for-cran","previous_headings":"","what":"Example with non-clustered data","title":"propertee vs. geex","text":"","code":"set.seed(980) n <- 60 cmod_df <- data.frame(   \"uid\" = seq_len(n),   \"z\" = c(rep(0, 3 * n/4), rep(1, n/4)),   \"x1\" = rnorm(n, sd = 2),   \"x2\" = rep(c(rep(0, n/4), rep(1, n/4)), 2) ) eps <- rnorm(nrow(cmod_df)) theta <- c(75, 0.1, -0.5, 2.5) cmod_df$y <- model.matrix(~ x1 + x2 + z, cmod_df) %*% theta + eps  cmod_df$in_q <- c(rep(0, n/2), rep(1, n/2)) q_df <- cmod_df[cmod_df$in_q == 1,]  cmod <- lm(y ~ x1 + x2, cmod_df) des <- rct_design(z ~ unitid(uid), q_df) damod <- lmitt(y ~ 1, design = des, data = q_df, weights = ate(des), offset = cov_adj(cmod))  estFun <- function(data){   function(theta) {     # covariance model eqns     Xstar <- model.matrix(y ~ x1 + x2, data)     cmod_eqns <- drop(data$y - Xstar %*% theta[1:3]) * Xstar      # itt model eqns     X <- model.matrix(y ~ x1 + x2, data)     Z <- model.matrix(y ~ z, data)     if (data$in_q == 1) {       damod_eqns <- drop(data$weight * (data$y - X %*% theta[1:3] - Z %*% theta[4:5])) * Z     } else {       damod_eqns <- rep(0, 2)     }      out <- c(cmod_eqns, damod_eqns)     return(out)   } }  geexRes <- geex::m_estimate(estFun,                             data = cbind(cmod_df,                                          \"weight\" = c(rep(1, n/2), ate(des, data = q_df))),                             root_control = geex::setup_root_control(start = rep(0.1,5))) print(paste(\"geex estimate of var(tau_hat):\", round(geexRes@vcov[5,5], 8))) #> [1] \"geex estimate of var(tau_hat): 0.11107375\" print(paste(\"propertee estimate of var(tau_hat):\",             round(vcovDA(damod, type = \"CR0\", cadjust = FALSE)[2,2], 8))) #> [1] \"propertee estimate of var(tau_hat): 0.11107375\""},{"path":"www.github.com/dev/articles/not-for-cran/geex_vs_propertee.html","id":"example-with-clustered-data","dir":"Articles > Not-for-cran","previous_headings":"","what":"Example with clustered data","title":"propertee vs. geex","text":"","code":"set.seed(50) nc <- 4 mi <- 20 cmod_df <- data.frame(   \"cid\" = rep(seq_len(4), each = mi),   \"uid\" = rep(seq_len(mi), nc),   \"z\" = c(rep(0, 3 * mi), rep(1, mi)),   \"x1\" = rbinom(nc * mi, 1, 0.5),   \"x2\" = rnorm(nc * mi) )  theta <- c(75, 7.5, -1, 2.5) error_sd <- round(runif(nc, 1, 3), 1) icc <- 0.2 eps <- rnorm(nrow(cmod_df)) Sigma <- matrix(0, nrow = nrow(cmod_df), ncol = nrow(cmod_df)) for (i in (seq_len(nc) - 1)) {   msk <- cmod_df$cid == (i + 1)   Sigma[msk, msk] <- diag(error_sd[i + 1] - icc, nrow = sum(msk)) + icc } A <- chol(Sigma) eps <- t(A) %*% eps cmod_df$y <- model.matrix(~ x1 + x2 + z, cmod_df) %*% theta + eps  cmod_df$in_q <- c(rep(0, mi), rep(1, 3 * mi)) q_df <- cmod_df[cmod_df$in_q == 1,]  cmod <- lm(y ~ x1 + x2, cmod_df) des <- rct_design(z ~ cluster(cid), q_df) damod <- lmitt(y ~ 1, design = des, data = q_df, weights = ate(des), offset = cov_adj(cmod))  clusterEstFunc <- function(data){   function(theta) {     # covariance model eqns     Xstar <- model.matrix(y ~ x1 + x2, data)     cmod_agg_func <- ifelse(dim(Xstar)[2] > 1, colSums, sum)     cmod_eqns <- cmod_agg_func(drop(data$y - Xstar %*% theta[1:3]) * Xstar)      # itt model eqns     X <- model.matrix(y ~ x1 + x2, data)     Z <- model.matrix(y ~ z, data)     damod_agg_func <- ifelse(dim(Z)[2] > 1, colSums, sum)     if (unique(data$in_q) == 1) {       damod_eqns <- damod_agg_func(         drop(data$weight * (data$y - X %*% theta[1:3] - Z %*% theta[4:5])) * Z)     } else {       damod_eqns <- rep(0, 2)     }      out <- c(cmod_eqns, damod_eqns)     return(out)   } }  geexRes <- geex::m_estimate(clusterEstFunc,                             data = cbind(cmod_df,                                          \"weight\" = c(rep(1, mi), ate(des, data = q_df))),                             units = \"cid\",                             root_control = geex::setup_root_control(start = rep(0.1,5)))  print(paste(\"geex estimate of var(tau_hat):\", round(geexRes@vcov[5,5], 8))) #> [1] \"geex estimate of var(tau_hat): 0.03520556\" print(paste(\"propertee estimate of var(tau_hat):\",             round(vcovDA(damod, type = \"CR0\", cadjust = FALSE)[2,2], 8))) #> [1] \"propertee estimate of var(tau_hat): 0.03520556\""},{"path":"www.github.com/dev/articles/not-for-cran/geex_vs_propertee.html","id":"references","dir":"Articles > Not-for-cran","previous_headings":"","what":"References","title":"propertee vs. geex","text":"Saul BC, Hudgens MG (2020). “Calculus M-Estimation R geex.” Journal Statistical Software, 92(2), 1–15. doi: 10.18637/jss.v092.i02.","code":""},{"path":"www.github.com/dev/articles/not-for-cran/non-binary-weights.html","id":"binary-treatment","dir":"Articles > Not-for-cran","previous_headings":"","what":"Binary Treatment","title":"Applying Dichotomies to Non-Binary Treatments","text":"creating Design, handling binary treatment variables straightforward:","code":"des1 <- rct_design(z ~ cluster(cid1, cid2), data = simdata) head(ate(des1, data = simdata)) ## [1] 1.666667 1.666667 1.666667 1.666667 1.666667 1.666667"},{"path":"www.github.com/dev/articles/not-for-cran/non-binary-weights.html","id":"non-binary-treatment","dir":"Articles > Not-for-cran","previous_headings":"","what":"Non-binary Treatment","title":"Applying Dichotomies to Non-Binary Treatments","text":"However, Design objects support non-binary treatment variables, attempting utilize non-binary treatment variables result error:","code":"head(simdata$dose) ## [1]  50  50  50  50 250 250 des2 <- rct_design(dose ~ cluster(cid1, cid2), data = simdata) ate(des2, data = simdata) ## Error in .weights_calc(design = design, target = \"ate\", dichotomy = dichotomy, : To calculate weights, treatment must either be 0/1 binary, ##  or the Design must have a dichotomy."},{"path":"www.github.com/dev/articles/not-for-cran/non-binary-weights.html","id":"applying-a-dichotomy","dir":"Articles > Not-for-cran","previous_headings":"Non-binary Treatment","what":"Applying a dichotomy","title":"Applying Dichotomies to Non-Binary Treatments","text":"Instead, need define dichotomy. dichotomy presented formula, left-hand side logical statement defining inclusion treatment group, rihgt-hand side logical statement defining inclusion control group. example, defines units assignment dose 200 treated units, units assignment dose 200 control units. . can used define either group inverse . example, dichotomy defined either Note units need assigned treatment control; units captured either logical statement assumed excluded trial. dichotomy, units assignment 100 considered trial. Let’s see passed ate()/ett() functions: first four units assignment dose 50, notice corresponding weight 0 last example. Alternatively, place dichotomy directly Design object instead.","code":"dose > 200 ~ dose <= 200 dose > 200 ~ . . ~ dose <= 200 dose > 200 ~ dose <= 200 & dose >= 100 head(ate(des2, data = simdata,          dichotomy = dose > 200 ~ dose <= 200)) ## [1] 1.666667 1.666667 1.666667 1.666667 2.500000 2.500000 head(ate(des2, data = simdata,          dichotomy = dose > 200 ~ .)) ## [1] 1.666667 1.666667 1.666667 1.666667 2.500000 2.500000 head(ate(des2, data = simdata,          dichotomy = .~ dose <= 200)) ## [1] 1.666667 1.666667 1.666667 1.666667 2.500000 2.500000 head(ate(des2, data = simdata,          dose > 200 ~ dose <= 200 & dose >= 100)) ## [1] 0 0 0 0 2 2 dichotomy(des2) <- dose > 200 ~ dose <= 200 & dose >= 100 head(ate(des2, data = simdata)) ## [1] 0 0 0 0 2 2 des3 <- rct_design(dose ~ cluster(cid1, cid2), data = simdata,                    dichotomy = dose > 200 ~ dose <= 200 & dose >= 100) head(ate(des3, data = simdata)) ## [1] 0 0 0 0 2 2"},{"path":"www.github.com/dev/articles/not-for-cran/non-binary-weights.html","id":"storage-of-non-binary-treatment","dir":"Articles > Not-for-cran","previous_headings":"Non-binary Treatment","what":"Storage of non-binary treatment","title":"Applying Dichotomies to Non-Binary Treatments","text":"design’s treatment dichotomized, keep orignal treatment place, add slot dichotomy: can obtain dichotomy dichotomy() function, apply treatment treatment() function ’s binary= argument.","code":"des3 ## Randomized Control Trial ##  ##  Structure Variables  ##  --------- ---------  ##  Treatment dose       ##  Cluster   cid1, cid2 ##  ## Dichotomy rule: dose > 200 ~ dose <= 200 & dose >= 100 dichotomy(des3) ## dose > 200 ~ dose <= 200 & dose >= 100 treatment(des3) ##    dose ## 1    50 ## 2   250 ## 3   100 ## 4   200 ## 5   300 ## 6    50 ## 7   250 ## 8   100 ## 9   200 ## 10  300 treatment(des3, binary = TRUE) ##    z__ ## 1   NA ## 2    1 ## 3    0 ## 4    0 ## 5    1 ## 6   NA ## 7    1 ## 8    0 ## 9    0 ## 10   1"},{"path":"www.github.com/dev/articles/not-for-cran/non-binary-weights.html","id":"helper-functions","dir":"Articles > Not-for-cran","previous_headings":"Non-binary Treatment","what":"Helper Functions","title":"Applying Dichotomies to Non-Binary Treatments","text":"three helper functions: has_binary_treatment() identifies whether Design binary treatment variable. is_dichotomized() identifies whether Design dichotomy applied . is_binary_or_dichotomized() identifies whether either Design binary dichotomy applied .","code":"c(is_dichotomized(des1),   has_binary_treatment(des1),   is_binary_or_dichotomized(des1)) ## [1] FALSE  TRUE  TRUE c(is_dichotomized(des2),   has_binary_treatment(des2),   is_binary_or_dichotomized(des2)) ## [1]  TRUE FALSE  TRUE"},{"path":"www.github.com/dev/articles/sandwich_infrastructure.html","id":"context","dir":"Articles","previous_headings":"","what":"Context","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"user specified comparative study design separately fitted covariance model. E.g.: data frames C Q_ describe covariance quasiexperimental samples, potentially different levels aggregation. instance C might give student data Q_ table classrooms. samples describe may disjoint, identical overlapping. Next uses lm() (perhaps lm()-wrapper ’ll offer) calculate directly adjusted1 estimates intention--treat effect: Q may Q_, Q_ may describe aggregates units described Q; offset similar predict(cmod, newdata=Q, type=\"response\") given; weights Horwitz-Thompson, inverse probability assignment type. point m class lm, additional information tucked away m[['model']]: data frame special columns (weights) offset(cov_adj(cmod)). writing, propertee package implements S4 class WeightedDesign extends base numeric vector type encodes information beyond unit weights necessary standard error calculations, arranges m[['model']][['(weights)']] type. note describes two planned classes appropriate m[['model']][['offset(cov_adj(cmod))']]: SandwichLayer, fallback option PreSandwichLayer, use call cov_adj() producing object able locate necessary information. Standard errors obtained subsequent steps, e.g.  “cid1” “cid2” column names clusters(des), altcid1 altcid2 corresponding column names C, keys_data_frame rows aligned C columns including “cid1” “cid2”. Either way, m coerced class DirectAdjusted, acquired @Design slot information des, m[['model']] column offset(cov_adj(cmod)) class SandwichLayer. Together objects contain necessary additional information perform standard error calculations : attend structure design, recorded des; propagate errors fitting covariance model cmod standard errors reported treat * gender coefficients.","code":"des <- obs_design(treat ~ strata(district) + cluster(school, classroom),                   data =Q_) cmod <- glm(promotion ~ pretest + gender,             family=binomial(), data = C) m <- lm(promotion ~ treat * gender, data = Q,         offset = cov_adj(cmod),         weights = ate(des)) coef(m) # spits out effect estimates vcov(as.DirectAdjusted(m)) m <- as.DirectAdjusted(m,                        by=list(cmod=c(cid1=altcid1, cid2=altcid2))                ) vcov(m) m <- as.DirectAdjusted(m,                        by=keys_data_frame) vcov(m)"},{"path":"www.github.com/dev/articles/sandwich_infrastructure.html","id":"formal-class-structure-proposal","dir":"Articles","previous_headings":"","what":"Formal class structure proposal","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"Like existing class WeightedDesign, PreSandwichLayer SandwichLayer classes extend base numeric vector type, numeric vectors (predictions) @.Data slots. PreSandwichLayer SandwichLayer also @prediction_gradient slot, numeric matrix dimension Regarding .SandwichLayer(): Turning PreSandwichLayer, x, SandwichLayer amounts providing mapping rows model.matrix(x) sandwich::estfun(x) units assignment recorded des. mapping recorded @keys data frame, many rows model.matrix(x) columns storing unit--assignment (clustering) information well Boolean variable indicating whether unit assignments found des. mapping can effected via expand.model.frame(x, vars, <...>). =NULL, vars vector names unit--assignment variables given design, desvars say. Otherwise named character vector giving crosswalk, second argument expand.model.frame() [desvars], names switched column names inthe data frame expand.model.frame() returns favor desvars. order vcov.DirectAdjusted(m) work, following functions must methods applicable m@fitted_covariance_model: model.matrix(), sandwich::estfun(), sandwich::bread(). similar requirements sandwich::vcovHC().","code":"c(nrow(@.Data), length(coef(fitted_covariance_model)))"},{"path":"www.github.com/dev/articles/sandwich_infrastructure.html","id":"basis-in-known-extensions-of-huber-white-setup-to-chained-estimators","dir":"Articles","previous_headings":"","what":"Basis in known extensions of Huber-White setup to chained estimators","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"reference formulas stacked estimating equations Carroll, Ruppert, Stefanski Crainiceanu (2006, p.373), covariance model psi functions (estimating equations) \\(\\phi(\\tilde{\\mathbf{Y}}, \\alpha)\\) parameters \\(\\alpha\\), Fisher information estimating-equation covariance matrices \\(A_{11}\\) \\(B_{11}\\) respectively; direct adjustment model’s \\(\\psi(\\tilde{\\mathbf{Y}}, \\tau, \\alpha)\\), treat coefficients \\(\\tau\\), sandwich components \\(A_{22}\\) \\(B_{22}\\). (symbols “\\(\\phi()\\)”, “\\(\\psi()\\)” “\\(\\alpha\\)” used Carroll et al use , “\\(\\tau\\)” corresponds “\\(\\mathcal{B}\\)”.) take \\(\\) range units assignment (clusters) elements2. Carroll et al development missing \\(n^{-1}\\) factors right equations defining \\(A_{n,\\, 11}, \\ldots, B_{n,\\, 22}\\). avoid ambiguities mapping external subroutines’ understanding “\\(n\\)”3, let’s address error leaving displays -, striking leading \\(n^{-1}\\) factors display (.34) subsequent expression \\(\\mathrm{var}(\\hat{\\mathcal{B}})\\): .e., turn B matrices sums means. Carroll et al’s formulas \\(A_{11}\\), \\(A_{21}\\) \\(A_{22}\\) apply, although design-based standard errors call different calculations \\(B_{11}\\), \\(B_{12}\\) \\(B_{22}\\). (get around putting multidecker sandwich together, ’ll need cognizant fact Bs means sums, ready compensate fact divided different \\(ns\\) figuring means \\(A_{11}\\) \\(A_{22}\\), example.) Denote clusters/units assignment represented covariance quasiexperimental samples \\(\\mathcal{C}\\) \\(\\mathcal{Q}\\) respectively.","code":""},{"path":"www.github.com/dev/articles/sandwich_infrastructure.html","id":"required-materials-for-se-calculations","dir":"Articles","previous_headings":"","what":"Required materials for SE calculations","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"estimate variances covariances \\(\\tau\\), ’ll need assemble following materials. Sufficient information \\(\\mathcal{C}\\) \\(\\mathcal{Q}\\) identify intersection \\(\\mathcal{C}\\cap\\mathcal{Q}\\), needed estimate \\(B_{21}\\); Matrices estimating functions \\(\\{\\phi(\\tilde{\\mathbf{Y}}_i; \\hat{\\alpha}): \\\\mathcal{C}\\cap\\mathcal{Q}\\}\\) \\(\\{\\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, \\hat{\\alpha}): \\\\mathcal{C}\\cap\\mathcal{Q}\\}\\), needed \\(B_{21}\\); quasiexperimental sample \\(\\mathcal{Q}\\), matrices \\[\\nabla_{\\alpha} \\{\\sum_{j \\}\\psi(\\tilde{\\mathbf{Y}}_j, \\hat{\\tau}, {\\alpha}): \\\\mathcal{Q}\\} \\vert_{\\alpha=\\hat\\alpha},\\] corresponding \\(A_{21}\\), “\\(j \\\\)” means “elements \\(j\\) cluster \\(\\)” “\\(\\sum_{j \\} \\psi(\\tilde{\\mathbf{Y}}_j, \\hat{\\tau}, {\\alpha})\\)” interpreted mean “\\(\\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, {\\alpha})\\)” clustering; Estimates direct adjustment model’s “bread matrix” \\((n_\\mathcal{Q}^{-1} A_{22})^{-1} = \\{\\frac{1}{\\# \\mathcal{Q}}\\nabla_\\tau \\sum_{\\\\mathcal{Q}} \\mathbb{E}[\\psi(\\tilde{\\mathbf{Y}}_i, \\tau, \\hat{\\alpha})] \\vert_{\\tau=\\hat\\tau}\\}^{-1}\\), .e. inverse Fisher information w.r.t. \\(\\tau\\) , along “meat matrix” \\(n_\\mathcal{Q}^{-1} B_{22} = n_\\mathcal{Q}^{-1} \\mathrm{Cov}[\\sum_{\\\\mathcal{Q}} \\psi(\\tilde{\\mathbf{Y}}_i, {\\tau}, {\\alpha})]_{({\\tau}, {\\alpha})=(\\hat{\\tau}, \\hat{\\alpha})}\\); covariance model’s bread matrix \\((n_\\mathcal{C}^{-1} \\hat{}_{11})^{-1} = \\{n_\\mathcal{C}^{-1}\\sum_{\\\\mathcal{C}} \\nabla_\\alpha [\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\}^{-1}\\); covariance estimation conventional “model-based” setup , estimates covariance model’s B matrix \\(n_\\mathcal{C}^{-1}B_{11} = n_\\mathcal{C}^{-1} \\mathrm{Cov}[\\sum_{\\\\mathcal{C}}\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\) (“clustered” covariance estimate). (5), observed information \\(n_\\mathcal{C}^{-1}\\sum_{\\\\mathcal{C}} \\nabla_\\alpha [\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\) preferred “observed expected” information, \\(n_\\mathcal{C}^{-1}\\sum_{\\\\mathcal{C}} \\nabla_\\alpha \\mathbb{E} [\\phi(\\tilde{\\mathbf{Y}}_i; {\\alpha})]_{\\alpha=\\hat\\alpha}\\), observed information agnostic whether expectation calculated conditioning potential outcomes, ie finite population perspective, conditioning treatment assignment, model based perspective. special case quantile regression4, observed information isn’t ordinarily used standard error calculations, may take get. Regarding (6), \\(B_{11}\\) needed design-based standard errors, setting observations outside quasiexperimental sample contribute covariance model’s B matrix. quasiexperimental sample observations , ’ll access direct adjustment model fit. also \\(\\{\\phi(\\tilde{\\mathbf{Y}}_i; \\hat{\\alpha}): \\\\mathcal{Q}\\}\\) \\(\\{\\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, \\hat{\\alpha}): \\\\mathcal{Q}\\}\\), can use materials estimate \\(B_{12}\\) \\(B_{22}\\).","code":""},{"path":"www.github.com/dev/articles/sandwich_infrastructure.html","id":"software-implementation-comments-on-16-above-including-contents-of-sandwichveganlayerlayerkit-objects","dir":"Articles","previous_headings":"","what":"Software implementation comments on 1–6 above, including contents of {Sandwich/Vegan}{Layer/LayerKit} objects","title":"Data structures to support standard error calculations for direct adjustment assisted by a prior covariance model","text":"1. SandwichLayer object s_l_o carries keys data frame identify rows model.matrix(s_l_o) units assignment (named separate Design object). association can many-one (one-many); required named units appear design. covmod won’t aware cluster associations, assembling info runtime calls trickery, well means users override trickery directly provide key variables design need. falsy value in_Q column keys indicates observation appearing Design object. 2. Estimating functions may need aggregated (summed) cluster level calculation \\(B_{21}\\). dedicated function calculate \\(B_{21}\\) cluster-aggregated estimating function matrices. 3. PreSandwichLayer SandwichLayer @prediction_gradient slot numeric matrix. matrix many rows entries .Data vector, many columns estimating equations. @prediction_gradient slot carries \\(\\{\\nabla_\\alpha f_{\\alpha}(\\tilde{\\mathbf{Y}}_j)|_\\alpha=\\hat\\alpha\\}\\), \\(j\\) ranges rows Q – elements clusters distinction exists – \\(f_\\alpha(\\mathbf{Y})\\) represents prediction data \\(\\mathbf{Y}\\) fitted model class(cov_mod) parameters \\(\\alpha\\). \\(\\psi()\\)’s use “predictions” covariance model, , first derivative covariance model predictions applied data \\(\\mathcal{Q}\\) provide sufficient information covariance model complete calculation \\(\\{\\nabla_{\\alpha}  \\psi(\\tilde{\\mathbf{Y}}_i, \\hat{\\tau}, {\\alpha}) \\vert_{\\alpha=\\hat\\alpha}: \\\\mathcal{Q}\\}\\). glm similarly typed objects cmod, predictions joint function family(cmod) model.matrix generated process creating predictions cmod. 4. SandwichLayer class isn’t implicated (4). can take extant calculations direct adjustment model’s information matrix, proviso keep track whatever scaling calculations may applied. design-based SEs ’ll need B matrix calculation. model-based SEs can plug extant routines \\(B_{22}\\) also, careful ensure clustering units assignment (named Design object). Scaling matrices default conventions sandwich package. (haven’t considered whether use HC0–3 etc \\(B_{22}\\) calls corresponding adjustment estimation \\(B_{21}\\) /\\(B_{11}\\), whether heuristics animating adjustments make sense context.) 5. sandwich::bread() used retrieve \\(A_{11}^{-1}\\). can take extant calculations covariance model’s information matrix, defaulting scaling conventions implemented sandwich package. 6. sandwich::meatCL() used retrieve \\(B_{11}\\). now try implement HC0 & HC1. (haven’t considered whether use HC0–3 etc \\(B_{11}\\) calls corresponding adjustment estimation \\(B_{21}\\) /\\(B_{22}\\), whether heuristics animating adjustments make sense context.)","code":""},{"path":[]},{"path":"www.github.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josh Errickson. Maintainer, author. Josh Wasserman. Author. Mark Fredrickson. Contributor. Xinhe Wang. Contributor. Ben Hansen. Author.","code":""},{"path":"www.github.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Errickson J, Wasserman J, Hansen B (2024). propertee: Design-Informed Direct Adjustment Optional Prior Covariance Adjustment. R package version 0.3.8.9002, https://github.com/benbhansen-stats/propertee.","code":"@Manual{,   title = {propertee: Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment},   author = {Josh Errickson and Josh Wasserman and Ben Hansen},   year = {2024},   note = {R package version 0.3.8.9002},   url = {https://github.com/benbhansen-stats/propertee}, }"},{"path":"www.github.com/dev/index.html","id":"propertee-prognostic-regression-offsets-with-propagation-of-errors-for-treatment-effect-estimation-","dir":"","previous_headings":"","what":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","title":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","text":"Propertee enables flexible direct adjustment design-informed standard errors optional prior covariance adjustment. Random trials often utilize units assignment blocking assigning treatment status way simplify implementation. design information must utilized future analyses. Using Propertee, user can generate Design object keep track design structure. (Also supported observational studies (obs_design) regression discontinuity designs (rdd_design requires forcing() variable well.) order pass design information model using weights= argument, functions ett() ate() used convert Design numeric vector Design object attribute. Note Design created teacher level data (teacherdata), analysis carried student level (studentdata); ate() (alternative ett()) expand weights appropriately. Optionally, can also include covariance adjustment model cov_adj() function.","code":"des <- rct_design(txt ~ unit_of_assignment(teacher) + block(school), data = teacherdata) lm(y ~ txt, data = studentdata, weights = ate(des)) covadjmod <- lm(y ~ x1 + x2 + ..., data = studentdata, subset = !txt) lm(y ~ txt, studentdata, weights = ett(des),    offset = cov_adj(covadjmod, data = studentdata) )"},{"path":"www.github.com/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","text":"may use RStudio develop propertee, opening propertee.Rproj file. suggest ensure required dependencies installed running prefer changes include unit tests demonstrating problem showing new feature added. test suite uses testthat package write run tests. (Please ensure latest version testthat (least v0.11.0), older versions stored tests different directory, may test properly.) See tests/testthat directory examples. can run test suite via Build -> Test Package. New features include inline Roxygen documentation. can generate .Rd documents Roxygen code using Build -> Document, using Make describe . Finally, can use Build -> Build Reload Build -> Clean Rebuild load updated version propertee current RStudio session. Alternatively, install developed version permanently, use Build -> Build Binary Version, followed can revert back current CRAN version prefer use RStudio, can develop using Make. make test: Run full test suite. make document: Update documentation Roxygen inline comments. make interactive: Start interactive session propertee loaded. (make interactive-emacs starts session inside emacs.) make check: Run R CMD check package make build: Build binary package. make vignette: Builds vignettes vignettes/ directory make clean: Removes files built make vignette, make document make    check. generally necessary, can useful debugging. change ready, make pull request github.","code":"devtools::install_deps(dependencies = TRUE) install.packages(\"../propertee_VERSION.tgz\", repo=NULL) remove.packages(\"propertee\") install.packages(\"propertee\")"},{"path":"www.github.com/dev/index.html","id":"white-space-changes","dir":"","previous_headings":"Contributing","what":"White space changes","title":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","text":"ease searches commit history: Commit white space changes occur lines substantive changes. Avoid committing trailing white spaces. RStudio, options enable automatically removing white space end lines trailing whitespaces Settings, Code -> Saving. emacs, can remove white spaces ends lines M-x delete-trailing-whitespace. automatically whenever save, add following init file: remove trailing lines saving, can also add :","code":"(add-hook 'before-save-hook (lambda ()                              (delete-trailing-whitespace))) (setq delete-trailing-lines t)"},{"path":"www.github.com/dev/index.html","id":"internal-functions","dir":"","previous_headings":"Contributing","what":"Internal functions","title":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","text":"internal functions (use ) prefaced “.” (e.g. .myfunc <- function()). Internal functions documented using roxygen described , given @keywords internal tag ensure get indexed. (Generally internally functions @export’d exceptions may arise.) period development, documenting internal function, add “_pkgdown.yml” file appropriate category. propertee goes public, remove .","code":""},{"path":"www.github.com/dev/index.html","id":"referring-to-functions","dir":"","previous_headings":"Contributing","what":"Referring to functions","title":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","text":"documentation refers another function (internal package otherwise), please include trailing (), help pkgdown provide appropriate link (see https://pkgdown.r-lib.org/articles/linking.html). E.g. \\code{lm()} \\code{cov_adj()} \\code{lme4::lmer()}.","code":""},{"path":"www.github.com/dev/index.html","id":"vignettes-or-simulations","dir":"","previous_headings":"Contributing","what":"Vignettes or simulations","title":"Design-Informed Direct Adjustment with Optional Prior Covariance Adjustment","text":"Vignettes simulations go /vignettes/ folder. Anything built R check (especially anything builds slowly, introduces dependencies specified DESCRIPTION) go /vignettes/--cran. (--cran folder .Rbuildignore file.) Note .Rmd files /vignettes/ get built building reference site. exclude .Rmd file, needs start “_“. E.g. myslowvignette.Rmd -> _myslowvignette.Rmd.","code":""},{"path":"www.github.com/dev/reference/AssignedAliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Treatment from Design — assigned","title":"Obtain Treatment from Design — assigned","text":"included predictor model formula weights (via ate() ett() passed weights= argument) covariance adjustment model (via cov_adj() passed offset= argument) included, extract treatment variable Design.","code":""},{"path":"www.github.com/dev/reference/AssignedAliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Treatment from Design — assigned","text":"","code":"assigned(design = NULL, data = NULL)  adopters(design = NULL, data = NULL)  a.(design = NULL, data = NULL)  z.(design = NULL, data = NULL)"},{"path":"www.github.com/dev/reference/AssignedAliases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Treatment from Design — assigned","text":"design Optional Design. Design identified model (usually neither weights (ate() ett()) covariate adjustment model (cov_adj()) found), Design can passed diretly. data Optional data set. default assigned() attempt identify appropriate data, fails (want overwrite ), can pass data .","code":""},{"path":"www.github.com/dev/reference/AssignedAliases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Treatment from Design — assigned","text":"treatment variable placed regression formula.","code":""},{"path":"www.github.com/dev/reference/AssignedAliases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain Treatment from Design — assigned","text":"assigned() can used situation, useful scenarios treatment variable non-binary Design contains Dichotomy. example, say q 3-level ordinal treatment variable, binary comparison interest captured dichotomy = q == 3 ~ q < 3. fit model including q predictor, e.g. lm(y ~ q, ...), lm treat q full ordinal variable. hand, calling lm(y ~ assigned(), weights = ate(des), ...), assigned() generate appropriate binary variable allow estimation treatment effects. called outside model call without data argument, extract treatment design.","code":""},{"path":"www.github.com/dev/reference/DesignSpecials.html","id":null,"dir":"Reference","previous_headings":"","what":"Special terms in Design creation formula — unit_of_assignment","title":"Special terms in Design creation formula — unit_of_assignment","text":"special functions used definition Design objects. identify units assignment, blocks forcing variables. never used outside formula argument obs_design(), rct_design(), rd_design().","code":""},{"path":"www.github.com/dev/reference/DesignSpecials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special terms in Design creation formula — unit_of_assignment","text":"","code":"unit_of_assignment(...)  unitid(...)  cluster(...)  uoa(...)  block(...)  forcing(...)"},{"path":"www.github.com/dev/reference/DesignSpecials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special terms in Design creation formula — unit_of_assignment","text":"... number variables length.","code":""},{"path":"www.github.com/dev/reference/DesignSpecials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Special terms in Design creation formula — unit_of_assignment","text":"variables appropriate labels. use outside inclusion formula argument obs_design(), rct_design(), rd_design()","code":""},{"path":"www.github.com/dev/reference/DesignSpecials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Special terms in Design creation formula — unit_of_assignment","text":"functions use outside formula creating Design. unit_of_assignment, uoa, cluster unitid synonyms; must include one one Design. choice use impact analysis, output name stored element Design. Accessors/ replacers (units_of_assignment(), unitids(), clusters()) respect choice made point creation Design, appropriate function work. See rct_design(), obs_design(), rd_design() examples usage.","code":""},{"path":"www.github.com/dev/reference/Design_extract_dichotomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace dichotomy — dichotomy","title":"Extract or replace dichotomy — dichotomy","text":"Used add, modify, read dichotomy attached Design.","code":""},{"path":"www.github.com/dev/reference/Design_extract_dichotomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace dichotomy — dichotomy","text":"","code":"dichotomy(x)  # S4 method for Design dichotomy(x)  dichotomy(x) <- value  # S4 method for Design dichotomy(x) <- value"},{"path":"www.github.com/dev/reference/Design_extract_dichotomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace dichotomy — dichotomy","text":"x Design object value replacement dichotomy formula, NULL remove","code":""},{"path":"www.github.com/dev/reference/Design_extract_dichotomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace dichotomy — dichotomy","text":"dichomization formula, Design dichomization replaces x.","code":""},{"path":"www.github.com/dev/reference/Design_extract_dichotomy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or replace dichotomy — dichotomy","text":"dichotomy specified formula consisting conditional statement left-hand side (identifying treatment levels associated \"treatment\") right hand side (identifying treatment levels associated \"control\"). example, treatment variable called dose, might write: dichotomy = dose > 250 ~ dose <= 250 period (.) can used assign units assignment. example, written example dichotomy = dose > 250 ~ . dichotomy = . ~ dose <= 250 dichotomy formula supports Relational Operators, Logical Operators, %%. conditionals need assign values treatment control treatment, example, dose > 300 ~ dose < 200 assign 200 <= dose <= 300 either treatment control. equivalent manually generating binary variable NA whenever dose 200 300. Units assigned treatment control maintained Design proper standard error calculations. Note can specify conditional logic treatment directly Design creation (e.g. rct_design(dose > 250 ~ unitOfAssignment(...) strongly suggest instead passing treatment variable directly using dichotomy. Otherwise changing dichotomy require re-creating Design, instead simply using dichotomy(design) <- passing dichotomy ate() ett().","code":""},{"path":"www.github.com/dev/reference/Design_extractreplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessors and Replacers for Design objects — treatment","title":"Accessors and Replacers for Design objects — treatment","text":"Allows access elements define Design, enabling extraction replacement.","code":""},{"path":"www.github.com/dev/reference/Design_extractreplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessors and Replacers for Design objects — treatment","text":"","code":"treatment(x, binary = FALSE, newdata = NULL, by = NULL, ...)  # S4 method for Design treatment(x, binary = FALSE, newdata = NULL, by = NULL, ...)  treatment(x) <- value  # S4 method for Design treatment(x) <- value  units_of_assignment(x, newdata = NULL, by = NULL)  # S4 method for Design units_of_assignment(x, newdata = NULL, by = NULL)  units_of_assignment(x) <- value  # S4 method for Design units_of_assignment(x) <- value  clusters(x, newdata = NULL, by = NULL)  # S4 method for Design clusters(x, newdata = NULL, by = NULL)  clusters(x) <- value  # S4 method for Design clusters(x) <- value  unitids(x)  # S4 method for Design unitids(x)  unitids(x) <- value  # S4 method for Design unitids(x) <- value  blocks(x, newdata = NULL, by = NULL)  # S4 method for Design blocks(x, newdata = NULL, by = NULL)  blocks(x) <- value  # S4 method for Design blocks(x) <- value  has_blocks(x)  forcings(x, newdata = NULL, by = NULL)  # S4 method for Design forcings(x, newdata = NULL, by = NULL)  forcings(x) <- value  # S4 method for Design forcings(x) <- value"},{"path":"www.github.com/dev/reference/Design_extractreplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessors and Replacers for Design objects — treatment","text":"x Design object binary Controls whether dichotomy applied returning treatment variable. See Details. newdata optional; additional data.frame. passed, unit assignment variable found newdata, requested variable type unit newdata returned. See argument name unit assignment differs. optional; named vector list connecting names unit assignment/unitid/cluster variables x unit assignment/unitid/cluster variables data. Names represent variables x; values represent variables newdata. needed variable names differ. ... ignored. value replacement. Either vector/matrix appropriate dimension, named data.frame renaming variable well. See Details.","code":""},{"path":"www.github.com/dev/reference/Design_extractreplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessors and Replacers for Design objects — treatment","text":"data.frame containing requested variable, updated Design. treatment() works slightly differently, see Details.","code":""},{"path":"www.github.com/dev/reference/Design_extractreplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessors and Replacers for Design objects — treatment","text":"treatment(), argument binary FALSE, treatment variable passed Design returned one-column data.frame regardless whether binary x dichotomy binary = TRUE passed, Design either binary treatment variable, dichotomy, binary one-column data.frame returned. Design access binary treatment (non-binary treatment dichotomy specified), passing binary = TRUE error. binary = \"ifany\" permissible; returning dichotomized treatment variable @dichotomy exists, otherwise returning original treatment without error. one-column data.frame returned treatment() named entered Design creation, dichotomy Design, column name \"__z\" try avoid name conflicts. value using replacers, replacement must number rows Design (number units assignment). number columns can differ (e.g. Design defined two variable uniquely identifying blocks, can replace single variable uniquely identifying blocks, long respects restrictions.) replacement value data.frame, name columns used new variable names. replacement matrix vector, original names retained. reducing number variables (e.g., moving two variables uniquely identifying single variable), appropriate number variable names retained. increasing number variables, data.frame names must provided.","code":""},{"path":"www.github.com/dev/reference/Design_extractreplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessors and Replacers for Design objects — treatment","text":"","code":"data(simdata) des <- obs_design(z ~ unit_of_assignment(cid1, cid2), data = simdata) blocks(des) # empty #> data frame with 0 columns and 10 rows blocks(des) <- data.frame(blks = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5)) blocks(des) #>    blks #> 1     1 #> 2     1 #> 3     2 #> 4     2 #> 5     3 #> 6     3 #> 7     4 #> 8     4 #> 9     5 #> 10    5 blocks(des) <- c(5, 5, 4, 4, 3, 3, 2, 2, 1, 1) blocks(des) # notice that variable is not renamed #>    blks #> 1     5 #> 2     5 #> 3     4 #> 4     4 #> 5     3 #> 6     3 #> 7     2 #> 8     2 #> 9     1 #> 10    1"},{"path":"www.github.com/dev/reference/Design_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Design object with the given specifications. — rct_design","title":"Generates a Design object with the given specifications. — rct_design","text":"Generate randomized control treatment Design (rct_design()), observational Design (obs_design()), regression discontinuity Design (rd_design()).","code":""},{"path":"www.github.com/dev/reference/Design_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Design object with the given specifications. — rct_design","text":"","code":"rct_design(formula, data, subset = NULL, dichotomy = NULL, na.fail = TRUE)  rd_design(formula, data, subset = NULL, dichotomy = NULL, na.fail = TRUE)  obs_design(formula, data, subset = NULL, dichotomy = NULL, na.fail = TRUE)"},{"path":"www.github.com/dev/reference/Design_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Design object with the given specifications. — rct_design","text":"formula formula defining Design components. See Details specification. data data set build Design. Note data need used estimate treatment effect; rather data passed contain information units treatment assignment (opposed units analysis). subset optional, subset data creating Design object dichotomy optional, formula defining dichotomy treatment variable already 0/1 logical. See dichotomy() function details. na.fail TRUE (default), missing data found variables specified formula (excluding treatment) trigger error. FALSE, non-complete cases dropped creation Design","code":""},{"path":"www.github.com/dev/reference/Design_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Design object with the given specifications. — rct_design","text":"Design object requested type use analysis.","code":""},{"path":"www.github.com/dev/reference/Design_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a Design object with the given specifications. — rct_design","text":"formula must include exactly one unit_of_assignment() identify units assignment (one variables). (uoa, cluster, unitid synonyms unit_of_assignment; choice impact analysis.) defining rd_design, formula must also include forcing() entry. formula may optionally include block() well. can take multiple variables, e.g. pass household ID individual ID unit assignment, use uoa(hhid,   iid) uoa(hhid) + uoa(iid). treatment variable passed left-hand side formula can either logical, numeric, character. anything else, attempts conversion one types (example, factor ordered converted numeric levels numeric, otherwise character). treatment logical numeric values 0 1, order generate weights ate() ett(), dichotomy argument must used identify treatment control groups. Design creation functions (rct_design(), rd_design(), obs_design()) support dichotomy argument, instead dichotomy can passed ett() ate() directly. See dichotomy() details specifying dichotomy.","code":""},{"path":"www.github.com/dev/reference/Design_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Design object with the given specifications. — rct_design","text":"","code":"data(simdata) des <- rct_design(z ~ unit_of_assignment(cid1, cid2) + block(bid),                   data = simdata)  data(schooldata) des <- obs_design(treatment ~ unit_of_assignment(schoolid) + block(state),                   data = schooldata)"},{"path":"www.github.com/dev/reference/PreSandwichLayer.show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"Show PreSandwichLayer SandwichLayer","code":""},{"path":"www.github.com/dev/reference/PreSandwichLayer.show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"","code":"# S4 method for PreSandwichLayer show(object)"},{"path":"www.github.com/dev/reference/PreSandwichLayer.show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"object PreSandwichLayer object","code":""},{"path":"www.github.com/dev/reference/PreSandwichLayer.show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a PreSandwichLayer or SandwichLayer — show,PreSandwichLayer-method","text":"invisible copy object","code":""},{"path":"www.github.com/dev/reference/PreSandwichLayer.subset.html","id":null,"dir":"Reference","previous_headings":"","what":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"PreSandwichLayer SandwichLayer subsetting","code":""},{"path":"www.github.com/dev/reference/PreSandwichLayer.subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"","code":"# S4 method for PreSandwichLayer subset(x, subset)  # S4 method for PreSandwichLayer [(x, i)"},{"path":"www.github.com/dev/reference/PreSandwichLayer.subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"x PreSandwichLayer object subset Logical vector identifying values keep drop indices specifying elements extract replace. See help(\"[\") details.","code":""},{"path":"www.github.com/dev/reference/PreSandwichLayer.subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PreSandwichLayer and SandwichLayer subsetting — subset,PreSandwichLayer-method","text":"x subset x subset ","code":""},{"path":"www.github.com/dev/reference/STARdata.html","id":null,"dir":"Reference","previous_headings":"","what":"STAR data — STARdata","title":"STAR data — STARdata","text":"STAR data","code":""},{"path":"www.github.com/dev/reference/STARdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STAR data — STARdata","text":"","code":"STARdata"},{"path":"www.github.com/dev/reference/STARdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"STAR data — STARdata","text":"STAR data set ???","code":""},{"path":"www.github.com/dev/reference/WeightCreators.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Direct Adjusted Weights — ett","title":"Generate Direct Adjusted Weights — ett","text":"Generate Direct Adjusted Weights","code":""},{"path":"www.github.com/dev/reference/WeightCreators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Direct Adjusted Weights — ett","text":"","code":"ett(design = NULL, dichotomy = NULL, by = NULL, data = NULL)  ate(design = NULL, dichotomy = NULL, by = NULL, data = NULL)"},{"path":"www.github.com/dev/reference/WeightCreators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Direct Adjusted Weights — ett","text":"design Design object created one rct_design(), rd_design(), obs_design(). dichotomy optional; formula defining dichotomy treatment variable already 0/1. See details help rct_design() e.g. details. optional; named vector list connecting names unit assignment/ variables design unit assignment/cluster variables data. Names represent variables Design; values represent variables data. needed variable names differ. data optionally data analysis performed . May excluded functions included weights argument model.","code":""},{"path":"www.github.com/dev/reference/WeightCreators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Direct Adjusted Weights — ett","text":"WeightedDesign object","code":""},{"path":"www.github.com/dev/reference/WeightCreators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Direct Adjusted Weights — ett","text":"block design, Weights generated function ratio number treated units block versus total number units block. blocks ratio 0 1 (, units block treatment status), weights 0. effect removes target population block basis estimating either means treatment means control. block missing given observation, weight 0 applied.","code":""},{"path":"www.github.com/dev/reference/WeightedDesign.subset.html","id":null,"dir":"Reference","previous_headings":"","what":"WeightedDesign subsetting — subset,WeightedDesign-method","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"WeightedDesign subsetting","code":""},{"path":"www.github.com/dev/reference/WeightedDesign.subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign subset(x, subset)  # S4 method for WeightedDesign [(x, i)"},{"path":"www.github.com/dev/reference/WeightedDesign.subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"x WeightedDesign object subset Logical vector identifying values keep drop indices specifying elements extract replace. See help(\"[\") details.","code":""},{"path":"www.github.com/dev/reference/WeightedDesign.subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WeightedDesign subsetting — subset,WeightedDesign-method","text":"x subset x subset ","code":""},{"path":"www.github.com/dev/reference/WeightedDesignOps.html","id":null,"dir":"Reference","previous_headings":"","what":"WeightedDesign Ops — +,WeightedDesign,numeric-method","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"WeightedDesigns support addition subtraction, support reasonable operations.","code":""},{"path":"www.github.com/dev/reference/WeightedDesignOps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"","code":"# S4 method for WeightedDesign,numeric +(e1, e2)  # S4 method for numeric,WeightedDesign +(e1, e2)  # S4 method for WeightedDesign,numeric -(e1, e2)  # S4 method for numeric,WeightedDesign -(e1, e2)  # S4 method for WeightedDesign,numeric *(e1, e2)  # S4 method for numeric,WeightedDesign *(e1, e2)  # S4 method for WeightedDesign,numeric /(e1, e2)  # S4 method for numeric,WeightedDesign /(e1, e2)"},{"path":"www.github.com/dev/reference/WeightedDesignOps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WeightedDesign Ops — +,WeightedDesign,numeric-method","text":"e1 WeightedDesign numeric e2 numeric WeightedDesign","code":""},{"path":"www.github.com/dev/reference/areg.center.html","id":null,"dir":"Reference","previous_headings":"","what":"Group-center akin to Stata's areg — areg.center","title":"Group-center akin to Stata's areg — areg.center","text":"Stata documentation: areg begins recalculating Y X mean 0 within groups specified absorb(). overall mean variable added back .","code":""},{"path":"www.github.com/dev/reference/areg.center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group-center akin to Stata's areg — areg.center","text":"","code":"areg.center(mm, grp, wts = NULL, grand_mean_center = FALSE)"},{"path":"www.github.com/dev/reference/areg.center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group-center akin to Stata's areg — areg.center","text":"mm Matrix variables center grp Group center wts Optional weights grand_mean_center Optional center output mean(var)","code":""},{"path":"www.github.com/dev/reference/areg.center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group-center akin to Stata's areg — areg.center","text":"Vector group-centered values","code":""},{"path":"www.github.com/dev/reference/as.SandwichLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"Convert PreSandwichLayer SandwichLayer via Design Object","code":""},{"path":"www.github.com/dev/reference/as.SandwichLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"","code":"as.SandwichLayer(x, design, by = NULL, Q_data = NULL)"},{"path":"www.github.com/dev/reference/as.SandwichLayer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"x PreSandwichLayer object. design Design object created one rct_design(), rd_design(), obs_design(). character vector list; optional. Specifies column names appear covariance adjustment quasiexperimental dataframes can used match observations case two overlap. Names represent variables Design; values represent variables data. Defaults NULL, case unit assignment columns indicated Design used match observations samples. Q_data optional; quasiexperimental dataframe allow merging covariance adjustment data via argument. NULL Q_data NULL, function search call stack find quasiexperimental data; search unsuccessful, function use design data attempt merge.","code":""},{"path":"www.github.com/dev/reference/as.SandwichLayer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a PreSandwichLayer to a SandwichLayer via a Design Object — as.SandwichLayer","text":"SandwichLayer object","code":""},{"path":"www.github.com/dev/reference/as_lmitt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert lm object into DirectAdjusted — as.lmitt","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"Convert lm object DirectAdjusted","code":""},{"path":"www.github.com/dev/reference/as_lmitt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"","code":"as.lmitt(x, design = NULL)  as.DirectAdjusted(x, design = NULL)"},{"path":"www.github.com/dev/reference/as_lmitt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"x lm object weights containing WeightedDesign design Optional, explicitly specify Design used. Design specified elsewhere x (e.g. passed argument ate(), ett(), cov_adj() assigned()) found automatically need passed well. (different Design objects passed (either lm weights covariance adjustment, argument), error produced.)","code":""},{"path":"www.github.com/dev/reference/as_lmitt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert lm object into DirectAdjusted — as.lmitt","text":"DirectAdjusted object","code":""},{"path":"www.github.com/dev/reference/bread.DirectAdjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract bread matrix from a DirectAdjusted model fit — bread.DirectAdjusted","title":"Extract bread matrix from a DirectAdjusted model fit — bread.DirectAdjusted","text":"Extract bread matrix DirectAdjusted model fit","code":""},{"path":"www.github.com/dev/reference/bread.DirectAdjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract bread matrix from a DirectAdjusted model fit — bread.DirectAdjusted","text":"","code":"# S3 method for DirectAdjusted bread(x, ...)"},{"path":"www.github.com/dev/reference/bread.DirectAdjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract bread matrix from a DirectAdjusted model fit — bread.DirectAdjusted","text":"x fitted DirectAdjusted model ... Arguments passed .get_a22_inverse","code":""},{"path":"www.github.com/dev/reference/bread.DirectAdjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract bread matrix from a DirectAdjusted model fit — bread.DirectAdjusted","text":".get_a22_inverse()/.get_tilde_a22_inverse(): \\(k\\times k\\) matrix k denotes number parameters ITT effect model .get_a11_inverse(): \\(p\\times p\\) matrix \\(p\\) dimension covariance adjustment model including intercept .get_a21()/.get_tilde_a21(): \\(k\\times p\\) matrix number rows given dimension ITT effect estimating equations number columns given number terms covariance adjustment model","code":""},{"path":"www.github.com/dev/reference/bread.DirectAdjusted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract bread matrix from a DirectAdjusted model fit — bread.DirectAdjusted","text":"function thin wrapper around .get_tilde_a22_inverse().","code":""},{"path":"www.github.com/dev/reference/bread.glmrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract bread matrix from an lmrob() fit — bread.glmrob","title":"Extract bread matrix from an lmrob() fit — bread.glmrob","text":"Extract bread matrix lmrob() fit","code":""},{"path":"www.github.com/dev/reference/bread.glmrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract bread matrix from an lmrob() fit — bread.glmrob","text":"","code":"# S3 method for glmrob bread(x, ...)"},{"path":"www.github.com/dev/reference/bread.glmrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract bread matrix from an lmrob() fit — bread.glmrob","text":"x fitted lmrob object ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/bread.glmrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract bread matrix from an lmrob() fit — bread.glmrob","text":"Details needed","code":""},{"path":"www.github.com/dev/reference/c-WeightedDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate weights — c,WeightedDesign-method","title":"Concatenate weights — c,WeightedDesign-method","text":"Given several variations weights generated single Design, combine single weight.","code":""},{"path":"www.github.com/dev/reference/c-WeightedDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate weights — c,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign c(x, ..., force_dichotomy_equal = FALSE)"},{"path":"www.github.com/dev/reference/c-WeightedDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate weights — c,WeightedDesign-method","text":"x WeightedDesign object equivalent Design .... ... number WeightedDesign objects equivalent Design x. force_dichotomy_equal FALSE (default), Designs considered equivalent even dichotomy differs. TRUE, @dichotomy must also equal.","code":""},{"path":"www.github.com/dev/reference/c-WeightedDesign-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Concatenate weights — c,WeightedDesign-method","text":"Concatenating WeightedDesigns c() requires individual WeightedDesigns come Design (except dichotomy, see ) target (e.g created ate() created ett(), mixing--matching). arguments c() must WeightedDesign. One exception concatenting WeightedDesigns Design different dichotomies. may cases treatment continuous multiple levels, need combine weights general design, different dichotomys. Therefore multiple WeightedDesigns can combined identical except @dichotomy slots. resulting object CombinedWeightedDesign tracks individual dichotomy.","code":""},{"path":"www.github.com/dev/reference/confint.DirectAdjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-Covariance matrix — confint.DirectAdjusted","title":"Variance-Covariance matrix — confint.DirectAdjusted","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/dev/reference/confint.DirectAdjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-Covariance matrix — confint.DirectAdjusted","text":"","code":"# S3 method for DirectAdjusted confint(object, parm, level = 0.95, ...)"},{"path":"www.github.com/dev/reference/confint.DirectAdjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-Covariance matrix — confint.DirectAdjusted","text":"object DirectAdjusted parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... Add'l arguments","code":""},{"path":"www.github.com/dev/reference/confint.DirectAdjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-Covariance matrix — confint.DirectAdjusted","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/dev/reference/cov_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance Adjustment for Treatment Estimation — cov_adj","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"Prior obtaining predicted values, cov_adj() tries identify treatment variable (specified design) replace reference level. treatment binary, FALSE. treatment numeric, smallest non-negative value (note means 0/1 binary, uses 0). Factor treatments currently supported, add , use first level() factor, may change using relevel() adjust.","code":""},{"path":"www.github.com/dev/reference/cov_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"","code":"cov_adj(model, newdata = NULL, design = NULL, by = NULL)"},{"path":"www.github.com/dev/reference/cov_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"model model inherits glm, lm, robustbase::lmrob object newdata Optional; data.frame new data design Optional Design. provided, function search call stack find one. optional; vector list connecting names unit assignment/unitid/cluster variables design unit assignment/unitid/cluster variables covariance adjustment data. named vector, names represent variables Design object values represent variables data. needed : columns related design used merging covariance adjustment quasiexperimental samples, 2) column names differ datasets used fit models.","code":""},{"path":"www.github.com/dev/reference/cov_adj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"SandwichLayer PreSandwichLayer object; former design provided design can found call stack, otherwise latter. values represent covariance adjustments observations newdata, newdata provided found argument lmitt.formula, fitted values model. length output cov_adj() varies depending logic.","code":""},{"path":"www.github.com/dev/reference/cov_adj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariance Adjustment for Treatment Estimation — cov_adj","text":"","code":"data(STARdata) STARdata$treatment <- STARdata$stark == \"small\" STARdata$treatment[is.na(STARdata$treatment)] <- FALSE STARdata$studentid <- as.character(seq_len(nrow(STARdata)))  covariance_y0_read <- lm(readk ~ gender + ethnicity + lunchk +                                  ladderk + experiencek + tethnicityk,                          data = STARdata, subset = !treatment)  STARdata_design <- rct_design(treatment ~ cluster(studentid), data = STARdata) STARdata_ate    <- ate(STARdata_design, data = STARdata) STARdata_ett    <- ett(STARdata_design, data = STARdata)  ett_read <- lm(readk ~ treatment,                offset = cov_adj(covariance_y0_read, newdata = STARdata),                data = STARdata,                weights = STARdata_ett) #> Warning: Some covariance adjustments are NA; be careful of dropping these observations when fitting the ITT effect model coef(ett_read) #>   (Intercept) treatmentTRUE  #> -8.224997e-13  5.554179e+00   ate_read <- lm(readk ~ treatment,                offset = cov_adj(covariance_y0_read, newdata = STARdata),                data = STARdata,                weights = STARdata_ate) #> Warning: Some covariance adjustments are NA; be careful of dropping these observations when fitting the ITT effect model coef(ate_read) #>   (Intercept) treatmentTRUE  #> -5.334478e-13  5.554179e+00   ate_read_eth <- lm(readk ~ treatment * ethnicity,                    offset = cov_adj(covariance_y0_read, newdata = STARdata),                    data = STARdata,                    weights = STARdata_ate) #> Warning: Some covariance adjustments are NA; be careful of dropping these observations when fitting the ITT effect model coef(ate_read_eth) #>                     (Intercept)                   treatmentTRUE  #>                   -4.599280e-13                    5.901494e+00  #>                   ethnicityafam                  ethnicityasian  #>                   -1.267935e-13                    5.281315e-13  #>               ethnicityhispanic               ethnicityamindian  #>                    6.750873e-12                    1.579858e-12  #>                  ethnicityother     treatmentTRUE:ethnicityafam  #>                    3.151440e-12                   -1.289929e+00  #>    treatmentTRUE:ethnicityasian treatmentTRUE:ethnicityhispanic  #>                   -2.494972e+01                    3.214437e+01  #> treatmentTRUE:ethnicityamindian    treatmentTRUE:ethnicityother  #>                    1.391799e+01                    3.202748e+00"},{"path":"www.github.com/dev/reference/da_estfun_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"Extract empirical estimating equations DirectAdjusted model fit Extract bread matrix DirectAdjusted model fit","code":""},{"path":"www.github.com/dev/reference/da_estfun_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"","code":"# S3 method for DirectAdjusted estfun(x, ...)  # S3 method for DirectAdjusted bread(x, ...)"},{"path":"www.github.com/dev/reference/da_estfun_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"x fitted DirectAdjusted object ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/da_estfun_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"\\(n\\times k\\) matrix empirical estimating equations covariance-adjusted ITT effect regression. \\(n\\) represents number observations union samples used fit two regressions. \\(k\\) represents number parameters latter model. row represents observation's contribution stacked estimating equations. contribution, denoted \\(\\tilde{\\psi}_{}\\) \\(\\)th observation, given $$\\tilde{\\psi}_{} = \\psi_{} + \\phi_{}A_{11}^{-1}A_{21}^{T}$$ \\(\\psi_{}\\) observation's contribution ITT effect model fit, \\(\\phi_{}\\) observation's contribution covariance adjustment model fit, \\(\\) matrices given typical sandwich calculations. Note formulation output matrix \\(\\tilde{\\Psi}\\) requires information observation's contributions covariance adjustment ITT effect models (observations may contribute models). Estimating equations taken sandwich::estfun calls fitted models aligned closely possible. argument cov_adj() can used specify column unrelated design allow exact alignment matrices. argument provided, clustering information given DirectAdjusted's Design object used align rows unit assignment, even though guarantees can made aligning matrices within units assignment. Regardless eventual alignment initial ordering observations two matrices, however, using vcovDA, variance estimates ultimately due clustering passed sandwich::meatCL calls.","code":""},{"path":"www.github.com/dev/reference/da_estfun_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"function thin wrapper around .get_tilde_a22_inverse().","code":""},{"path":"www.github.com/dev/reference/design_data_concordance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for variable agreement within units of assignment — design_data_concordance","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"Useful debugging purposes ensure concordance variables Design data.","code":""},{"path":"www.github.com/dev/reference/design_data_concordance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"","code":"design_data_concordance(design, data, by = NULL, warn_on_nonexistence = TRUE)"},{"path":"www.github.com/dev/reference/design_data_concordance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"design Design object data new data set, presumably used create design. optional; named vector list connecting names variables design variables data. Names represent variables design; values represent variables data. needed variable names differ. warn_on_nonexistence default TRUE. variable exist data, flagged? FALSE, silently move variable exist data.","code":""},{"path":"www.github.com/dev/reference/design_data_concordance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"invisibly TRUE warnings produced, FALSE warnings produced.","code":""},{"path":"www.github.com/dev/reference/design_data_concordance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for variable agreement within units of assignment — design_data_concordance","text":"Consider following scenario: Design generated dataset, \"data1\", includes block variable \"b1\". Within unique unit assignment/unitid/cluster \"data1\", must case \"b1\" constant. (Otherwise creation Design fail.) Next, model fit includes weights generated Design, dataset \"data2\". \"data2\", block variable \"b1\" also exists, due issue data cleaning, agree \"b1\" \"data1\". cause errors, either directly (via actual error messages) simply produce nonsense results. design_data_concordance() designed help debug scenarios providing information whether variables data used creation design (\"data1\" example) new dataset, data, (\"data2\" example) inconsistencies.","code":""},{"path":"www.github.com/dev/reference/design_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of elements from a Design — dtable","title":"Table of elements from a Design — dtable","text":"Produces table (1-dimensional, 2-dimensional y specified) elements Design.","code":""},{"path":"www.github.com/dev/reference/design_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of elements from a Design — dtable","text":"","code":"dtable(   design,   x,   y = NULL,   sort = FALSE,   decreasing = TRUE,   use_var_names = FALSE,   treatment_binary = TRUE,   ... )  design_table(   design,   x,   y = NULL,   sort = FALSE,   decreasing = TRUE,   use_var_names = FALSE,   treatment_binary = TRUE,   ... )"},{"path":"www.github.com/dev/reference/design_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of elements from a Design — dtable","text":"design Design x One \"treatment\", \"unit assignent\", \"uoa\", \"unitid\", \"cluster\", \"block\". Abbreviations accepted. y Optionally, another \"treatment\", \"unit assignent\", \"uoa\", \"unitid\", \"cluster\", \"block\". Abbreviations accepted. 1-dimensional table produced y left default, NULL. sort Ignored y NULL. FALSE (default), one-way table sorted according \"names\" levels. set TRUE, one-way table sorted according values. decreasing sort TRUE, choose whether sort descending (TRUE, default) ascending (FALSE). use_var_names TRUE, name dimensions table returned variable names. FALSE (default), name function (e.g. \"treatment\" \"blocks\"). Passing dnn argument ... (argument table()) overrides whatever requested . treatment_binary treatment (requested) dichotomized design contains dichotomy? Ignored design contain dichotomy, neither x y \"treatment\". ... arguments table","code":""},{"path":"www.github.com/dev/reference/design_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of elements from a Design — dtable","text":"table","code":""},{"path":"www.github.com/dev/reference/design_treatment_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Design has access to a binary treatment — is_dichotomized","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"functions determine Design dichotomized (is_dichotomized()) access binary treatment variable (has_binary_treatment()) either (is_binary_or_dichotomized()).","code":""},{"path":"www.github.com/dev/reference/design_treatment_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"","code":"is_dichotomized(des)  has_binary_treatment(des)  is_binary_or_dichotomized(des)"},{"path":"www.github.com/dev/reference/design_treatment_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"des Design object","code":""},{"path":"www.github.com/dev/reference/design_treatment_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"Logical; see details.","code":""},{"path":"www.github.com/dev/reference/design_treatment_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"is_dichotomized() checks presence @dichotomy slot Design, either passed directly various *_design() Design creators, added afterwards dichotomy(my_design)<-. has_binary_treatment() returns TRUE treatment numeric values 0 1, logical. also allows NA treatment. is_binary_or_dichotomized returns TRUE either is_dichotomized() has_binary_treatment() return TRUE.","code":""},{"path":"www.github.com/dev/reference/design_treatment_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Design has access to a binary treatment — is_dichotomized","text":"","code":"data(simdata) des1 <- rct_design(z ~ uoa(cid1, cid2), data = simdata) des2 <- rct_design(o ~ uoa(cid1, cid2), data = simdata) des3 <- rct_design(o ~ uoa(cid1, cid2), data = simdata,                    dichotomy = o >= 3 ~ .)  if (is_binary_or_dichotomized(des1)) {   wt <- ate(des1, data = simdata) } if (is_binary_or_dichotomized(des2)) {   wt <- ate(des2, data = simdata) # would fail but won't be run } if (is_binary_or_dichotomized(des3)) {   wt <- ate(des3, data = simdata) }"},{"path":"www.github.com/dev/reference/designconversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Design between types — as_rct_design","title":"Convert Design between types — as_rct_design","text":"functions convert Design RD, RCT Obs types. Converting RD requires addition forcing variable (see forcing= argument), converting RD requires consenting dropping forcing variable (see loseforcing= argument).","code":""},{"path":"www.github.com/dev/reference/designconversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Design between types — as_rct_design","text":"","code":"as_rct_design(Design, ..., loseforcing = FALSE)  as_obs_design(Design, ..., loseforcing = FALSE)  as_rd_design(Design, data, ..., forcing)"},{"path":"www.github.com/dev/reference/designconversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Design between types — as_rct_design","text":"Design Design convert ... additional options present loseforcing converting RD another Design type error avoid losing forcing variable. Setting loseforcing =   TRUE allows conversion automatically drop forcing variable. Default FALSE. data converting RD requires adding forcing variable, requires access original data. forcing converting RD requires adding forcing variable. entered update formula, e.g. \"~ . + forcing(forcevar)\".","code":""},{"path":"www.github.com/dev/reference/designconversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Design between types — as_rct_design","text":"Design updated type","code":""},{"path":"www.github.com/dev/reference/designconversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Design between types — as_rct_design","text":"","code":"des <- rct_design(z ~ unit_of_assignment(cid1, cid2), data = simdata) des #> Randomized Control Trial #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          z          #>  Unit of Assignment cid1, cid2 #>  as_obs_design(des) #> Observational Study #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          z          #>  Unit of Assignment cid1, cid2 #>  as_rd_design(des, simdata, forcing = ~ . + forcing(force)) #> Regression Discontinuity Design #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          z          #>  Unit of Assignment cid1, cid2 #>  Forcing            force      #>  des2 <- rd_design(o ~ uoa(cid1, cid2) + forcing(force), data = simdata) des2 #> Regression Discontinuity Design #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          o          #>  Unit of Assignment cid1, cid2 #>  Forcing            force      #>  # as_rct_design(des2) # this will produce an error as_rct_design(des2, loseforcing = TRUE) #> Randomized Control Trial #>  #>  Structure          Variables  #>  ---------          ---------  #>  Treatment          o          #>  Unit of Assignment cid1, cid2 #>"},{"path":"www.github.com/dev/reference/dot-align_and_extend_estfuns.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Align the dimensions and rows of estimating equations matrices from the ITT effect and covariance adjustment models — .align_and_extend_estfuns","title":"(Internal) Align the dimensions and rows of estimating equations matrices from the ITT effect and covariance adjustment models — .align_and_extend_estfuns","text":"(Internal) Align dimensions rows estimating equations matrices ITT effect covariance adjustment models","code":""},{"path":"www.github.com/dev/reference/dot-align_and_extend_estfuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Align the dimensions and rows of estimating equations matrices from the ITT effect and covariance adjustment models — .align_and_extend_estfuns","text":"","code":".align_and_extend_estfuns(x, by = NULL, ...)"},{"path":"www.github.com/dev/reference/dot-align_and_extend_estfuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Align the dimensions and rows of estimating equations matrices from the ITT effect and covariance adjustment models — .align_and_extend_estfuns","text":"x fitted DirectAdjusted object character vector; indicates unit assignment columns generate ID's ; default NULL, uses unit assignment columns specified DirectAdjusted object's Design slot ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/dot-align_and_extend_estfuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Align the dimensions and rows of estimating equations matrices from the ITT effect and covariance adjustment models — .align_and_extend_estfuns","text":"list two matrices, one aligned contributions estimating equations ITT effect model, aligned contributions covariance adjustment model","code":""},{"path":"www.github.com/dev/reference/dot-apply_dichotomy.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"Given treatment variable (passed named data.frame) dichotomy formula (see help rct_design() details specification), returns vector containing 0, 1, NA.","code":""},{"path":"www.github.com/dev/reference/dot-apply_dichotomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"","code":".apply_dichotomy(txt, dichotomy)"},{"path":"www.github.com/dev/reference/dot-apply_dichotomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"txt named data.frame containing single column treatment, produed treatment(mydesign). dichotomy dichotomization formula. See details Details help rct_design().","code":""},{"path":"www.github.com/dev/reference/dot-apply_dichotomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Applies dichotomy to treatment — .apply_dichotomy","text":"vector binary treatments","code":""},{"path":"www.github.com/dev/reference/dot-base_S3class_estfun.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Call sandwich::estfun method for a fitted DirectAdjusted object based on its base S3 class — .base_S3class_estfun","title":"(Internal) Call sandwich::estfun method for a fitted DirectAdjusted object based on its base S3 class — .base_S3class_estfun","text":"(Internal) Call sandwich::estfun method fitted DirectAdjusted object based base S3 class","code":""},{"path":"www.github.com/dev/reference/dot-base_S3class_estfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Call sandwich::estfun method for a fitted DirectAdjusted object based on its base S3 class — .base_S3class_estfun","text":"","code":".base_S3class_estfun(x)"},{"path":"www.github.com/dev/reference/dot-base_S3class_estfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Call sandwich::estfun method for a fitted DirectAdjusted object based on its base S3 class — .base_S3class_estfun","text":"x fitted DirectAdjusted object","code":""},{"path":"www.github.com/dev/reference/dot-base_S3class_estfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Call sandwich::estfun method for a fitted DirectAdjusted object based on its base S3 class — .base_S3class_estfun","text":"S3 method","code":""},{"path":"www.github.com/dev/reference/dot-bin_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Extracts treatment as binary vector if possible or else errors. — .bin_txt","title":"(Internal) Extracts treatment as binary vector if possible or else errors. — .bin_txt","text":"Design @dichotomy, treatment variable consisting 0/1 NA, returns binary treatment. Otherwise (non-binary treatment lacks dichotomy) errors.","code":""},{"path":"www.github.com/dev/reference/dot-bin_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Extracts treatment as binary vector if possible or else errors. — .bin_txt","text":"","code":".bin_txt(des)"},{"path":"www.github.com/dev/reference/dot-bin_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Extracts treatment as binary vector if possible or else errors. — .bin_txt","text":"des Design","code":""},{"path":"www.github.com/dev/reference/dot-bin_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Extracts treatment as binary vector if possible or else errors. — .bin_txt","text":"vector binary treatments","code":""},{"path":"www.github.com/dev/reference/dot-check_by.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) A few checks to ensure by= is valid — .check_by","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"Thie ensures = argument proper type, named, consists unique entries.","code":""},{"path":"www.github.com/dev/reference/dot-check_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"","code":".check_by(by)"},{"path":"www.github.com/dev/reference/dot-check_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"named vector list connecting names unit assignment/unitid/cluster variables design unit assignment/unitid/cluster variables data. Names represent variables Design; values represent variables data.","code":""},{"path":"www.github.com/dev/reference/dot-check_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) A few checks to ensure by= is valid — .check_by","text":"NULL errors found","code":""},{"path":"www.github.com/dev/reference/dot-check_design_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"Checks performed: Ensure presence exactly one unit_of_assignment(), cluster() unitid(). Disallow multiple block() multiple forcing() terms. Disallow forcing() unless RDD.","code":""},{"path":"www.github.com/dev/reference/dot-check_design_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"","code":".check_design_formula(form, allow_forcing = FALSE)"},{"path":"www.github.com/dev/reference/dot-check_design_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"form formula passed .new_Design() allow_forcing Binary whether forcing() allowed (TRUE RDD, FALSE RCT Obs).","code":""},{"path":"www.github.com/dev/reference/dot-check_design_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Perform checks on formula for creation of Design. — .check_design_formula","text":"TRUE checks pass, otherwise errors.","code":""},{"path":"www.github.com/dev/reference/dot-check_df_moderator_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"NA vcovDA subgroup estimates that have insufficient degrees of freedom — .check_df_moderator_estimates","title":"NA vcovDA subgroup estimates that have insufficient degrees of freedom — .check_df_moderator_estimates","text":"NA vcovDA subgroup estimates insufficient degrees freedom","code":""},{"path":"www.github.com/dev/reference/dot-check_df_moderator_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NA vcovDA subgroup estimates that have insufficient degrees of freedom — .check_df_moderator_estimates","text":"","code":".check_df_moderator_estimates(   vmat,   model,   cluster,   model_data = quote(data),   envir = environment(formula(model)) )"},{"path":"www.github.com/dev/reference/dot-check_df_moderator_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NA vcovDA subgroup estimates that have insufficient degrees of freedom — .check_df_moderator_estimates","text":"vmat variance-covariance matrix corresponding model model DirectAdjusted object cluster character factor vector providing cluster ID's observations used fit model model_data dataframe name corresponding data used fit model envir environment get model_data quote object name","code":""},{"path":"www.github.com/dev/reference/dot-check_df_moderator_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NA vcovDA subgroup estimates that have insufficient degrees of freedom — .check_df_moderator_estimates","text":"vmat NA's entries lacking sufficient degrees freedom","code":""},{"path":"www.github.com/dev/reference/dot-convert_to_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Ensures replacement column for Design is a data.frame. — .convert_to_data.frame","title":"(Internal) Ensures replacement column for Design is a data.frame. — .convert_to_data.frame","text":"Helper function Design replacers ensure replacement properly named data.frame","code":""},{"path":"www.github.com/dev/reference/dot-convert_to_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Ensures replacement column for Design is a data.frame. — .convert_to_data.frame","text":"","code":".convert_to_data.frame(value, design, type)"},{"path":"www.github.com/dev/reference/dot-convert_to_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Ensures replacement column for Design is a data.frame. — .convert_to_data.frame","text":"value vector data.frame containing replacement. design Design type One \"t\", \"f\", \"u\" \"b\"","code":""},{"path":"www.github.com/dev/reference/dot-convert_to_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Ensures replacement column for Design is a data.frame. — .convert_to_data.frame","text":"data.frame containing named column(s)","code":""},{"path":"www.github.com/dev/reference/dot-convert_to_data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Ensures replacement column for Design is a data.frame. — .convert_to_data.frame","text":"given replacement set values (e.g vector matrix), ensures replacement named data.frame. Input vector: Since named, vector can used replace existing component. existing component 1 column, uses name first column. Input matrix data.frame: unnamed replacing existing component, must columns original component. (less columns, uses name first columns.) named, can replace number columns.","code":""},{"path":"www.github.com/dev/reference/dot-design_accessors_newdata_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Checks newdata/by argument for design accessors — .design_accessors_newdata_validate","title":"(Internal) Checks newdata/by argument for design accessors — .design_accessors_newdata_validate","text":"(Internal) Checks newdata/argument design accessors","code":""},{"path":"www.github.com/dev/reference/dot-design_accessors_newdata_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Checks newdata/by argument for design accessors — .design_accessors_newdata_validate","text":"","code":".design_accessors_newdata_validate(newdata, by)"},{"path":"www.github.com/dev/reference/dot-design_accessors_newdata_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Checks newdata/by argument for design accessors — .design_accessors_newdata_validate","text":"newdata newdata argument e.g. treatment(), blocks(), etc e.g. treatment(), blocks(), etc. See .check_by()","code":""},{"path":"www.github.com/dev/reference/dot-design_accessors_newdata_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Checks newdata/by argument for design accessors — .design_accessors_newdata_validate","text":"Invisibly TRUE. Warns errors appropriate.","code":""},{"path":"www.github.com/dev/reference/dot-expand.model.frame.DA.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new variables to a model frame from a DirectAdjusted object — .expand.model.frame.DA","title":"Add new variables to a model frame from a DirectAdjusted object — .expand.model.frame.DA","text":"variation expand.model.frame works DirectAdjusted objects","code":""},{"path":"www.github.com/dev/reference/dot-expand.model.frame.DA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new variables to a model frame from a DirectAdjusted object — .expand.model.frame.DA","text":"","code":".expand.model.frame.DA(   model,   extras,   envir = environment(formula(model)),   na.expand = FALSE )"},{"path":"www.github.com/dev/reference/dot-expand.model.frame.DA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new variables to a model frame from a DirectAdjusted object — .expand.model.frame.DA","text":"model DirectAdjusted object extras one-sided formula vector character strings describing new variables added envir environment evaluate things na.expand logical; see stats::expand.model.frame details","code":""},{"path":"www.github.com/dev/reference/dot-expand.model.frame.DA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new variables to a model frame from a DirectAdjusted object — .expand.model.frame.DA","text":"data.frame","code":""},{"path":"www.github.com/dev/reference/dot-expand.model.frame.DA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add new variables to a model frame from a DirectAdjusted object — .expand.model.frame.DA","text":"building DirectAdjusted object inside lmitt(), lot manipulation variables involved model time DirectAdjusted produced, neither outcome predictors actually fit model exist data passed call. (E.g. specific, user calls myda <- lmitt(y ~ 1, data = mydata), model.frame(myda) contain column names found mydata.) clone stats::expand.model.frame() one addition - extracting model$call$data model, adds columns model.frame(model) object. ensures additional variables created lmitt() can found. Trivial modifications stats::expand.model.frame() include ensuring model Directadjusted object, using :: syntax appropriate.","code":""},{"path":"www.github.com/dev/reference/dot-fallback_data_search.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Fallback brute force method to locate data in the call stack. — .fallback_data_search","title":"(Internal) Fallback brute force method to locate data in the call stack. — .fallback_data_search","text":"try intelligent finding appropriate data. fails, may need brute force method just loops frames looks data object.","code":""},{"path":"www.github.com/dev/reference/dot-fallback_data_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Fallback brute force method to locate data in the call stack. — .fallback_data_search","text":"","code":".fallback_data_search()"},{"path":"www.github.com/dev/reference/dot-fallback_data_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Fallback brute force method to locate data in the call stack. — .fallback_data_search","text":"found, data.","code":""},{"path":"www.github.com/dev/reference/dot-get_ca_and_prediction_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Get the a vector of ","title":"(Internal) Get the a vector of ","text":"(Internal) Get vector \"response\" predictions covariance adjustment model gradient respect fitted coefficients","code":""},{"path":"www.github.com/dev/reference/dot-get_ca_and_prediction_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Get the a vector of ","text":"","code":".get_ca_and_prediction_gradient(model, newdata = NULL)"},{"path":"www.github.com/dev/reference/dot-get_ca_and_prediction_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Get the a vector of ","text":"model model inherits glm, lm,  robustbase::lmrob object newdata Optional; data.frame new data","code":""},{"path":"www.github.com/dev/reference/dot-get_ca_and_prediction_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Get the a vector of ","text":"Covariate adjusted outcomes gradient respect parameters covariance adjustment model (list numeric vector matrix)","code":""},{"path":"www.github.com/dev/reference/dot-get_col_from_new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Extract specified type from new data set — .get_col_from_new_data","title":"(Internal) Extract specified type from new data set — .get_col_from_new_data","text":"(Internal) Extract specified type new data set","code":""},{"path":"www.github.com/dev/reference/dot-get_col_from_new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Extract specified type from new data set — .get_col_from_new_data","text":"","code":".get_col_from_new_data(design, newdata, type, by = NULL, ...)"},{"path":"www.github.com/dev/reference/dot-get_col_from_new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Extract specified type from new data set — .get_col_from_new_data","text":"design Design newdata data.frame, may may one used create design. must units assignment variable(s) (though = argument can used name differ), appropriately merge design blocks, treatment forcings. type One \"t\", \"f\", \"b\". optional; named vector list connecting names unit assignment/unitid/cluster variables design unit assignment/unitid/cluster variables data. Names represent variables Design; values represent variables data. needed variable names differ. ... Additional arguments merge().","code":""},{"path":"www.github.com/dev/reference/dot-get_col_from_new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Extract specified type from new data set — .get_col_from_new_data","text":"column(s) belonging requested type ","code":""},{"path":"www.github.com/dev/reference/dot-get_data_from_model.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Locate data in call stack — .get_data_from_model","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"Whenever function model (ate()/ett()/cov_adj()/assigned()) called without explicit data= argument, attempt extract data model .","code":""},{"path":"www.github.com/dev/reference/dot-get_data_from_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"","code":".get_data_from_model(which_fn, form = NULL, by = NULL)"},{"path":"www.github.com/dev/reference/dot-get_data_from_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"which_fn Identify calling function, \"weights\" \"assigned\", helps separate logic two functions. form Formula apply model.frame(). See details translation cluster ID names, passed weights.","code":""},{"path":"www.github.com/dev/reference/dot-get_data_from_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"data.frame","code":""},{"path":"www.github.com/dev/reference/dot-get_data_from_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Locate data in call stack — .get_data_from_model","text":"form specifies columns data needed. current use cases (ate()/ett() assigned()), unit assignment variables, e.g. form = ~ uoavar, enable merging UOA level variables model data. However, can easily expanded variables needed.","code":""},{"path":"www.github.com/dev/reference/dot-get_design.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Locate a Design in the call stack — .get_design","title":"(Internal) Locate a Design in the call stack — .get_design","text":"assigned()/ate()/ett()/cov_adj() need Design operate. called model without design= argument, function sees can find Design another functions.","code":""},{"path":"www.github.com/dev/reference/dot-get_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Locate a Design in the call stack — .get_design","text":"","code":".get_design(NULL_on_error = FALSE)"},{"path":"www.github.com/dev/reference/dot-get_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Locate a Design in the call stack — .get_design","text":"NULL_on_error TRUE, returns NULL Design object found rather throwing error.","code":""},{"path":"www.github.com/dev/reference/dot-get_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Locate a Design in the call stack — .get_design","text":"Design, NULL NULL_on_error TRUE Design found.","code":""},{"path":"www.github.com/dev/reference/dot-get_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Locate a Design in the call stack — .get_design","text":"Note never look inside assigned() (gets complicated formulas), weights cov_adj(). E.g. lm(y ~ assigned(), weights = ate(des), offest = cov_adj(mod1)) lm(y ~ assigned(), weights = ate(), offest = cov_adj(mod1, design = des)) work, lm(y ~ assigned(des), weights = ate(), offest = cov_adj(mod1)) fail.","code":""},{"path":"www.github.com/dev/reference/dot-join_design_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Expand unit of assignment level weights to the level of the data — .join_design_weights","title":"(Internal) Expand unit of assignment level weights to the level of the data — .join_design_weights","text":"Helper function called creation weights via ate() ett()","code":""},{"path":"www.github.com/dev/reference/dot-join_design_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Expand unit of assignment level weights to the level of the data — .join_design_weights","text":"","code":".join_design_weights(weights, design, target, data)"},{"path":"www.github.com/dev/reference/dot-join_design_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Expand unit of assignment level weights to the level of the data — .join_design_weights","text":"weights vector weights sorted according Design design Design target One \"ate\" \"ett\" data New data","code":""},{"path":"www.github.com/dev/reference/dot-join_design_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Expand unit of assignment level weights to the level of the data — .join_design_weights","text":"WeightedDesign","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_cluster_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dataframe that links units of assignment with clusters — .make_uoa_cluster_df","title":"Make a dataframe that links units of assignment with clusters — .make_uoa_cluster_df","text":"Make dataframe links units assignment clusters","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_cluster_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dataframe that links units of assignment with clusters — .make_uoa_cluster_df","text":"","code":".make_uoa_cluster_df(des, cluster = NULL)"},{"path":"www.github.com/dev/reference/dot-make_uoa_cluster_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dataframe that links units of assignment with clusters — .make_uoa_cluster_df","text":"des Design object. cluster character vector column names use clusters. Columns must exist dataframe used create Design object. Defaults NULL, case column names specified unitid(), unit_of_assignment(), cluster() function Design formula used.","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_cluster_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dataframe that links units of assignment with clusters — .make_uoa_cluster_df","text":"dataframe number rows coincides number distinct unit assignment cluster combinations (depending whether cluster less granular level assignment level) columns correspond unit assignment columns \"cluster\" column","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Make unit of assignment ID's to pass to sandwich::meatCL cluster argument — .make_uoa_ids","title":"Make unit of assignment ID's to pass to sandwich::meatCL cluster argument — .make_uoa_ids","text":"Make unit assignment ID's pass sandwich::meatCL cluster argument","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make unit of assignment ID's to pass to sandwich::meatCL cluster argument — .make_uoa_ids","text":"","code":".make_uoa_ids(x, vcov_type, cluster = NULL, ...)"},{"path":"www.github.com/dev/reference/dot-make_uoa_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make unit of assignment ID's to pass to sandwich::meatCL cluster argument — .make_uoa_ids","text":"x fitted DirectAdjusted object vcov_type string indicating model-based design-based covariance estimation. Currently, \"MB\", \"CR\", \"HC\" strings registered indicating model-based estimation. cluster character vector list; optional. Specifies column names appear covariance adjustment dataframe C quasiexperimental dataframe Q. Defaults NULL, case unit assignment columns indicated Design used generate clustered covariance estimates. multiple clustering columns, concatenated together row separated \"_\". ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make unit of assignment ID's to pass to sandwich::meatCL cluster argument — .make_uoa_ids","text":"vector length \\(|\\mathcal{Q}| + |\\mathcal{C} \\ \\mathcal{Q}|\\)","code":""},{"path":"www.github.com/dev/reference/dot-make_uoa_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make unit of assignment ID's to pass to sandwich::meatCL cluster argument — .make_uoa_ids","text":"ID's align output estfun.DirectAdjusted. argument used .order_samples, .make_uoa_ids return values columns specified cluster associated ordering.","code":""},{"path":"www.github.com/dev/reference/dot-merge_preserve_order.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Merge data.frames ensuring order of first data.frame is maintained — .merge_preserve_order","title":"(Internal) Merge data.frames ensuring order of first data.frame is maintained — .merge_preserve_order","text":"(Internal) Merge data.frames ensuring order first data.frame maintained","code":""},{"path":"www.github.com/dev/reference/dot-merge_preserve_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Merge data.frames ensuring order of first data.frame is maintained — .merge_preserve_order","text":"","code":".merge_preserve_order(x, ...)"},{"path":"www.github.com/dev/reference/dot-merge_preserve_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Merge data.frames ensuring order of first data.frame is maintained — .merge_preserve_order","text":"x data.frame whose ordering maintained ... Additional arguments merge(), particularly second data.frame = argument.","code":""},{"path":"www.github.com/dev/reference/dot-merge_preserve_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Merge data.frames ensuring order of first data.frame is maintained — .merge_preserve_order","text":"Merged data.frame ordering x.","code":""},{"path":"www.github.com/dev/reference/dot-new_Design.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Create a new Design object. — .new_Design","title":"(Internal) Create a new Design object. — .new_Design","text":"Helper function create new Design. Called internally rct_design(), rd_design() obs_design().","code":""},{"path":"www.github.com/dev/reference/dot-new_Design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Create a new Design object. — .new_Design","text":"","code":".new_Design(   form,   data,   type,   subset = NULL,   call = NULL,   dichotomy = stats::formula(),   na.fail = TRUE )"},{"path":"www.github.com/dev/reference/dot-new_Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Create a new Design object. — .new_Design","text":"form Formula create Design, see help rcr_design(), rd_design() obs_design() details. data data set type One \"RCT\", \"RD\", \"Obs\" subset subset information call call generating Design. dichotomy present, dichotomization formula na.fail error NA's (TRUE) remove (FALSE)?","code":""},{"path":"www.github.com/dev/reference/dot-new_Design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Create a new Design object. — .new_Design","text":"new Design object","code":""},{"path":"www.github.com/dev/reference/dot-order_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Order observations used to fit a DirectAdjusted model and its covariance adjustment model — .order_samples","title":"Order observations used to fit a DirectAdjusted model and its covariance adjustment model — .order_samples","text":"Order observations used fit DirectAdjusted model covariance adjustment model","code":""},{"path":"www.github.com/dev/reference/dot-order_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order observations used to fit a DirectAdjusted model and its covariance adjustment model — .order_samples","text":"","code":".order_samples(x, by = NULL, ...)"},{"path":"www.github.com/dev/reference/dot-order_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order observations used to fit a DirectAdjusted model and its covariance adjustment model — .order_samples","text":"x fitted DirectAdjusted object character vector; indicates unit assignment columns generate ID's ; default NULL, uses unit assignment columns specified DirectAdjusted object's Design slot ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/dot-order_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order observations used to fit a DirectAdjusted model and its covariance adjustment model — .order_samples","text":"list four named vectors","code":""},{"path":"www.github.com/dev/reference/dot-order_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Order observations used to fit a DirectAdjusted model and its covariance adjustment model — .order_samples","text":".order_samples underpins ordering .make_uoa_ids estfun.DirectAdjusted. function needs order rows \\(\\mathcal{Q}\\cup\\mathcal{C}\\), also needs explain original matrices estimating equations indexed contributions sets equations match. instead returning numeric vector, one might expect ordering function, .order_samples returns list vectors, explained Return section. Ultimately, order given concatenating vectors stored Q_not_C, Q_in_C, C_not_q (Q_in_C C_in_Q interchangeable terms deriving order). names Q_not_C Q_in_C vectors correspond row indices matrix estimating equations ITT effect model, names C_in_Q C_not_Q vectors correspond row indices matrix estimating equations covariance adjustment model. argument provided cov_adj, used deduce order.","code":""},{"path":"www.github.com/dev/reference/dot-remove_forcing.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"preparation converting RD Design another Design, strip forcing variable entirely. removed data (@structure @column_index), well formula stored @call.","code":""},{"path":"www.github.com/dev/reference/dot-remove_forcing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"","code":".remove_forcing(des)"},{"path":"www.github.com/dev/reference/dot-remove_forcing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"des Design","code":""},{"path":"www.github.com/dev/reference/dot-remove_forcing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"Design without forcing variable","code":""},{"path":"www.github.com/dev/reference/dot-remove_forcing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Removes the forcing column entirely from a Design — .remove_forcing","text":"Note output Design fail validity check (validObject()) due RD Design requiring forcing variable, change @type immediately.","code":""},{"path":"www.github.com/dev/reference/dot-rename_model_frame_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"calling model.frame() formula input .new_Design(), names columns include function names, e.g. \"block(blockvar)\". function strips .","code":""},{"path":"www.github.com/dev/reference/dot-rename_model_frame_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"","code":".rename_model_frame_columns(modframe)"},{"path":"www.github.com/dev/reference/dot-rename_model_frame_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"modframe data.frame.","code":""},{"path":"www.github.com/dev/reference/dot-rename_model_frame_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Rename columns to strip function calls — .rename_model_frame_columns","text":"data.frame function calls removed","code":""},{"path":"www.github.com/dev/reference/dot-sanitize_C_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return ID's for observations in the covariance adjustment sample C — .sanitize_C_ids","title":"Return ID's for observations in the covariance adjustment sample C — .sanitize_C_ids","text":"Return ID's observations covariance adjustment sample C","code":""},{"path":"www.github.com/dev/reference/dot-sanitize_C_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return ID's for observations in the covariance adjustment sample C — .sanitize_C_ids","text":"","code":".sanitize_C_ids(x, by = NULL, sorted = FALSE, ...)"},{"path":"www.github.com/dev/reference/dot-sanitize_C_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return ID's for observations in the covariance adjustment sample C — .sanitize_C_ids","text":"x SandwichLayer object. character vector list; optional. Specifies column names appear botn covariance adjustment dataframe C quasiexperimental dataframe Q. Defaults NULL, case unit assignment columns indicated Design used generate ID's. ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/dot-sanitize_C_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return ID's for observations in the covariance adjustment sample C — .sanitize_C_ids","text":"vector length \\(|C|\\)","code":""},{"path":"www.github.com/dev/reference/dot-sanitize_Q_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return ID's for observations in \\(Q\\) — .sanitize_Q_ids","title":"Return ID's for observations in \\(Q\\) — .sanitize_Q_ids","text":"Return ID's observations \\(Q\\)","code":""},{"path":"www.github.com/dev/reference/dot-sanitize_Q_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return ID's for observations in \\(Q\\) — .sanitize_Q_ids","text":"","code":".sanitize_Q_ids(x, id_col = NULL, ...)"},{"path":"www.github.com/dev/reference/dot-sanitize_Q_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return ID's for observations in \\(Q\\) — .sanitize_Q_ids","text":"x fitted DirectAdjusted object id_col character vector; optional. Specifies column(s) whose ID's returned. column must exist data created Design object. Default NULL, case unit assignment columns indicated design used generate ID's. ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/dot-sanitize_Q_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return ID's for observations in \\(Q\\) — .sanitize_Q_ids","text":"vector length \\(|Q|\\)","code":""},{"path":"www.github.com/dev/reference/dot-show_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) show helper for PreSandwichLayer/SandwichLayer — .show_layer","title":"(Internal) show helper for PreSandwichLayer/SandwichLayer — .show_layer","text":"(Internal) show helper PreSandwichLayer/SandwichLayer","code":""},{"path":"www.github.com/dev/reference/dot-show_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) show helper for PreSandwichLayer/SandwichLayer — .show_layer","text":"","code":".show_layer(object)"},{"path":"www.github.com/dev/reference/dot-show_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) show helper for PreSandwichLayer/SandwichLayer — .show_layer","text":"object PreSandwichLayer SandwichLayer","code":""},{"path":"www.github.com/dev/reference/dot-show_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) show helper for PreSandwichLayer/SandwichLayer — .show_layer","text":"object, invisibly","code":""},{"path":"www.github.com/dev/reference/dot-txt_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Treatment variable name — .txt_fn","title":"Treatment variable name — .txt_fn","text":"(Internal) Obtain variaiton assigned(), .() z.() used model","code":""},{"path":"www.github.com/dev/reference/dot-txt_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treatment variable name — .txt_fn","text":"","code":".txt_fn(object)"},{"path":"www.github.com/dev/reference/dot-txt_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treatment variable name — .txt_fn","text":"object DirectAdjusted object","code":""},{"path":"www.github.com/dev/reference/dot-txt_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treatment variable name — .txt_fn","text":"Character string identifying name (e.g \"assigned()\" \".(des)\")","code":""},{"path":"www.github.com/dev/reference/dot-update_by.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Use by to update Design with new variable names — .update_by","title":"(Internal) Use by to update Design with new variable names — .update_by","text":"Helper function used update variable names Design user passes = argument align variable names data sets.","code":""},{"path":"www.github.com/dev/reference/dot-update_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Use by to update Design with new variable names — .update_by","text":"","code":".update_by(design, data, by)"},{"path":"www.github.com/dev/reference/dot-update_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Use by to update Design with new variable names — .update_by","text":"design Design data Data set named vector list connecting names unit assignment/unitid/cluster variables design unit assignment/unitid/cluster variables data. Names represent variables Design; values represent variables data.","code":""},{"path":"www.github.com/dev/reference/dot-update_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Use by to update Design with new variable names — .update_by","text":"Design updated variable names","code":""},{"path":"www.github.com/dev/reference/dot-update_ca_model_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Add columns for merging covariance adjustment and quasiexperimental samples to model formula — .update_ca_model_formula","title":"(Internal) Add columns for merging covariance adjustment and quasiexperimental samples to model formula — .update_ca_model_formula","text":"(Internal) Add columns merging covariance adjustment quasiexperimental samples model formula","code":""},{"path":"www.github.com/dev/reference/dot-update_ca_model_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Add columns for merging covariance adjustment and quasiexperimental samples to model formula — .update_ca_model_formula","text":"","code":".update_ca_model_formula(model, by = NULL, design = NULL)"},{"path":"www.github.com/dev/reference/dot-update_ca_model_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Add columns for merging covariance adjustment and quasiexperimental samples to model formula — .update_ca_model_formula","text":"model model inherits glm, lm, robustbase::lmrob object optional; vector list connecting names unit assignment/unitid/cluster variables design unit assignment/unitid/cluster variables covariance adjustment data. named vector, names represent variables Design object values represent variables data. needed : columns related design used merging covariance adjustment quasiexperimental samples, 2) column names differ datasets used fit models. design Optional Design. provided, function search call stack find one.","code":""},{"path":"www.github.com/dev/reference/dot-update_ca_model_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Add columns for merging covariance adjustment and quasiexperimental samples to model formula — .update_ca_model_formula","text":"formula","code":""},{"path":"www.github.com/dev/reference/dot-update_ca_model_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Add columns for merging covariance adjustment and quasiexperimental samples to model formula — .update_ca_model_formula","text":"function typically used prior .get_data_from_model incorporates information provided vector ensure necessary columns merging two samples included model.frame calls.","code":""},{"path":"www.github.com/dev/reference/dot-update_call_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Updates des@call's formula with the currently defined variable names. — .update_call_formula","title":"(Internal) Updates des@call's formula with the currently defined variable names. — .update_call_formula","text":"Helper function update call appropriate variable names modified. Called within Design replacers.","code":""},{"path":"www.github.com/dev/reference/dot-update_call_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Updates des@call's formula with the currently defined variable names. — .update_call_formula","text":"","code":".update_call_formula(design)"},{"path":"www.github.com/dev/reference/dot-update_call_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Updates des@call's formula with the currently defined variable names. — .update_call_formula","text":"design Design","code":""},{"path":"www.github.com/dev/reference/dot-update_call_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Updates des@call's formula with the currently defined variable names. — .update_call_formula","text":"updated formula","code":""},{"path":"www.github.com/dev/reference/dot-update_call_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Updates des@call's formula with the currently defined variable names. — .update_call_formula","text":"return stuck design via des@call$formula <- .update_call_formula(des)","code":""},{"path":"www.github.com/dev/reference/dot-update_form_to_unit_of_assignment.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Rename cluster/unitid/uoa in a formula to unit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","title":"(Internal) Rename cluster/unitid/uoa in a formula to unit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"Internally, always refer uoa/cluster/unitid \"unit_of_assignment\"","code":""},{"path":"www.github.com/dev/reference/dot-update_form_to_unit_of_assignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Rename cluster/unitid/uoa in a formula to unit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"","code":".update_form_to_unit_of_assignment(form)"},{"path":"www.github.com/dev/reference/dot-update_form_to_unit_of_assignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Rename cluster/unitid/uoa in a formula to unit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"form formula passed .new_Design()","code":""},{"path":"www.github.com/dev/reference/dot-update_form_to_unit_of_assignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Rename cluster/unitid/uoa in a formula to unit_of_assignment for internal consistency — .update_form_to_unit_of_assignment","text":"formula \"cluster\"/\"unitid\"/\"uoa\" replace \"unit_of_assignment\"","code":""},{"path":"www.github.com/dev/reference/dot-update_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Replaces type columns in design with new — .update_structure","title":"(Internal) Replaces type columns in design with new — .update_structure","text":"Assumes .convert_to_data.frame() already called new","code":""},{"path":"www.github.com/dev/reference/dot-update_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Replaces type columns in design with new — .update_structure","text":"","code":".update_structure(design, new, type)"},{"path":"www.github.com/dev/reference/dot-update_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Replaces type columns in design with new — .update_structure","text":"design Design new named data.frame replacement, output .convert_to_data.frame(). type One \"t\", \"f\", \"u\" \"b\\\".","code":""},{"path":"www.github.com/dev/reference/dot-update_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Replaces type columns in design with new — .update_structure","text":"updated Design","code":""},{"path":"www.github.com/dev/reference/dot-weights_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Worker function for weight calculation — .weights_calc","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"Called ate() ett().","code":""},{"path":"www.github.com/dev/reference/dot-weights_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"","code":".weights_calc(design, target, dichotomy, by, data)"},{"path":"www.github.com/dev/reference/dot-weights_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"design Design object created one rct_design(), rd_design(), obs_design(). target One \"ate\" \"ett\"; ate() ett() chooses automatically. dichotomy optional; formula defining dichotomy treatment variable already 0/1. See details help rct_design() e.g. details. optional; named vector list connecting names unit assignment/ variables design unit assignment/cluster variables data. Names represent variables Design; values represent variables data. needed variable names differ. data optionally data analysis performed . May excluded functions included weights argument model.","code":""},{"path":"www.github.com/dev/reference/dot-weights_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Worker function for weight calculation — .weights_calc","text":"WeightedDesign object","code":""},{"path":"www.github.com/dev/reference/estfun.DirectAdjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"Extract empirical estimating equations DirectAdjusted model fit","code":""},{"path":"www.github.com/dev/reference/estfun.DirectAdjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"","code":"# S3 method for DirectAdjusted estfun(x, ...)"},{"path":"www.github.com/dev/reference/estfun.DirectAdjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"x fitted DirectAdjusted object ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/estfun.DirectAdjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract empirical estimating equations from a DirectAdjusted model fit — estfun.DirectAdjusted","text":"\\(n\\times k\\) matrix empirical estimating equations covariance-adjusted ITT effect regression. \\(n\\) represents number observations union samples used fit two regressions. \\(k\\) represents number parameters latter model. row represents observation's contribution stacked estimating equations. contribution, denoted \\(\\tilde{\\psi}_{}\\) \\(\\)th observation, given $$\\tilde{\\psi}_{} = \\psi_{} + \\phi_{}A_{11}^{-1}A_{21}^{T}$$ \\(\\psi_{}\\) observation's contribution ITT effect model fit, \\(\\phi_{}\\) observation's contribution covariance adjustment model fit, \\(\\) matrices given typical sandwich calculations. Note formulation output matrix \\(\\tilde{\\Psi}\\) requires information observation's contributions covariance adjustment ITT effect models (observations may contribute models). Estimating equations taken sandwich::estfun calls fitted models aligned closely possible. argument cov_adj() can used specify column unrelated design allow exact alignment matrices. argument provided, clustering information given DirectAdjusted's Design object used align rows unit assignment, even though guarantees can made aligning matrices within units assignment. Regardless eventual alignment initial ordering observations two matrices, however, using vcovDA, variance estimates ultimately due clustering passed sandwich::meatCL calls.","code":""},{"path":"www.github.com/dev/reference/estfun.glmrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"Extract empirical estimating equations glmbrob model fit","code":""},{"path":"www.github.com/dev/reference/estfun.glmrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"","code":"# S3 method for glmrob estfun(x, ...)"},{"path":"www.github.com/dev/reference/estfun.glmrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"x fitted glmrob object ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/estfun.glmrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"Details needed","code":""},{"path":"www.github.com/dev/reference/get_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns Design Structure Information — get_structure","title":"Returns Design Structure Information — get_structure","text":"Creates data.frame containing information unit assignment/unitid/cluster level.","code":""},{"path":"www.github.com/dev/reference/get_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns Design Structure Information — get_structure","text":"","code":"get_structure(design, binary = FALSE)"},{"path":"www.github.com/dev/reference/get_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns Design Structure Information — get_structure","text":"design Design object binary default FALSE. TRUE design contains dichotomy, replace treatment column binary representation. effect design dichotomized.","code":""},{"path":"www.github.com/dev/reference/get_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns Design Structure Information — get_structure","text":"data.frame containing structure design.","code":""},{"path":"www.github.com/dev/reference/glmrob_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"Extract empirical estimating equations glmbrob model fit Extract bread matrix lmrob() fit","code":""},{"path":"www.github.com/dev/reference/glmrob_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"","code":"# S3 method for glmrob estfun(x, ...)  # S3 method for glmrob bread(x, ...)"},{"path":"www.github.com/dev/reference/glmrob_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"x fitted lmrob object ... arguments passed methods","code":""},{"path":"www.github.com/dev/reference/glmrob_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract empirical estimating equations from a glmbrob model fit — estfun.glmrob","text":"Details needed Details needed","code":""},{"path":"www.github.com/dev/reference/identical_Designs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Design objects are identical — identical_Designs","title":"Check if Design objects are identical — identical_Designs","text":"Check Design objects identical","code":""},{"path":"www.github.com/dev/reference/identical_Designs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Design objects are identical — identical_Designs","text":"","code":"identical_Designs(x, y, dichotomy_force = FALSE)"},{"path":"www.github.com/dev/reference/identical_Designs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Design objects are identical — identical_Designs","text":"x Design object. y Design object. dichotomy_force Logical, default FALSE. FALSE, dichotomy() x y ignored comparison. (words, two Designs differ @dichotomy slot considered identical.) TRUE, dichotomy must also agreement x y.","code":""},{"path":"www.github.com/dev/reference/identical_Designs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Design objects are identical — identical_Designs","text":"Logical, x y identical?","code":""},{"path":"www.github.com/dev/reference/identify_small_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify fine strata (blocks with one treated or one control unit of assignment) — identify_small_blocks","title":"Identify fine strata (blocks with one treated or one control unit of assignment) — identify_small_blocks","text":"Identify fine strata (blocks one treated one control unit assignment)","code":""},{"path":"www.github.com/dev/reference/identify_small_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify fine strata (blocks with one treated or one control unit of assignment) — identify_small_blocks","text":"","code":"identify_small_blocks(des)"},{"path":"www.github.com/dev/reference/identify_small_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify fine strata (blocks with one treated or one control unit of assignment) — identify_small_blocks","text":"des Design object.","code":""},{"path":"www.github.com/dev/reference/identify_small_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify fine strata (blocks with one treated or one control unit of assignment) — identify_small_blocks","text":"Logical vector length given number blocks Design","code":""},{"path":"www.github.com/dev/reference/lmitt.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Model for Intention To Treat — lmitt","title":"Linear Model for Intention To Treat — lmitt","text":"Generates linear model object allows proper estimation variances accounting study design.","code":""},{"path":"www.github.com/dev/reference/lmitt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Model for Intention To Treat — lmitt","text":"","code":"lmitt(obj, design, data, ...)  # S3 method for formula lmitt(obj, design, data, absorb = FALSE, offset = NULL, weights = NULL, ...)  # S3 method for lm lmitt(obj, design = NULL, ...)"},{"path":"www.github.com/dev/reference/lmitt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Model for Intention To Treat — lmitt","text":"obj formula lm object. See details. design Design used. Alternatively, formula creating design (type passed first argument rd_design(), rct_design(), obs_design()). formula includes forcing() element, RD design created. Otherwise observational design created. RCT design must created using rct_design(). data Data frame passed lm(). ... Additional arguments passed lm(). absorb TRUE, fixed effects included blocks identified Design. Excluded FALSE. Default FALSE. offset Offset kind passed lm(). utilize propertee's functionality, output cov_adj() used. weights Weight kind passed lm(). utilize propertee's functionality, output ate() ett(), strings \"ate\"/\"ett\", used..","code":""},{"path":"www.github.com/dev/reference/lmitt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Model for Intention To Treat — lmitt","text":"DirectAdjusted model.","code":""},{"path":"www.github.com/dev/reference/lmitt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Model for Intention To Treat — lmitt","text":"first argument lmitt() formula specifying outcome left hand side. right hand side formula can following: 1: Estimates main treatment effect. subgroup variable: Estimates treatment effect within level subgrouping variable. contiuous moderator: Estimates main treatment effect well treatment moderator interaciton. Note moderator automatically centered, desired please center data. Alternatively, obj can pre-created lm object. modification made formula object. See help .lmitt() details conversion. Note although Design creation functions (e.g. rct_design()) take optional subset= argument used creation Design, subset= argument passed lm() lmitt(). subset= argument creating Design restricts data used generate Design, direct impact future lm() lmitt() calls using Design. (can indirectly impact excluding particular units assignment/unitids/clusters recieving treatment assignment thus complete case analysis removes model.) hand, subset= argument lm() lmitt() refers subsetting data argument passed lm() lmitt(). avoid variable name collision, treatment variable defined design \".\" appended . example, request main treatment effect treatment variable named \"txt\", can obtain estimate returned DirectAdjusted object via $coefficients[\"txt.\"]. lmitt() produce message design passed block information utilized model. Note error, oversight. disable message, run options(\"propertee_message_on_unused_blocks\" = FALSE). Note: lmitt() currently support factor ordered treatment variables.","code":""},{"path":"www.github.com/dev/reference/lmrob_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","title":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","text":"Generate matrix estimating equations lmrob() fit Extract bread matrix lmrob() fit","code":""},{"path":"www.github.com/dev/reference/lmrob_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","text":"","code":"# S3 method for lmrob estfun(x, ...)  # S3 method for lmrob bread(x, ...)"},{"path":"www.github.com/dev/reference/lmrob_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","text":"x lmrob object produced using MM/SM estimator chain ... Additional arguments passed bread","code":""},{"path":"www.github.com/dev/reference/lmrob_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","text":"\\(n\\times \\)(p+1) matrix first column corresponds scale estimate remaining \\(p\\) colums correspond coefficients \\(p\\times \\)(p+1) matrix first column corresponds scale estimate remaining \\(p\\) colums correspond coefficients","code":""},{"path":"www.github.com/dev/reference/lmrob_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","text":"part workaround issue robustbase code affecting sandwich covariance estimation. issue question issue #6471, robustbase project R-Forge. function contributes providing sandwich estimates covariance-adjusted standard errors robust linear covariance adjustment models. part workaround issue robustbase code affecting sandwich covariance estimation. issue question issue #6471, robustbase project R-Forge. function contributes providing sandwich estimates covariance-adjusted standard errors robust linear covariance adjustment models.","code":""},{"path":"www.github.com/dev/reference/lmrob_methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate matrix of estimating equations for lmrob() fit — estfun.lmrob","text":"Ben B. Hansen","code":""},{"path":"www.github.com/dev/reference/lsoSynth.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake data — lsoSynth","title":"Fake data — lsoSynth","text":"Fake data","code":""},{"path":"www.github.com/dev/reference/lsoSynth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake data — lsoSynth","text":"","code":"lsoSynth"},{"path":"www.github.com/dev/reference/lsoSynth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fake data — lsoSynth","text":"data.frame ?? rows ?? columns. ???","code":""},{"path":"www.github.com/dev/reference/make_uoa_cluster_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dataframe that links units of assignment with clusters — make_uoa_cluster_df","title":"Make a dataframe that links units of assignment with clusters — make_uoa_cluster_df","text":"Make dataframe links units assignment clusters","code":""},{"path":"www.github.com/dev/reference/make_uoa_cluster_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dataframe that links units of assignment with clusters — make_uoa_cluster_df","text":"","code":"make_uoa_cluster_df(des, cluster = NULL)"},{"path":"www.github.com/dev/reference/make_uoa_cluster_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dataframe that links units of assignment with clusters — make_uoa_cluster_df","text":"des Design object. cluster character vector column names use clusters. Columns must exist dataframe used create Design object. Defaults NULL, case column names specified unitid(), unit_of_assignment(), cluster() function Design formula used.","code":""},{"path":"www.github.com/dev/reference/make_uoa_cluster_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dataframe that links units of assignment with clusters — make_uoa_cluster_df","text":"dataframe number rows coincides number distinct unit assignment cluster combinations (depending whether cluster less granular level assignment level) columns correspond unit assignment columns \"cluster\" column","code":""},{"path":"www.github.com/dev/reference/print.summary.Design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of Design object — print.summary.Design","title":"Print summary of Design object — print.summary.Design","text":"Print summary Design object","code":""},{"path":"www.github.com/dev/reference/print.summary.Design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of Design object — print.summary.Design","text":"","code":"# S3 method for summary.Design print(x, ..., max_unit_print = 3)"},{"path":"www.github.com/dev/reference/print.summary.Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of Design object — print.summary.Design","text":"x summary.Design object ... args max_unit_print Maximum number treatment levels print treatment table","code":""},{"path":"www.github.com/dev/reference/print.summary.Design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of Design object — print.summary.Design","text":"object, invisibly","code":""},{"path":"www.github.com/dev/reference/print.summary.DirectAdjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of DirectAdjusted object — print.summary.DirectAdjusted","title":"Print summary of DirectAdjusted object — print.summary.DirectAdjusted","text":"Print summary DirectAdjusted object","code":""},{"path":"www.github.com/dev/reference/print.summary.DirectAdjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of DirectAdjusted object — print.summary.DirectAdjusted","text":"","code":"# S3 method for summary.DirectAdjusted print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   signif.stars = getOption(\"show.signif.stars\"),   ... )"},{"path":"www.github.com/dev/reference/print.summary.DirectAdjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of DirectAdjusted object — print.summary.DirectAdjusted","text":"x summary.DirectAdjusted object digits number significant digits use printing. signif.stars logical. ‘TRUE’, ‘significance stars’ printed coefficient. ... args","code":""},{"path":"www.github.com/dev/reference/print.summary.DirectAdjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of DirectAdjusted object — print.summary.DirectAdjusted","text":"object, invisibly","code":""},{"path":"www.github.com/dev/reference/sandwich_elements_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) Compute variance blocks — .get_a22_inverse","title":"(Internal) Compute variance blocks — .get_a22_inverse","text":"(Internal) Compute variance blocks","code":""},{"path":"www.github.com/dev/reference/sandwich_elements_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) Compute variance blocks — .get_a22_inverse","text":"","code":".get_a22_inverse(x, ...)  .get_a11_inverse(x)  .get_a21(x)  .get_tilde_a22_inverse(x, ...)  .get_tilde_a21(x)"},{"path":"www.github.com/dev/reference/sandwich_elements_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) Compute variance blocks — .get_a22_inverse","text":"x fitted DirectAdjusted model ... Arguments passed .get_a22_inverse, .get_a21","code":""},{"path":"www.github.com/dev/reference/sandwich_elements_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) Compute variance blocks — .get_a22_inverse","text":".get_a22_inverse()/.get_tilde_a22_inverse(): \\(k\\times k\\) matrix k denotes number parameters ITT effect model .get_a11_inverse(): \\(p\\times p\\) matrix \\(p\\) dimension covariance adjustment model including intercept .get_a21()/.get_tilde_a21(): \\(k\\times p\\) matrix number rows given dimension ITT effect estimating equations number columns given number terms covariance adjustment model","code":""},{"path":"www.github.com/dev/reference/sandwich_elements_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Internal) Compute variance blocks — .get_a22_inverse","text":"\\(A_{22}^{-1}\\) inverse observed Fisher information ITT effect estimating equations scaled \\(n_{\\mathcal{Q}}\\). \\(A_{11}^{-1}\\) inverse gradient covariance adjustment model estimating equations scaled \\(n_{\\mathcal{C}}^{-1}\\). \\(A_{21}\\) gradient ITT effect estimating equations scaled \\(n_{\\mathcal{Q}}^{-1}\\) taken respect covariance adjustment model parameters. matrix crossproduct prediction gradient units observation \\(\\mathcal{Q}\\) model matrix ITT effect estimating eqations. \\(\\tilde{}_{22}^{-1}\\) inverse observed Fisher information ITT effect estimating equations scaled \\(n\\). function wraps around function .get_a22_inverse() produces \\(A_{22}^{-1}\\), \\(A_{22}=\\frac{n}{n_{\\mathcal{Q}}}\\tilde{}_{22}\\). \\(\\tilde{}_{21}\\) gradient ITT effect estimating equations scaled \\(n^{-1}\\) taken respect covariance adjustment model parameters. function wraps around .get_a21(), produces \\(A_{21}\\), \\(A_{21} = \\frac{n_{\\mathcal{Q}}}{n}   \\tilde{}_{21}\\).","code":""},{"path":"www.github.com/dev/reference/show-Design-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a Design — show,Design-method","title":"Display a Design — show,Design-method","text":"Display Design","code":""},{"path":"www.github.com/dev/reference/show-Design-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a Design — show,Design-method","text":"","code":"# S4 method for Design show(object)"},{"path":"www.github.com/dev/reference/show-Design-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a Design — show,Design-method","text":"object Design object","code":""},{"path":"www.github.com/dev/reference/show-Design-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a Design — show,Design-method","text":"invisible copy object","code":""},{"path":"www.github.com/dev/reference/show-DesignStructure-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a DesignStructure — show,DesignStructure-method","title":"Show a DesignStructure — show,DesignStructure-method","text":"Show DesignStructure","code":""},{"path":"www.github.com/dev/reference/show-DesignStructure-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a DesignStructure — show,DesignStructure-method","text":"","code":"# S4 method for DesignStructure show(object)"},{"path":"www.github.com/dev/reference/show-DesignStructure-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a DesignStructure — show,DesignStructure-method","text":"object DesignStructure object","code":""},{"path":"www.github.com/dev/reference/show-DesignStructure-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a DesignStructure — show,DesignStructure-method","text":"invisible copy object","code":""},{"path":"www.github.com/dev/reference/show-DirectAdjusted-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show an DirectAdjusted — show,DirectAdjusted-method","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"Show DirectAdjusted","code":""},{"path":"www.github.com/dev/reference/show-DirectAdjusted-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"","code":"# S4 method for DirectAdjusted show(object)"},{"path":"www.github.com/dev/reference/show-DirectAdjusted-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"object DirectAdjusted object","code":""},{"path":"www.github.com/dev/reference/show-DirectAdjusted-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show an DirectAdjusted — show,DirectAdjusted-method","text":"invisible copy object","code":""},{"path":"www.github.com/dev/reference/show-WeightedDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a WeightedDesign — show,WeightedDesign-method","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"Show WeightedDesign","code":""},{"path":"www.github.com/dev/reference/show-WeightedDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign show(object)"},{"path":"www.github.com/dev/reference/show-WeightedDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"object WeightedDesignDesign object","code":""},{"path":"www.github.com/dev/reference/show-WeightedDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a WeightedDesign — show,WeightedDesign-method","text":"invisible copy object","code":""},{"path":"www.github.com/dev/reference/simdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data with unit of assignment level treatment assignment — simdata","title":"Simulated data with unit of assignment level treatment assignment — simdata","text":"Simulated data unit assignment level treatment assignment","code":""},{"path":"www.github.com/dev/reference/simdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data with unit of assignment level treatment assignment — simdata","text":"","code":"simdata"},{"path":"www.github.com/dev/reference/simdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data with unit of assignment level treatment assignment — simdata","text":"data.frame 100 rows 7 columns. cid1 First level unit assignment ID cid2 Second level unit assignment ID bid Block ID force Forcing variable z Binary treatment indicator o 4-level ordered treatment variable dose Dose treatment variable x predictor y outcome","code":""},{"path":"www.github.com/dev/reference/studentdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Student data — schooldata","title":"Student data — schooldata","text":"Student data","code":""},{"path":"www.github.com/dev/reference/studentdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student data — schooldata","text":"","code":"schooldata  studentdata"},{"path":"www.github.com/dev/reference/studentdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Student data — schooldata","text":"Two data.frames, one school-level data (schooldata) including treatment assignment second student-level data (studentdata). schoolata: schoolid Unique school ID variable. treatment school intervention group? state State school . pct_disadvantage Percent student body flagged \"disadvantaged\". studentdata: id Unique student ID. schoolid Unique school ID variable. grade Student's grade, 3-5. gpa Student GPA prior year. math Standarized math score (100). object class data.frame 8713 rows 5 columns.","code":""},{"path":"www.github.com/dev/reference/studentdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Student data — schooldata","text":"","code":"des <- obs_design(treatment ~ uoa(schoolid), data = schooldata)  # Treatment effect lmitt(math ~ 1, design = des, data = studentdata) #>  #> Call: #> stats::lm(formula = math ~ treatment., data = structure(list( #>     studentid = 1:8713, schoolid = c(\"NJLMIFXDEK\", \"GSHWBCJXVZ\",  #>     \"ZBXYPQEVLU\", \"MCBXZBXGJN\", \"NOTPDVRLPM\", \"NTSOYECHZQ\", \"VKEOEUOTDQ\",  #>     \"ZBXYPQEVLU\", \"ZTTKZEEJZP\", \"JHVIRHYUEP\", \"AHOMYEGIBP\", \"TLGDIASGEL\",  #>     \"PKBCVRCMCS\", \"TKKAYBAFGV\", \"CFSINPQYCO\", \"MHVRYUZJWL\", \"WLNMRBXMPC\",  #>     \"PHIZOLWIBS\", \"EOJBYFQEOY\", \"ISHHJNXLMR\", \"HLWNYXNVYM\", \"CFSINPQYCO\",  #>     \"RNAOTFIWTN\", \"CJQEUMATTB\", \"TWBOLWJGAR\", \"NOTPDVRLPM\", \"SPBEZTBJFS\",  #>     \"VKEOEUOTDQ\", \"LGWJJITBKZ\", \"HLWNYXNVYM\", \"XDEAUVDMFQ\", \"RNAOTFIWTN\",  #>     \"ZPWKFFVOCB\", \"VOXRCHMDIT\", \"RMEYEXVXVX\", \"GXQQOGSTOQ\", \"AHOMYEGIBP\",  #>     \"VOXRCHMDIT\", \"TXFSIPGCID\", \"LGWJJITBKZ\", \"OPNAGRHLZM\", \"EAMRJPOWLU\",  #>     \"NJLMIFXDEK\", \"CJQEUMATTB\", \"PHIZOLWIBS\", \"YDGABWKNRS\", \"OPNAGRHLZM\",  #>     \"BJUNWZLJYP\", \"UCYFOWDBOQ\", \"ACYJOPUKSD\", \"GSNHQUBLXJ\", \"LEESGFRPHV\",  #>     \"GRCMVPYLDK\", \"AIJRHVVDKP\", \"VKEOEUOTDQ\", \"YROTAZMWFI\", \"SVBBYDPIOA\",  #>     \"PBLJMWGFTW\", \"CJQEUMATTB\", \"JVKZPZVIIU\", \"FKXBYBMICY\", \"IYNWQZVCCI\",  #>     \"BKYOKYIUGW\", \"DRQRVFYUCX\", \"KTANGMAQMT\", \"CMEKXFGTSR\", \"SVBBYDPIOA\",  #>     \"CJQEUMATTB\", \"QKSAXQEAIB\", \"RHALOWGMGJ\", \"ASCJFWFUGV\", \"WLNMRBXMPC\",  #>     \"ZPWKFFVOCB\", \"PKTRNWCHPR\", \"IYNWQZVCCI\", \"SPBEZTBJFS\", \"SVBBYDPIOA\",  #>     \"VKEOEUOTDQ\", \"CJQEUMATTB\", \"JVCERYCMOA\", \"FHCLEHLIXM\", \"CALRWQEBFZ\",  #>     \"HPKSIGVDRL\", \"CUYVXLQJIV\", \"CJQEUMATTB\", \"AZVIVPYKND\", \"VBFGFOMUQJ\",  #>     \"EAMRJPOWLU\", \"QBPRAWZTBF\", \"UFXSCLPLER\", \"AZVIVPYKND\", \"YDGABWKNRS\",  #>     \"QMDWWKFVRU\", \"ZTCMALLRXB\", \"JPARFIKTYL\", \"HGHMEUCTEX\", \"AFUTZUEXVM\",  #>     \"MMCWEZDZSL\", \"TWBOLWJGAR\", \"FHCLEHLIXM\", \"FHCLEHLIXM\", \"HYHAFAFYEA\",  #>     \"RMEYEXVXVX\", \"WNATHOQPJS\", \"JPARFIKTYL\", \"CKNVKMZWDC\", \"TWBOLWJGAR\",  #>     \"RMEYEXVXVX\", \"EAMRJPOWLU\", \"YFDQMQIVBM\", \"CFSINPQYCO\", \"TLGDIASGEL\",  #>     \"AOKHTNTQJC\", \"PHIZOLWIBS\", \"KTANGMAQMT\", \"JVCERYCMOA\", \"JFHAGKINER\",  #>     \"QMDWWKFVRU\", \"XDEAUVDMFQ\", \"HYUIWKYPXU\", \"AOKHTNTQJC\", \"XKSCGLSVUZ\",  #>     \"NJLMIFXDEK\", \"ELMZBUCGXP\", \"RFAKZMSZMB\", \"GXYQHIZVPD\", \"RFAKZMSZMB\",  #>     \"NCXWRVCMVY\", \"QQIQBNKASY\", \"RQDKTNHSYQ\", \"OSNCJRVKET\", \"AHOMYEGIBP\",  #>     \"ZTTKZEEJZP\", \"CKNVKMZWDC\", \"KTANGMAQMT\", \"ESYOZKOHCU\", \"UZRCINDECG\",  #>     \"KTANGMAQMT\", \"JFHAGKINER\", \"NOTPDVRLPM\", \"GSNHQUBLXJ\", \"FKXBYBMICY\",  #>     \"DRQRVFYUCX\", \"AIJRHVVDKP\", \"ZTCMALLRXB\", \"EWTGOBRLKP\", \"ENXVDYZEEW\",  #>     \"VKEOEUOTDQ\", \"EJSYIOEOJL\", \"YFDQMQIVBM\", \"YFDQMQIVBM\", \"PBLJMWGFTW\",  #>     \"CKNVKMZWDC\", \"ACYJOPUKSD\", \"LGWJJITBKZ\", \"AHOMYEGIBP\", \"ELMZBUCGXP\",  #>     \"KBYFYYONYU\", \"ESYOZKOHCU\", \"ESYOZKOHCU\", \"WMVGSBQYPB\", \"RMEYEXVXVX\",  #>     \"NJLMIFXDEK\", \"ZTCMALLRXB\", \"CFSINPQYCO\", \"AOKHTNTQJC\", \"EKNGZSKPGF\",  #>     \"EZLGDZHKHT\", \"MGDZOPJAFG\", \"XKSCGLSVUZ\", \"PKTRNWCHPR\", \"TWBOLWJGAR\",  #>     \"YFDQMQIVBM\", \"RNAOTFIWTN\", \"JSGBOZVHXC\", \"YFDQMQIVBM\", \"JOPGMOKVOM\",  #>     \"ELMZBUCGXP\", \"GXYQHIZVPD\", \"AQEEZTRLKH\", \"HYUIWKYPXU\", \"XSHYKGMBPQ\",  #>     \"EZLGDZHKHT\", \"QCCNNYIKTH\", \"URBJONTBBW\", \"WMVGSBQYPB\", \"ERVIHSPAYA\",  #>     \"JVKZPZVIIU\", \"ESYOZKOHCU\", \"HGHMEUCTEX\", \"LGWJJITBKZ\", \"TXFSIPGCID\",  #>     \"JWFPSYZNLW\", \"PKTRNWCHPR\", \"PHIZOLWIBS\", \"WNATHOQPJS\", \"JWFPSYZNLW\",  #>     \"AIJRHVVDKP\", \"JSGBOZVHXC\", \"GRCMVPYLDK\", \"HYUIWKYPXU\", \"HPKSIGVDRL\",  #>     \"CYQGGUSNEK\", \"UCYFOWDBOQ\", \"UNCDYWJXLO\", \"WNATHOQPJS\", \"DRQRVFYUCX\",  #>     \"JFHAGKINER\", \"AQEEZTRLKH\", \"GXQQOGSTOQ\", \"KIJPLWHVGS\", \"GXYQHIZVPD\",  #>     \"LHDUBEZXXM\", \"CONXBVIQSU\", \"KKKAFDRDCO\", \"DRQRVFYUCX\", \"JRNMLJJSDP\",  #>     \"RHALOWGMGJ\", \"RNAOTFIWTN\", \"JHXSYICTMS\", \"VKEOEUOTDQ\", \"JVKZPZVIIU\",  #>     \"CYQGGUSNEK\", \"JPARFIKTYL\", \"UZRCINDECG\", \"KTANGMAQMT\", \"WMVGSBQYPB\",  #>     \"QBPHMGOGFW\", \"JOPGMOKVOM\", \"TLGDIASGEL\", \"AGJEXFMJAO\", \"TBZWQOHERE\",  #>     \"LJJSFTJKBP\", \"ESYOZKOHCU\", \"RFAKZMSZMB\", \"VKEOEUOTDQ\", \"BZPWNEEBHR\",  #>     \"QBPHMGOGFW\", \"ONTOHBVEQC\", \"YDGABWKNRS\", \"KBYFYYONYU\", \"LEESGFRPHV\",  #>     \"YROTAZMWFI\", \"WNATHOQPJS\", \"UOFFHQQLIR\", \"QBPRAWZTBF\", \"AOKHTNTQJC\",  #>     \"QQIQBNKASY\", \"CUYVXLQJIV\", \"UJMNXDCYBB\", \"XKSCGLSVUZ\", \"MHVRYUZJWL\",  #>     \"AIJRHVVDKP\", \"ZTCMALLRXB\", \"JOPGMOKVOM\", \"CMEKXFGTSR\", \"CJQEUMATTB\",  #>     \"ZPWKFFVOCB\", \"JHVIRHYUEP\", \"JFHAGKINER\", \"YDGABWKNRS\", \"EJSYIOEOJL\",  #>     \"ESYOZKOHCU\", \"WKXIHCQQBN\", \"NTSOYECHZQ\", \"MPSFHTGKEF\", \"KTANGMAQMT\",  #>     \"VKEOEUOTDQ\", \"ZTTKZEEJZP\", \"WLNMRBXMPC\", \"SPBEZTBJFS\", \"OPNAGRHLZM\",  #>     \"HGHMEUCTEX\", \"RHALOWGMGJ\", \"RBWJLMGEPF\", \"ISHHJNXLMR\", \"RQDKTNHSYQ\",  #>     \"ESYOZKOHCU\", \"WMVGSBQYPB\", \"GXQQOGSTOQ\", \"MPSFHTGKEF\", \"TLGDIASGEL\",  #>     \"QQIQBNKASY\", \"ZBXYPQEVLU\", \"QCCNNYIKTH\", \"NOTPDVRLPM\", \"ELMZBUCGXP\",  #>     \"QQIQBNKASY\", \"AIJRHVVDKP\", \"VBFGFOMUQJ\", \"CMEKXFGTSR\", \"QKSAXQEAIB\",  #>     \"GXQQOGSTOQ\", \"LHDUBEZXXM\", \"ZBXYPQEVLU\", \"HYHAFAFYEA\", \"SPBEZTBJFS\",  #>     \"CUYVXLQJIV\", \"CUYVXLQJIV\", \"ISHHJNXLMR\", \"BKYOKYIUGW\", \"ASCJFWFUGV\",  #>     \"AFUTZUEXVM\", \"JPARFIKTYL\", \"QMDWWKFVRU\", \"EOJBYFQEOY\", \"KBYFYYONYU\",  #>     \"TLGDIASGEL\", \"ENXVDYZEEW\", \"JFHAGKINER\", \"QBPRAWZTBF\", \"XKSCGLSVUZ\",  #>     \"MMCWEZDZSL\", \"HYHAFAFYEA\", \"AOKHTNTQJC\", \"ENXVDYZEEW\", \"XCEJMFPVDX\",  #>     \"CFSINPQYCO\", \"ELMZBUCGXP\", \"JRNMLJJSDP\", \"NTSOYECHZQ\", \"LEESGFRPHV\",  #>     \"ONTOHBVEQC\", \"LEESGFRPHV\", \"UZRCINDECG\", \"MGDZOPJAFG\", \"KBYFYYONYU\",  #>     \"TWBOLWJGAR\", \"EOJBYFQEOY\", \"WNATHOQPJS\", \"KIJPLWHVGS\", \"ZTTKZEEJZP\",  #>     \"AGJEXFMJAO\", \"GSNHQUBLXJ\", \"HPKSIGVDRL\", \"URBJONTBBW\", \"VBFGFOMUQJ\",  #>     \"QBPHMGOGFW\", \"FIXJLQEKCP\", \"ERVIHSPAYA\", \"FKTIIHAGSF\", \"ERVIHSPAYA\",  #>     \"HGHMEUCTEX\", \"ESYOZKOHCU\", \"VOXRCHMDIT\", \"MHVRYUZJWL\", \"WEDUDZADWG\",  #>     \"EJSYIOEOJL\", \"TLGDIASGEL\", \"CKNVKMZWDC\", \"HGHMEUCTEX\", \"KTANGMAQMT\",  #>     \"EAMRJPOWLU\", \"PALVVUCJBF\", \"CKNVKMZWDC\", \"FIXJLQEKCP\", \"FHCLEHLIXM\",  #>     \"TWBOLWJGAR\", \"MHVRYUZJWL\", \"LEESGFRPHV\", \"CMEKXFGTSR\", \"ESYOZKOHCU\",  #>     \"ISHHJNXLMR\", \"OPNAGRHLZM\", \"UZRCINDECG\", \"SPBEZTBJFS\", \"CFXONOGTQH\",  #>     \"TKKAYBAFGV\", \"AIJRHVVDKP\", \"ISWVRSKEUK\", \"CUYVXLQJIV\", \"LHDUBEZXXM\",  #>     \"UCYFOWDBOQ\", \"JVCERYCMOA\", \"BKYOKYIUGW\", \"AOKHTNTQJC\", \"TKKAYBAFGV\",  #>     \"CFSINPQYCO\", \"KBYFYYONYU\", \"JPARFIKTYL\", \"SVYPVLUGHE\", \"JOPGMOKVOM\",  #>     \"QMDWWKFVRU\", \"TKKAYBAFGV\", \"VBFGFOMUQJ\", \"ENXVDYZEEW\", \"RHALOWGMGJ\",  #>     \"JWFPSYZNLW\", \"RFAKZMSZMB\", \"OSNCJRVKET\", \"TWBOLWJGAR\", \"QBPHMGOGFW\",  #>     \"RHALOWGMGJ\", \"BKYOKYIUGW\", \"PHIZOLWIBS\", \"RQDKTNHSYQ\", \"ZPWKFFVOCB\",  #>     \"VKEOEUOTDQ\", \"WNATHOQPJS\", \"KIJPLWHVGS\", \"LGWJJITBKZ\", \"KBYFYYONYU\",  #>     \"SVYPVLUGHE\", \"EAMRJPOWLU\", \"XDEAUVDMFQ\", \"JWFPSYZNLW\", \"CYQGGUSNEK\",  #>     \"HYHAFAFYEA\", \"QMDWWKFVRU\", \"CJQEUMATTB\", \"NOTPDVRLPM\", \"UZRCINDECG\",  #>     \"ZTCMALLRXB\", \"CJQEUMATTB\", \"UJMNXDCYBB\", \"BZPWNEEBHR\", \"RMEYEXVXVX\",  #>     \"QCCNNYIKTH\", \"QMDWWKFVRU\", \"DRQRVFYUCX\", \"QKSAXQEAIB\", \"XSHYKGMBPQ\",  #>     \"HPKSIGVDRL\", \"YROTAZMWFI\", \"CFSINPQYCO\", \"LJJSFTJKBP\", \"RQDKTNHSYQ\",  #>     \"XKSCGLSVUZ\", \"RNAOTFIWTN\", \"ZBXYPQEVLU\", \"VKEOEUOTDQ\", \"WMVGSBQYPB\",  #>     \"IYNWQZVCCI\", \"KKKAFDRDCO\", \"EOJBYFQEOY\", \"DRQRVFYUCX\", \"ASCJFWFUGV\",  #>     \"ERVIHSPAYA\", \"HYHAFAFYEA\", \"ONTOHBVEQC\", \"EAMRJPOWLU\", \"RFAKZMSZMB\",  #>     \"RFAKZMSZMB\", \"CJQEUMATTB\", \"TLGDIASGEL\", \"UJMNXDCYBB\", \"WMVGSBQYPB\",  #>     \"QBPRAWZTBF\", \"SVBBYDPIOA\", \"RQDKTNHSYQ\", \"CKNVKMZWDC\", \"UNCDYWJXLO\",  #>     \"JFHAGKINER\", \"RHALOWGMGJ\", \"UZRCINDECG\", \"BBONKKTFNG\", \"PBLJMWGFTW\",  #>     \"CYQGGUSNEK\", \"ERVIHSPAYA\", \"RQDKTNHSYQ\", \"WEDUDZADWG\", \"JVKZPZVIIU\",  #>     \"HCEHZFVRBV\", \"BJUNWZLJYP\", \"OSNCJRVKET\", \"BBONKKTFNG\", \"FHCLEHLIXM\",  #>     \"AFUTZUEXVM\", \"NTSOYECHZQ\", \"CMEKXFGTSR\", \"JPARFIKTYL\", \"KBYFYYONYU\",  #>     \"SPBEZTBJFS\", \"LJJSFTJKBP\", \"LEESGFRPHV\", \"VKEOEUOTDQ\", \"AFUTZUEXVM\",  #>     \"CONXBVIQSU\", \"RQDKTNHSYQ\", \"EAMRJPOWLU\", \"KTANGMAQMT\", \"UOFFHQQLIR\",  #>     \"KIJPLWHVGS\", \"EZLGDZHKHT\", \"JWFPSYZNLW\", \"WEDUDZADWG\", \"RMEYEXVXVX\",  #>     \"ZBXYPQEVLU\", \"QEAYJDRZQO\", \"AFUTZUEXVM\", \"RQDKTNHSYQ\", \"HYUIWKYPXU\",  #>     \"PBLJMWGFTW\", \"RQDKTNHSYQ\", \"JOPGMOKVOM\", \"JOPGMOKVOM\", \"LGWJJITBKZ\",  #>     \"BKYOKYIUGW\", \"QCCNNYIKTH\", \"QMDWWKFVRU\", \"KBYFYYONYU\", \"AQEEZTRLKH\",  #>     \"NJLMIFXDEK\", \"ZBXYPQEVLU\", \"FKTIIHAGSF\", \"NJLMIFXDEK\", \"HCEHZFVRBV\",  #>     \"TKKAYBAFGV\", \"WNATHOQPJS\", \"QQIQBNKASY\", \"EOJBYFQEOY\", \"JRNMLJJSDP\",  #>     \"ZTTKZEEJZP\", \"EOJBYFQEOY\", \"ISHHJNXLMR\", \"AZVIVPYKND\", \"RMEYEXVXVX\",  #>     \"JSGBOZVHXC\", \"TKKAYBAFGV\", \"MGDZOPJAFG\", \"QBPRAWZTBF\", \"NJLMIFXDEK\",  #>     \"JHVIRHYUEP\", \"ESYOZKOHCU\", \"QMDWWKFVRU\", \"EZLGDZHKHT\", \"ISHHJNXLMR\",  #>     \"LEESGFRPHV\", \"WEDUDZADWG\", \"ACYJOPUKSD\", \"KIJPLWHVGS\", \"ZBXYPQEVLU\",  #>     \"PALVVUCJBF\", \"EAMRJPOWLU\", \"EOJBYFQEOY\", \"CFXONOGTQH\", \"QMDWWKFVRU\",  #>     \"JRNMLJJSDP\", \"JWFPSYZNLW\", \"QKSAXQEAIB\", \"SVBBYDPIOA\", \"LEESGFRPHV\",  #>     \"PHIZOLWIBS\", \"JOPGMOKVOM\", \"QQIQBNKASY\", \"RQDKTNHSYQ\", \"URBJONTBBW\",  #>     \"GRCMVPYLDK\", \"QKSAXQEAIB\", \"XDEAUVDMFQ\", \"MQKHZKWIKA\", \"JFHAGKINER\",  #>     \"ACYJOPUKSD\", \"AIJRHVVDKP\", \"ZPWKFFVOCB\", \"JVCERYCMOA\", \"GSHWBCJXVZ\",  #>     \"WLNMRBXMPC\", \"WEDUDZADWG\", \"ZTCMALLRXB\", \"ESYOZKOHCU\", \"CMEKXFGTSR\",  #>     \"SVYPVLUGHE\", \"RBWJLMGEPF\", \"XDEAUVDMFQ\", \"CONXBVIQSU\", \"UZRCINDECG\",  #>     \"KBYFYYONYU\", \"GRCMVPYLDK\", \"GXYQHIZVPD\", \"HGHMEUCTEX\", \"XDEAUVDMFQ\",  #>     \"ISHHJNXLMR\", \"CFSINPQYCO\", \"ONTOHBVEQC\", \"BKYOKYIUGW\", \"JHXSYICTMS\",  #>     \"OPNAGRHLZM\", \"NTSOYECHZQ\", \"JWFPSYZNLW\", \"ZTTKZEEJZP\", \"CALRWQEBFZ\",  #>     \"VKEOEUOTDQ\", \"JVCERYCMOA\", \"AOKHTNTQJC\", \"UCYFOWDBOQ\", \"VOXRCHMDIT\",  #>     \"EJSYIOEOJL\", \"RNAOTFIWTN\", \"CYQGGUSNEK\", \"RFAKZMSZMB\", \"QBPRAWZTBF\",  #>     \"ASCJFWFUGV\", \"HCEHZFVRBV\", \"JVCERYCMOA\", \"HPKSIGVDRL\", \"GKPLYRURBB\",  #>     \"CUYVXLQJIV\", \"ISHHJNXLMR\", \"AGJEXFMJAO\", \"XKSCGLSVUZ\", \"JVCERYCMOA\",  #>     \"RQDKTNHSYQ\", \"PKBCVRCMCS\", \"VKEOEUOTDQ\", \"GSNHQUBLXJ\", \"ZTTKZEEJZP\",  #>     \"CUYVXLQJIV\", \"ERVIHSPAYA\", \"EJSYIOEOJL\", \"JVCERYCMOA\", \"JPARFIKTYL\",  #>     \"MPSFHTGKEF\", \"ZPWKFFVOCB\", \"OPNAGRHLZM\", \"ONTOHBVEQC\", \"AIJRHVVDKP\",  #>     \"SVBBYDPIOA\", \"QBPRAWZTBF\", \"WEDUDZADWG\", \"NJLMIFXDEK\", \"HCEHZFVRBV\",  #>     \"MHVRYUZJWL\", \"JVKZPZVIIU\", \"UJMNXDCYBB\", \"CUYVXLQJIV\", \"WKXIHCQQBN\",  #>     \"TWBOLWJGAR\", \"OPNAGRHLZM\", \"WNATHOQPJS\", \"OPNAGRHLZM\", \"QCCNNYIKTH\",  #>     \"RHALOWGMGJ\", \"BJUNWZLJYP\", \"TBZWQOHERE\", \"CMEKXFGTSR\", \"YROTAZMWFI\",  #>     \"JOPGMOKVOM\", \"CKNVKMZWDC\", \"CJQEUMATTB\", \"EAMRJPOWLU\", \"HYHAFAFYEA\",  #>     \"ACYJOPUKSD\", \"TLGDIASGEL\", \"ISWVRSKEUK\", \"YFDQMQIVBM\", \"TXFSIPGCID\",  #>     \"WEDUDZADWG\", \"LHDUBEZXXM\", \"JVCERYCMOA\", \"ZTCMALLRXB\", \"WNATHOQPJS\",  #>     \"GSNHQUBLXJ\", \"AIJRHVVDKP\", \"GXYQHIZVPD\", \"UJMNXDCYBB\", \"QBPRAWZTBF\",  #>     \"CJQEUMATTB\", \"UFXSCLPLER\", \"YDGABWKNRS\", \"NOTPDVRLPM\", \"ERVIHSPAYA\",  #>     \"UOFFHQQLIR\", \"CFXONOGTQH\", \"GKPLYRURBB\", \"VKEOEUOTDQ\", \"ELMZBUCGXP\",  #>     \"HCEHZFVRBV\", \"KTANGMAQMT\", \"AGJEXFMJAO\", \"GKPLYRURBB\", \"RNAOTFIWTN\",  #>     \"CMEKXFGTSR\", \"RSSXENWCQU\", \"CJQEUMATTB\", \"GSNHQUBLXJ\", \"EOJBYFQEOY\",  #>     \"WNATHOQPJS\", \"XCEJMFPVDX\", \"ONTOHBVEQC\", \"HYUIWKYPXU\", \"JOPGMOKVOM\",  #>     \"CMEKXFGTSR\", \"PKTRNWCHPR\", \"KTANGMAQMT\", \"GRCMVPYLDK\", \"NOTPDVRLPM\",  #>     \"FHCLEHLIXM\", \"BHOFOGKCJA\", \"GKPLYRURBB\", \"LEESGFRPHV\", \"HLWNYXNVYM\",  #>     \"XCEJMFPVDX\", \"GXQQOGSTOQ\", \"CONXBVIQSU\", \"HYHAFAFYEA\", \"GKPLYRURBB\",  #>     \"QQIQBNKASY\", \"IIKTKPNNPT\", \"ONTOHBVEQC\", \"ZTTKZEEJZP\", \"QMDWWKFVRU\",  #>     \"VBFGFOMUQJ\", \"MHVRYUZJWL\", \"TWBOLWJGAR\", \"PBLJMWGFTW\", \"RHALOWGMGJ\",  #>     \"EAMRJPOWLU\", \"LEESGFRPHV\", \"CFSINPQYCO\", \"TXFSIPGCID\", \"PKBCVRCMCS\",  #>     \"MQKHZKWIKA\", \"VKEOEUOTDQ\", \"LGWJJITBKZ\", \"ESYOZKOHCU\", \"HYUIWKYPXU\",  #>     \"KTANGMAQMT\", \"GSHWBCJXVZ\", \"FKXBYBMICY\", \"XDEAUVDMFQ\", \"EZLGDZHKHT\",  #>     \"GRCMVPYLDK\", \"CALRWQEBFZ\", \"KBYFYYONYU\", \"ICUEBKDOGB\", \"MMCWEZDZSL\",  #>     \"JVKZPZVIIU\", \"WMVGSBQYPB\", \"ISWVRSKEUK\", \"SVBBYDPIOA\", \"GKPLYRURBB\",  #>     \"GXQQOGSTOQ\", \"KTANGMAQMT\", \"ERVIHSPAYA\", \"SPBEZTBJFS\", \"HYHAFAFYEA\",  #>     \"CKNVKMZWDC\", \"NJLMIFXDEK\", \"LEESGFRPHV\", \"RFAKZMSZMB\", \"CKNVKMZWDC\",  #>     \"MQKHZKWIKA\", \"GKPLYRURBB\", \"YFDQMQIVBM\", \"QBPHMGOGFW\", \"RQDKTNHSYQ\",  #>     \"MPSFHTGKEF\", \"CUYVXLQJIV\", \"MGDZOPJAFG\", \"FIXJLQEKCP\", \"ISHHJNXLMR\",  #>     \"LJJSFTJKBP\", \"HGHMEUCTEX\", \"RHALOWGMGJ\", \"TKKAYBAFGV\", \"FHCLEHLIXM\",  #>     \"ZBXYPQEVLU\", \"QBPHMGOGFW\", \"TLGDIASGEL\", \"VOXRCHMDIT\", \"ISHHJNXLMR\",  #>     \"UNCDYWJXLO\", \"MMCWEZDZSL\", \"WMVGSBQYPB\", \"YROTAZMWFI\", \"JFHAGKINER\",  #>     \"ZTTKZEEJZP\", \"JWFPSYZNLW\", \"AGJEXFMJAO\", \"QCCNNYIKTH\", \"JOPGMOKVOM\",  #>     \"AFUTZUEXVM\", \"CJQEUMATTB\", \"OSNCJRVKET\", \"VKEOEUOTDQ\", \"XKSCGLSVUZ\",  #>     \"BZPWNEEBHR\", \"UZRCINDECG\", \"TWBOLWJGAR\", \"OSNCJRVKET\", \"ENXVDYZEEW\",  #>     \"JFHAGKINER\", \"PKBCVRCMCS\", \"KIJPLWHVGS\", \"WNATHOQPJS\", \"SPBEZTBJFS\",  #>     \"UOFFHQQLIR\", \"KTANGMAQMT\", \"BHOFOGKCJA\", \"MHVRYUZJWL\", \"WNATHOQPJS\",  #>     \"WLNMRBXMPC\", \"LEESGFRPHV\", \"ERVIHSPAYA\", \"CUYVXLQJIV\", \"RFAKZMSZMB\",  #>     \"ZTCMALLRXB\", \"CYQGGUSNEK\", \"PALVVUCJBF\", \"HLWNYXNVYM\", \"ZBXYPQEVLU\",  #>     \"GRCMVPYLDK\", \"WEDUDZADWG\", \"YFDQMQIVBM\", \"UFXSCLPLER\", \"ENXVDYZEEW\",  #>     \"VOXRCHMDIT\", \"HGHMEUCTEX\", \"SVBBYDPIOA\", \"GXYQHIZVPD\", \"YROTAZMWFI\",  #>     \"TWBOLWJGAR\", \"CALRWQEBFZ\", \"CONXBVIQSU\", \"URBJONTBBW\", \"RFAKZMSZMB\",  #>     \"ESYOZKOHCU\", \"MCBXZBXGJN\", \"ACYJOPUKSD\", \"CONXBVIQSU\", \"EJSYIOEOJL\",  #>     \"BZPWNEEBHR\", \"EZLGDZHKHT\", \"ISHHJNXLMR\", \"GRCMVPYLDK\", \"VOXRCHMDIT\",  #>     \"PKTRNWCHPR\", \"ZTCMALLRXB\", \"TLGDIASGEL\", \"ZBXYPQEVLU\", \"UZRCINDECG\",  #>     \"RHALOWGMGJ\", \"JOPGMOKVOM\", \"WMVGSBQYPB\", \"FIXJLQEKCP\", \"MQKHZKWIKA\",  #>     \"UNCDYWJXLO\", \"IYNWQZVCCI\", \"SVYPVLUGHE\", \"MCBXZBXGJN\", \"YFDQMQIVBM\",  #>     \"RBWJLMGEPF\", \"HYUIWKYPXU\", \"RQDKTNHSYQ\", \"HCEHZFVRBV\", \"BKYOKYIUGW\",  #>     \"JVKZPZVIIU\", \"DRQRVFYUCX\", \"JHVIRHYUEP\", \"QMDWWKFVRU\", \"MCBXZBXGJN\",  #>     \"HGHMEUCTEX\", \"ACYJOPUKSD\", \"TWBOLWJGAR\", \"ICUEBKDOGB\", \"CFXONOGTQH\",  #>     \"KTANGMAQMT\", \"BKYOKYIUGW\", \"RFAKZMSZMB\", \"AGJEXFMJAO\", \"AFUTZUEXVM\",  #>     \"VKEOEUOTDQ\", \"KBYFYYONYU\", \"MGDZOPJAFG\", \"ISHHJNXLMR\", \"QBPRAWZTBF\",  #>     \"BBONKKTFNG\", \"GKPLYRURBB\", \"XSHYKGMBPQ\", \"JVCERYCMOA\", \"HGHMEUCTEX\",  #>     \"TKKAYBAFGV\", \"YROTAZMWFI\", \"ASCJFWFUGV\", \"MGDZOPJAFG\", \"AIJRHVVDKP\",  #>     \"RFAKZMSZMB\", \"TWBOLWJGAR\", \"FKXBYBMICY\", \"ISWVRSKEUK\", \"JSGBOZVHXC\",  #>     \"NJLMIFXDEK\", \"GXYQHIZVPD\", \"XKSCGLSVUZ\", \"IYNWQZVCCI\", \"HGHMEUCTEX\",  #>     \"ACYJOPUKSD\", \"ISHHJNXLMR\", \"UOFFHQQLIR\", \"NOTPDVRLPM\", \"KTANGMAQMT\",  #>     \"GRCMVPYLDK\", \"WKXIHCQQBN\", \"EAMRJPOWLU\", \"PHIZOLWIBS\", \"XKSCGLSVUZ\",  #>     \"NCXWRVCMVY\", \"RSSXENWCQU\", \"UJMNXDCYBB\", \"VBFGFOMUQJ\", \"AFUTZUEXVM\",  #>     \"ZTTKZEEJZP\", \"VKEOEUOTDQ\", \"ONTOHBVEQC\", \"FKXBYBMICY\", \"WNATHOQPJS\",  #>     \"JRNMLJJSDP\", \"RHALOWGMGJ\", \"XKSCGLSVUZ\", \"AIJRHVVDKP\", \"MPSFHTGKEF\",  #>     \"VBFGFOMUQJ\", \"BZPWNEEBHR\", \"CFSINPQYCO\", \"WLNMRBXMPC\", \"WMVGSBQYPB\",  #>     \"RFAKZMSZMB\", \"KKKAFDRDCO\", \"CYQGGUSNEK\", \"GKPLYRURBB\", \"JVCERYCMOA\",  #>     \"CALRWQEBFZ\", \"XKSCGLSVUZ\", \"GXQQOGSTOQ\", \"CFXONOGTQH\", \"JOPGMOKVOM\",  #>     \"JWFPSYZNLW\", \"KBYFYYONYU\", \"SVYPVLUGHE\", \"RMEYEXVXVX\", \"UZRCINDECG\",  #>     \"ICUEBKDOGB\", \"JWFPSYZNLW\", \"QCCNNYIKTH\", \"VKEOEUOTDQ\", \"GKPLYRURBB\",  #>     \"JPARFIKTYL\", \"LEESGFRPHV\", \"YFDQMQIVBM\", \"ZTCMALLRXB\", \"JSGBOZVHXC\",  #>     \"GXQQOGSTOQ\", \"WNATHOQPJS\", \"EOJBYFQEOY\", \"HLWNYXNVYM\", \"QMDWWKFVRU\",  #>     \"GKPLYRURBB\", \"EOJBYFQEOY\", \"JFHAGKINER\", \"CFXONOGTQH\", \"KTANGMAQMT\",  #>     \"SPBEZTBJFS\", \"SVYPVLUGHE\", \"AIJRHVVDKP\", \"SPBEZTBJFS\", \"BKYOKYIUGW\",  #>     \"RQDKTNHSYQ\", \"ACYJOPUKSD\", \"MCBXZBXGJN\", \"HYUIWKYPXU\", \"JSGBOZVHXC\",  #>     \"VKEOEUOTDQ\", \"CFXONOGTQH\", \"JHXSYICTMS\", \"HCEHZFVRBV\", \"ESYOZKOHCU\",  #>     \"ACYJOPUKSD\", \"LJJSFTJKBP\", \"BJUNWZLJYP\", \"RHALOWGMGJ\", \"CMEKXFGTSR\",  #>     \"RSSXENWCQU\", \"MGDZOPJAFG\", \"JVCERYCMOA\", \"JPARFIKTYL\", \"GSNHQUBLXJ\",  #>     \"UOFFHQQLIR\", \"GRCMVPYLDK\", \"CKNVKMZWDC\", \"ESYOZKOHCU\", \"ENXVDYZEEW\",  #>     \"JWFPSYZNLW\", \"JWFPSYZNLW\", \"ESYOZKOHCU\", \"GSNHQUBLXJ\", \"QBPRAWZTBF\",  #>     \"ELMZBUCGXP\", \"SVYPVLUGHE\", \"JOPGMOKVOM\", \"JRNMLJJSDP\", \"BKYOKYIUGW\",  #>     \"HGHMEUCTEX\", \"GKPLYRURBB\", \"AGJEXFMJAO\", \"RSSXENWCQU\", \"JSGBOZVHXC\",  #>     \"UCYFOWDBOQ\", \"ZBXYPQEVLU\", \"PHIZOLWIBS\", \"AGJEXFMJAO\", \"UOFFHQQLIR\",  #>     \"WMVGSBQYPB\", \"JVCERYCMOA\", \"TXFSIPGCID\", \"CFSINPQYCO\", \"KBYFYYONYU\",  #>     \"CJQEUMATTB\", \"HGHMEUCTEX\", \"RMEYEXVXVX\", \"BZPWNEEBHR\", \"XKSCGLSVUZ\",  #>     \"WMVGSBQYPB\", \"JVCERYCMOA\", \"AIJRHVVDKP\", \"XDEAUVDMFQ\", \"MHVRYUZJWL\",  #>     \"UJMNXDCYBB\", \"WEDUDZADWG\", \"JHXSYICTMS\", \"EOJBYFQEOY\", \"UOFFHQQLIR\",  #>     \"VOXRCHMDIT\", \"MPSFHTGKEF\", \"ISHHJNXLMR\", \"GRCMVPYLDK\", \"HPKSIGVDRL\",  #>     \"ZTTKZEEJZP\", \"RMEYEXVXVX\", \"RMEYEXVXVX\", \"JWFPSYZNLW\", \"QMDWWKFVRU\",  #>     \"QQIQBNKASY\", \"JVKZPZVIIU\", \"FIXJLQEKCP\", \"ZTTKZEEJZP\", \"RQDKTNHSYQ\",  #>     \"JHXSYICTMS\", \"TKKAYBAFGV\", \"CYQGGUSNEK\", \"FHCLEHLIXM\", \"PKTRNWCHPR\",  #>     \"XSHYKGMBPQ\", \"LHDUBEZXXM\", \"TWBOLWJGAR\", \"GKPLYRURBB\", \"XKSCGLSVUZ\",  #>     \"QBPHMGOGFW\", \"KKKAFDRDCO\", \"KBYFYYONYU\", \"CKNVKMZWDC\", \"FKTIIHAGSF\",  #>     \"WEDUDZADWG\", \"QMDWWKFVRU\", \"IIKTKPNNPT\", \"KTANGMAQMT\", \"UJMNXDCYBB\",  #>     \"YFDQMQIVBM\", \"CUYVXLQJIV\", \"NJLMIFXDEK\", \"FKTIIHAGSF\", \"CFXONOGTQH\",  #>     \"ZPWKFFVOCB\", \"RNAOTFIWTN\", \"ZPWKFFVOCB\", \"RNAOTFIWTN\", \"JFHAGKINER\",  #>     \"PKBCVRCMCS\", \"ASCJFWFUGV\", \"LJJSFTJKBP\", \"HGHMEUCTEX\", \"WEDUDZADWG\",  #>     \"JOPGMOKVOM\", \"BZPWNEEBHR\", \"ERVIHSPAYA\", \"RMEYEXVXVX\", \"JSGBOZVHXC\",  #>     \"XDEAUVDMFQ\", \"VOXRCHMDIT\", \"MHVRYUZJWL\", \"JHXSYICTMS\", \"RNAOTFIWTN\",  #>     \"ENXVDYZEEW\", \"WNATHOQPJS\", \"XSHYKGMBPQ\", \"TKKAYBAFGV\", \"PALVVUCJBF\",  #>     \"EZLGDZHKHT\", \"LHDUBEZXXM\", \"XKSCGLSVUZ\", \"CALRWQEBFZ\", \"TLGDIASGEL\",  #>     \"CMEKXFGTSR\", \"TWBOLWJGAR\", \"IIKTKPNNPT\", \"XKSCGLSVUZ\", \"PHIZOLWIBS\",  #>     \"EZLGDZHKHT\", \"WEDUDZADWG\", \"CONXBVIQSU\", \"DRQRVFYUCX\", \"HGHMEUCTEX\",  #>     \"YDGABWKNRS\", \"PKBCVRCMCS\", \"AZVIVPYKND\", \"QBPHMGOGFW\", \"EKNGZSKPGF\",  #>     \"KTANGMAQMT\", \"TLGDIASGEL\", \"ERVIHSPAYA\", \"CMEKXFGTSR\", \"ELMZBUCGXP\",  #>     \"RFAKZMSZMB\", \"NCXWRVCMVY\", \"ISHHJNXLMR\", \"BZPWNEEBHR\", \"GSNHQUBLXJ\",  #>     \"VKEOEUOTDQ\", \"HYUIWKYPXU\", \"CFXONOGTQH\", \"JVKZPZVIIU\", \"VKEOEUOTDQ\",  #>     \"ZPWKFFVOCB\", \"JFHAGKINER\", \"QCCNNYIKTH\", \"FHCLEHLIXM\", \"JOPGMOKVOM\",  #>     \"LGWJJITBKZ\", \"BHOFOGKCJA\", \"BBONKKTFNG\", \"FIXJLQEKCP\", \"HPKSIGVDRL\",  #>     \"HCEHZFVRBV\", \"BZPWNEEBHR\", \"UZRCINDECG\", \"ESYOZKOHCU\", \"JOPGMOKVOM\",  #>     \"ZTTKZEEJZP\", \"ZTCMALLRXB\", \"CMEKXFGTSR\", \"VOXRCHMDIT\", \"YFDQMQIVBM\",  #>     \"JVKZPZVIIU\", \"TBZWQOHERE\", \"GSHWBCJXVZ\", \"MQKHZKWIKA\", \"XSHYKGMBPQ\",  #>     \"ZTCMALLRXB\", \"HYUIWKYPXU\", \"CONXBVIQSU\", \"FIXJLQEKCP\", \"RNAOTFIWTN\",  #>     \"YDGABWKNRS\", \"VKEOEUOTDQ\", \"HPKSIGVDRL\", \"KTANGMAQMT\", \"JSGBOZVHXC\",  #>     \"OPNAGRHLZM\", \"HCEHZFVRBV\", \"EJSYIOEOJL\", \"RHALOWGMGJ\", \"MCBXZBXGJN\",  #>     \"KTANGMAQMT\", \"ICUEBKDOGB\", \"PKBCVRCMCS\", \"UOFFHQQLIR\", \"ENXVDYZEEW\",  #>     \"RSSXENWCQU\", \"LJJSFTJKBP\", \"GSHWBCJXVZ\", \"AHOMYEGIBP\", \"UJMNXDCYBB\",  #>     \"WEDUDZADWG\", \"VKEOEUOTDQ\", \"CKNVKMZWDC\", \"JVKZPZVIIU\", \"EJSYIOEOJL\",  #>     \"UOFFHQQLIR\", \"AGJEXFMJAO\", \"LJJSFTJKBP\", \"WEDUDZADWG\", \"JVCERYCMOA\",  #>     \"YROTAZMWFI\", \"JHVIRHYUEP\", \"CMEKXFGTSR\", \"MMCWEZDZSL\", \"ONTOHBVEQC\",  #>     \"GKPLYRURBB\", \"MPSFHTGKEF\", \"JWFPSYZNLW\", \"AZVIVPYKND\", \"AOKHTNTQJC\",  #>     \"HCEHZFVRBV\", \"ACYJOPUKSD\", \"JVCERYCMOA\", \"BKYOKYIUGW\", \"QKSAXQEAIB\",  #>     \"LJJSFTJKBP\", \"PHIZOLWIBS\", \"MGDZOPJAFG\", \"ZTCMALLRXB\", \"JVKZPZVIIU\",  #>     \"FKXBYBMICY\", \"AGJEXFMJAO\", \"GXQQOGSTOQ\", \"JHVIRHYUEP\", \"EZLGDZHKHT\",  #>     \"ZBXYPQEVLU\", \"QBPRAWZTBF\", \"AFUTZUEXVM\", \"JVKZPZVIIU\", \"ZTCMALLRXB\",  #>     \"JVCERYCMOA\", \"CJQEUMATTB\", \"GKPLYRURBB\", \"XKSCGLSVUZ\", \"JFHAGKINER\",  #>     \"ZBXYPQEVLU\", \"SPBEZTBJFS\", \"AHOMYEGIBP\", \"RBWJLMGEPF\", \"IYNWQZVCCI\",  #>     \"TLGDIASGEL\", \"ONTOHBVEQC\", \"YDGABWKNRS\", \"KKKAFDRDCO\", \"KTANGMAQMT\",  #>     \"PKBCVRCMCS\", \"BBONKKTFNG\", \"FIXJLQEKCP\", \"XKSCGLSVUZ\", \"HPKSIGVDRL\",  #>     \"SVBBYDPIOA\", \"EAMRJPOWLU\", \"CMEKXFGTSR\", \"ASCJFWFUGV\", \"VKEOEUOTDQ\",  #>     \"WKXIHCQQBN\", \"JFHAGKINER\", \"CALRWQEBFZ\", \"WEDUDZADWG\", \"CFXONOGTQH\",  #>     \"KIJPLWHVGS\", \"AIJRHVVDKP\", \"QKSAXQEAIB\", \"ESYOZKOHCU\", \"GKPLYRURBB\",  #>     \"EAMRJPOWLU\", \"WNATHOQPJS\", \"AGJEXFMJAO\", \"PKBCVRCMCS\", \"RNAOTFIWTN\",  #>     \"WMVGSBQYPB\", \"CALRWQEBFZ\", \"TLGDIASGEL\", \"QBPRAWZTBF\", \"WLNMRBXMPC\",  #>     \"IYNWQZVCCI\", \"MHVRYUZJWL\", \"GRCMVPYLDK\", \"LGWJJITBKZ\", \"JWFPSYZNLW\",  #>     \"LHDUBEZXXM\", \"AFUTZUEXVM\", \"CJQEUMATTB\", \"AZVIVPYKND\", \"CUYVXLQJIV\",  #>     \"SPBEZTBJFS\", \"MCBXZBXGJN\", \"UFXSCLPLER\", \"ESYOZKOHCU\", \"ONTOHBVEQC\",  #>     \"QBPRAWZTBF\", \"CYQGGUSNEK\", \"OSNCJRVKET\", \"QBPRAWZTBF\", \"CUYVXLQJIV\",  #>     \"ERVIHSPAYA\", \"ZBXYPQEVLU\", \"ISWVRSKEUK\", \"UFXSCLPLER\", \"WEDUDZADWG\",  #>     \"YFDQMQIVBM\", \"BZPWNEEBHR\", \"RQDKTNHSYQ\", \"UFXSCLPLER\", \"TLGDIASGEL\",  #>     \"KBYFYYONYU\", \"YROTAZMWFI\", \"QCCNNYIKTH\", \"GXQQOGSTOQ\", \"YROTAZMWFI\",  #>     \"AGJEXFMJAO\", \"XKSCGLSVUZ\", \"GRCMVPYLDK\", \"SPBEZTBJFS\", \"RMEYEXVXVX\",  #>     \"ESYOZKOHCU\", \"EOJBYFQEOY\", \"GXYQHIZVPD\", \"ESYOZKOHCU\", \"FIXJLQEKCP\",  #>     \"WNATHOQPJS\", \"OPNAGRHLZM\", \"CJQEUMATTB\", \"RNAOTFIWTN\", \"JRNMLJJSDP\",  #>     \"FKTIIHAGSF\", \"CFSINPQYCO\", \"RMEYEXVXVX\", \"UOFFHQQLIR\", \"KIJPLWHVGS\",  #>     \"RFAKZMSZMB\", \"ICUEBKDOGB\", \"ISHHJNXLMR\", \"RBWJLMGEPF\", \"CMEKXFGTSR\",  #>     \"ISWVRSKEUK\", \"GSNHQUBLXJ\", \"KIJPLWHVGS\", \"GKPLYRURBB\", \"ISHHJNXLMR\",  #>     \"JWFPSYZNLW\", \"AHOMYEGIBP\", \"ONTOHBVEQC\", \"MPSFHTGKEF\", \"NTSOYECHZQ\",  #>     \"QBPRAWZTBF\", \"VKEOEUOTDQ\", \"XKSCGLSVUZ\", \"SVYPVLUGHE\", \"CFSINPQYCO\",  #>     \"CMEKXFGTSR\", \"UJMNXDCYBB\", \"KBYFYYONYU\", \"KTANGMAQMT\", \"LJJSFTJKBP\",  #>     \"GSNHQUBLXJ\", \"VOXRCHMDIT\", \"RQDKTNHSYQ\", \"QBPRAWZTBF\", \"JHXSYICTMS\",  #>     \"RNAOTFIWTN\", \"TBZWQOHERE\", \"URBJONTBBW\", \"UOFFHQQLIR\", \"KIJPLWHVGS\",  #>     \"LHDUBEZXXM\", \"CJQEUMATTB\", \"ESYOZKOHCU\", \"YDGABWKNRS\", \"JFHAGKINER\",  #>     \"XKSCGLSVUZ\", \"HGHMEUCTEX\", \"JOPGMOKVOM\", \"AGJEXFMJAO\", \"WNATHOQPJS\",  #>     \"YDGABWKNRS\", \"BHOFOGKCJA\", \"RMEYEXVXVX\", \"JOPGMOKVOM\", \"PKBCVRCMCS\",  #>     \"RBWJLMGEPF\", \"FIXJLQEKCP\", \"AOKHTNTQJC\", \"QMDWWKFVRU\", \"IYNWQZVCCI\",  #>     \"RNAOTFIWTN\", \"JVKZPZVIIU\", \"HYUIWKYPXU\", \"VKEOEUOTDQ\", \"CUYVXLQJIV\",  #>     \"WMVGSBQYPB\", \"CYQGGUSNEK\", \"BBONKKTFNG\", \"KBYFYYONYU\", \"RHALOWGMGJ\",  #>     \"BBONKKTFNG\", \"CUYVXLQJIV\", \"GSHWBCJXVZ\", \"GXQQOGSTOQ\", \"RHALOWGMGJ\",  #>     \"AFUTZUEXVM\", \"GSHWBCJXVZ\", \"JOPGMOKVOM\", \"CJQEUMATTB\", \"YFDQMQIVBM\",  #>     \"GRCMVPYLDK\", \"GSNHQUBLXJ\", \"AQEEZTRLKH\", \"MHVRYUZJWL\", \"AHOMYEGIBP\",  #>     \"BKYOKYIUGW\", \"CJQEUMATTB\", \"XCEJMFPVDX\", \"HLWNYXNVYM\", \"ESYOZKOHCU\",  #>     \"CFXONOGTQH\", \"RFAKZMSZMB\", \"EAMRJPOWLU\", \"CFXONOGTQH\", \"UZRCINDECG\",  #>     \"WMVGSBQYPB\", \"OSNCJRVKET\", \"AQEEZTRLKH\", \"UJMNXDCYBB\", \"VOXRCHMDIT\",  #>     \"ISHHJNXLMR\", \"ZTCMALLRXB\", \"NOTPDVRLPM\", \"ENXVDYZEEW\", \"MHVRYUZJWL\",  #>     \"ZBXYPQEVLU\", \"EZLGDZHKHT\", \"WEDUDZADWG\", \"CFSINPQYCO\", \"FIXJLQEKCP\",  #>     \"OPNAGRHLZM\", \"ACYJOPUKSD\", \"QBPHMGOGFW\", \"SPBEZTBJFS\", \"JVKZPZVIIU\",  #>     \"JPARFIKTYL\", \"WEDUDZADWG\", \"RBWJLMGEPF\", \"JPARFIKTYL\", \"UJMNXDCYBB\",  #>     \"URBJONTBBW\", \"QBPHMGOGFW\", \"XKSCGLSVUZ\", \"UZRCINDECG\", \"FHCLEHLIXM\",  #>     \"HLWNYXNVYM\", \"ISWVRSKEUK\", \"ZTCMALLRXB\", \"BJUNWZLJYP\", \"KBYFYYONYU\",  #>     \"FKTIIHAGSF\", \"BHOFOGKCJA\", \"AIJRHVVDKP\", \"ZTTKZEEJZP\", \"UJMNXDCYBB\",  #>     \"JSGBOZVHXC\", \"QQIQBNKASY\", \"CUYVXLQJIV\", \"MGDZOPJAFG\", \"XSHYKGMBPQ\",  #>     \"JSGBOZVHXC\", \"PKBCVRCMCS\", \"TKKAYBAFGV\", \"EOJBYFQEOY\", \"YROTAZMWFI\",  #>     \"NOTPDVRLPM\", \"IIKTKPNNPT\", \"UZRCINDECG\", \"ESYOZKOHCU\", \"BKYOKYIUGW\",  #>     \"NOTPDVRLPM\", \"IYNWQZVCCI\", \"ACYJOPUKSD\", \"GKPLYRURBB\", \"NOTPDVRLPM\",  #>     \"ONTOHBVEQC\", \"IIKTKPNNPT\", \"HPKSIGVDRL\", \"YFDQMQIVBM\", \"WMVGSBQYPB\",  #>     \"XDEAUVDMFQ\", \"ERVIHSPAYA\", \"ZPWKFFVOCB\", \"QMDWWKFVRU\", \"UJMNXDCYBB\",  #>     \"AOKHTNTQJC\", \"TWBOLWJGAR\", \"TLGDIASGEL\", \"JVCERYCMOA\", \"JPARFIKTYL\",  #>     \"CYQGGUSNEK\", \"TWBOLWJGAR\", \"GXYQHIZVPD\", \"HGHMEUCTEX\", \"WNATHOQPJS\",  #>     \"GKPLYRURBB\", \"CUYVXLQJIV\", \"XDEAUVDMFQ\", \"NOTPDVRLPM\", \"JHXSYICTMS\",  #>     \"NTSOYECHZQ\", \"MGDZOPJAFG\", \"SVBBYDPIOA\", \"QBPRAWZTBF\", \"MHVRYUZJWL\",  #>     \"NOTPDVRLPM\", \"XKSCGLSVUZ\", \"JFHAGKINER\", \"EKNGZSKPGF\", \"XKSCGLSVUZ\",  #>     \"UJMNXDCYBB\", \"YDGABWKNRS\", \"JHVIRHYUEP\", \"VKEOEUOTDQ\", \"MGDZOPJAFG\",  #>     \"HPKSIGVDRL\", \"EAMRJPOWLU\", \"UJMNXDCYBB\", \"JSGBOZVHXC\", \"AIJRHVVDKP\",  #>     \"NCXWRVCMVY\", \"OPNAGRHLZM\", \"GKPLYRURBB\", \"OSNCJRVKET\", \"AQEEZTRLKH\",  #>     \"JPARFIKTYL\", \"SVYPVLUGHE\", \"GKPLYRURBB\", \"ERVIHSPAYA\", \"HYHAFAFYEA\",  #>     \"BBONKKTFNG\", \"JVKZPZVIIU\", \"IIKTKPNNPT\", \"CUYVXLQJIV\", \"ZBXYPQEVLU\",  #>     \"JVCERYCMOA\", \"LEESGFRPHV\", \"EOJBYFQEOY\", \"WLNMRBXMPC\", \"MCBXZBXGJN\",  #>     \"MPSFHTGKEF\", \"CONXBVIQSU\", \"HCEHZFVRBV\", \"MPSFHTGKEF\", \"JOPGMOKVOM\",  #>     \"GSHWBCJXVZ\", \"ZTCMALLRXB\", \"RNAOTFIWTN\", \"QQIQBNKASY\", \"FKTIIHAGSF\",  #>     \"XKSCGLSVUZ\", \"QBPHMGOGFW\", \"XKSCGLSVUZ\", \"CFSINPQYCO\", \"CUYVXLQJIV\",  #>     \"KBYFYYONYU\", \"TLGDIASGEL\", \"ONTOHBVEQC\", \"WLNMRBXMPC\", \"CUYVXLQJIV\",  #>     \"TWBOLWJGAR\", \"JPARFIKTYL\", \"WEDUDZADWG\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\",  #>     \"PKBCVRCMCS\", \"OPNAGRHLZM\", \"PBLJMWGFTW\", \"HLWNYXNVYM\", \"WEDUDZADWG\",  #>     \"CFXONOGTQH\", \"JSGBOZVHXC\", \"KBYFYYONYU\", \"PKBCVRCMCS\", \"CALRWQEBFZ\",  #>     \"ERVIHSPAYA\", \"CJQEUMATTB\", \"ZTTKZEEJZP\", \"NOTPDVRLPM\", \"ISHHJNXLMR\",  #>     \"LGWJJITBKZ\", \"IIKTKPNNPT\", \"MMCWEZDZSL\", \"KKKAFDRDCO\", \"CALRWQEBFZ\",  #>     \"GSHWBCJXVZ\", \"CALRWQEBFZ\", \"CKNVKMZWDC\", \"TLGDIASGEL\", \"ONTOHBVEQC\",  #>     \"CFSINPQYCO\", \"CFSINPQYCO\", \"RBWJLMGEPF\", \"ONTOHBVEQC\", \"MQKHZKWIKA\",  #>     \"WEDUDZADWG\", \"YDGABWKNRS\", \"AZVIVPYKND\", \"JRNMLJJSDP\", \"UNCDYWJXLO\",  #>     \"ERVIHSPAYA\", \"AZVIVPYKND\", \"VKEOEUOTDQ\", \"EWTGOBRLKP\", \"GSNHQUBLXJ\",  #>     \"RQDKTNHSYQ\", \"QKSAXQEAIB\", \"RHALOWGMGJ\", \"LJJSFTJKBP\", \"XKSCGLSVUZ\",  #>     \"UJMNXDCYBB\", \"CYQGGUSNEK\", \"WKXIHCQQBN\", \"FHCLEHLIXM\", \"FIXJLQEKCP\",  #>     \"RMEYEXVXVX\", \"JRNMLJJSDP\", \"QCCNNYIKTH\", \"RFAKZMSZMB\", \"URBJONTBBW\",  #>     \"GSNHQUBLXJ\", \"UZRCINDECG\", \"ESYOZKOHCU\", \"ZPWKFFVOCB\", \"GRCMVPYLDK\",  #>     \"CFSINPQYCO\", \"GRCMVPYLDK\", \"TLGDIASGEL\", \"VKEOEUOTDQ\", \"ENXVDYZEEW\",  #>     \"ONTOHBVEQC\", \"JFHAGKINER\", \"TXFSIPGCID\", \"JSGBOZVHXC\", \"MHVRYUZJWL\",  #>     \"NTSOYECHZQ\", \"IIKTKPNNPT\", \"YFDQMQIVBM\", \"FHCLEHLIXM\", \"XDEAUVDMFQ\",  #>     \"RFAKZMSZMB\", \"WKXIHCQQBN\", \"RFAKZMSZMB\", \"MQKHZKWIKA\", \"FKXBYBMICY\",  #>     \"ZTCMALLRXB\", \"RHALOWGMGJ\", \"YFDQMQIVBM\", \"VOXRCHMDIT\", \"AIJRHVVDKP\",  #>     \"HYUIWKYPXU\", \"UZRCINDECG\", \"LHDUBEZXXM\", \"EOJBYFQEOY\", \"LEESGFRPHV\",  #>     \"TWBOLWJGAR\", \"JVKZPZVIIU\", \"CMEKXFGTSR\", \"ENXVDYZEEW\", \"ZBXYPQEVLU\",  #>     \"CFXONOGTQH\", \"YDGABWKNRS\", \"JOPGMOKVOM\", \"RFAKZMSZMB\", \"JWFPSYZNLW\",  #>     \"EZLGDZHKHT\", \"SVBBYDPIOA\", \"SPBEZTBJFS\", \"PKBCVRCMCS\", \"IYNWQZVCCI\",  #>     \"ICUEBKDOGB\", \"PHIZOLWIBS\", \"GSNHQUBLXJ\", \"JRNMLJJSDP\", \"RFAKZMSZMB\",  #>     \"GXQQOGSTOQ\", \"RHALOWGMGJ\", \"PKTRNWCHPR\", \"VBFGFOMUQJ\", \"ELMZBUCGXP\",  #>     \"CFXONOGTQH\", \"WLNMRBXMPC\", \"VKEOEUOTDQ\", \"MHVRYUZJWL\", \"QCCNNYIKTH\",  #>     \"FKTIIHAGSF\", \"ACYJOPUKSD\", \"ENXVDYZEEW\", \"JOPGMOKVOM\", \"JPARFIKTYL\",  #>     \"ASCJFWFUGV\", \"JPARFIKTYL\", \"XDEAUVDMFQ\", \"YFDQMQIVBM\", \"NJLMIFXDEK\",  #>     \"KBYFYYONYU\", \"WNATHOQPJS\", \"JSGBOZVHXC\", \"CMEKXFGTSR\", \"FKXBYBMICY\",  #>     \"RSSXENWCQU\", \"ENXVDYZEEW\", \"HCEHZFVRBV\", \"OSNCJRVKET\", \"FHCLEHLIXM\",  #>     \"ZTCMALLRXB\", \"FHCLEHLIXM\", \"ZTTKZEEJZP\", \"CALRWQEBFZ\", \"QMDWWKFVRU\",  #>     \"EOJBYFQEOY\", \"BBONKKTFNG\", \"KTANGMAQMT\", \"CALRWQEBFZ\", \"NCXWRVCMVY\",  #>     \"JHVIRHYUEP\", \"URBJONTBBW\", \"ESYOZKOHCU\", \"ESYOZKOHCU\", \"OPNAGRHLZM\",  #>     \"BBONKKTFNG\", \"UJMNXDCYBB\", \"RQDKTNHSYQ\", \"OPNAGRHLZM\", \"NOTPDVRLPM\",  #>     \"FIXJLQEKCP\", \"RQDKTNHSYQ\", \"QBPHMGOGFW\", \"LEESGFRPHV\", \"EZLGDZHKHT\",  #>     \"ACYJOPUKSD\", \"JVCERYCMOA\", \"SPBEZTBJFS\", \"HGHMEUCTEX\", \"RMEYEXVXVX\",  #>     \"XSHYKGMBPQ\", \"ESYOZKOHCU\", \"RSSXENWCQU\", \"CALRWQEBFZ\", \"RNAOTFIWTN\",  #>     \"EWTGOBRLKP\", \"KBYFYYONYU\", \"JVCERYCMOA\", \"BKYOKYIUGW\", \"CYQGGUSNEK\",  #>     \"CMEKXFGTSR\", \"JSGBOZVHXC\", \"CJQEUMATTB\", \"YROTAZMWFI\", \"JFHAGKINER\",  #>     \"HGHMEUCTEX\", \"FIXJLQEKCP\", \"AGJEXFMJAO\", \"CYQGGUSNEK\", \"CYQGGUSNEK\",  #>     \"QMDWWKFVRU\", \"AZVIVPYKND\", \"BBONKKTFNG\", \"URBJONTBBW\", \"VKEOEUOTDQ\",  #>     \"LJJSFTJKBP\", \"ONTOHBVEQC\", \"HLWNYXNVYM\", \"JHVIRHYUEP\", \"JPARFIKTYL\",  #>     \"EKNGZSKPGF\", \"QQIQBNKASY\", \"NTSOYECHZQ\", \"CJQEUMATTB\", \"NOTPDVRLPM\",  #>     \"EAMRJPOWLU\", \"QBPHMGOGFW\", \"UOFFHQQLIR\", \"MPSFHTGKEF\", \"TBZWQOHERE\",  #>     \"VKEOEUOTDQ\", \"QBPRAWZTBF\", \"WEDUDZADWG\", \"CKNVKMZWDC\", \"BHOFOGKCJA\",  #>     \"CFXONOGTQH\", \"LGWJJITBKZ\", \"RHALOWGMGJ\", \"ENXVDYZEEW\", \"AIJRHVVDKP\",  #>     \"FKTIIHAGSF\", \"ERVIHSPAYA\", \"AZVIVPYKND\", \"TBZWQOHERE\", \"FIXJLQEKCP\",  #>     \"NOTPDVRLPM\", \"UOFFHQQLIR\", \"OSNCJRVKET\", \"OPNAGRHLZM\", \"ELMZBUCGXP\",  #>     \"CALRWQEBFZ\", \"JWFPSYZNLW\", \"GKPLYRURBB\", \"HPKSIGVDRL\", \"RFAKZMSZMB\",  #>     \"GRCMVPYLDK\", \"XDEAUVDMFQ\", \"FHCLEHLIXM\", \"NTSOYECHZQ\", \"KTANGMAQMT\",  #>     \"HGHMEUCTEX\", \"QEAYJDRZQO\", \"ACYJOPUKSD\", \"NOTPDVRLPM\", \"TWBOLWJGAR\",  #>     \"ZBXYPQEVLU\", \"PKTRNWCHPR\", \"JWFPSYZNLW\", \"HGHMEUCTEX\", \"SPBEZTBJFS\",  #>     \"AFUTZUEXVM\", \"BHOFOGKCJA\", \"XSHYKGMBPQ\", \"MHVRYUZJWL\", \"EJSYIOEOJL\",  #>     \"QQIQBNKASY\", \"MPSFHTGKEF\", \"RQDKTNHSYQ\", \"TBZWQOHERE\", \"FIXJLQEKCP\",  #>     \"CALRWQEBFZ\", \"NOTPDVRLPM\", \"PKBCVRCMCS\", \"KTANGMAQMT\", \"AIJRHVVDKP\",  #>     \"JOPGMOKVOM\", \"MPSFHTGKEF\", \"YFDQMQIVBM\", \"QBPHMGOGFW\", \"LGWJJITBKZ\",  #>     \"OPNAGRHLZM\", \"ACYJOPUKSD\", \"ONTOHBVEQC\", \"JOPGMOKVOM\", \"FKXBYBMICY\",  #>     \"ELMZBUCGXP\", \"ZPWKFFVOCB\", \"FIXJLQEKCP\", \"CJQEUMATTB\", \"CFSINPQYCO\",  #>     \"JVKZPZVIIU\", \"QBPHMGOGFW\", \"CALRWQEBFZ\", \"EJSYIOEOJL\", \"ZBXYPQEVLU\",  #>     \"UCYFOWDBOQ\", \"JFHAGKINER\", \"KBYFYYONYU\", \"VOXRCHMDIT\", \"GXQQOGSTOQ\",  #>     \"JWFPSYZNLW\", \"XSHYKGMBPQ\", \"HYUIWKYPXU\", \"BZPWNEEBHR\", \"ICUEBKDOGB\",  #>     \"TWBOLWJGAR\", \"WNATHOQPJS\", \"QQIQBNKASY\", \"SVYPVLUGHE\", \"DRQRVFYUCX\",  #>     \"BJUNWZLJYP\", \"YFDQMQIVBM\", \"MGDZOPJAFG\", \"PHIZOLWIBS\", \"YROTAZMWFI\",  #>     \"GRCMVPYLDK\", \"CUYVXLQJIV\", \"GKPLYRURBB\", \"YROTAZMWFI\", \"EAMRJPOWLU\",  #>     \"BKYOKYIUGW\", \"UJMNXDCYBB\", \"ELMZBUCGXP\", \"JRNMLJJSDP\", \"MGDZOPJAFG\",  #>     \"BKYOKYIUGW\", \"QBPRAWZTBF\", \"MPSFHTGKEF\", \"NOTPDVRLPM\", \"HPKSIGVDRL\",  #>     \"WLNMRBXMPC\", \"PKTRNWCHPR\", \"HCEHZFVRBV\", \"GSNHQUBLXJ\", \"UJMNXDCYBB\",  #>     \"JPARFIKTYL\", \"WKXIHCQQBN\", \"HYUIWKYPXU\", \"WMVGSBQYPB\", \"HLWNYXNVYM\",  #>     \"KBYFYYONYU\", \"GSNHQUBLXJ\", \"PBLJMWGFTW\", \"EZLGDZHKHT\", \"EJSYIOEOJL\",  #>     \"KTANGMAQMT\", \"JPARFIKTYL\", \"FIXJLQEKCP\", \"RNAOTFIWTN\", \"RFAKZMSZMB\",  #>     \"UOFFHQQLIR\", \"EKNGZSKPGF\", \"UZRCINDECG\", \"GKPLYRURBB\", \"OSNCJRVKET\",  #>     \"QMDWWKFVRU\", \"ACYJOPUKSD\", \"CJQEUMATTB\", \"ISHHJNXLMR\", \"XSHYKGMBPQ\",  #>     \"XCEJMFPVDX\", \"UFXSCLPLER\", \"JOPGMOKVOM\", \"ONTOHBVEQC\", \"YFDQMQIVBM\",  #>     \"UOFFHQQLIR\", \"UNCDYWJXLO\", \"GXQQOGSTOQ\", \"NJLMIFXDEK\", \"RQDKTNHSYQ\",  #>     \"PALVVUCJBF\", \"JVKZPZVIIU\", \"JOPGMOKVOM\", \"WNATHOQPJS\", \"PKBCVRCMCS\",  #>     \"BHOFOGKCJA\", \"AZVIVPYKND\", \"YFDQMQIVBM\", \"EZLGDZHKHT\", \"EKNGZSKPGF\",  #>     \"PKBCVRCMCS\", \"RFAKZMSZMB\", \"GSHWBCJXVZ\", \"KBYFYYONYU\", \"HGHMEUCTEX\",  #>     \"CJQEUMATTB\", \"GSHWBCJXVZ\", \"LJJSFTJKBP\", \"KTANGMAQMT\", \"LEESGFRPHV\",  #>     \"JOPGMOKVOM\", \"QMDWWKFVRU\", \"ICUEBKDOGB\", \"BJUNWZLJYP\", \"EOJBYFQEOY\",  #>     \"EZLGDZHKHT\", \"ICUEBKDOGB\", \"YDGABWKNRS\", \"HYHAFAFYEA\", \"SVBBYDPIOA\",  #>     \"CUYVXLQJIV\", \"NJLMIFXDEK\", \"AHOMYEGIBP\", \"JSGBOZVHXC\", \"FKXBYBMICY\",  #>     \"ELMZBUCGXP\", \"HGHMEUCTEX\", \"HYUIWKYPXU\", \"ZTTKZEEJZP\", \"ASCJFWFUGV\",  #>     \"EJSYIOEOJL\", \"ISHHJNXLMR\", \"SVBBYDPIOA\", \"BZPWNEEBHR\", \"UNCDYWJXLO\",  #>     \"NCXWRVCMVY\", \"MMCWEZDZSL\", \"ZTTKZEEJZP\", \"JFHAGKINER\", \"CMEKXFGTSR\",  #>     \"CKNVKMZWDC\", \"RFAKZMSZMB\", \"WEDUDZADWG\", \"NTSOYECHZQ\", \"GSNHQUBLXJ\",  #>     \"GXYQHIZVPD\", \"OSNCJRVKET\", \"AGJEXFMJAO\", \"CUYVXLQJIV\", \"XKSCGLSVUZ\",  #>     \"JVKZPZVIIU\", \"EAMRJPOWLU\", \"RBWJLMGEPF\", \"TXFSIPGCID\", \"JFHAGKINER\",  #>     \"RMEYEXVXVX\", \"VOXRCHMDIT\", \"CFSINPQYCO\", \"HYUIWKYPXU\", \"QMDWWKFVRU\",  #>     \"ZTTKZEEJZP\", \"RBWJLMGEPF\", \"URBJONTBBW\", \"ELMZBUCGXP\", \"AZVIVPYKND\",  #>     \"MCBXZBXGJN\", \"FIXJLQEKCP\", \"QCCNNYIKTH\", \"GXYQHIZVPD\", \"CYQGGUSNEK\",  #>     \"BBONKKTFNG\", \"GKPLYRURBB\", \"UZRCINDECG\", \"JOPGMOKVOM\", \"BKYOKYIUGW\",  #>     \"KTANGMAQMT\", \"ZBXYPQEVLU\", \"XKSCGLSVUZ\", \"HGHMEUCTEX\", \"FKXBYBMICY\",  #>     \"JVCERYCMOA\", \"ZPWKFFVOCB\", \"AGJEXFMJAO\", \"NTSOYECHZQ\", \"CUYVXLQJIV\",  #>     \"CJQEUMATTB\", \"SVBBYDPIOA\", \"FKXBYBMICY\", \"WEDUDZADWG\", \"HGHMEUCTEX\",  #>     \"UOFFHQQLIR\", \"GXYQHIZVPD\", \"MPSFHTGKEF\", \"EOJBYFQEOY\", \"KIJPLWHVGS\",  #>     \"KTANGMAQMT\", \"OPNAGRHLZM\", \"ASCJFWFUGV\", \"PKTRNWCHPR\", \"PKBCVRCMCS\",  #>     \"QBPHMGOGFW\", \"WNATHOQPJS\", \"EOJBYFQEOY\", \"ERVIHSPAYA\", \"RBWJLMGEPF\",  #>     \"BKYOKYIUGW\", \"ZPWKFFVOCB\", \"UJMNXDCYBB\", \"AIJRHVVDKP\", \"OPNAGRHLZM\",  #>     \"AGJEXFMJAO\", \"UZRCINDECG\", \"KTANGMAQMT\", \"OSNCJRVKET\", \"CMEKXFGTSR\",  #>     \"GKPLYRURBB\", \"GRCMVPYLDK\", \"GRCMVPYLDK\", \"RNAOTFIWTN\", \"QMDWWKFVRU\",  #>     \"ONTOHBVEQC\", \"GXQQOGSTOQ\", \"PBLJMWGFTW\", \"CJQEUMATTB\", \"LJJSFTJKBP\",  #>     \"GRCMVPYLDK\", \"CYQGGUSNEK\", \"NCXWRVCMVY\", \"ESYOZKOHCU\", \"ZBXYPQEVLU\",  #>     \"GRCMVPYLDK\", \"JVKZPZVIIU\", \"MQKHZKWIKA\", \"JPARFIKTYL\", \"NTSOYECHZQ\",  #>     \"GXQQOGSTOQ\", \"JSGBOZVHXC\", \"AFUTZUEXVM\", \"CALRWQEBFZ\", \"ZBXYPQEVLU\",  #>     \"WNATHOQPJS\", \"YDGABWKNRS\", \"GXQQOGSTOQ\", \"ICUEBKDOGB\", \"KBYFYYONYU\",  #>     \"ONTOHBVEQC\", \"JVCERYCMOA\", \"WNATHOQPJS\", \"JPARFIKTYL\", \"WMVGSBQYPB\",  #>     \"ISHHJNXLMR\", \"XKSCGLSVUZ\", \"ENXVDYZEEW\", \"CALRWQEBFZ\", \"EAMRJPOWLU\",  #>     \"JPARFIKTYL\", \"URBJONTBBW\", \"WMVGSBQYPB\", \"CALRWQEBFZ\", \"IIKTKPNNPT\",  #>     \"WMVGSBQYPB\", \"FHCLEHLIXM\", \"CUYVXLQJIV\", \"TKKAYBAFGV\", \"SVYPVLUGHE\",  #>     \"QBPRAWZTBF\", \"XKSCGLSVUZ\", \"QQIQBNKASY\", \"KTANGMAQMT\", \"QKSAXQEAIB\",  #>     \"GXQQOGSTOQ\", \"FKXBYBMICY\", \"EZLGDZHKHT\", \"HYUIWKYPXU\", \"MGDZOPJAFG\",  #>     \"ASCJFWFUGV\", \"XKSCGLSVUZ\", \"SVYPVLUGHE\", \"ENXVDYZEEW\", \"CMEKXFGTSR\",  #>     \"HGHMEUCTEX\", \"JPARFIKTYL\", \"ZTTKZEEJZP\", \"TKKAYBAFGV\", \"CFSINPQYCO\",  #>     \"ONTOHBVEQC\", \"ZTCMALLRXB\", \"OPNAGRHLZM\", \"UOFFHQQLIR\", \"URBJONTBBW\",  #>     \"TBZWQOHERE\", \"UNCDYWJXLO\", \"JFHAGKINER\", \"VOXRCHMDIT\", \"HPKSIGVDRL\",  #>     \"SVYPVLUGHE\", \"BZPWNEEBHR\", \"MHVRYUZJWL\", \"EJSYIOEOJL\", \"EZLGDZHKHT\",  #>     \"ENXVDYZEEW\", \"ZBXYPQEVLU\", \"URBJONTBBW\", \"LEESGFRPHV\", \"ESYOZKOHCU\",  #>     \"AIJRHVVDKP\", \"KBYFYYONYU\", \"AGJEXFMJAO\", \"CFSINPQYCO\", \"XCEJMFPVDX\",  #>     \"ZPWKFFVOCB\", \"CONXBVIQSU\", \"DRQRVFYUCX\", \"HYUIWKYPXU\", \"QMDWWKFVRU\",  #>     \"KIJPLWHVGS\", \"WLNMRBXMPC\", \"RQDKTNHSYQ\", \"LJJSFTJKBP\", \"CYQGGUSNEK\",  #>     \"JFHAGKINER\", \"GSHWBCJXVZ\", \"XCEJMFPVDX\", \"ENXVDYZEEW\", \"CJQEUMATTB\",  #>     \"TLGDIASGEL\", \"ONTOHBVEQC\", \"JWFPSYZNLW\", \"QKSAXQEAIB\", \"LGWJJITBKZ\",  #>     \"FKXBYBMICY\", \"ZBXYPQEVLU\", \"BBONKKTFNG\", \"BZPWNEEBHR\", \"DRQRVFYUCX\",  #>     \"WKXIHCQQBN\", \"CONXBVIQSU\", \"JOPGMOKVOM\", \"CFSINPQYCO\", \"EAMRJPOWLU\",  #>     \"MCBXZBXGJN\", \"FHCLEHLIXM\", \"WMVGSBQYPB\", \"XSHYKGMBPQ\", \"CMEKXFGTSR\",  #>     \"AZVIVPYKND\", \"ACYJOPUKSD\", \"FKTIIHAGSF\", \"AIJRHVVDKP\", \"LJJSFTJKBP\",  #>     \"EZLGDZHKHT\", \"UFXSCLPLER\", \"EKNGZSKPGF\", \"LJJSFTJKBP\", \"BKYOKYIUGW\",  #>     \"AHOMYEGIBP\", \"AHOMYEGIBP\", \"IYNWQZVCCI\", \"PKTRNWCHPR\", \"OPNAGRHLZM\",  #>     \"FHCLEHLIXM\", \"QEAYJDRZQO\", \"TKKAYBAFGV\", \"QBPHMGOGFW\", \"ISWVRSKEUK\",  #>     \"ICUEBKDOGB\", \"VBFGFOMUQJ\", \"JFHAGKINER\", \"NJLMIFXDEK\", \"UZRCINDECG\",  #>     \"QMDWWKFVRU\", \"KTANGMAQMT\", \"ESYOZKOHCU\", \"DRQRVFYUCX\", \"JPARFIKTYL\",  #>     \"CKNVKMZWDC\", \"YDGABWKNRS\", \"NCXWRVCMVY\", \"ICUEBKDOGB\", \"JSGBOZVHXC\",  #>     \"MQKHZKWIKA\", \"WMVGSBQYPB\", \"JFHAGKINER\", \"MPSFHTGKEF\", \"ZBXYPQEVLU\",  #>     \"JFHAGKINER\", \"UJMNXDCYBB\", \"ESYOZKOHCU\", \"XKSCGLSVUZ\", \"ESYOZKOHCU\",  #>     \"HPKSIGVDRL\", \"RSSXENWCQU\", \"GKPLYRURBB\", \"KBYFYYONYU\", \"WMVGSBQYPB\",  #>     \"WMVGSBQYPB\", \"TBZWQOHERE\", \"TKKAYBAFGV\", \"QMDWWKFVRU\", \"CFXONOGTQH\",  #>     \"MHVRYUZJWL\", \"AZVIVPYKND\", \"ZBXYPQEVLU\", \"GRCMVPYLDK\", \"TKKAYBAFGV\",  #>     \"FHCLEHLIXM\", \"FIXJLQEKCP\", \"XCEJMFPVDX\", \"YROTAZMWFI\", \"TLGDIASGEL\",  #>     \"ZTCMALLRXB\", \"OPNAGRHLZM\", \"ZPWKFFVOCB\", \"URBJONTBBW\", \"PKTRNWCHPR\",  #>     \"LJJSFTJKBP\", \"WEDUDZADWG\", \"JWFPSYZNLW\", \"MGDZOPJAFG\", \"JVCERYCMOA\",  #>     \"NCXWRVCMVY\", \"TBZWQOHERE\", \"WNATHOQPJS\", \"RQDKTNHSYQ\", \"ASCJFWFUGV\",  #>     \"JOPGMOKVOM\", \"LGWJJITBKZ\", \"JVCERYCMOA\", \"KKKAFDRDCO\", \"CUYVXLQJIV\",  #>     \"KBYFYYONYU\", \"QCCNNYIKTH\", \"UJMNXDCYBB\", \"CMEKXFGTSR\", \"EAMRJPOWLU\",  #>     \"CKNVKMZWDC\", \"CMEKXFGTSR\", \"GSHWBCJXVZ\", \"AZVIVPYKND\", \"JWFPSYZNLW\",  #>     \"UNCDYWJXLO\", \"CALRWQEBFZ\", \"UOFFHQQLIR\", \"YDGABWKNRS\", \"GRCMVPYLDK\",  #>     \"JFHAGKINER\", \"JOPGMOKVOM\", \"ICUEBKDOGB\", \"ZTCMALLRXB\", \"WEDUDZADWG\",  #>     \"RHALOWGMGJ\", \"OSNCJRVKET\", \"LJJSFTJKBP\", \"AQEEZTRLKH\", \"WKXIHCQQBN\",  #>     \"ZTTKZEEJZP\", \"QQIQBNKASY\", \"OPNAGRHLZM\", \"MPSFHTGKEF\", \"AZVIVPYKND\",  #>     \"TLGDIASGEL\", \"AGJEXFMJAO\", \"ZPWKFFVOCB\", \"CKNVKMZWDC\", \"CMEKXFGTSR\",  #>     \"TXFSIPGCID\", \"BBONKKTFNG\", \"GKPLYRURBB\", \"BZPWNEEBHR\", \"JWFPSYZNLW\",  #>     \"EOJBYFQEOY\", \"TXFSIPGCID\", \"EOJBYFQEOY\", \"QQIQBNKASY\", \"HYUIWKYPXU\",  #>     \"XSHYKGMBPQ\", \"GRCMVPYLDK\", \"ENXVDYZEEW\", \"LJJSFTJKBP\", \"HYUIWKYPXU\",  #>     \"CMEKXFGTSR\", \"RNAOTFIWTN\", \"RFAKZMSZMB\", \"WNATHOQPJS\", \"RMEYEXVXVX\",  #>     \"RQDKTNHSYQ\", \"EWTGOBRLKP\", \"CFXONOGTQH\", \"WMVGSBQYPB\", \"EOJBYFQEOY\",  #>     \"PKBCVRCMCS\", \"PKBCVRCMCS\", \"QBPRAWZTBF\", \"ISHHJNXLMR\", \"CJQEUMATTB\",  #>     \"YFDQMQIVBM\", \"QBPHMGOGFW\", \"AFUTZUEXVM\", \"RNAOTFIWTN\", \"RQDKTNHSYQ\",  #>     \"JVCERYCMOA\", \"ONTOHBVEQC\", \"LGWJJITBKZ\", \"YFDQMQIVBM\", \"JPARFIKTYL\",  #>     \"RQDKTNHSYQ\", \"YFDQMQIVBM\", \"YDGABWKNRS\", \"NOTPDVRLPM\", \"AHOMYEGIBP\",  #>     \"TLGDIASGEL\", \"HCEHZFVRBV\", \"ACYJOPUKSD\", \"EJSYIOEOJL\", \"IIKTKPNNPT\",  #>     \"CJQEUMATTB\", \"EZLGDZHKHT\", \"FHCLEHLIXM\", \"HPKSIGVDRL\", \"AFUTZUEXVM\",  #>     \"XCEJMFPVDX\", \"UFXSCLPLER\", \"RQDKTNHSYQ\", \"JFHAGKINER\", \"UOFFHQQLIR\",  #>     \"TLGDIASGEL\", \"LJJSFTJKBP\", \"MHVRYUZJWL\", \"PKBCVRCMCS\", \"EZLGDZHKHT\",  #>     \"ZTCMALLRXB\", \"TLGDIASGEL\", \"JFHAGKINER\", \"CYQGGUSNEK\", \"AZVIVPYKND\",  #>     \"EWTGOBRLKP\", \"QKSAXQEAIB\", \"VOXRCHMDIT\", \"CKNVKMZWDC\", \"YROTAZMWFI\",  #>     \"JRNMLJJSDP\", \"GXYQHIZVPD\", \"HPKSIGVDRL\", \"TWBOLWJGAR\", \"TLGDIASGEL\",  #>     \"XDEAUVDMFQ\", \"RFAKZMSZMB\", \"RSSXENWCQU\", \"BZPWNEEBHR\", \"CJQEUMATTB\",  #>     \"UOFFHQQLIR\", \"QQIQBNKASY\", \"JHXSYICTMS\", \"PKBCVRCMCS\", \"JSGBOZVHXC\",  #>     \"VBFGFOMUQJ\", \"WEDUDZADWG\", \"KTANGMAQMT\", \"YROTAZMWFI\", \"BBONKKTFNG\",  #>     \"TBZWQOHERE\", \"JOPGMOKVOM\", \"QQIQBNKASY\", \"KBYFYYONYU\", \"RNAOTFIWTN\",  #>     \"CYQGGUSNEK\", \"XKSCGLSVUZ\", \"KBYFYYONYU\", \"VOXRCHMDIT\", \"GXYQHIZVPD\",  #>     \"QBPRAWZTBF\", \"LEESGFRPHV\", \"WNATHOQPJS\", \"GKPLYRURBB\", \"FIXJLQEKCP\",  #>     \"CYQGGUSNEK\", \"NOTPDVRLPM\", \"MPSFHTGKEF\", \"AQEEZTRLKH\", \"ZTTKZEEJZP\",  #>     \"YFDQMQIVBM\", \"AGJEXFMJAO\", \"EAMRJPOWLU\", \"CMEKXFGTSR\", \"BKYOKYIUGW\",  #>     \"KBYFYYONYU\", \"KKKAFDRDCO\", \"ZTCMALLRXB\", \"VKEOEUOTDQ\", \"PKTRNWCHPR\",  #>     \"EWTGOBRLKP\", \"RFAKZMSZMB\", \"AOKHTNTQJC\", \"UJMNXDCYBB\", \"BZPWNEEBHR\",  #>     \"AIJRHVVDKP\", \"HLWNYXNVYM\", \"RQDKTNHSYQ\", \"HPKSIGVDRL\", \"ZTTKZEEJZP\",  #>     \"TBZWQOHERE\", \"JPARFIKTYL\", \"WEDUDZADWG\", \"YDGABWKNRS\", \"PKBCVRCMCS\",  #>     \"HCEHZFVRBV\", \"AOKHTNTQJC\", \"VOXRCHMDIT\", \"YDGABWKNRS\", \"OPNAGRHLZM\",  #>     \"JPARFIKTYL\", \"ZTTKZEEJZP\", \"JPARFIKTYL\", \"PBLJMWGFTW\", \"RFAKZMSZMB\",  #>     \"ESYOZKOHCU\", \"OSNCJRVKET\", \"EOJBYFQEOY\", \"CFXONOGTQH\", \"ASCJFWFUGV\",  #>     \"FKXBYBMICY\", \"YDGABWKNRS\", \"WKXIHCQQBN\", \"PKTRNWCHPR\", \"GSHWBCJXVZ\",  #>     \"JVKZPZVIIU\", \"EWTGOBRLKP\", \"ZTTKZEEJZP\", \"ICUEBKDOGB\", \"NJLMIFXDEK\",  #>     \"TKKAYBAFGV\", \"WKXIHCQQBN\", \"UJMNXDCYBB\", \"QQIQBNKASY\", \"JVKZPZVIIU\",  #>     \"FHCLEHLIXM\", \"OPNAGRHLZM\", \"JHVIRHYUEP\", \"ENXVDYZEEW\", \"JFHAGKINER\",  #>     \"HGHMEUCTEX\", \"ASCJFWFUGV\", \"FKXBYBMICY\", \"KBYFYYONYU\", \"HGHMEUCTEX\",  #>     \"EOJBYFQEOY\", \"RBWJLMGEPF\", \"SPBEZTBJFS\", \"CFSINPQYCO\", \"HGHMEUCTEX\",  #>     \"HCEHZFVRBV\", \"TLGDIASGEL\", \"RHALOWGMGJ\", \"TWBOLWJGAR\", \"VOXRCHMDIT\",  #>     \"EAMRJPOWLU\", \"GKPLYRURBB\", \"IYNWQZVCCI\", \"YROTAZMWFI\", \"LEESGFRPHV\",  #>     \"ESYOZKOHCU\", \"VOXRCHMDIT\", \"FIXJLQEKCP\", \"YDGABWKNRS\", \"QQIQBNKASY\",  #>     \"CMEKXFGTSR\", \"YDGABWKNRS\", \"RHALOWGMGJ\", \"AQEEZTRLKH\", \"KKKAFDRDCO\",  #>     \"HYHAFAFYEA\", \"XSHYKGMBPQ\", \"FKXBYBMICY\", \"AOKHTNTQJC\", \"EOJBYFQEOY\",  #>     \"GKPLYRURBB\", \"LHDUBEZXXM\", \"DRQRVFYUCX\", \"HYHAFAFYEA\", \"JHVIRHYUEP\",  #>     \"HLWNYXNVYM\", \"PHIZOLWIBS\", \"TBZWQOHERE\", \"HGHMEUCTEX\", \"OSNCJRVKET\",  #>     \"JPARFIKTYL\", \"NJLMIFXDEK\", \"NJLMIFXDEK\", \"MHVRYUZJWL\", \"KTANGMAQMT\",  #>     \"BKYOKYIUGW\", \"VOXRCHMDIT\", \"ZPWKFFVOCB\", \"QQIQBNKASY\", \"ENXVDYZEEW\",  #>     \"VOXRCHMDIT\", \"EZLGDZHKHT\", \"ERVIHSPAYA\", \"QMDWWKFVRU\", \"SVYPVLUGHE\",  #>     \"AHOMYEGIBP\", \"ESYOZKOHCU\", \"JOPGMOKVOM\", \"JWFPSYZNLW\", \"GXYQHIZVPD\",  #>     \"UZRCINDECG\", \"FHCLEHLIXM\", \"MMCWEZDZSL\", \"JRNMLJJSDP\", \"JOPGMOKVOM\",  #>     \"NOTPDVRLPM\", \"URBJONTBBW\", \"BKYOKYIUGW\", \"ZTTKZEEJZP\", \"FHCLEHLIXM\",  #>     \"VKEOEUOTDQ\", \"AFUTZUEXVM\", \"GKPLYRURBB\", \"UNCDYWJXLO\", \"QBPHMGOGFW\",  #>     \"QMDWWKFVRU\", \"MMCWEZDZSL\", \"KIJPLWHVGS\", \"NTSOYECHZQ\", \"MQKHZKWIKA\",  #>     \"CFXONOGTQH\", \"UOFFHQQLIR\", \"ELMZBUCGXP\", \"CMEKXFGTSR\", \"QMDWWKFVRU\",  #>     \"ENXVDYZEEW\", \"UOFFHQQLIR\", \"GXQQOGSTOQ\", \"IIKTKPNNPT\", \"ISWVRSKEUK\",  #>     \"JOPGMOKVOM\", \"FHCLEHLIXM\", \"ZTCMALLRXB\", \"MGDZOPJAFG\", \"EAMRJPOWLU\",  #>     \"WNATHOQPJS\", \"VOXRCHMDIT\", \"XCEJMFPVDX\", \"EJSYIOEOJL\", \"RMEYEXVXVX\",  #>     \"JHXSYICTMS\", \"HPKSIGVDRL\", \"XCEJMFPVDX\", \"JPARFIKTYL\", \"CUYVXLQJIV\",  #>     \"UJMNXDCYBB\", \"EOJBYFQEOY\", \"LJJSFTJKBP\", \"SVBBYDPIOA\", \"XDEAUVDMFQ\",  #>     \"LEESGFRPHV\", \"UZRCINDECG\", \"XKSCGLSVUZ\", \"LEESGFRPHV\", \"KTANGMAQMT\",  #>     \"FKXBYBMICY\", \"ICUEBKDOGB\", \"GSNHQUBLXJ\", \"CMEKXFGTSR\", \"JFHAGKINER\",  #>     \"LJJSFTJKBP\", \"ZTTKZEEJZP\", \"QEAYJDRZQO\", \"RHALOWGMGJ\", \"SVYPVLUGHE\",  #>     \"QMDWWKFVRU\", \"NTSOYECHZQ\", \"PHIZOLWIBS\", \"TXFSIPGCID\", \"CJQEUMATTB\",  #>     \"SPBEZTBJFS\", \"EAMRJPOWLU\", \"FIXJLQEKCP\", \"ESYOZKOHCU\", \"TWBOLWJGAR\",  #>     \"PKTRNWCHPR\", \"WEDUDZADWG\", \"FHCLEHLIXM\", \"JVKZPZVIIU\", \"CFXONOGTQH\",  #>     \"VOXRCHMDIT\", \"JOPGMOKVOM\", \"GSHWBCJXVZ\", \"YROTAZMWFI\", \"QBPRAWZTBF\",  #>     \"HLWNYXNVYM\", \"CJQEUMATTB\", \"GRCMVPYLDK\", \"CMEKXFGTSR\", \"UZRCINDECG\",  #>     \"VBFGFOMUQJ\", \"QQIQBNKASY\", \"JVCERYCMOA\", \"TXFSIPGCID\", \"FHCLEHLIXM\",  #>     \"ACYJOPUKSD\", \"GSHWBCJXVZ\", \"CMEKXFGTSR\", \"JVCERYCMOA\", \"HLWNYXNVYM\",  #>     \"SVBBYDPIOA\", \"ICUEBKDOGB\", \"XCEJMFPVDX\", \"MPSFHTGKEF\", \"UZRCINDECG\",  #>     \"UNCDYWJXLO\", \"EOJBYFQEOY\", \"ZBXYPQEVLU\", \"AIJRHVVDKP\", \"QQIQBNKASY\",  #>     \"NTSOYECHZQ\", \"NTSOYECHZQ\", \"TBZWQOHERE\", \"ISHHJNXLMR\", \"GSNHQUBLXJ\",  #>     \"ASCJFWFUGV\", \"GXQQOGSTOQ\", \"CFSINPQYCO\", \"GSNHQUBLXJ\", \"EKNGZSKPGF\",  #>     \"MPSFHTGKEF\", \"DRQRVFYUCX\", \"LJJSFTJKBP\", \"QMDWWKFVRU\", \"JPARFIKTYL\",  #>     \"QCCNNYIKTH\", \"EWTGOBRLKP\", \"WKXIHCQQBN\", \"YDGABWKNRS\", \"GKPLYRURBB\",  #>     \"JWFPSYZNLW\", \"ESYOZKOHCU\", \"YFDQMQIVBM\", \"GSNHQUBLXJ\", \"LEESGFRPHV\",  #>     \"BZPWNEEBHR\", \"QCCNNYIKTH\", \"QMDWWKFVRU\", \"MQKHZKWIKA\", \"FHCLEHLIXM\",  #>     \"OPNAGRHLZM\", \"QQIQBNKASY\", \"RSSXENWCQU\", \"JOPGMOKVOM\", \"CKNVKMZWDC\",  #>     \"WKXIHCQQBN\", \"BHOFOGKCJA\", \"KIJPLWHVGS\", \"QMDWWKFVRU\", \"RSSXENWCQU\",  #>     \"WMVGSBQYPB\", \"FIXJLQEKCP\", \"KIJPLWHVGS\", \"JVKZPZVIIU\", \"LHDUBEZXXM\",  #>     \"AHOMYEGIBP\", \"GSNHQUBLXJ\", \"EAMRJPOWLU\", \"KBYFYYONYU\", \"FIXJLQEKCP\",  #>     \"NTSOYECHZQ\", \"WEDUDZADWG\", \"KKKAFDRDCO\", \"AHOMYEGIBP\", \"AIJRHVVDKP\",  #>     \"TKKAYBAFGV\", \"JPARFIKTYL\", \"ZBXYPQEVLU\", \"ISWVRSKEUK\", \"UZRCINDECG\",  #>     \"PKBCVRCMCS\", \"QBPRAWZTBF\", \"QQIQBNKASY\", \"JPARFIKTYL\", \"RFAKZMSZMB\",  #>     \"JOPGMOKVOM\", \"ASCJFWFUGV\", \"QCCNNYIKTH\", \"BJUNWZLJYP\", \"ZPWKFFVOCB\",  #>     \"KTANGMAQMT\", \"VKEOEUOTDQ\", \"JOPGMOKVOM\", \"SVYPVLUGHE\", \"EOJBYFQEOY\",  #>     \"NOTPDVRLPM\", \"IIKTKPNNPT\", \"MQKHZKWIKA\", \"ASCJFWFUGV\", \"XCEJMFPVDX\",  #>     \"XKSCGLSVUZ\", \"UJMNXDCYBB\", \"HGHMEUCTEX\", \"UJMNXDCYBB\", \"GXYQHIZVPD\",  #>     \"AFUTZUEXVM\", \"QKSAXQEAIB\", \"VKEOEUOTDQ\", \"TBZWQOHERE\", \"UFXSCLPLER\",  #>     \"RHALOWGMGJ\", \"WEDUDZADWG\", \"ZTTKZEEJZP\", \"QBPHMGOGFW\", \"JVKZPZVIIU\",  #>     \"XCEJMFPVDX\", \"ENXVDYZEEW\", \"GXYQHIZVPD\", \"SVBBYDPIOA\", \"YROTAZMWFI\",  #>     \"JHVIRHYUEP\", \"BJUNWZLJYP\", \"GRCMVPYLDK\", \"JVCERYCMOA\", \"LJJSFTJKBP\",  #>     \"XKSCGLSVUZ\", \"VOXRCHMDIT\", \"BHOFOGKCJA\", \"JVKZPZVIIU\", \"RSSXENWCQU\",  #>     \"WLNMRBXMPC\", \"AGJEXFMJAO\", \"WNATHOQPJS\", \"SPBEZTBJFS\", \"WEDUDZADWG\",  #>     \"ACYJOPUKSD\", \"CUYVXLQJIV\", \"SPBEZTBJFS\", \"JFHAGKINER\", \"HCEHZFVRBV\",  #>     \"ISWVRSKEUK\", \"RMEYEXVXVX\", \"TLGDIASGEL\", \"LJJSFTJKBP\", \"ACYJOPUKSD\",  #>     \"BZPWNEEBHR\", \"JFHAGKINER\", \"PBLJMWGFTW\", \"GKPLYRURBB\", \"BZPWNEEBHR\",  #>     \"KBYFYYONYU\", \"QKSAXQEAIB\", \"ZBXYPQEVLU\", \"QBPRAWZTBF\", \"KTANGMAQMT\",  #>     \"KBYFYYONYU\", \"PBLJMWGFTW\", \"CJQEUMATTB\", \"YROTAZMWFI\", \"JWFPSYZNLW\",  #>     \"KTANGMAQMT\", \"UJMNXDCYBB\", \"CJQEUMATTB\", \"YFDQMQIVBM\", \"TKKAYBAFGV\",  #>     \"GRCMVPYLDK\", \"BZPWNEEBHR\", \"BJUNWZLJYP\", \"ZTTKZEEJZP\", \"PALVVUCJBF\",  #>     \"ASCJFWFUGV\", \"CUYVXLQJIV\", \"ASCJFWFUGV\", \"RNAOTFIWTN\", \"BKYOKYIUGW\",  #>     \"HLWNYXNVYM\", \"ISHHJNXLMR\", \"RNAOTFIWTN\", \"ZBXYPQEVLU\", \"IYNWQZVCCI\",  #>     \"CKNVKMZWDC\", \"NCXWRVCMVY\", \"ACYJOPUKSD\", \"JPARFIKTYL\", \"XDEAUVDMFQ\",  #>     \"GXYQHIZVPD\", \"KTANGMAQMT\", \"SPBEZTBJFS\", \"TLGDIASGEL\", \"GXQQOGSTOQ\",  #>     \"GRCMVPYLDK\", \"EZLGDZHKHT\", \"ZPWKFFVOCB\", \"MGDZOPJAFG\", \"NCXWRVCMVY\",  #>     \"NOTPDVRLPM\", \"GRCMVPYLDK\", \"YDGABWKNRS\", \"ZTCMALLRXB\", \"CMEKXFGTSR\",  #>     \"QEAYJDRZQO\", \"ACYJOPUKSD\", \"PKTRNWCHPR\", \"URBJONTBBW\", \"WEDUDZADWG\",  #>     \"ACYJOPUKSD\", \"URBJONTBBW\", \"AFUTZUEXVM\", \"CUYVXLQJIV\", \"WKXIHCQQBN\",  #>     \"EZLGDZHKHT\", \"AFUTZUEXVM\", \"OPNAGRHLZM\", \"MCBXZBXGJN\", \"GKPLYRURBB\",  #>     \"UJMNXDCYBB\", \"RFAKZMSZMB\", \"QCCNNYIKTH\", \"RNAOTFIWTN\", \"YDGABWKNRS\",  #>     \"CMEKXFGTSR\", \"TBZWQOHERE\", \"TWBOLWJGAR\", \"EZLGDZHKHT\", \"WNATHOQPJS\",  #>     \"NOTPDVRLPM\", \"FKXBYBMICY\", \"KBYFYYONYU\", \"PHIZOLWIBS\", \"ENXVDYZEEW\",  #>     \"LHDUBEZXXM\", \"KKKAFDRDCO\", \"TXFSIPGCID\", \"CFSINPQYCO\", \"SVBBYDPIOA\",  #>     \"SVYPVLUGHE\", \"CFXONOGTQH\", \"MGDZOPJAFG\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\",  #>     \"BJUNWZLJYP\", \"GXQQOGSTOQ\", \"CJQEUMATTB\", \"QKSAXQEAIB\", \"EWTGOBRLKP\",  #>     \"WMVGSBQYPB\", \"ELMZBUCGXP\", \"JFHAGKINER\", \"AOKHTNTQJC\", \"HYUIWKYPXU\",  #>     \"RQDKTNHSYQ\", \"VBFGFOMUQJ\", \"XDEAUVDMFQ\", \"GSNHQUBLXJ\", \"LJJSFTJKBP\",  #>     \"ASCJFWFUGV\", \"UJMNXDCYBB\", \"MGDZOPJAFG\", \"FHCLEHLIXM\", \"RHALOWGMGJ\",  #>     \"JVCERYCMOA\", \"VBFGFOMUQJ\", \"HLWNYXNVYM\", \"XCEJMFPVDX\", \"FIXJLQEKCP\",  #>     \"UCYFOWDBOQ\", \"CJQEUMATTB\", \"CFSINPQYCO\", \"MGDZOPJAFG\", \"QBPHMGOGFW\",  #>     \"AGJEXFMJAO\", \"WKXIHCQQBN\", \"HCEHZFVRBV\", \"RHALOWGMGJ\", \"NJLMIFXDEK\",  #>     \"ENXVDYZEEW\", \"NOTPDVRLPM\", \"JPARFIKTYL\", \"CUYVXLQJIV\", \"JHXSYICTMS\",  #>     \"YDGABWKNRS\", \"JVKZPZVIIU\", \"EOJBYFQEOY\", \"UOFFHQQLIR\", \"AOKHTNTQJC\",  #>     \"CYQGGUSNEK\", \"KIJPLWHVGS\", \"QMDWWKFVRU\", \"QKSAXQEAIB\", \"WMVGSBQYPB\",  #>     \"AGJEXFMJAO\", \"JOPGMOKVOM\", \"UZRCINDECG\", \"BJUNWZLJYP\", \"TWBOLWJGAR\",  #>     \"ISHHJNXLMR\", \"KTANGMAQMT\", \"ASCJFWFUGV\", \"AOKHTNTQJC\", \"JFHAGKINER\",  #>     \"CUYVXLQJIV\", \"VKEOEUOTDQ\", \"JRNMLJJSDP\", \"FKTIIHAGSF\", \"HGHMEUCTEX\",  #>     \"PKBCVRCMCS\", \"XKSCGLSVUZ\", \"WLNMRBXMPC\", \"MPSFHTGKEF\", \"ZBXYPQEVLU\",  #>     \"ZTTKZEEJZP\", \"CUYVXLQJIV\", \"ASCJFWFUGV\", \"QKSAXQEAIB\", \"ERVIHSPAYA\",  #>     \"CJQEUMATTB\", \"AGJEXFMJAO\", \"YDGABWKNRS\", \"BHOFOGKCJA\", \"JOPGMOKVOM\",  #>     \"PHIZOLWIBS\", \"KKKAFDRDCO\", \"UOFFHQQLIR\", \"QQIQBNKASY\", \"PBLJMWGFTW\",  #>     \"CUYVXLQJIV\", \"BJUNWZLJYP\", \"WLNMRBXMPC\", \"LJJSFTJKBP\", \"HYUIWKYPXU\",  #>     \"UZRCINDECG\", \"VBFGFOMUQJ\", \"EJSYIOEOJL\", \"JRNMLJJSDP\", \"JFHAGKINER\",  #>     \"PHIZOLWIBS\", \"ZPWKFFVOCB\", \"ZTCMALLRXB\", \"CFXONOGTQH\", \"KIJPLWHVGS\",  #>     \"IYNWQZVCCI\", \"FHCLEHLIXM\", \"NJLMIFXDEK\", \"GSHWBCJXVZ\", \"JSGBOZVHXC\",  #>     \"CJQEUMATTB\", \"AGJEXFMJAO\", \"AIJRHVVDKP\", \"VKEOEUOTDQ\", \"UNCDYWJXLO\",  #>     \"AIJRHVVDKP\", \"CJQEUMATTB\", \"ZTCMALLRXB\", \"JPARFIKTYL\", \"HLWNYXNVYM\",  #>     \"UJMNXDCYBB\", \"AIJRHVVDKP\", \"ESYOZKOHCU\", \"LEESGFRPHV\", \"TBZWQOHERE\",  #>     \"YDGABWKNRS\", \"YFDQMQIVBM\", \"GRCMVPYLDK\", \"XKSCGLSVUZ\", \"TXFSIPGCID\",  #>     \"QQIQBNKASY\", \"XKSCGLSVUZ\", \"WMVGSBQYPB\", \"NCXWRVCMVY\", \"SPBEZTBJFS\",  #>     \"OPNAGRHLZM\", \"VOXRCHMDIT\", \"XKSCGLSVUZ\", \"CONXBVIQSU\", \"WMVGSBQYPB\",  #>     \"BHOFOGKCJA\", \"JFHAGKINER\", \"QQIQBNKASY\", \"PKTRNWCHPR\", \"ELMZBUCGXP\",  #>     \"CUYVXLQJIV\", \"QBPRAWZTBF\", \"JVCERYCMOA\", \"ACYJOPUKSD\", \"MMCWEZDZSL\",  #>     \"EAMRJPOWLU\", \"FKXBYBMICY\", \"AGJEXFMJAO\", \"KIJPLWHVGS\", \"YFDQMQIVBM\",  #>     \"CYQGGUSNEK\", \"GXYQHIZVPD\", \"AOKHTNTQJC\", \"GXQQOGSTOQ\", \"EAMRJPOWLU\",  #>     \"UZRCINDECG\", \"ENXVDYZEEW\", \"KIJPLWHVGS\", \"XKSCGLSVUZ\", \"ISWVRSKEUK\",  #>     \"PKBCVRCMCS\", \"JOPGMOKVOM\", \"HPKSIGVDRL\", \"MGDZOPJAFG\", \"TWBOLWJGAR\",  #>     \"EAMRJPOWLU\", \"YROTAZMWFI\", \"ZPWKFFVOCB\", \"CFSINPQYCO\", \"FIXJLQEKCP\",  #>     \"XCEJMFPVDX\", \"UOFFHQQLIR\", \"TLGDIASGEL\", \"URBJONTBBW\", \"FIXJLQEKCP\",  #>     \"QBPRAWZTBF\", \"ERVIHSPAYA\", \"UJMNXDCYBB\", \"WLNMRBXMPC\", \"RMEYEXVXVX\",  #>     \"YDGABWKNRS\", \"HYUIWKYPXU\", \"EZLGDZHKHT\", \"CJQEUMATTB\", \"ERVIHSPAYA\",  #>     \"CYQGGUSNEK\", \"KTANGMAQMT\", \"ONTOHBVEQC\", \"KTANGMAQMT\", \"ENXVDYZEEW\",  #>     \"KIJPLWHVGS\", \"BBONKKTFNG\", \"QQIQBNKASY\", \"HGHMEUCTEX\", \"XKSCGLSVUZ\",  #>     \"QCCNNYIKTH\", \"QQIQBNKASY\", \"IIKTKPNNPT\", \"FHCLEHLIXM\", \"QQIQBNKASY\",  #>     \"GSHWBCJXVZ\", \"JHVIRHYUEP\", \"RBWJLMGEPF\", \"KTANGMAQMT\", \"TWBOLWJGAR\",  #>     \"KKKAFDRDCO\", \"OSNCJRVKET\", \"RHALOWGMGJ\", \"ZBXYPQEVLU\", \"ELMZBUCGXP\",  #>     \"CALRWQEBFZ\", \"NJLMIFXDEK\", \"JFHAGKINER\", \"CYQGGUSNEK\", \"JHVIRHYUEP\",  #>     \"ISHHJNXLMR\", \"AZVIVPYKND\", \"NJLMIFXDEK\", \"FIXJLQEKCP\", \"AGJEXFMJAO\",  #>     \"EOJBYFQEOY\", \"CJQEUMATTB\", \"CFXONOGTQH\", \"UFXSCLPLER\", \"GSNHQUBLXJ\",  #>     \"HPKSIGVDRL\", \"YFDQMQIVBM\", \"OPNAGRHLZM\", \"YROTAZMWFI\", \"SPBEZTBJFS\",  #>     \"UOFFHQQLIR\", \"AGJEXFMJAO\", \"CFXONOGTQH\", \"EJSYIOEOJL\", \"CYQGGUSNEK\",  #>     \"ZTCMALLRXB\", \"FIXJLQEKCP\", \"VBFGFOMUQJ\", \"AZVIVPYKND\", \"UCYFOWDBOQ\",  #>     \"MGDZOPJAFG\", \"RFAKZMSZMB\", \"YFDQMQIVBM\", \"JWFPSYZNLW\", \"AQEEZTRLKH\",  #>     \"ZTCMALLRXB\", \"CKNVKMZWDC\", \"NTSOYECHZQ\", \"VKEOEUOTDQ\", \"JWFPSYZNLW\",  #>     \"JOPGMOKVOM\", \"NOTPDVRLPM\", \"NOTPDVRLPM\", \"VKEOEUOTDQ\", \"RNAOTFIWTN\",  #>     \"OPNAGRHLZM\", \"MGDZOPJAFG\", \"NJLMIFXDEK\", \"HGHMEUCTEX\", \"CALRWQEBFZ\",  #>     \"LEESGFRPHV\", \"EOJBYFQEOY\", \"RMEYEXVXVX\", \"ESYOZKOHCU\", \"KTANGMAQMT\",  #>     \"LJJSFTJKBP\", \"BBONKKTFNG\", \"TWBOLWJGAR\", \"CALRWQEBFZ\", \"GKPLYRURBB\",  #>     \"YFDQMQIVBM\", \"HCEHZFVRBV\", \"AOKHTNTQJC\", \"JVCERYCMOA\", \"VOXRCHMDIT\",  #>     \"AOKHTNTQJC\", \"GKPLYRURBB\", \"HYHAFAFYEA\", \"NTSOYECHZQ\", \"QMDWWKFVRU\",  #>     \"RHALOWGMGJ\", \"MCBXZBXGJN\", \"DRQRVFYUCX\", \"WMVGSBQYPB\", \"UOFFHQQLIR\",  #>     \"RNAOTFIWTN\", \"AQEEZTRLKH\", \"KBYFYYONYU\", \"CFXONOGTQH\", \"CUYVXLQJIV\",  #>     \"GSHWBCJXVZ\", \"EOJBYFQEOY\", \"ZTCMALLRXB\", \"PHIZOLWIBS\", \"AQEEZTRLKH\",  #>     \"BHOFOGKCJA\", \"BJUNWZLJYP\", \"JSGBOZVHXC\", \"YDGABWKNRS\", \"HCEHZFVRBV\",  #>     \"BZPWNEEBHR\", \"RNAOTFIWTN\", \"BZPWNEEBHR\", \"WMVGSBQYPB\", \"CJQEUMATTB\",  #>     \"MQKHZKWIKA\", \"MGDZOPJAFG\", \"ZBXYPQEVLU\", \"OSNCJRVKET\", \"OPNAGRHLZM\",  #>     \"CMEKXFGTSR\", \"BZPWNEEBHR\", \"ENXVDYZEEW\", \"FIXJLQEKCP\", \"EZLGDZHKHT\",  #>     \"HGHMEUCTEX\", \"PKBCVRCMCS\", \"GSNHQUBLXJ\", \"CFXONOGTQH\", \"ASCJFWFUGV\",  #>     \"QMDWWKFVRU\", \"WMVGSBQYPB\", \"UNCDYWJXLO\", \"BKYOKYIUGW\", \"UCYFOWDBOQ\",  #>     \"ISHHJNXLMR\", \"KBYFYYONYU\", \"WEDUDZADWG\", \"NTSOYECHZQ\", \"AOKHTNTQJC\",  #>     \"QBPHMGOGFW\", \"RFAKZMSZMB\", \"ZTCMALLRXB\", \"TBZWQOHERE\", \"RSSXENWCQU\",  #>     \"XKSCGLSVUZ\", \"ZTTKZEEJZP\", \"SVYPVLUGHE\", \"QQIQBNKASY\", \"SPBEZTBJFS\",  #>     \"WNATHOQPJS\", \"GSNHQUBLXJ\", \"URBJONTBBW\", \"AHOMYEGIBP\", \"URBJONTBBW\",  #>     \"XKSCGLSVUZ\", \"GXYQHIZVPD\", \"KBYFYYONYU\", \"NJLMIFXDEK\", \"SVYPVLUGHE\",  #>     \"LGWJJITBKZ\", \"EKNGZSKPGF\", \"WEDUDZADWG\", \"ZTTKZEEJZP\", \"PKBCVRCMCS\",  #>     \"EAMRJPOWLU\", \"JVCERYCMOA\", \"CMEKXFGTSR\", \"NJLMIFXDEK\", \"ASCJFWFUGV\",  #>     \"TWBOLWJGAR\", \"AHOMYEGIBP\", \"CUYVXLQJIV\", \"CMEKXFGTSR\", \"CFSINPQYCO\",  #>     \"RFAKZMSZMB\", \"QBPRAWZTBF\", \"URBJONTBBW\", \"YFDQMQIVBM\", \"CKNVKMZWDC\",  #>     \"FKTIIHAGSF\", \"VOXRCHMDIT\", \"SVYPVLUGHE\", \"RQDKTNHSYQ\", \"RBWJLMGEPF\",  #>     \"FIXJLQEKCP\", \"XSHYKGMBPQ\", \"UCYFOWDBOQ\", \"YDGABWKNRS\", \"CFXONOGTQH\",  #>     \"AGJEXFMJAO\", \"CUYVXLQJIV\", \"ZTTKZEEJZP\", \"AOKHTNTQJC\", \"TXFSIPGCID\",  #>     \"ZPWKFFVOCB\", \"MQKHZKWIKA\", \"MCBXZBXGJN\", \"FHCLEHLIXM\", \"QQIQBNKASY\",  #>     \"XDEAUVDMFQ\", \"GSNHQUBLXJ\", \"YDGABWKNRS\", \"LHDUBEZXXM\", \"AIJRHVVDKP\",  #>     \"ISHHJNXLMR\", \"JFHAGKINER\", \"OPNAGRHLZM\", \"ENXVDYZEEW\", \"QKSAXQEAIB\",  #>     \"QBPHMGOGFW\", \"HYUIWKYPXU\", \"BZPWNEEBHR\", \"TWBOLWJGAR\", \"BJUNWZLJYP\",  #>     \"UCYFOWDBOQ\", \"WKXIHCQQBN\", \"TWBOLWJGAR\", \"FKXBYBMICY\", \"MHVRYUZJWL\",  #>     \"JWFPSYZNLW\", \"XDEAUVDMFQ\", \"QBPRAWZTBF\", \"JRNMLJJSDP\", \"XCEJMFPVDX\",  #>     \"NJLMIFXDEK\", \"GXYQHIZVPD\", \"ACYJOPUKSD\", \"LHDUBEZXXM\", \"EAMRJPOWLU\",  #>     \"YDGABWKNRS\", \"RQDKTNHSYQ\", \"CFXONOGTQH\", \"ACYJOPUKSD\", \"JVCERYCMOA\",  #>     \"UJMNXDCYBB\", \"WNATHOQPJS\", \"MHVRYUZJWL\", \"AOKHTNTQJC\", \"EAMRJPOWLU\",  #>     \"VBFGFOMUQJ\", \"HYHAFAFYEA\", \"DRQRVFYUCX\", \"ISHHJNXLMR\", \"ESYOZKOHCU\",  #>     \"QEAYJDRZQO\", \"ZBXYPQEVLU\", \"XDEAUVDMFQ\", \"WKXIHCQQBN\", \"EKNGZSKPGF\",  #>     \"XSHYKGMBPQ\", \"ENXVDYZEEW\", \"YROTAZMWFI\", \"KTANGMAQMT\", \"QCCNNYIKTH\",  #>     \"EJSYIOEOJL\", \"EWTGOBRLKP\", \"ISWVRSKEUK\", \"WLNMRBXMPC\", \"YDGABWKNRS\",  #>     \"GSNHQUBLXJ\", \"ISHHJNXLMR\", \"KIJPLWHVGS\", \"KBYFYYONYU\", \"FKXBYBMICY\",  #>     \"RMEYEXVXVX\", \"MMCWEZDZSL\", \"ZTTKZEEJZP\", \"CJQEUMATTB\", \"OPNAGRHLZM\",  #>     \"ESYOZKOHCU\", \"TLGDIASGEL\", \"XDEAUVDMFQ\", \"VBFGFOMUQJ\", \"CFXONOGTQH\",  #>     \"RQDKTNHSYQ\", \"ERVIHSPAYA\", \"ISHHJNXLMR\", \"CFXONOGTQH\", \"ISWVRSKEUK\",  #>     \"QBPHMGOGFW\", \"TKKAYBAFGV\", \"XDEAUVDMFQ\", \"HPKSIGVDRL\", \"QBPRAWZTBF\",  #>     \"TXFSIPGCID\", \"GSHWBCJXVZ\", \"WKXIHCQQBN\", \"FHCLEHLIXM\", \"MPSFHTGKEF\",  #>     \"ESYOZKOHCU\", \"CFSINPQYCO\", \"RNAOTFIWTN\", \"CALRWQEBFZ\", \"ACYJOPUKSD\",  #>     \"TWBOLWJGAR\", \"RNAOTFIWTN\", \"HCEHZFVRBV\", \"MMCWEZDZSL\", \"AFUTZUEXVM\",  #>     \"OPNAGRHLZM\", \"ZBXYPQEVLU\", \"OPNAGRHLZM\", \"TWBOLWJGAR\", \"CUYVXLQJIV\",  #>     \"AZVIVPYKND\", \"CFSINPQYCO\", \"JVCERYCMOA\", \"CJQEUMATTB\", \"AGJEXFMJAO\",  #>     \"MMCWEZDZSL\", \"OPNAGRHLZM\", \"HYHAFAFYEA\", \"RNAOTFIWTN\", \"CFSINPQYCO\",  #>     \"MGDZOPJAFG\", \"ISWVRSKEUK\", \"GSNHQUBLXJ\", \"FIXJLQEKCP\", \"LHDUBEZXXM\",  #>     \"GXYQHIZVPD\", \"ELMZBUCGXP\", \"GXYQHIZVPD\", \"ZPWKFFVOCB\", \"CKNVKMZWDC\",  #>     \"CKNVKMZWDC\", \"ZTCMALLRXB\", \"RNAOTFIWTN\", \"CMEKXFGTSR\", \"ISHHJNXLMR\",  #>     \"CKNVKMZWDC\", \"TLGDIASGEL\", \"GXYQHIZVPD\", \"KTANGMAQMT\", \"YDGABWKNRS\",  #>     \"CFXONOGTQH\", \"GSHWBCJXVZ\", \"UJMNXDCYBB\", \"ZBXYPQEVLU\", \"RFAKZMSZMB\",  #>     \"MHVRYUZJWL\", \"JPARFIKTYL\", \"XDEAUVDMFQ\", \"RQDKTNHSYQ\", \"UFXSCLPLER\",  #>     \"AOKHTNTQJC\", \"NTSOYECHZQ\", \"PKTRNWCHPR\", \"GXYQHIZVPD\", \"VOXRCHMDIT\",  #>     \"UJMNXDCYBB\", \"CYQGGUSNEK\", \"UOFFHQQLIR\", \"QCCNNYIKTH\", \"RFAKZMSZMB\",  #>     \"ERVIHSPAYA\", \"DRQRVFYUCX\", \"RBWJLMGEPF\", \"LEESGFRPHV\", \"KTANGMAQMT\",  #>     \"AFUTZUEXVM\", \"JVCERYCMOA\", \"QBPRAWZTBF\", \"IIKTKPNNPT\", \"ZTCMALLRXB\",  #>     \"GSNHQUBLXJ\", \"AQEEZTRLKH\", \"QCCNNYIKTH\", \"BKYOKYIUGW\", \"TLGDIASGEL\",  #>     \"LJJSFTJKBP\", \"NCXWRVCMVY\", \"JWFPSYZNLW\", \"ZTTKZEEJZP\", \"EAMRJPOWLU\",  #>     \"MGDZOPJAFG\", \"CFXONOGTQH\", \"MGDZOPJAFG\", \"RNAOTFIWTN\", \"ZBXYPQEVLU\",  #>     \"FHCLEHLIXM\", \"KIJPLWHVGS\", \"NJLMIFXDEK\", \"WNATHOQPJS\", \"JPARFIKTYL\",  #>     \"EAMRJPOWLU\", \"ESYOZKOHCU\", \"ZBXYPQEVLU\", \"UZRCINDECG\", \"EJSYIOEOJL\",  #>     \"HCEHZFVRBV\", \"TLGDIASGEL\", \"FHCLEHLIXM\", \"EOJBYFQEOY\", \"FHCLEHLIXM\",  #>     \"EZLGDZHKHT\", \"AGJEXFMJAO\", \"ICUEBKDOGB\", \"ASCJFWFUGV\", \"JVCERYCMOA\",  #>     \"PHIZOLWIBS\", \"URBJONTBBW\", \"QCCNNYIKTH\", \"KTANGMAQMT\", \"CMEKXFGTSR\",  #>     \"JFHAGKINER\", \"JVKZPZVIIU\", \"GRCMVPYLDK\", \"QCCNNYIKTH\", \"LGWJJITBKZ\",  #>     \"EKNGZSKPGF\", \"AQEEZTRLKH\", \"JVKZPZVIIU\", \"AGJEXFMJAO\", \"EJSYIOEOJL\",  #>     \"GSHWBCJXVZ\", \"TBZWQOHERE\", \"CUYVXLQJIV\", \"OSNCJRVKET\", \"MQKHZKWIKA\",  #>     \"HCEHZFVRBV\", \"MCBXZBXGJN\", \"OSNCJRVKET\", \"RHALOWGMGJ\", \"RHALOWGMGJ\",  #>     \"QMDWWKFVRU\", \"JVCERYCMOA\", \"NTSOYECHZQ\", \"JPARFIKTYL\", \"ENXVDYZEEW\",  #>     \"BZPWNEEBHR\", \"AOKHTNTQJC\", \"AFUTZUEXVM\", \"FIXJLQEKCP\", \"ERVIHSPAYA\",  #>     \"MGDZOPJAFG\", \"PKTRNWCHPR\", \"VKEOEUOTDQ\", \"UCYFOWDBOQ\", \"ESYOZKOHCU\",  #>     \"QCCNNYIKTH\", \"JOPGMOKVOM\", \"ACYJOPUKSD\", \"CJQEUMATTB\", \"ERVIHSPAYA\",  #>     \"FHCLEHLIXM\", \"KBYFYYONYU\", \"JHVIRHYUEP\", \"JFHAGKINER\", \"JRNMLJJSDP\",  #>     \"XKSCGLSVUZ\", \"EOJBYFQEOY\", \"ERVIHSPAYA\", \"JHVIRHYUEP\", \"RFAKZMSZMB\",  #>     \"KIJPLWHVGS\", \"CMEKXFGTSR\", \"AIJRHVVDKP\", \"CYQGGUSNEK\", \"AFUTZUEXVM\",  #>     \"RQDKTNHSYQ\", \"PALVVUCJBF\", \"JVKZPZVIIU\", \"JFHAGKINER\", \"UOFFHQQLIR\",  #>     \"HYUIWKYPXU\", \"BZPWNEEBHR\", \"XDEAUVDMFQ\", \"ACYJOPUKSD\", \"UJMNXDCYBB\",  #>     \"PKTRNWCHPR\", \"GXYQHIZVPD\", \"JSGBOZVHXC\", \"CJQEUMATTB\", \"YDGABWKNRS\",  #>     \"HGHMEUCTEX\", \"TXFSIPGCID\", \"UZRCINDECG\", \"XDEAUVDMFQ\", \"HPKSIGVDRL\",  #>     \"PHIZOLWIBS\", \"OPNAGRHLZM\", \"TXFSIPGCID\", \"MPSFHTGKEF\", \"AIJRHVVDKP\",  #>     \"ENXVDYZEEW\", \"CONXBVIQSU\", \"ACYJOPUKSD\", \"KIJPLWHVGS\", \"GKPLYRURBB\",  #>     \"QCCNNYIKTH\", \"GSNHQUBLXJ\", \"CFSINPQYCO\", \"TBZWQOHERE\", \"GXYQHIZVPD\",  #>     \"CFSINPQYCO\", \"RQDKTNHSYQ\", \"RHALOWGMGJ\", \"TWBOLWJGAR\", \"EOJBYFQEOY\",  #>     \"KIJPLWHVGS\", \"BKYOKYIUGW\", \"ZBXYPQEVLU\", \"MPSFHTGKEF\", \"RFAKZMSZMB\",  #>     \"GXYQHIZVPD\", \"ISHHJNXLMR\", \"PHIZOLWIBS\", \"LGWJJITBKZ\", \"BZPWNEEBHR\",  #>     \"LJJSFTJKBP\", \"PKBCVRCMCS\", \"KBYFYYONYU\", \"RFAKZMSZMB\", \"KBYFYYONYU\",  #>     \"AHOMYEGIBP\", \"RNAOTFIWTN\", \"CYQGGUSNEK\", \"BKYOKYIUGW\", \"KKKAFDRDCO\",  #>     \"RMEYEXVXVX\", \"MQKHZKWIKA\", \"RFAKZMSZMB\", \"KKKAFDRDCO\", \"EAMRJPOWLU\",  #>     \"CUYVXLQJIV\", \"EAMRJPOWLU\", \"PALVVUCJBF\", \"OSNCJRVKET\", \"CONXBVIQSU\",  #>     \"DRQRVFYUCX\", \"XKSCGLSVUZ\", \"HPKSIGVDRL\", \"NTSOYECHZQ\", \"TWBOLWJGAR\",  #>     \"GKPLYRURBB\", \"XCEJMFPVDX\", \"JFHAGKINER\", \"CKNVKMZWDC\", \"CFSINPQYCO\",  #>     \"HCEHZFVRBV\", \"ZTCMALLRXB\", \"JWFPSYZNLW\", \"TXFSIPGCID\", \"NCXWRVCMVY\",  #>     \"BHOFOGKCJA\", \"ACYJOPUKSD\", \"XDEAUVDMFQ\", \"QKSAXQEAIB\", \"HGHMEUCTEX\",  #>     \"DRQRVFYUCX\", \"ESYOZKOHCU\", \"RHALOWGMGJ\", \"HPKSIGVDRL\", \"PALVVUCJBF\",  #>     \"BZPWNEEBHR\", \"YROTAZMWFI\", \"EOJBYFQEOY\", \"PKBCVRCMCS\", \"JWFPSYZNLW\",  #>     \"XKSCGLSVUZ\", \"FHCLEHLIXM\", \"IYNWQZVCCI\", \"FKXBYBMICY\", \"RHALOWGMGJ\",  #>     \"HYHAFAFYEA\", \"ISWVRSKEUK\", \"JSGBOZVHXC\", \"JVKZPZVIIU\", \"GSHWBCJXVZ\",  #>     \"ISHHJNXLMR\", \"PKTRNWCHPR\", \"RQDKTNHSYQ\", \"UZRCINDECG\", \"TKKAYBAFGV\",  #>     \"QMDWWKFVRU\", \"GSHWBCJXVZ\", \"QCCNNYIKTH\", \"LGWJJITBKZ\", \"CKNVKMZWDC\",  #>     \"URBJONTBBW\", \"PKBCVRCMCS\", \"JWFPSYZNLW\", \"TKKAYBAFGV\", \"FKXBYBMICY\",  #>     \"ZTCMALLRXB\", \"ZTTKZEEJZP\", \"PKBCVRCMCS\", \"UJMNXDCYBB\", \"JFHAGKINER\",  #>     \"GSHWBCJXVZ\", \"WEDUDZADWG\", \"TWBOLWJGAR\", \"VBFGFOMUQJ\", \"QCCNNYIKTH\",  #>     \"RNAOTFIWTN\", \"QEAYJDRZQO\", \"RNAOTFIWTN\", \"JHXSYICTMS\", \"KTANGMAQMT\",  #>     \"MPSFHTGKEF\", \"VOXRCHMDIT\", \"CFSINPQYCO\", \"JWFPSYZNLW\", \"JVCERYCMOA\",  #>     \"CUYVXLQJIV\", \"GKPLYRURBB\", \"NTSOYECHZQ\", \"NOTPDVRLPM\", \"TBZWQOHERE\",  #>     \"LGWJJITBKZ\", \"EAMRJPOWLU\", \"UZRCINDECG\", \"UNCDYWJXLO\", \"HYUIWKYPXU\",  #>     \"JSGBOZVHXC\", \"GSHWBCJXVZ\", \"PKBCVRCMCS\", \"RQDKTNHSYQ\", \"QEAYJDRZQO\",  #>     \"ASCJFWFUGV\", \"DRQRVFYUCX\", \"MHVRYUZJWL\", \"ZPWKFFVOCB\", \"QMDWWKFVRU\",  #>     \"NOTPDVRLPM\", \"GXYQHIZVPD\", \"LGWJJITBKZ\", \"SVYPVLUGHE\", \"GXQQOGSTOQ\",  #>     \"CFSINPQYCO\", \"JPARFIKTYL\", \"CYQGGUSNEK\", \"RNAOTFIWTN\", \"XSHYKGMBPQ\",  #>     \"GXYQHIZVPD\", \"RBWJLMGEPF\", \"YDGABWKNRS\", \"ASCJFWFUGV\", \"GSHWBCJXVZ\",  #>     \"ZTTKZEEJZP\", \"CONXBVIQSU\", \"YFDQMQIVBM\", \"EOJBYFQEOY\", \"RFAKZMSZMB\",  #>     \"URBJONTBBW\", \"EOJBYFQEOY\", \"ASCJFWFUGV\", \"EOJBYFQEOY\", \"TWBOLWJGAR\",  #>     \"AZVIVPYKND\", \"GRCMVPYLDK\", \"JOPGMOKVOM\", \"OSNCJRVKET\", \"RFAKZMSZMB\",  #>     \"JVKZPZVIIU\", \"RHALOWGMGJ\", \"ZTCMALLRXB\", \"VBFGFOMUQJ\", \"BZPWNEEBHR\",  #>     \"CFXONOGTQH\", \"KBYFYYONYU\", \"CFXONOGTQH\", \"GSHWBCJXVZ\", \"YROTAZMWFI\",  #>     \"BBONKKTFNG\", \"YDGABWKNRS\", \"EWTGOBRLKP\", \"JRNMLJJSDP\", \"RFAKZMSZMB\",  #>     \"BZPWNEEBHR\", \"AOKHTNTQJC\", \"CMEKXFGTSR\", \"FIXJLQEKCP\", \"MCBXZBXGJN\",  #>     \"RMEYEXVXVX\", \"GKPLYRURBB\", \"JOPGMOKVOM\", \"BKYOKYIUGW\", \"UOFFHQQLIR\",  #>     \"BZPWNEEBHR\", \"WMVGSBQYPB\", \"FHCLEHLIXM\", \"TXFSIPGCID\", \"MHVRYUZJWL\",  #>     \"EOJBYFQEOY\", \"GXYQHIZVPD\", \"TWBOLWJGAR\", \"UCYFOWDBOQ\", \"XKSCGLSVUZ\",  #>     \"ENXVDYZEEW\", \"ZPWKFFVOCB\", \"AQEEZTRLKH\", \"URBJONTBBW\", \"ISWVRSKEUK\",  #>     \"UZRCINDECG\", \"KKKAFDRDCO\", \"EAMRJPOWLU\", \"JSGBOZVHXC\", \"QBPHMGOGFW\",  #>     \"YFDQMQIVBM\", \"CKNVKMZWDC\", \"ZTTKZEEJZP\", \"MMCWEZDZSL\", \"EOJBYFQEOY\",  #>     \"CFXONOGTQH\", \"TWBOLWJGAR\", \"TXFSIPGCID\", \"KBYFYYONYU\", \"OPNAGRHLZM\",  #>     \"SPBEZTBJFS\", \"KKKAFDRDCO\", \"LJJSFTJKBP\", \"GRCMVPYLDK\", \"HLWNYXNVYM\",  #>     \"QBPRAWZTBF\", \"HPKSIGVDRL\", \"CJQEUMATTB\", \"XKSCGLSVUZ\", \"JPARFIKTYL\",  #>     \"EZLGDZHKHT\", \"MHVRYUZJWL\", \"JHVIRHYUEP\", \"XDEAUVDMFQ\", \"UJMNXDCYBB\",  #>     \"RHALOWGMGJ\", \"DRQRVFYUCX\", \"JSGBOZVHXC\", \"AQEEZTRLKH\", \"QBPHMGOGFW\",  #>     \"GKPLYRURBB\", \"OPNAGRHLZM\", \"YROTAZMWFI\", \"MHVRYUZJWL\", \"MHVRYUZJWL\",  #>     \"CKNVKMZWDC\", \"HPKSIGVDRL\", \"AHOMYEGIBP\", \"CJQEUMATTB\", \"AIJRHVVDKP\",  #>     \"HLWNYXNVYM\", \"FKXBYBMICY\", \"AIJRHVVDKP\", \"KKKAFDRDCO\", \"QMDWWKFVRU\",  #>     \"SPBEZTBJFS\", \"BHOFOGKCJA\", \"LEESGFRPHV\", \"KTANGMAQMT\", \"PALVVUCJBF\",  #>     \"LJJSFTJKBP\", \"CFSINPQYCO\", \"GKPLYRURBB\", \"CJQEUMATTB\", \"BZPWNEEBHR\",  #>     \"WEDUDZADWG\", \"TWBOLWJGAR\", \"QQIQBNKASY\", \"JVCERYCMOA\", \"RMEYEXVXVX\",  #>     \"AZVIVPYKND\", \"RSSXENWCQU\", \"QQIQBNKASY\", \"JRNMLJJSDP\", \"XKSCGLSVUZ\",  #>     \"QMDWWKFVRU\", \"NOTPDVRLPM\", \"UZRCINDECG\", \"MGDZOPJAFG\", \"YFDQMQIVBM\",  #>     \"ESYOZKOHCU\", \"XSHYKGMBPQ\", \"RHALOWGMGJ\", \"LGWJJITBKZ\", \"QQIQBNKASY\",  #>     \"VBFGFOMUQJ\", \"CJQEUMATTB\", \"FIXJLQEKCP\", \"XKSCGLSVUZ\", \"CALRWQEBFZ\",  #>     \"YDGABWKNRS\", \"AGJEXFMJAO\", \"RQDKTNHSYQ\", \"RNAOTFIWTN\", \"XSHYKGMBPQ\",  #>     \"PKBCVRCMCS\", \"ELMZBUCGXP\", \"NOTPDVRLPM\", \"CONXBVIQSU\", \"CMEKXFGTSR\",  #>     \"TXFSIPGCID\", \"TKKAYBAFGV\", \"BJUNWZLJYP\", \"RFAKZMSZMB\", \"LJJSFTJKBP\",  #>     \"MQKHZKWIKA\", \"XCEJMFPVDX\", \"PKTRNWCHPR\", \"XDEAUVDMFQ\", \"EAMRJPOWLU\",  #>     \"ASCJFWFUGV\", \"ONTOHBVEQC\", \"LGWJJITBKZ\", \"NOTPDVRLPM\", \"CUYVXLQJIV\",  #>     \"AQEEZTRLKH\", \"QQIQBNKASY\", \"XKSCGLSVUZ\", \"QMDWWKFVRU\", \"ESYOZKOHCU\",  #>     \"NOTPDVRLPM\", \"TBZWQOHERE\", \"JOPGMOKVOM\", \"CALRWQEBFZ\", \"ZPWKFFVOCB\",  #>     \"SVYPVLUGHE\", \"HPKSIGVDRL\", \"YDGABWKNRS\", \"GXQQOGSTOQ\", \"UFXSCLPLER\",  #>     \"HPKSIGVDRL\", \"CALRWQEBFZ\", \"XDEAUVDMFQ\", \"PHIZOLWIBS\", \"GKPLYRURBB\",  #>     \"PHIZOLWIBS\", \"AZVIVPYKND\", \"WKXIHCQQBN\", \"DRQRVFYUCX\", \"KTANGMAQMT\",  #>     \"ZBXYPQEVLU\", \"HYUIWKYPXU\", \"PBLJMWGFTW\", \"PKBCVRCMCS\", \"QCCNNYIKTH\",  #>     \"KTANGMAQMT\", \"LJJSFTJKBP\", \"ISHHJNXLMR\", \"JVKZPZVIIU\", \"ISHHJNXLMR\",  #>     \"ZTTKZEEJZP\", \"JOPGMOKVOM\", \"HGHMEUCTEX\", \"AZVIVPYKND\", \"CALRWQEBFZ\",  #>     \"URBJONTBBW\", \"HYUIWKYPXU\", \"UJMNXDCYBB\", \"EOJBYFQEOY\", \"JHVIRHYUEP\",  #>     \"FKXBYBMICY\", \"HPKSIGVDRL\", \"XCEJMFPVDX\", \"XKSCGLSVUZ\", \"HLWNYXNVYM\",  #>     \"JPARFIKTYL\", \"QEAYJDRZQO\", \"RFAKZMSZMB\", \"AIJRHVVDKP\", \"MCBXZBXGJN\",  #>     \"ZPWKFFVOCB\", \"CFXONOGTQH\", \"RFAKZMSZMB\", \"RSSXENWCQU\", \"WNATHOQPJS\",  #>     \"VKEOEUOTDQ\", \"KTANGMAQMT\", \"BZPWNEEBHR\", \"GKPLYRURBB\", \"PKBCVRCMCS\",  #>     \"AGJEXFMJAO\", \"JFHAGKINER\", \"YDGABWKNRS\", \"CJQEUMATTB\", \"KBYFYYONYU\",  #>     \"AQEEZTRLKH\", \"FKXBYBMICY\", \"DRQRVFYUCX\", \"NCXWRVCMVY\", \"EKNGZSKPGF\",  #>     \"XDEAUVDMFQ\", \"VKEOEUOTDQ\", \"TBZWQOHERE\", \"ZTTKZEEJZP\", \"AQEEZTRLKH\",  #>     \"KBYFYYONYU\", \"WNATHOQPJS\", \"RQDKTNHSYQ\", \"JOPGMOKVOM\", \"VOXRCHMDIT\",  #>     \"YDGABWKNRS\", \"AFUTZUEXVM\", \"YFDQMQIVBM\", \"RBWJLMGEPF\", \"CFXONOGTQH\",  #>     \"LJJSFTJKBP\", \"RBWJLMGEPF\", \"KIJPLWHVGS\", \"PALVVUCJBF\", \"PALVVUCJBF\",  #>     \"RNAOTFIWTN\", \"CJQEUMATTB\", \"SPBEZTBJFS\", \"HPKSIGVDRL\", \"JFHAGKINER\",  #>     \"MMCWEZDZSL\", \"MPSFHTGKEF\", \"KKKAFDRDCO\", \"DRQRVFYUCX\", \"ICUEBKDOGB\",  #>     \"CALRWQEBFZ\", \"CJQEUMATTB\", \"UOFFHQQLIR\", \"HYUIWKYPXU\", \"SVBBYDPIOA\",  #>     \"ZPWKFFVOCB\", \"GKPLYRURBB\", \"IYNWQZVCCI\", \"NCXWRVCMVY\", \"NJLMIFXDEK\",  #>     \"XKSCGLSVUZ\", \"JOPGMOKVOM\", \"ASCJFWFUGV\", \"ZTTKZEEJZP\", \"AHOMYEGIBP\",  #>     \"BZPWNEEBHR\", \"GSNHQUBLXJ\", \"CYQGGUSNEK\", \"TWBOLWJGAR\", \"CFXONOGTQH\",  #>     \"NCXWRVCMVY\", \"TWBOLWJGAR\", \"BJUNWZLJYP\", \"CKNVKMZWDC\", \"JSGBOZVHXC\",  #>     \"EOJBYFQEOY\", \"CUYVXLQJIV\", \"EOJBYFQEOY\", \"PALVVUCJBF\", \"AGJEXFMJAO\",  #>     \"HPKSIGVDRL\", \"HYHAFAFYEA\", \"JOPGMOKVOM\", \"ZPWKFFVOCB\", \"RNAOTFIWTN\",  #>     \"BZPWNEEBHR\", \"EOJBYFQEOY\", \"FIXJLQEKCP\", \"QCCNNYIKTH\", \"BZPWNEEBHR\",  #>     \"NTSOYECHZQ\", \"ZTTKZEEJZP\", \"EWTGOBRLKP\", \"WMVGSBQYPB\", \"QBPRAWZTBF\",  #>     \"XCEJMFPVDX\", \"ESYOZKOHCU\", \"QEAYJDRZQO\", \"ZPWKFFVOCB\", \"BJUNWZLJYP\",  #>     \"URBJONTBBW\", \"CUYVXLQJIV\", \"CUYVXLQJIV\", \"CKNVKMZWDC\", \"TLGDIASGEL\",  #>     \"ZTTKZEEJZP\", \"WLNMRBXMPC\", \"ONTOHBVEQC\", \"AFUTZUEXVM\", \"GKPLYRURBB\",  #>     \"AZVIVPYKND\", \"CKNVKMZWDC\", \"BKYOKYIUGW\", \"ASCJFWFUGV\", \"CFSINPQYCO\",  #>     \"EOJBYFQEOY\", \"XKSCGLSVUZ\", \"AHOMYEGIBP\", \"QEAYJDRZQO\", \"FIXJLQEKCP\",  #>     \"EZLGDZHKHT\", \"ICUEBKDOGB\", \"BZPWNEEBHR\", \"ZTCMALLRXB\", \"YFDQMQIVBM\",  #>     \"OPNAGRHLZM\", \"ESYOZKOHCU\", \"GKPLYRURBB\", \"VBFGFOMUQJ\", \"JWFPSYZNLW\",  #>     \"PKBCVRCMCS\", \"RNAOTFIWTN\", \"CYQGGUSNEK\", \"MHVRYUZJWL\", \"NCXWRVCMVY\",  #>     \"JRNMLJJSDP\", \"ZTTKZEEJZP\", \"PALVVUCJBF\", \"WMVGSBQYPB\", \"ZTCMALLRXB\",  #>     \"UJMNXDCYBB\", \"GKPLYRURBB\", \"WNATHOQPJS\", \"LJJSFTJKBP\", \"ZBXYPQEVLU\",  #>     \"QKSAXQEAIB\", \"MQKHZKWIKA\", \"LGWJJITBKZ\", \"TWBOLWJGAR\", \"VOXRCHMDIT\",  #>     \"NCXWRVCMVY\", \"FKXBYBMICY\", \"ACYJOPUKSD\", \"CALRWQEBFZ\", \"HGHMEUCTEX\",  #>     \"ENXVDYZEEW\", \"YDGABWKNRS\", \"SPBEZTBJFS\", \"UNCDYWJXLO\", \"JVKZPZVIIU\",  #>     \"LJJSFTJKBP\", \"GSNHQUBLXJ\", \"ESYOZKOHCU\", \"CALRWQEBFZ\", \"ESYOZKOHCU\",  #>     \"RHALOWGMGJ\", \"CYQGGUSNEK\", \"YFDQMQIVBM\", \"MQKHZKWIKA\", \"UZRCINDECG\",  #>     \"PBLJMWGFTW\", \"URBJONTBBW\", \"FHCLEHLIXM\", \"KKKAFDRDCO\", \"UOFFHQQLIR\",  #>     \"TLGDIASGEL\", \"AHOMYEGIBP\", \"OPNAGRHLZM\", \"UZRCINDECG\", \"TXFSIPGCID\",  #>     \"HGHMEUCTEX\", \"MPSFHTGKEF\", \"CUYVXLQJIV\", \"JHXSYICTMS\", \"MHVRYUZJWL\",  #>     \"FIXJLQEKCP\", \"QQIQBNKASY\", \"AZVIVPYKND\", \"ZTTKZEEJZP\", \"QBPRAWZTBF\",  #>     \"JVCERYCMOA\", \"UZRCINDECG\", \"QMDWWKFVRU\", \"XCEJMFPVDX\", \"RHALOWGMGJ\",  #>     \"ZTCMALLRXB\", \"AIJRHVVDKP\", \"JWFPSYZNLW\", \"EAMRJPOWLU\", \"ENXVDYZEEW\",  #>     \"FKXBYBMICY\", \"YDGABWKNRS\", \"ZBXYPQEVLU\", \"BKYOKYIUGW\", \"BBONKKTFNG\",  #>     \"URBJONTBBW\", \"VOXRCHMDIT\", \"AQEEZTRLKH\", \"NOTPDVRLPM\", \"HLWNYXNVYM\",  #>     \"CMEKXFGTSR\", \"JOPGMOKVOM\", \"YDGABWKNRS\", \"HPKSIGVDRL\", \"FHCLEHLIXM\",  #>     \"GXYQHIZVPD\", \"TLGDIASGEL\", \"GKPLYRURBB\", \"CUYVXLQJIV\", \"BZPWNEEBHR\",  #>     \"TWBOLWJGAR\", \"EWTGOBRLKP\", \"JWFPSYZNLW\", \"ZTCMALLRXB\", \"EJSYIOEOJL\",  #>     \"FHCLEHLIXM\", \"YDGABWKNRS\", \"BZPWNEEBHR\", \"YDGABWKNRS\", \"TLGDIASGEL\",  #>     \"OPNAGRHLZM\", \"HYUIWKYPXU\", \"ESYOZKOHCU\", \"EOJBYFQEOY\", \"TWBOLWJGAR\",  #>     \"ISWVRSKEUK\", \"RMEYEXVXVX\", \"RHALOWGMGJ\", \"CMEKXFGTSR\", \"CFSINPQYCO\",  #>     \"WEDUDZADWG\", \"IIKTKPNNPT\", \"MMCWEZDZSL\", \"FKXBYBMICY\", \"VOXRCHMDIT\",  #>     \"GXQQOGSTOQ\", \"ZTTKZEEJZP\", \"RMEYEXVXVX\", \"WLNMRBXMPC\", \"JFHAGKINER\",  #>     \"GXYQHIZVPD\", \"CJQEUMATTB\", \"YROTAZMWFI\", \"TWBOLWJGAR\", \"RHALOWGMGJ\",  #>     \"YDGABWKNRS\", \"JFHAGKINER\", \"VOXRCHMDIT\", \"JPARFIKTYL\", \"CUYVXLQJIV\",  #>     \"YFDQMQIVBM\", \"LEESGFRPHV\", \"ZTCMALLRXB\", \"HYHAFAFYEA\", \"UOFFHQQLIR\",  #>     \"GSNHQUBLXJ\", \"CMEKXFGTSR\", \"UZRCINDECG\", \"RMEYEXVXVX\", \"ZTCMALLRXB\",  #>     \"ESYOZKOHCU\", \"LEESGFRPHV\", \"CKNVKMZWDC\", \"JVKZPZVIIU\", \"TXFSIPGCID\",  #>     \"RNAOTFIWTN\", \"RMEYEXVXVX\", \"VKEOEUOTDQ\", \"JWFPSYZNLW\", \"UJMNXDCYBB\",  #>     \"QQIQBNKASY\", \"GKPLYRURBB\", \"ASCJFWFUGV\", \"FKXBYBMICY\", \"VKEOEUOTDQ\",  #>     \"GRCMVPYLDK\", \"ASCJFWFUGV\", \"AZVIVPYKND\", \"BZPWNEEBHR\", \"VKEOEUOTDQ\",  #>     \"RQDKTNHSYQ\", \"ASCJFWFUGV\", \"KIJPLWHVGS\", \"EAMRJPOWLU\", \"KIJPLWHVGS\",  #>     \"YROTAZMWFI\", \"ESYOZKOHCU\", \"BKYOKYIUGW\", \"WMVGSBQYPB\", \"QMDWWKFVRU\",  #>     \"TWBOLWJGAR\", \"PALVVUCJBF\", \"JPARFIKTYL\", \"JOPGMOKVOM\", \"JVCERYCMOA\",  #>     \"CUYVXLQJIV\", \"GSNHQUBLXJ\", \"NTSOYECHZQ\", \"JOPGMOKVOM\", \"QBPHMGOGFW\",  #>     \"YDGABWKNRS\", \"EAMRJPOWLU\", \"EAMRJPOWLU\", \"KKKAFDRDCO\", \"UZRCINDECG\",  #>     \"JSGBOZVHXC\", \"GXYQHIZVPD\", \"PKBCVRCMCS\", \"WEDUDZADWG\", \"CKNVKMZWDC\",  #>     \"KBYFYYONYU\", \"AQEEZTRLKH\", \"ONTOHBVEQC\", \"EAMRJPOWLU\", \"WMVGSBQYPB\",  #>     \"CYQGGUSNEK\", \"SPBEZTBJFS\", \"JHVIRHYUEP\", \"WEDUDZADWG\", \"ERVIHSPAYA\",  #>     \"ZBXYPQEVLU\", \"CKNVKMZWDC\", \"ZPWKFFVOCB\", \"YFDQMQIVBM\", \"LEESGFRPHV\",  #>     \"OSNCJRVKET\", \"NCXWRVCMVY\", \"MMCWEZDZSL\", \"NCXWRVCMVY\", \"GRCMVPYLDK\",  #>     \"TWBOLWJGAR\", \"ASCJFWFUGV\", \"ZTCMALLRXB\", \"EKNGZSKPGF\", \"UOFFHQQLIR\",  #>     \"KTANGMAQMT\", \"ESYOZKOHCU\", \"OPNAGRHLZM\", \"YROTAZMWFI\", \"FIXJLQEKCP\",  #>     \"YDGABWKNRS\", \"AQEEZTRLKH\", \"NTSOYECHZQ\", \"URBJONTBBW\", \"CKNVKMZWDC\",  #>     \"TLGDIASGEL\", \"JRNMLJJSDP\", \"ZTCMALLRXB\", \"HGHMEUCTEX\", \"FIXJLQEKCP\",  #>     \"NJLMIFXDEK\", \"CMEKXFGTSR\", \"VKEOEUOTDQ\", \"NJLMIFXDEK\", \"GXQQOGSTOQ\",  #>     \"CJQEUMATTB\", \"PHIZOLWIBS\", \"GXQQOGSTOQ\", \"HCEHZFVRBV\", \"HCEHZFVRBV\",  #>     \"ISHHJNXLMR\", \"LJJSFTJKBP\", \"HGHMEUCTEX\", \"XDEAUVDMFQ\", \"PKBCVRCMCS\",  #>     \"KBYFYYONYU\", \"ICUEBKDOGB\", \"CKNVKMZWDC\", \"FHCLEHLIXM\", \"LGWJJITBKZ\",  #>     \"KTANGMAQMT\", \"QMDWWKFVRU\", \"XKSCGLSVUZ\", \"KTANGMAQMT\", \"EAMRJPOWLU\",  #>     \"MHVRYUZJWL\", \"VKEOEUOTDQ\", \"CYQGGUSNEK\", \"ASCJFWFUGV\", \"GXYQHIZVPD\",  #>     \"ENXVDYZEEW\", \"ZTCMALLRXB\", \"RQDKTNHSYQ\", \"QEAYJDRZQO\", \"CKNVKMZWDC\",  #>     \"AGJEXFMJAO\", \"WEDUDZADWG\", \"UZRCINDECG\", \"YROTAZMWFI\", \"VKEOEUOTDQ\",  #>     \"ZTCMALLRXB\", \"XDEAUVDMFQ\", \"CFSINPQYCO\", \"MPSFHTGKEF\", \"WLNMRBXMPC\",  #>     \"IIKTKPNNPT\", \"ZTTKZEEJZP\", \"ESYOZKOHCU\", \"OPNAGRHLZM\", \"ONTOHBVEQC\",  #>     \"QQIQBNKASY\", \"IYNWQZVCCI\", \"QKSAXQEAIB\", \"BJUNWZLJYP\", \"AIJRHVVDKP\",  #>     \"WLNMRBXMPC\", \"AHOMYEGIBP\", \"FHCLEHLIXM\", \"GKPLYRURBB\", \"CJQEUMATTB\",  #>     \"JVCERYCMOA\", \"AIJRHVVDKP\", \"ACYJOPUKSD\", \"TLGDIASGEL\", \"ZBXYPQEVLU\",  #>     \"EOJBYFQEOY\", \"HPKSIGVDRL\", \"RFAKZMSZMB\", \"ZTTKZEEJZP\", \"BJUNWZLJYP\",  #>     \"FKXBYBMICY\", \"JSGBOZVHXC\", \"ZBXYPQEVLU\", \"AQEEZTRLKH\", \"CYQGGUSNEK\",  #>     \"ISWVRSKEUK\", \"NOTPDVRLPM\", \"ZPWKFFVOCB\", \"AHOMYEGIBP\", \"ONTOHBVEQC\",  #>     \"BZPWNEEBHR\", \"FKXBYBMICY\", \"GKPLYRURBB\", \"TBZWQOHERE\", \"FKTIIHAGSF\",  #>     \"RMEYEXVXVX\", \"JPARFIKTYL\", \"NCXWRVCMVY\", \"UFXSCLPLER\", \"ONTOHBVEQC\",  #>     \"VOXRCHMDIT\", \"RHALOWGMGJ\", \"QMDWWKFVRU\", \"WEDUDZADWG\", \"AQEEZTRLKH\",  #>     \"YDGABWKNRS\", \"RQDKTNHSYQ\", \"EOJBYFQEOY\", \"ZTCMALLRXB\", \"WNATHOQPJS\",  #>     \"UNCDYWJXLO\", \"FIXJLQEKCP\", \"NOTPDVRLPM\", \"URBJONTBBW\", \"PALVVUCJBF\",  #>     \"ZTCMALLRXB\", \"JVCERYCMOA\", \"JRNMLJJSDP\", \"CFSINPQYCO\", \"JPARFIKTYL\",  #>     \"KTANGMAQMT\", \"HCEHZFVRBV\", \"AFUTZUEXVM\", \"YDGABWKNRS\", \"TKKAYBAFGV\",  #>     \"EOJBYFQEOY\", \"ACYJOPUKSD\", \"AHOMYEGIBP\", \"MGDZOPJAFG\", \"RSSXENWCQU\",  #>     \"AZVIVPYKND\", \"JFHAGKINER\", \"YDGABWKNRS\", \"ESYOZKOHCU\", \"HYUIWKYPXU\",  #>     \"QCCNNYIKTH\", \"WNATHOQPJS\", \"XSHYKGMBPQ\", \"JPARFIKTYL\", \"GRCMVPYLDK\",  #>     \"HYUIWKYPXU\", \"RBWJLMGEPF\", \"ESYOZKOHCU\", \"BZPWNEEBHR\", \"CALRWQEBFZ\",  #>     \"YROTAZMWFI\", \"YFDQMQIVBM\", \"HCEHZFVRBV\", \"UOFFHQQLIR\", \"BZPWNEEBHR\",  #>     \"FHCLEHLIXM\", \"URBJONTBBW\", \"GXYQHIZVPD\", \"AZVIVPYKND\", \"LHDUBEZXXM\",  #>     \"LJJSFTJKBP\", \"ONTOHBVEQC\", \"AHOMYEGIBP\", \"CFXONOGTQH\", \"CJQEUMATTB\",  #>     \"KBYFYYONYU\", \"EJSYIOEOJL\", \"JPARFIKTYL\", \"ISWVRSKEUK\", \"AHOMYEGIBP\",  #>     \"CFSINPQYCO\", \"QMDWWKFVRU\", \"TLGDIASGEL\", \"RQDKTNHSYQ\", \"CJQEUMATTB\",  #>     \"JWFPSYZNLW\", \"FKXBYBMICY\", \"XSHYKGMBPQ\", \"CUYVXLQJIV\", \"JRNMLJJSDP\",  #>     \"JPARFIKTYL\", \"BKYOKYIUGW\", \"RNAOTFIWTN\", \"GSNHQUBLXJ\", \"QBPHMGOGFW\",  #>     \"GXYQHIZVPD\", \"BZPWNEEBHR\", \"BKYOKYIUGW\", \"GSHWBCJXVZ\", \"CFSINPQYCO\",  #>     \"EAMRJPOWLU\", \"WEDUDZADWG\", \"FHCLEHLIXM\", \"XSHYKGMBPQ\", \"EKNGZSKPGF\",  #>     \"CFSINPQYCO\", \"CJQEUMATTB\", \"CFXONOGTQH\", \"AGJEXFMJAO\", \"ISHHJNXLMR\",  #>     \"HYHAFAFYEA\", \"RFAKZMSZMB\", \"XCEJMFPVDX\", \"QBPHMGOGFW\", \"JOPGMOKVOM\",  #>     \"KTANGMAQMT\", \"PKTRNWCHPR\", \"ENXVDYZEEW\", \"ISWVRSKEUK\", \"AQEEZTRLKH\",  #>     \"QMDWWKFVRU\", \"SVYPVLUGHE\", \"EKNGZSKPGF\", \"KTANGMAQMT\", \"JVCERYCMOA\",  #>     \"XKSCGLSVUZ\", \"QKSAXQEAIB\", \"EKNGZSKPGF\", \"ZTCMALLRXB\", \"AGJEXFMJAO\",  #>     \"WEDUDZADWG\", \"AGJEXFMJAO\", \"UOFFHQQLIR\", \"KBYFYYONYU\", \"FIXJLQEKCP\",  #>     \"ZPWKFFVOCB\", \"NJLMIFXDEK\", \"GKPLYRURBB\", \"RQDKTNHSYQ\", \"EAMRJPOWLU\",  #>     \"AGJEXFMJAO\", \"YFDQMQIVBM\", \"RQDKTNHSYQ\", \"GRCMVPYLDK\", \"WKXIHCQQBN\",  #>     \"LHDUBEZXXM\", \"UOFFHQQLIR\", \"GXQQOGSTOQ\", \"AFUTZUEXVM\", \"QBPHMGOGFW\",  #>     \"ESYOZKOHCU\", \"ENXVDYZEEW\", \"OSNCJRVKET\", \"GSNHQUBLXJ\", \"GXQQOGSTOQ\",  #>     \"AQEEZTRLKH\", \"AZVIVPYKND\", \"GXYQHIZVPD\", \"AQEEZTRLKH\", \"KKKAFDRDCO\",  #>     \"TLGDIASGEL\", \"PHIZOLWIBS\", \"ZBXYPQEVLU\", \"JVKZPZVIIU\", \"HCEHZFVRBV\",  #>     \"FHCLEHLIXM\", \"AOKHTNTQJC\", \"SVBBYDPIOA\", \"BJUNWZLJYP\", \"JRNMLJJSDP\",  #>     \"GRCMVPYLDK\", \"ZTCMALLRXB\", \"TBZWQOHERE\", \"SPBEZTBJFS\", \"CUYVXLQJIV\",  #>     \"WEDUDZADWG\", \"JWFPSYZNLW\", \"MMCWEZDZSL\", \"JRNMLJJSDP\", \"EOJBYFQEOY\",  #>     \"RMEYEXVXVX\", \"IIKTKPNNPT\", \"ICUEBKDOGB\", \"PALVVUCJBF\", \"HPKSIGVDRL\",  #>     \"QBPHMGOGFW\", \"VKEOEUOTDQ\", \"WMVGSBQYPB\", \"FHCLEHLIXM\", \"KBYFYYONYU\",  #>     \"XSHYKGMBPQ\", \"VKEOEUOTDQ\", \"FKXBYBMICY\", \"HGHMEUCTEX\", \"CKNVKMZWDC\",  #>     \"QMDWWKFVRU\", \"ZTTKZEEJZP\", \"RFAKZMSZMB\", \"VKEOEUOTDQ\", \"JVCERYCMOA\",  #>     \"URBJONTBBW\", \"JVKZPZVIIU\", \"TWBOLWJGAR\", \"KBYFYYONYU\", \"ACYJOPUKSD\",  #>     \"AFUTZUEXVM\", \"AOKHTNTQJC\", \"NJLMIFXDEK\", \"VKEOEUOTDQ\", \"SPBEZTBJFS\",  #>     \"OSNCJRVKET\", \"GXYQHIZVPD\", \"FHCLEHLIXM\", \"JOPGMOKVOM\", \"XCEJMFPVDX\",  #>     \"JFHAGKINER\", \"ZTTKZEEJZP\", \"EKNGZSKPGF\", \"ZBXYPQEVLU\", \"YROTAZMWFI\",  #>     \"ASCJFWFUGV\", \"PKBCVRCMCS\", \"ISWVRSKEUK\", \"CYQGGUSNEK\", \"KTANGMAQMT\",  #>     \"LJJSFTJKBP\", \"JOPGMOKVOM\", \"ZBXYPQEVLU\", \"VOXRCHMDIT\", \"UFXSCLPLER\",  #>     \"CUYVXLQJIV\", \"GSNHQUBLXJ\", \"JHVIRHYUEP\", \"HLWNYXNVYM\", \"GRCMVPYLDK\",  #>     \"CJQEUMATTB\", \"FKTIIHAGSF\", \"UNCDYWJXLO\", \"XDEAUVDMFQ\", \"GXYQHIZVPD\",  #>     \"GRCMVPYLDK\", \"LHDUBEZXXM\", \"LJJSFTJKBP\", \"JPARFIKTYL\", \"JOPGMOKVOM\",  #>     \"JFHAGKINER\", \"QMDWWKFVRU\", \"CFSINPQYCO\", \"YROTAZMWFI\", \"CALRWQEBFZ\",  #>     \"AGJEXFMJAO\", \"RQDKTNHSYQ\", \"CMEKXFGTSR\", \"ICUEBKDOGB\", \"JVKZPZVIIU\",  #>     \"UCYFOWDBOQ\", \"BKYOKYIUGW\", \"QEAYJDRZQO\", \"JOPGMOKVOM\", \"ERVIHSPAYA\",  #>     \"QMDWWKFVRU\", \"JOPGMOKVOM\", \"PKBCVRCMCS\", \"RFAKZMSZMB\", \"IIKTKPNNPT\",  #>     \"WNATHOQPJS\", \"FIXJLQEKCP\", \"ISWVRSKEUK\", \"QKSAXQEAIB\", \"QKSAXQEAIB\",  #>     \"UNCDYWJXLO\", \"ZPWKFFVOCB\", \"LGWJJITBKZ\", \"AIJRHVVDKP\", \"PKBCVRCMCS\",  #>     \"CALRWQEBFZ\", \"LGWJJITBKZ\", \"TWBOLWJGAR\", \"SVBBYDPIOA\", \"RSSXENWCQU\",  #>     \"LEESGFRPHV\", \"GRCMVPYLDK\", \"JFHAGKINER\", \"FHCLEHLIXM\", \"YFDQMQIVBM\",  #>     \"NOTPDVRLPM\", \"UOFFHQQLIR\", \"FHCLEHLIXM\", \"CFXONOGTQH\", \"AGJEXFMJAO\",  #>     \"BZPWNEEBHR\", \"NCXWRVCMVY\", \"UZRCINDECG\", \"NOTPDVRLPM\", \"WNATHOQPJS\",  #>     \"CFSINPQYCO\", \"MGDZOPJAFG\", \"GSNHQUBLXJ\", \"LEESGFRPHV\", \"GSNHQUBLXJ\",  #>     \"LJJSFTJKBP\", \"WEDUDZADWG\", \"GSHWBCJXVZ\", \"IIKTKPNNPT\", \"LGWJJITBKZ\",  #>     \"HYUIWKYPXU\", \"YFDQMQIVBM\", \"HPKSIGVDRL\", \"JOPGMOKVOM\", \"FIXJLQEKCP\",  #>     \"CFSINPQYCO\", \"ESYOZKOHCU\", \"KBYFYYONYU\", \"QMDWWKFVRU\", \"EOJBYFQEOY\",  #>     \"RBWJLMGEPF\", \"BBONKKTFNG\", \"CKNVKMZWDC\", \"GXYQHIZVPD\", \"ONTOHBVEQC\",  #>     \"PKBCVRCMCS\", \"CKNVKMZWDC\", \"VOXRCHMDIT\", \"CKNVKMZWDC\", \"YFDQMQIVBM\",  #>     \"AFUTZUEXVM\", \"EOJBYFQEOY\", \"YROTAZMWFI\", \"VOXRCHMDIT\", \"LEESGFRPHV\",  #>     \"JWFPSYZNLW\", \"YROTAZMWFI\", \"QKSAXQEAIB\", \"ZBXYPQEVLU\", \"HGHMEUCTEX\",  #>     \"VKEOEUOTDQ\", \"KBYFYYONYU\", \"NCXWRVCMVY\", \"ICUEBKDOGB\", \"HYHAFAFYEA\",  #>     \"ZTTKZEEJZP\", \"FHCLEHLIXM\", \"ESYOZKOHCU\", \"LJJSFTJKBP\", \"LHDUBEZXXM\",  #>     \"YROTAZMWFI\", \"QBPRAWZTBF\", \"JSGBOZVHXC\", \"VKEOEUOTDQ\", \"JVCERYCMOA\",  #>     \"ISHHJNXLMR\", \"WEDUDZADWG\", \"VOXRCHMDIT\", \"SPBEZTBJFS\", \"ELMZBUCGXP\",  #>     \"JPARFIKTYL\", \"WEDUDZADWG\", \"AHOMYEGIBP\", \"LHDUBEZXXM\", \"YROTAZMWFI\",  #>     \"HYUIWKYPXU\", \"GSHWBCJXVZ\", \"BBONKKTFNG\", \"SPBEZTBJFS\", \"RBWJLMGEPF\",  #>     \"OPNAGRHLZM\", \"CALRWQEBFZ\", \"KBYFYYONYU\", \"HGHMEUCTEX\", \"TBZWQOHERE\",  #>     \"HYHAFAFYEA\", \"QBPRAWZTBF\", \"KBYFYYONYU\", \"UZRCINDECG\", \"LJJSFTJKBP\",  #>     \"KTANGMAQMT\", \"LJJSFTJKBP\", \"ZBXYPQEVLU\", \"HCEHZFVRBV\", \"MGDZOPJAFG\",  #>     \"JFHAGKINER\", \"GRCMVPYLDK\", \"RQDKTNHSYQ\", \"WEDUDZADWG\", \"JPARFIKTYL\",  #>     \"CFSINPQYCO\", \"GXQQOGSTOQ\", \"OPNAGRHLZM\", \"JOPGMOKVOM\", \"GXQQOGSTOQ\",  #>     \"NCXWRVCMVY\", \"JFHAGKINER\", \"SPBEZTBJFS\", \"AIJRHVVDKP\", \"HCEHZFVRBV\",  #>     \"ISHHJNXLMR\", \"SVBBYDPIOA\", \"RNAOTFIWTN\", \"ACYJOPUKSD\", \"HCEHZFVRBV\",  #>     \"WKXIHCQQBN\", \"QKSAXQEAIB\", \"HYUIWKYPXU\", \"TXFSIPGCID\", \"VKEOEUOTDQ\",  #>     \"XSHYKGMBPQ\", \"CKNVKMZWDC\", \"WEDUDZADWG\", \"EOJBYFQEOY\", \"KBYFYYONYU\",  #>     \"QCCNNYIKTH\", \"AOKHTNTQJC\", \"JPARFIKTYL\", \"TBZWQOHERE\", \"BZPWNEEBHR\",  #>     \"YROTAZMWFI\", \"SVBBYDPIOA\", \"ESYOZKOHCU\", \"LEESGFRPHV\", \"KTANGMAQMT\",  #>     \"TWBOLWJGAR\", \"RFAKZMSZMB\", \"PKTRNWCHPR\", \"KBYFYYONYU\", \"ZBXYPQEVLU\",  #>     \"NJLMIFXDEK\", \"QMDWWKFVRU\", \"OPNAGRHLZM\", \"BJUNWZLJYP\", \"ERVIHSPAYA\",  #>     \"GSHWBCJXVZ\", \"GSNHQUBLXJ\", \"ZTTKZEEJZP\", \"YFDQMQIVBM\", \"CYQGGUSNEK\",  #>     \"RSSXENWCQU\", \"EZLGDZHKHT\", \"FHCLEHLIXM\", \"UCYFOWDBOQ\", \"TLGDIASGEL\",  #>     \"LEESGFRPHV\", \"IIKTKPNNPT\", \"QKSAXQEAIB\", \"JPARFIKTYL\", \"ZTTKZEEJZP\",  #>     \"BBONKKTFNG\", \"WNATHOQPJS\", \"ONTOHBVEQC\", \"VKEOEUOTDQ\", \"GKPLYRURBB\",  #>     \"SVYPVLUGHE\", \"RFAKZMSZMB\", \"EZLGDZHKHT\", \"ISWVRSKEUK\", \"RFAKZMSZMB\",  #>     \"WEDUDZADWG\", \"UCYFOWDBOQ\", \"QBPRAWZTBF\", \"HPKSIGVDRL\", \"XSHYKGMBPQ\",  #>     \"JVCERYCMOA\", \"GSHWBCJXVZ\", \"GKPLYRURBB\", \"JVKZPZVIIU\", \"ZTTKZEEJZP\",  #>     \"FKTIIHAGSF\", \"HPKSIGVDRL\", \"LHDUBEZXXM\", \"ESYOZKOHCU\", \"ESYOZKOHCU\",  #>     \"JOPGMOKVOM\", \"KIJPLWHVGS\", \"UZRCINDECG\", \"MPSFHTGKEF\", \"RNAOTFIWTN\",  #>     \"MCBXZBXGJN\", \"ZBXYPQEVLU\", \"ERVIHSPAYA\", \"CUYVXLQJIV\", \"GRCMVPYLDK\",  #>     \"ACYJOPUKSD\", \"ZTTKZEEJZP\", \"JFHAGKINER\", \"RHALOWGMGJ\", \"RFAKZMSZMB\",  #>     \"ZPWKFFVOCB\", \"WLNMRBXMPC\", \"EZLGDZHKHT\", \"RQDKTNHSYQ\", \"LEESGFRPHV\",  #>     \"PKTRNWCHPR\", \"RSSXENWCQU\", \"RNAOTFIWTN\", \"NOTPDVRLPM\", \"WEDUDZADWG\",  #>     \"ZTTKZEEJZP\", \"HPKSIGVDRL\", \"KTANGMAQMT\", \"TKKAYBAFGV\", \"CMEKXFGTSR\",  #>     \"YDGABWKNRS\", \"KTANGMAQMT\", \"BBONKKTFNG\", \"JVKZPZVIIU\", \"QQIQBNKASY\",  #>     \"ZTTKZEEJZP\", \"RFAKZMSZMB\", \"CMEKXFGTSR\", \"ASCJFWFUGV\", \"WEDUDZADWG\",  #>     \"NOTPDVRLPM\", \"FIXJLQEKCP\", \"JFHAGKINER\", \"ONTOHBVEQC\", \"JVCERYCMOA\",  #>     \"MGDZOPJAFG\", \"BZPWNEEBHR\", \"UZRCINDECG\", \"JFHAGKINER\", \"ISHHJNXLMR\",  #>     \"UNCDYWJXLO\", \"SPBEZTBJFS\", \"LJJSFTJKBP\", \"URBJONTBBW\", \"EZLGDZHKHT\",  #>     \"ISWVRSKEUK\", \"URBJONTBBW\", \"CALRWQEBFZ\", \"PBLJMWGFTW\", \"GSHWBCJXVZ\",  #>     \"FHCLEHLIXM\", \"WNATHOQPJS\", \"MHVRYUZJWL\", \"KIJPLWHVGS\", \"QBPRAWZTBF\",  #>     \"EZLGDZHKHT\", \"SVYPVLUGHE\", \"IIKTKPNNPT\", \"OSNCJRVKET\", \"KBYFYYONYU\",  #>     \"TBZWQOHERE\", \"ZBXYPQEVLU\", \"CFSINPQYCO\", \"XDEAUVDMFQ\", \"KIJPLWHVGS\",  #>     \"QQIQBNKASY\", \"YDGABWKNRS\", \"PKTRNWCHPR\", \"YDGABWKNRS\", \"NTSOYECHZQ\",  #>     \"NOTPDVRLPM\", \"ACYJOPUKSD\", \"FIXJLQEKCP\", \"CFSINPQYCO\", \"FIXJLQEKCP\",  #>     \"NCXWRVCMVY\", \"LHDUBEZXXM\", \"ONTOHBVEQC\", \"NCXWRVCMVY\", \"RMEYEXVXVX\",  #>     \"YFDQMQIVBM\", \"UOFFHQQLIR\", \"YROTAZMWFI\", \"CYQGGUSNEK\", \"CFXONOGTQH\",  #>     \"GSNHQUBLXJ\", \"RFAKZMSZMB\", \"KKKAFDRDCO\", \"KKKAFDRDCO\", \"JSGBOZVHXC\",  #>     \"LJJSFTJKBP\", \"OPNAGRHLZM\", \"RNAOTFIWTN\", \"JRNMLJJSDP\", \"LEESGFRPHV\",  #>     \"JVKZPZVIIU\", \"JOPGMOKVOM\", \"OPNAGRHLZM\", \"JWFPSYZNLW\", \"FHCLEHLIXM\",  #>     \"MGDZOPJAFG\", \"MPSFHTGKEF\", \"WLNMRBXMPC\", \"GXYQHIZVPD\", \"CONXBVIQSU\",  #>     \"PHIZOLWIBS\", \"LHDUBEZXXM\", \"KKKAFDRDCO\", \"RMEYEXVXVX\", \"JVKZPZVIIU\",  #>     \"CUYVXLQJIV\", \"CMEKXFGTSR\", \"PHIZOLWIBS\", \"FKTIIHAGSF\", \"KTANGMAQMT\",  #>     \"YDGABWKNRS\", \"CUYVXLQJIV\", \"KIJPLWHVGS\", \"BBONKKTFNG\", \"YROTAZMWFI\",  #>     \"WKXIHCQQBN\", \"WEDUDZADWG\", \"EZLGDZHKHT\", \"MCBXZBXGJN\", \"JFHAGKINER\",  #>     \"PHIZOLWIBS\", \"QMDWWKFVRU\", \"NJLMIFXDEK\", \"QMDWWKFVRU\", \"ZBXYPQEVLU\",  #>     \"LJJSFTJKBP\", \"CMEKXFGTSR\", \"CJQEUMATTB\", \"QBPRAWZTBF\", \"CYQGGUSNEK\",  #>     \"CFXONOGTQH\", \"FIXJLQEKCP\", \"GRCMVPYLDK\", \"CALRWQEBFZ\", \"JWFPSYZNLW\",  #>     \"GSNHQUBLXJ\", \"ASCJFWFUGV\", \"WKXIHCQQBN\", \"FHCLEHLIXM\", \"YFDQMQIVBM\",  #>     \"CFXONOGTQH\", \"IYNWQZVCCI\", \"GSNHQUBLXJ\", \"WEDUDZADWG\", \"ACYJOPUKSD\",  #>     \"ASCJFWFUGV\", \"IYNWQZVCCI\", \"VKEOEUOTDQ\", \"AHOMYEGIBP\", \"JWFPSYZNLW\",  #>     \"KTANGMAQMT\", \"ZTCMALLRXB\", \"CJQEUMATTB\", \"QQIQBNKASY\", \"UOFFHQQLIR\",  #>     \"ZTTKZEEJZP\", \"RSSXENWCQU\", \"TBZWQOHERE\", \"RFAKZMSZMB\", \"HCEHZFVRBV\",  #>     \"JRNMLJJSDP\", \"WEDUDZADWG\", \"ZTTKZEEJZP\", \"EJSYIOEOJL\", \"AIJRHVVDKP\",  #>     \"SVYPVLUGHE\", \"RHALOWGMGJ\", \"QCCNNYIKTH\", \"EZLGDZHKHT\", \"RQDKTNHSYQ\",  #>     \"FHCLEHLIXM\", \"XCEJMFPVDX\", \"AGJEXFMJAO\", \"TKKAYBAFGV\", \"GSHWBCJXVZ\",  #>     \"RNAOTFIWTN\", \"LEESGFRPHV\", \"KTANGMAQMT\", \"CYQGGUSNEK\", \"ELMZBUCGXP\",  #>     \"XKSCGLSVUZ\", \"XKSCGLSVUZ\", \"QCCNNYIKTH\", \"ENXVDYZEEW\", \"UJMNXDCYBB\",  #>     \"UOFFHQQLIR\", \"JFHAGKINER\", \"JVCERYCMOA\", \"ZTTKZEEJZP\", \"KTANGMAQMT\",  #>     \"BHOFOGKCJA\", \"YFDQMQIVBM\", \"SPBEZTBJFS\", \"ONTOHBVEQC\", \"GRCMVPYLDK\",  #>     \"RMEYEXVXVX\", \"JFHAGKINER\", \"QBPHMGOGFW\", \"RSSXENWCQU\", \"BZPWNEEBHR\",  #>     \"WKXIHCQQBN\", \"QCCNNYIKTH\", \"NCXWRVCMVY\", \"GRCMVPYLDK\", \"MPSFHTGKEF\",  #>     \"NTSOYECHZQ\", \"LJJSFTJKBP\", \"MHVRYUZJWL\", \"JVCERYCMOA\", \"LGWJJITBKZ\",  #>     \"RQDKTNHSYQ\", \"ESYOZKOHCU\", \"FKTIIHAGSF\", \"WMVGSBQYPB\", \"JRNMLJJSDP\",  #>     \"ASCJFWFUGV\", \"ENXVDYZEEW\", \"WMVGSBQYPB\", \"BKYOKYIUGW\", \"FIXJLQEKCP\",  #>     \"GSHWBCJXVZ\", \"MPSFHTGKEF\", \"RQDKTNHSYQ\", \"RQDKTNHSYQ\", \"HLWNYXNVYM\",  #>     \"RFAKZMSZMB\", \"NJLMIFXDEK\", \"YFDQMQIVBM\", \"ZTTKZEEJZP\", \"UZRCINDECG\",  #>     \"ICUEBKDOGB\", \"JFHAGKINER\", \"PKTRNWCHPR\", \"MCBXZBXGJN\", \"QQIQBNKASY\",  #>     \"UZRCINDECG\", \"HYUIWKYPXU\", \"RQDKTNHSYQ\", \"QBPRAWZTBF\", \"GSNHQUBLXJ\",  #>     \"HYHAFAFYEA\", \"TWBOLWJGAR\", \"FHCLEHLIXM\", \"VBFGFOMUQJ\", \"ZTCMALLRXB\",  #>     \"EJSYIOEOJL\", \"ZTCMALLRXB\", \"FIXJLQEKCP\", \"KIJPLWHVGS\", \"KTANGMAQMT\",  #>     \"PALVVUCJBF\", \"MMCWEZDZSL\", \"KBYFYYONYU\", \"HCEHZFVRBV\", \"CUYVXLQJIV\",  #>     \"GKPLYRURBB\", \"VOXRCHMDIT\", \"GXYQHIZVPD\", \"JVKZPZVIIU\", \"CYQGGUSNEK\",  #>     \"QKSAXQEAIB\", \"TKKAYBAFGV\", \"YROTAZMWFI\", \"EJSYIOEOJL\", \"AGJEXFMJAO\",  #>     \"EZLGDZHKHT\", \"PHIZOLWIBS\", \"QBPRAWZTBF\", \"EOJBYFQEOY\", \"JVCERYCMOA\",  #>     \"RNAOTFIWTN\", \"UOFFHQQLIR\", \"LJJSFTJKBP\", \"SVBBYDPIOA\", \"UOFFHQQLIR\",  #>     \"DRQRVFYUCX\", \"UJMNXDCYBB\", \"CYQGGUSNEK\", \"MGDZOPJAFG\", \"NCXWRVCMVY\",  #>     \"JPARFIKTYL\", \"AGJEXFMJAO\", \"ZTTKZEEJZP\", \"WMVGSBQYPB\", \"AGJEXFMJAO\",  #>     \"KBYFYYONYU\", \"UJMNXDCYBB\", \"FHCLEHLIXM\", \"AGJEXFMJAO\", \"BHOFOGKCJA\",  #>     \"CUYVXLQJIV\", \"URBJONTBBW\", \"VKEOEUOTDQ\", \"ONTOHBVEQC\", \"ONTOHBVEQC\",  #>     \"KIJPLWHVGS\", \"RFAKZMSZMB\", \"EWTGOBRLKP\", \"XCEJMFPVDX\", \"RSSXENWCQU\",  #>     \"TBZWQOHERE\", \"ISHHJNXLMR\", \"JWFPSYZNLW\", \"JWFPSYZNLW\", \"CFSINPQYCO\",  #>     \"YFDQMQIVBM\", \"BHOFOGKCJA\", \"ZPWKFFVOCB\", \"TKKAYBAFGV\", \"RFAKZMSZMB\",  #>     \"JPARFIKTYL\", \"JPARFIKTYL\", \"TKKAYBAFGV\", \"MCBXZBXGJN\", \"QQIQBNKASY\",  #>     \"RQDKTNHSYQ\", \"XCEJMFPVDX\", \"LGWJJITBKZ\", \"BZPWNEEBHR\", \"ISWVRSKEUK\",  #>     \"GXYQHIZVPD\", \"TXFSIPGCID\", \"CJQEUMATTB\", \"MGDZOPJAFG\", \"YDGABWKNRS\",  #>     \"PKBCVRCMCS\", \"ELMZBUCGXP\", \"QQIQBNKASY\", \"XDEAUVDMFQ\", \"UOFFHQQLIR\",  #>     \"EJSYIOEOJL\", \"ZTTKZEEJZP\", \"RFAKZMSZMB\", \"PALVVUCJBF\", \"ZTCMALLRXB\",  #>     \"GKPLYRURBB\", \"KTANGMAQMT\", \"BBONKKTFNG\", \"AHOMYEGIBP\", \"UOFFHQQLIR\",  #>     \"VOXRCHMDIT\", \"ZTCMALLRXB\", \"AHOMYEGIBP\", \"NOTPDVRLPM\", \"EZLGDZHKHT\",  #>     \"PKBCVRCMCS\", \"KTANGMAQMT\", \"TXFSIPGCID\", \"QMDWWKFVRU\", \"IIKTKPNNPT\",  #>     \"MQKHZKWIKA\", \"CJQEUMATTB\", \"FIXJLQEKCP\", \"KTANGMAQMT\", \"PHIZOLWIBS\",  #>     \"XDEAUVDMFQ\", \"CUYVXLQJIV\", \"RHALOWGMGJ\", \"TLGDIASGEL\", \"HYHAFAFYEA\",  #>     \"GXQQOGSTOQ\", \"AGJEXFMJAO\", \"UZRCINDECG\", \"ZTCMALLRXB\", \"QMDWWKFVRU\",  #>     \"NJLMIFXDEK\", \"LGWJJITBKZ\", \"ESYOZKOHCU\", \"RSSXENWCQU\", \"YDGABWKNRS\",  #>     \"JPARFIKTYL\", \"ESYOZKOHCU\", \"EOJBYFQEOY\", \"CMEKXFGTSR\", \"CFSINPQYCO\",  #>     \"SVYPVLUGHE\", \"FKXBYBMICY\", \"CFXONOGTQH\", \"JVCERYCMOA\", \"HGHMEUCTEX\",  #>     \"QEAYJDRZQO\", \"OSNCJRVKET\", \"LEESGFRPHV\", \"PALVVUCJBF\", \"GXQQOGSTOQ\",  #>     \"GXQQOGSTOQ\", \"GXQQOGSTOQ\", \"XCEJMFPVDX\", \"LGWJJITBKZ\", \"PALVVUCJBF\",  #>     \"EOJBYFQEOY\", \"QQIQBNKASY\", \"BZPWNEEBHR\", \"AIJRHVVDKP\", \"GRCMVPYLDK\",  #>     \"LHDUBEZXXM\", \"AQEEZTRLKH\", \"MCBXZBXGJN\", \"IYNWQZVCCI\", \"CYQGGUSNEK\",  #>     \"HCEHZFVRBV\", \"HLWNYXNVYM\", \"CMEKXFGTSR\", \"WEDUDZADWG\", \"KIJPLWHVGS\",  #>     \"AGJEXFMJAO\", \"FIXJLQEKCP\", \"HCEHZFVRBV\", \"JVCERYCMOA\", \"HCEHZFVRBV\",  #>     \"QMDWWKFVRU\", \"JPARFIKTYL\", \"UOFFHQQLIR\", \"CUYVXLQJIV\", \"ZBXYPQEVLU\",  #>     \"UOFFHQQLIR\", \"QKSAXQEAIB\", \"ONTOHBVEQC\", \"XSHYKGMBPQ\", \"JFHAGKINER\",  #>     \"ESYOZKOHCU\", \"VOXRCHMDIT\", \"CALRWQEBFZ\", \"KBYFYYONYU\", \"JOPGMOKVOM\",  #>     \"FHCLEHLIXM\", \"FHCLEHLIXM\", \"FHCLEHLIXM\", \"AZVIVPYKND\", \"TWBOLWJGAR\",  #>     \"LEESGFRPHV\", \"ZTCMALLRXB\", \"CFXONOGTQH\", \"QCCNNYIKTH\", \"LJJSFTJKBP\",  #>     \"MHVRYUZJWL\", \"VBFGFOMUQJ\", \"ZTTKZEEJZP\", \"GXYQHIZVPD\", \"JFHAGKINER\",  #>     \"BZPWNEEBHR\", \"KBYFYYONYU\", \"CYQGGUSNEK\", \"JOPGMOKVOM\", \"URBJONTBBW\",  #>     \"KIJPLWHVGS\", \"CFXONOGTQH\", \"UJMNXDCYBB\", \"UOFFHQQLIR\", \"GRCMVPYLDK\",  #>     \"TLGDIASGEL\", \"QCCNNYIKTH\", \"NTSOYECHZQ\", \"ESYOZKOHCU\", \"HPKSIGVDRL\",  #>     \"TWBOLWJGAR\", \"UOFFHQQLIR\", \"MGDZOPJAFG\", \"FIXJLQEKCP\", \"KTANGMAQMT\",  #>     \"WKXIHCQQBN\", \"EOJBYFQEOY\", \"TXFSIPGCID\", \"QBPRAWZTBF\", \"URBJONTBBW\",  #>     \"LGWJJITBKZ\", \"XCEJMFPVDX\", \"DRQRVFYUCX\", \"CFXONOGTQH\", \"ELMZBUCGXP\",  #>     \"TLGDIASGEL\", \"XSHYKGMBPQ\", \"ZTCMALLRXB\", \"BBONKKTFNG\", \"ZTTKZEEJZP\",  #>     \"DRQRVFYUCX\", \"QMDWWKFVRU\", \"SVBBYDPIOA\", \"ESYOZKOHCU\", \"IIKTKPNNPT\",  #>     \"QCCNNYIKTH\", \"MGDZOPJAFG\", \"YFDQMQIVBM\", \"JWFPSYZNLW\", \"FKXBYBMICY\",  #>     \"VKEOEUOTDQ\", \"TKKAYBAFGV\", \"PHIZOLWIBS\", \"ENXVDYZEEW\", \"AIJRHVVDKP\",  #>     \"CJQEUMATTB\", \"JOPGMOKVOM\", \"HLWNYXNVYM\", \"QQIQBNKASY\", \"IYNWQZVCCI\",  #>     \"EZLGDZHKHT\", \"XSHYKGMBPQ\", \"UNCDYWJXLO\", \"MGDZOPJAFG\", \"RQDKTNHSYQ\",  #>     \"FKXBYBMICY\", \"TLGDIASGEL\", \"EZLGDZHKHT\", \"GRCMVPYLDK\", \"MPSFHTGKEF\",  #>     \"EWTGOBRLKP\", \"BBONKKTFNG\", \"ASCJFWFUGV\", \"AIJRHVVDKP\", \"CJQEUMATTB\",  #>     \"VBFGFOMUQJ\", \"RQDKTNHSYQ\", \"KTANGMAQMT\", \"RSSXENWCQU\", \"GSNHQUBLXJ\",  #>     \"AFUTZUEXVM\", \"NCXWRVCMVY\", \"CMEKXFGTSR\", \"WMVGSBQYPB\", \"RBWJLMGEPF\",  #>     \"CUYVXLQJIV\", \"VKEOEUOTDQ\", \"FKTIIHAGSF\", \"CMEKXFGTSR\", \"JVCERYCMOA\",  #>     \"VKEOEUOTDQ\", \"ICUEBKDOGB\", \"TWBOLWJGAR\", \"QQIQBNKASY\", \"ZTTKZEEJZP\",  #>     \"ONTOHBVEQC\", \"TLGDIASGEL\", \"GXQQOGSTOQ\", \"ISWVRSKEUK\", \"YFDQMQIVBM\",  #>     \"WEDUDZADWG\", \"CFXONOGTQH\", \"AHOMYEGIBP\", \"GKPLYRURBB\", \"RHALOWGMGJ\",  #>     \"VKEOEUOTDQ\", \"PKBCVRCMCS\", \"GXYQHIZVPD\", \"PALVVUCJBF\", \"CFXONOGTQH\",  #>     \"QBPHMGOGFW\", \"KBYFYYONYU\", \"LGWJJITBKZ\", \"WNATHOQPJS\", \"KBYFYYONYU\",  #>     \"ZTCMALLRXB\", \"MCBXZBXGJN\", \"PKTRNWCHPR\", \"EKNGZSKPGF\", \"BKYOKYIUGW\",  #>     \"HGHMEUCTEX\", \"JVCERYCMOA\", \"PKBCVRCMCS\", \"FIXJLQEKCP\", \"NTSOYECHZQ\",  #>     \"RQDKTNHSYQ\", \"UJMNXDCYBB\", \"CALRWQEBFZ\", \"QBPRAWZTBF\", \"RHALOWGMGJ\",  #>     \"UZRCINDECG\", \"DRQRVFYUCX\", \"BKYOKYIUGW\", \"WKXIHCQQBN\", \"ISHHJNXLMR\",  #>     \"PALVVUCJBF\", \"RHALOWGMGJ\", \"JPARFIKTYL\", \"BBONKKTFNG\", \"DRQRVFYUCX\",  #>     \"KBYFYYONYU\", \"QKSAXQEAIB\", \"CJQEUMATTB\", \"BZPWNEEBHR\", \"RFAKZMSZMB\",  #>     \"MGDZOPJAFG\", \"LJJSFTJKBP\", \"FKXBYBMICY\", \"RMEYEXVXVX\", \"NOTPDVRLPM\",  #>     \"ZTCMALLRXB\", \"ZTTKZEEJZP\", \"HPKSIGVDRL\", \"IIKTKPNNPT\", \"UJMNXDCYBB\",  #>     \"MQKHZKWIKA\", \"AZVIVPYKND\", \"AGJEXFMJAO\", \"VKEOEUOTDQ\", \"QQIQBNKASY\",  #>     \"XSHYKGMBPQ\", \"CJQEUMATTB\", \"BHOFOGKCJA\", \"TLGDIASGEL\", \"RFAKZMSZMB\",  #>     \"EZLGDZHKHT\", \"ZTCMALLRXB\", \"WLNMRBXMPC\", \"LEESGFRPHV\", \"RSSXENWCQU\",  #>     \"WEDUDZADWG\", \"XCEJMFPVDX\", \"WEDUDZADWG\", \"QCCNNYIKTH\", \"GSNHQUBLXJ\",  #>     \"HGHMEUCTEX\", \"JVKZPZVIIU\", \"EWTGOBRLKP\", \"HPKSIGVDRL\", \"SVYPVLUGHE\",  #>     \"LHDUBEZXXM\", \"YFDQMQIVBM\", \"AOKHTNTQJC\", \"MPSFHTGKEF\", \"QBPHMGOGFW\",  #>     \"HYHAFAFYEA\", \"CFSINPQYCO\", \"MHVRYUZJWL\", \"JWFPSYZNLW\", \"AGJEXFMJAO\",  #>     \"EAMRJPOWLU\", \"WEDUDZADWG\", \"DRQRVFYUCX\", \"QKSAXQEAIB\", \"AQEEZTRLKH\",  #>     \"QMDWWKFVRU\", \"UCYFOWDBOQ\", \"TXFSIPGCID\", \"YROTAZMWFI\", \"PHIZOLWIBS\",  #>     \"FKXBYBMICY\", \"XSHYKGMBPQ\", \"EAMRJPOWLU\", \"BBONKKTFNG\", \"JVKZPZVIIU\",  #>     \"CJQEUMATTB\", \"OSNCJRVKET\", \"UOFFHQQLIR\", \"ACYJOPUKSD\", \"FKXBYBMICY\",  #>     \"ZTCMALLRXB\", \"JPARFIKTYL\", \"QMDWWKFVRU\", \"WMVGSBQYPB\", \"ZBXYPQEVLU\",  #>     \"MHVRYUZJWL\", \"VOXRCHMDIT\", \"KTANGMAQMT\", \"RFAKZMSZMB\", \"JPARFIKTYL\",  #>     \"EAMRJPOWLU\", \"YDGABWKNRS\", \"CONXBVIQSU\", \"QBPRAWZTBF\", \"GRCMVPYLDK\",  #>     \"JFHAGKINER\", \"MCBXZBXGJN\", \"VOXRCHMDIT\", \"PALVVUCJBF\", \"EJSYIOEOJL\",  #>     \"GKPLYRURBB\", \"RHALOWGMGJ\", \"KIJPLWHVGS\", \"WKXIHCQQBN\", \"XDEAUVDMFQ\",  #>     \"QMDWWKFVRU\", \"CJQEUMATTB\", \"FHCLEHLIXM\", \"JPARFIKTYL\", \"ASCJFWFUGV\",  #>     \"JVCERYCMOA\", \"JOPGMOKVOM\", \"AOKHTNTQJC\", \"VBFGFOMUQJ\", \"YDGABWKNRS\",  #>     \"YROTAZMWFI\", \"HGHMEUCTEX\", \"EJSYIOEOJL\", \"YDGABWKNRS\", \"HGHMEUCTEX\",  #>     \"NTSOYECHZQ\", \"NOTPDVRLPM\", \"FIXJLQEKCP\", \"CUYVXLQJIV\", \"MQKHZKWIKA\",  #>     \"GXQQOGSTOQ\", \"NOTPDVRLPM\", \"YROTAZMWFI\", \"RQDKTNHSYQ\", \"YFDQMQIVBM\",  #>     \"UJMNXDCYBB\", \"EZLGDZHKHT\", \"ASCJFWFUGV\", \"AZVIVPYKND\", \"KTANGMAQMT\",  #>     \"XSHYKGMBPQ\", \"AFUTZUEXVM\", \"RMEYEXVXVX\", \"JWFPSYZNLW\", \"UOFFHQQLIR\",  #>     \"SPBEZTBJFS\", \"MGDZOPJAFG\", \"JWFPSYZNLW\", \"CKNVKMZWDC\", \"CKNVKMZWDC\",  #>     \"TBZWQOHERE\", \"GRCMVPYLDK\", \"JFHAGKINER\", \"XKSCGLSVUZ\", \"YFDQMQIVBM\",  #>     \"GRCMVPYLDK\", \"UJMNXDCYBB\", \"AHOMYEGIBP\", \"HCEHZFVRBV\", \"CKNVKMZWDC\",  #>     \"UOFFHQQLIR\", \"CKNVKMZWDC\", \"PKBCVRCMCS\", \"RQDKTNHSYQ\", \"UZRCINDECG\",  #>     \"ONTOHBVEQC\", \"GXQQOGSTOQ\", \"MHVRYUZJWL\", \"KKKAFDRDCO\", \"JOPGMOKVOM\",  #>     \"CALRWQEBFZ\", \"WMVGSBQYPB\", \"CFXONOGTQH\", \"QQIQBNKASY\", \"ZBXYPQEVLU\",  #>     \"LHDUBEZXXM\", \"CYQGGUSNEK\", \"RNAOTFIWTN\", \"RNAOTFIWTN\", \"GRCMVPYLDK\",  #>     \"CJQEUMATTB\", \"TKKAYBAFGV\", \"CJQEUMATTB\", \"ASCJFWFUGV\", \"EOJBYFQEOY\",  #>     \"HYUIWKYPXU\", \"NOTPDVRLPM\", \"ACYJOPUKSD\", \"AFUTZUEXVM\", \"NOTPDVRLPM\",  #>     \"FHCLEHLIXM\", \"NCXWRVCMVY\", \"ESYOZKOHCU\", \"SVYPVLUGHE\", \"TLGDIASGEL\",  #>     \"MPSFHTGKEF\", \"QQIQBNKASY\", \"QKSAXQEAIB\", \"QMDWWKFVRU\", \"RMEYEXVXVX\",  #>     \"TXFSIPGCID\", \"WMVGSBQYPB\", \"HYHAFAFYEA\", \"XKSCGLSVUZ\", \"BBONKKTFNG\",  #>     \"HPKSIGVDRL\", \"RFAKZMSZMB\", \"NJLMIFXDEK\", \"LJJSFTJKBP\", \"ZBXYPQEVLU\",  #>     \"WMVGSBQYPB\", \"NTSOYECHZQ\", \"SVBBYDPIOA\", \"OSNCJRVKET\", \"TWBOLWJGAR\",  #>     \"QBPRAWZTBF\", \"LGWJJITBKZ\", \"JSGBOZVHXC\", \"TLGDIASGEL\", \"ESYOZKOHCU\",  #>     \"CMEKXFGTSR\", \"KBYFYYONYU\", \"JWFPSYZNLW\", \"PKBCVRCMCS\", \"OPNAGRHLZM\",  #>     \"ERVIHSPAYA\", \"AFUTZUEXVM\", \"AOKHTNTQJC\", \"CKNVKMZWDC\", \"RSSXENWCQU\",  #>     \"CFSINPQYCO\", \"RFAKZMSZMB\", \"JPARFIKTYL\", \"WMVGSBQYPB\", \"JWFPSYZNLW\",  #>     \"PHIZOLWIBS\", \"FHCLEHLIXM\", \"RFAKZMSZMB\", \"RHALOWGMGJ\", \"XDEAUVDMFQ\",  #>     \"CUYVXLQJIV\", \"YFDQMQIVBM\", \"ASCJFWFUGV\", \"AGJEXFMJAO\", \"ISHHJNXLMR\",  #>     \"CFXONOGTQH\", \"GSNHQUBLXJ\", \"TLGDIASGEL\", \"CFSINPQYCO\", \"JWFPSYZNLW\",  #>     \"UJMNXDCYBB\", \"GKPLYRURBB\", \"SVYPVLUGHE\", \"EZLGDZHKHT\", \"XKSCGLSVUZ\",  #>     \"EJSYIOEOJL\", \"RMEYEXVXVX\", \"AGJEXFMJAO\", \"TLGDIASGEL\", \"CKNVKMZWDC\",  #>     \"TBZWQOHERE\", \"KIJPLWHVGS\", \"AFUTZUEXVM\", \"EJSYIOEOJL\", \"MCBXZBXGJN\",  #>     \"IYNWQZVCCI\", \"UOFFHQQLIR\", \"PKTRNWCHPR\", \"ICUEBKDOGB\", \"LEESGFRPHV\",  #>     \"ESYOZKOHCU\", \"CYQGGUSNEK\", \"EWTGOBRLKP\", \"GSNHQUBLXJ\", \"GSHWBCJXVZ\",  #>     \"GKPLYRURBB\", \"RNAOTFIWTN\", \"JVCERYCMOA\", \"KKKAFDRDCO\", \"NOTPDVRLPM\",  #>     \"UJMNXDCYBB\", \"CFSINPQYCO\", \"KIJPLWHVGS\", \"GXYQHIZVPD\", \"ZTCMALLRXB\",  #>     \"ZTTKZEEJZP\", \"ESYOZKOHCU\", \"JPARFIKTYL\", \"RFAKZMSZMB\", \"JPARFIKTYL\",  #>     \"ZBXYPQEVLU\", \"KBYFYYONYU\", \"CYQGGUSNEK\", \"VOXRCHMDIT\", \"JRNMLJJSDP\",  #>     \"FKXBYBMICY\", \"JOPGMOKVOM\", \"LJJSFTJKBP\", \"EOJBYFQEOY\", \"EAMRJPOWLU\",  #>     \"ERVIHSPAYA\", \"GRCMVPYLDK\", \"YFDQMQIVBM\", \"RFAKZMSZMB\", \"CALRWQEBFZ\",  #>     \"UOFFHQQLIR\", \"AHOMYEGIBP\", \"RSSXENWCQU\", \"NTSOYECHZQ\", \"RMEYEXVXVX\",  #>     \"CMEKXFGTSR\", \"PKBCVRCMCS\", \"YDGABWKNRS\", \"VOXRCHMDIT\", \"KTANGMAQMT\",  #>     \"GXYQHIZVPD\", \"QBPHMGOGFW\", \"RNAOTFIWTN\", \"IIKTKPNNPT\", \"JHXSYICTMS\",  #>     \"RNAOTFIWTN\", \"TLGDIASGEL\", \"ZBXYPQEVLU\", \"ICUEBKDOGB\", \"ZPWKFFVOCB\",  #>     \"TKKAYBAFGV\", \"UZRCINDECG\", \"AFUTZUEXVM\", \"GKPLYRURBB\", \"QMDWWKFVRU\",  #>     \"CJQEUMATTB\", \"JSGBOZVHXC\", \"AHOMYEGIBP\", \"FIXJLQEKCP\", \"AFUTZUEXVM\",  #>     \"VOXRCHMDIT\", \"UNCDYWJXLO\", \"UJMNXDCYBB\", \"ESYOZKOHCU\", \"BJUNWZLJYP\",  #>     \"YROTAZMWFI\", \"JPARFIKTYL\", \"NCXWRVCMVY\", \"EOJBYFQEOY\", \"KKKAFDRDCO\",  #>     \"LGWJJITBKZ\", \"CFSINPQYCO\", \"QBPHMGOGFW\", \"JOPGMOKVOM\", \"RHALOWGMGJ\",  #>     \"FIXJLQEKCP\", \"GSNHQUBLXJ\", \"OPNAGRHLZM\", \"HYUIWKYPXU\", \"ELMZBUCGXP\",  #>     \"JVKZPZVIIU\", \"YFDQMQIVBM\", \"YFDQMQIVBM\", \"ZBXYPQEVLU\", \"PHIZOLWIBS\",  #>     \"WEDUDZADWG\", \"JVCERYCMOA\", \"SPBEZTBJFS\", \"AQEEZTRLKH\", \"NJLMIFXDEK\",  #>     \"VKEOEUOTDQ\", \"ENXVDYZEEW\", \"TXFSIPGCID\", \"FKXBYBMICY\", \"EJSYIOEOJL\",  #>     \"CJQEUMATTB\", \"ONTOHBVEQC\", \"GSHWBCJXVZ\", \"GSNHQUBLXJ\", \"TKKAYBAFGV\",  #>     \"OSNCJRVKET\", \"RHALOWGMGJ\", \"XKSCGLSVUZ\", \"TBZWQOHERE\", \"EAMRJPOWLU\",  #>     \"RMEYEXVXVX\", \"UZRCINDECG\", \"JVCERYCMOA\", \"RMEYEXVXVX\", \"EZLGDZHKHT\",  #>     \"RMEYEXVXVX\", \"LEESGFRPHV\", \"ZTTKZEEJZP\", \"SPBEZTBJFS\", \"VKEOEUOTDQ\",  #>     \"EZLGDZHKHT\", \"ELMZBUCGXP\", \"ZTCMALLRXB\", \"SVYPVLUGHE\", \"ZTTKZEEJZP\",  #>     \"HYUIWKYPXU\", \"RMEYEXVXVX\", \"AFUTZUEXVM\", \"JWFPSYZNLW\", \"WEDUDZADWG\",  #>     \"AIJRHVVDKP\", \"BJUNWZLJYP\", \"HCEHZFVRBV\", \"HGHMEUCTEX\", \"PKBCVRCMCS\",  #>     \"EKNGZSKPGF\", \"CMEKXFGTSR\", \"PHIZOLWIBS\", \"ASCJFWFUGV\", \"ASCJFWFUGV\",  #>     \"LGWJJITBKZ\", \"UOFFHQQLIR\", \"XKSCGLSVUZ\", \"GSNHQUBLXJ\", \"XKSCGLSVUZ\",  #>     \"ACYJOPUKSD\", \"NTSOYECHZQ\", \"JOPGMOKVOM\", \"CALRWQEBFZ\", \"HLWNYXNVYM\",  #>     \"UOFFHQQLIR\", \"BJUNWZLJYP\", \"CYQGGUSNEK\", \"RMEYEXVXVX\", \"CALRWQEBFZ\",  #>     \"BZPWNEEBHR\", \"BBONKKTFNG\", \"GKPLYRURBB\", \"ISHHJNXLMR\", \"AOKHTNTQJC\",  #>     \"GSNHQUBLXJ\", \"ONTOHBVEQC\", \"YROTAZMWFI\", \"UJMNXDCYBB\", \"GXYQHIZVPD\",  #>     \"GXYQHIZVPD\", \"QMDWWKFVRU\", \"EWTGOBRLKP\", \"TBZWQOHERE\", \"HYUIWKYPXU\",  #>     \"TXFSIPGCID\", \"TWBOLWJGAR\", \"TBZWQOHERE\", \"JFHAGKINER\", \"CFSINPQYCO\",  #>     \"ESYOZKOHCU\", \"GSHWBCJXVZ\", \"AHOMYEGIBP\", \"JRNMLJJSDP\", \"WEDUDZADWG\",  #>     \"RNAOTFIWTN\", \"BZPWNEEBHR\", \"KTANGMAQMT\", \"CYQGGUSNEK\", \"RMEYEXVXVX\",  #>     \"AFUTZUEXVM\", \"TWBOLWJGAR\", \"KTANGMAQMT\", \"UJMNXDCYBB\", \"NTSOYECHZQ\",  #>     \"TKKAYBAFGV\", \"EKNGZSKPGF\", \"ISHHJNXLMR\", \"ONTOHBVEQC\", \"GKPLYRURBB\",  #>     \"EOJBYFQEOY\", \"JPARFIKTYL\", \"ERVIHSPAYA\", \"ZTCMALLRXB\", \"NTSOYECHZQ\",  #>     \"QKSAXQEAIB\", \"QMDWWKFVRU\", \"WEDUDZADWG\", \"ERVIHSPAYA\", \"CFXONOGTQH\",  #>     \"GXQQOGSTOQ\", \"AHOMYEGIBP\", \"JOPGMOKVOM\", \"ISHHJNXLMR\", \"HLWNYXNVYM\",  #>     \"MGDZOPJAFG\", \"GKPLYRURBB\", \"EOJBYFQEOY\", \"NOTPDVRLPM\", \"LGWJJITBKZ\",  #>     \"HYHAFAFYEA\", \"AZVIVPYKND\", \"VKEOEUOTDQ\", \"EAMRJPOWLU\", \"JHXSYICTMS\",  #>     \"KBYFYYONYU\", \"CFSINPQYCO\", \"VKEOEUOTDQ\", \"EOJBYFQEOY\", \"KIJPLWHVGS\",  #>     \"TKKAYBAFGV\", \"RFAKZMSZMB\", \"MPSFHTGKEF\", \"MHVRYUZJWL\", \"AZVIVPYKND\",  #>     \"ISHHJNXLMR\", \"AOKHTNTQJC\", \"TLGDIASGEL\", \"ZTCMALLRXB\", \"LEESGFRPHV\",  #>     \"UZRCINDECG\", \"PHIZOLWIBS\", \"BZPWNEEBHR\", \"JSGBOZVHXC\", \"CYQGGUSNEK\",  #>     \"BBONKKTFNG\", \"TWBOLWJGAR\", \"XKSCGLSVUZ\", \"ONTOHBVEQC\", \"MQKHZKWIKA\",  #>     \"UOFFHQQLIR\", \"ONTOHBVEQC\", \"OPNAGRHLZM\", \"ZTTKZEEJZP\", \"VOXRCHMDIT\",  #>     \"ZPWKFFVOCB\", \"QEAYJDRZQO\", \"XSHYKGMBPQ\", \"HLWNYXNVYM\", \"ZBXYPQEVLU\",  #>     \"BKYOKYIUGW\", \"EKNGZSKPGF\", \"IIKTKPNNPT\", \"EOJBYFQEOY\", \"QBPHMGOGFW\",  #>     \"YFDQMQIVBM\", \"JFHAGKINER\", \"NOTPDVRLPM\", \"UJMNXDCYBB\", \"ELMZBUCGXP\",  #>     \"YFDQMQIVBM\", \"XCEJMFPVDX\", \"DRQRVFYUCX\", \"ACYJOPUKSD\", \"QCCNNYIKTH\",  #>     \"YFDQMQIVBM\", \"RFAKZMSZMB\", \"UJMNXDCYBB\", \"FKXBYBMICY\", \"QQIQBNKASY\",  #>     \"URBJONTBBW\", \"CMEKXFGTSR\", \"ESYOZKOHCU\", \"JVCERYCMOA\", \"HGHMEUCTEX\",  #>     \"CJQEUMATTB\", \"AGJEXFMJAO\", \"FIXJLQEKCP\", \"YDGABWKNRS\", \"CFXONOGTQH\",  #>     \"GXQQOGSTOQ\", \"CYQGGUSNEK\", \"ESYOZKOHCU\", \"AGJEXFMJAO\", \"UNCDYWJXLO\",  #>     \"AZVIVPYKND\", \"PKBCVRCMCS\", \"YDGABWKNRS\", \"QMDWWKFVRU\", \"UOFFHQQLIR\",  #>     \"FHCLEHLIXM\", \"GKPLYRURBB\", \"ISHHJNXLMR\", \"KBYFYYONYU\", \"HLWNYXNVYM\",  #>     \"JVKZPZVIIU\", \"BBONKKTFNG\", \"BZPWNEEBHR\", \"PBLJMWGFTW\", \"MGDZOPJAFG\",  #>     \"ZTTKZEEJZP\", \"EOJBYFQEOY\", \"HYUIWKYPXU\", \"MHVRYUZJWL\", \"CUYVXLQJIV\",  #>     \"JFHAGKINER\", \"ZBXYPQEVLU\", \"GSHWBCJXVZ\", \"CYQGGUSNEK\", \"WEDUDZADWG\",  #>     \"HYUIWKYPXU\", \"QCCNNYIKTH\", \"RBWJLMGEPF\", \"RHALOWGMGJ\", \"YROTAZMWFI\",  #>     \"WNATHOQPJS\", \"QCCNNYIKTH\", \"MCBXZBXGJN\", \"CJQEUMATTB\", \"YFDQMQIVBM\",  #>     \"CMEKXFGTSR\", \"ESYOZKOHCU\", \"RQDKTNHSYQ\", \"GSNHQUBLXJ\", \"CUYVXLQJIV\",  #>     \"MCBXZBXGJN\", \"CYQGGUSNEK\", \"CUYVXLQJIV\", \"CMEKXFGTSR\", \"CMEKXFGTSR\",  #>     \"RBWJLMGEPF\", \"FIXJLQEKCP\", \"YROTAZMWFI\", \"GXQQOGSTOQ\", \"RNAOTFIWTN\",  #>     \"AIJRHVVDKP\", \"FKTIIHAGSF\", \"GRCMVPYLDK\", \"NJLMIFXDEK\", \"BHOFOGKCJA\",  #>     \"JHVIRHYUEP\", \"BBONKKTFNG\", \"XDEAUVDMFQ\", \"ZPWKFFVOCB\", \"UFXSCLPLER\",  #>     \"JPARFIKTYL\", \"PKBCVRCMCS\", \"UOFFHQQLIR\", \"CFXONOGTQH\", \"CALRWQEBFZ\",  #>     \"MCBXZBXGJN\", \"AIJRHVVDKP\", \"JVCERYCMOA\", \"JRNMLJJSDP\", \"GSHWBCJXVZ\",  #>     \"JSGBOZVHXC\", \"FKXBYBMICY\", \"QQIQBNKASY\", \"JPARFIKTYL\", \"CFXONOGTQH\",  #>     \"JOPGMOKVOM\", \"WNATHOQPJS\", \"HGHMEUCTEX\", \"PHIZOLWIBS\", \"PKTRNWCHPR\",  #>     \"HPKSIGVDRL\", \"JWFPSYZNLW\", \"JPARFIKTYL\", \"CFSINPQYCO\", \"NTSOYECHZQ\",  #>     \"OPNAGRHLZM\", \"ISHHJNXLMR\", \"PKBCVRCMCS\", \"GRCMVPYLDK\", \"ASCJFWFUGV\",  #>     \"ACYJOPUKSD\", \"ZTTKZEEJZP\", \"LJJSFTJKBP\", \"CALRWQEBFZ\", \"NOTPDVRLPM\",  #>     \"QMDWWKFVRU\", \"EKNGZSKPGF\", \"ESYOZKOHCU\", \"NCXWRVCMVY\", \"JVCERYCMOA\",  #>     \"GKPLYRURBB\", \"MGDZOPJAFG\", \"QQIQBNKASY\", \"EAMRJPOWLU\", \"JPARFIKTYL\",  #>     \"LGWJJITBKZ\", \"JVKZPZVIIU\", \"RQDKTNHSYQ\", \"WEDUDZADWG\", \"VKEOEUOTDQ\",  #>     \"WMVGSBQYPB\", \"HPKSIGVDRL\", \"QBPRAWZTBF\", \"UOFFHQQLIR\", \"KKKAFDRDCO\",  #>     \"IIKTKPNNPT\", \"CYQGGUSNEK\", \"QCCNNYIKTH\", \"RQDKTNHSYQ\", \"DRQRVFYUCX\",  #>     \"HPKSIGVDRL\", \"YDGABWKNRS\", \"QEAYJDRZQO\", \"VKEOEUOTDQ\", \"AOKHTNTQJC\",  #>     \"TXFSIPGCID\", \"KKKAFDRDCO\", \"GXQQOGSTOQ\", \"XSHYKGMBPQ\", \"FIXJLQEKCP\",  #>     \"SVYPVLUGHE\", \"XSHYKGMBPQ\", \"JSGBOZVHXC\", \"RHALOWGMGJ\", \"QBPRAWZTBF\",  #>     \"ZTCMALLRXB\", \"VKEOEUOTDQ\", \"ZPWKFFVOCB\", \"TWBOLWJGAR\", \"UJMNXDCYBB\",  #>     \"RHALOWGMGJ\", \"HPKSIGVDRL\", \"JPARFIKTYL\", \"WKXIHCQQBN\", \"ZTCMALLRXB\",  #>     \"KTANGMAQMT\", \"ONTOHBVEQC\", \"MGDZOPJAFG\", \"ZTCMALLRXB\", \"SVYPVLUGHE\",  #>     \"VKEOEUOTDQ\", \"UJMNXDCYBB\", \"HLWNYXNVYM\", \"WEDUDZADWG\", \"UJMNXDCYBB\",  #>     \"RMEYEXVXVX\", \"AFUTZUEXVM\", \"RMEYEXVXVX\", \"HYUIWKYPXU\", \"SPBEZTBJFS\",  #>     \"FHCLEHLIXM\", \"CFXONOGTQH\", \"MMCWEZDZSL\", \"PKBCVRCMCS\", \"MHVRYUZJWL\",  #>     \"URBJONTBBW\", \"NOTPDVRLPM\", \"SPBEZTBJFS\", \"UNCDYWJXLO\", \"CYQGGUSNEK\",  #>     \"ZBXYPQEVLU\", \"JOPGMOKVOM\", \"RHALOWGMGJ\", \"OPNAGRHLZM\", \"YROTAZMWFI\",  #>     \"BBONKKTFNG\", \"EAMRJPOWLU\", \"RFAKZMSZMB\", \"PALVVUCJBF\", \"RNAOTFIWTN\",  #>     \"MGDZOPJAFG\", \"MCBXZBXGJN\", \"QQIQBNKASY\", \"MQKHZKWIKA\", \"UJMNXDCYBB\",  #>     \"UZRCINDECG\", \"BBONKKTFNG\", \"WLNMRBXMPC\", \"MPSFHTGKEF\", \"EOJBYFQEOY\",  #>     \"FHCLEHLIXM\", \"XKSCGLSVUZ\", \"GSNHQUBLXJ\", \"QKSAXQEAIB\", \"QBPRAWZTBF\",  #>     \"EOJBYFQEOY\", \"GKPLYRURBB\", \"RQDKTNHSYQ\", \"BBONKKTFNG\", \"AFUTZUEXVM\",  #>     \"ONTOHBVEQC\", \"SVBBYDPIOA\", \"YROTAZMWFI\", \"ERVIHSPAYA\", \"TBZWQOHERE\",  #>     \"TWBOLWJGAR\", \"QQIQBNKASY\", \"ACYJOPUKSD\", \"FHCLEHLIXM\", \"GSHWBCJXVZ\",  #>     \"BZPWNEEBHR\", \"JHVIRHYUEP\", \"GRCMVPYLDK\", \"UCYFOWDBOQ\", \"CYQGGUSNEK\",  #>     \"VKEOEUOTDQ\", \"EAMRJPOWLU\", \"URBJONTBBW\", \"URBJONTBBW\", \"CKNVKMZWDC\",  #>     \"NJLMIFXDEK\", \"RSSXENWCQU\", \"GSHWBCJXVZ\", \"AGJEXFMJAO\", \"JWFPSYZNLW\",  #>     \"ZTCMALLRXB\", \"EJSYIOEOJL\", \"BBONKKTFNG\", \"WMVGSBQYPB\", \"TKKAYBAFGV\",  #>     \"GSHWBCJXVZ\", \"BZPWNEEBHR\", \"MPSFHTGKEF\", \"WNATHOQPJS\", \"EOJBYFQEOY\",  #>     \"VKEOEUOTDQ\", \"BJUNWZLJYP\", \"AGJEXFMJAO\", \"PHIZOLWIBS\", \"JOPGMOKVOM\",  #>     \"RMEYEXVXVX\", \"LEESGFRPHV\", \"HPKSIGVDRL\", \"YROTAZMWFI\", \"WMVGSBQYPB\",  #>     \"TXFSIPGCID\", \"JRNMLJJSDP\", \"XCEJMFPVDX\", \"ZBXYPQEVLU\", \"CFXONOGTQH\",  #>     \"FIXJLQEKCP\", \"WLNMRBXMPC\", \"CMEKXFGTSR\", \"SVYPVLUGHE\", \"PHIZOLWIBS\",  #>     \"KTANGMAQMT\", \"CMEKXFGTSR\", \"NTSOYECHZQ\", \"CFSINPQYCO\", \"RNAOTFIWTN\",  #>     \"ZTCMALLRXB\", \"VKEOEUOTDQ\", \"FHCLEHLIXM\", \"YFDQMQIVBM\", \"GRCMVPYLDK\",  #>     \"QQIQBNKASY\", \"ZTCMALLRXB\", \"PALVVUCJBF\", \"JSGBOZVHXC\", \"JFHAGKINER\",  #>     \"QKSAXQEAIB\", \"CFSINPQYCO\", \"JFHAGKINER\", \"BHOFOGKCJA\", \"MPSFHTGKEF\",  #>     \"NJLMIFXDEK\", \"CKNVKMZWDC\", \"WKXIHCQQBN\", \"ZTCMALLRXB\", \"YROTAZMWFI\",  #>     \"WLNMRBXMPC\", \"AFUTZUEXVM\", \"ZTTKZEEJZP\", \"MGDZOPJAFG\", \"PKBCVRCMCS\",  #>     \"ONTOHBVEQC\", \"CJQEUMATTB\", \"ZTTKZEEJZP\", \"URBJONTBBW\", \"ZPWKFFVOCB\",  #>     \"BHOFOGKCJA\", \"JSGBOZVHXC\", \"ACYJOPUKSD\", \"RFAKZMSZMB\", \"EZLGDZHKHT\",  #>     \"WMVGSBQYPB\", \"EKNGZSKPGF\", \"BZPWNEEBHR\", \"ZTTKZEEJZP\", \"RSSXENWCQU\",  #>     \"OPNAGRHLZM\", \"EOJBYFQEOY\", \"CFSINPQYCO\", \"GSHWBCJXVZ\", \"WEDUDZADWG\",  #>     \"WLNMRBXMPC\", \"YFDQMQIVBM\", \"CMEKXFGTSR\", \"WLNMRBXMPC\", \"UJMNXDCYBB\",  #>     \"KBYFYYONYU\", \"VKEOEUOTDQ\", \"EJSYIOEOJL\", \"TLGDIASGEL\", \"ZTTKZEEJZP\",  #>     \"RQDKTNHSYQ\", \"CYQGGUSNEK\", \"XSHYKGMBPQ\", \"GKPLYRURBB\", \"MPSFHTGKEF\",  #>     \"UOFFHQQLIR\", \"TKKAYBAFGV\", \"OSNCJRVKET\", \"TWBOLWJGAR\", \"ZBXYPQEVLU\",  #>     \"MQKHZKWIKA\", \"VKEOEUOTDQ\", \"WEDUDZADWG\", \"BZPWNEEBHR\", \"RQDKTNHSYQ\",  #>     \"FKTIIHAGSF\", \"JRNMLJJSDP\", \"FHCLEHLIXM\", \"GRCMVPYLDK\", \"AQEEZTRLKH\",  #>     \"RHALOWGMGJ\", \"CYQGGUSNEK\", \"AZVIVPYKND\", \"ERVIHSPAYA\", \"JWFPSYZNLW\",  #>     \"KIJPLWHVGS\", \"RNAOTFIWTN\", \"JHVIRHYUEP\", \"KIJPLWHVGS\", \"TXFSIPGCID\",  #>     \"NCXWRVCMVY\", \"VBFGFOMUQJ\", \"NJLMIFXDEK\", \"KKKAFDRDCO\", \"CFSINPQYCO\",  #>     \"FKXBYBMICY\", \"AHOMYEGIBP\", \"MGDZOPJAFG\", \"UOFFHQQLIR\", \"KIJPLWHVGS\",  #>     \"SVBBYDPIOA\", \"QCCNNYIKTH\", \"KTANGMAQMT\", \"ACYJOPUKSD\", \"FKXBYBMICY\",  #>     \"KTANGMAQMT\", \"WEDUDZADWG\", \"PHIZOLWIBS\", \"CYQGGUSNEK\", \"FKTIIHAGSF\",  #>     \"JFHAGKINER\", \"VBFGFOMUQJ\", \"TLGDIASGEL\", \"GXYQHIZVPD\", \"HCEHZFVRBV\",  #>     \"ENXVDYZEEW\", \"RHALOWGMGJ\", \"XDEAUVDMFQ\", \"KBYFYYONYU\", \"CMEKXFGTSR\",  #>     \"OSNCJRVKET\", \"TXFSIPGCID\", \"NTSOYECHZQ\", \"ELMZBUCGXP\", \"CFXONOGTQH\",  #>     \"XKSCGLSVUZ\", \"RSSXENWCQU\", \"GSNHQUBLXJ\", \"ZPWKFFVOCB\", \"JVCERYCMOA\",  #>     \"MCBXZBXGJN\", \"UZRCINDECG\", \"TWBOLWJGAR\", \"JFHAGKINER\", \"OSNCJRVKET\",  #>     \"EAMRJPOWLU\", \"URBJONTBBW\", \"YDGABWKNRS\", \"KTANGMAQMT\", \"QQIQBNKASY\",  #>     \"ZTCMALLRXB\", \"RHALOWGMGJ\", \"HYUIWKYPXU\", \"GRCMVPYLDK\", \"YFDQMQIVBM\",  #>     \"LEESGFRPHV\", \"ZTTKZEEJZP\", \"ISWVRSKEUK\", \"LGWJJITBKZ\", \"URBJONTBBW\",  #>     \"QQIQBNKASY\", \"JRNMLJJSDP\", \"BKYOKYIUGW\", \"XKSCGLSVUZ\", \"IIKTKPNNPT\",  #>     \"WEDUDZADWG\", \"RMEYEXVXVX\", \"RNAOTFIWTN\", \"ICUEBKDOGB\", \"ASCJFWFUGV\",  #>     \"GSHWBCJXVZ\", \"QKSAXQEAIB\", \"JWFPSYZNLW\", \"JSGBOZVHXC\", \"WMVGSBQYPB\",  #>     \"TXFSIPGCID\", \"QCCNNYIKTH\", \"CUYVXLQJIV\", \"ENXVDYZEEW\", \"FIXJLQEKCP\",  #>     \"CKNVKMZWDC\", \"NJLMIFXDEK\", \"FHCLEHLIXM\", \"JFHAGKINER\", \"CMEKXFGTSR\",  #>     \"XKSCGLSVUZ\", \"IIKTKPNNPT\", \"OSNCJRVKET\", \"FIXJLQEKCP\", \"KIJPLWHVGS\",  #>     \"AOKHTNTQJC\", \"EKNGZSKPGF\", \"GSHWBCJXVZ\", \"ZTCMALLRXB\", \"FKXBYBMICY\",  #>     \"SPBEZTBJFS\", \"ZBXYPQEVLU\", \"CONXBVIQSU\", \"RSSXENWCQU\", \"RQDKTNHSYQ\",  #>     \"URBJONTBBW\", \"GXYQHIZVPD\", \"PKBCVRCMCS\", \"WEDUDZADWG\", \"MHVRYUZJWL\",  #>     \"CMEKXFGTSR\", \"RMEYEXVXVX\", \"JVKZPZVIIU\", \"ONTOHBVEQC\", \"UZRCINDECG\",  #>     \"RSSXENWCQU\", \"CJQEUMATTB\", \"SPBEZTBJFS\", \"GSHWBCJXVZ\", \"JVCERYCMOA\",  #>     \"CUYVXLQJIV\", \"VKEOEUOTDQ\", \"WKXIHCQQBN\", \"FIXJLQEKCP\", \"PBLJMWGFTW\",  #>     \"RNAOTFIWTN\", \"HGHMEUCTEX\", \"UNCDYWJXLO\", \"UOFFHQQLIR\", \"KTANGMAQMT\",  #>     \"QQIQBNKASY\", \"GSNHQUBLXJ\", \"ELMZBUCGXP\", \"AIJRHVVDKP\", \"WEDUDZADWG\",  #>     \"XKSCGLSVUZ\", \"GXYQHIZVPD\", \"HYHAFAFYEA\", \"MHVRYUZJWL\", \"CFSINPQYCO\",  #>     \"ACYJOPUKSD\", \"RNAOTFIWTN\", \"CJQEUMATTB\", \"RHALOWGMGJ\", \"PKBCVRCMCS\",  #>     \"BZPWNEEBHR\", \"ZPWKFFVOCB\", \"NJLMIFXDEK\", \"ZTTKZEEJZP\", \"QCCNNYIKTH\",  #>     \"WEDUDZADWG\", \"KBYFYYONYU\", \"XDEAUVDMFQ\", \"YROTAZMWFI\", \"WEDUDZADWG\",  #>     \"NOTPDVRLPM\", \"RNAOTFIWTN\", \"BZPWNEEBHR\", \"QMDWWKFVRU\", \"WEDUDZADWG\",  #>     \"AGJEXFMJAO\", \"PKBCVRCMCS\", \"RHALOWGMGJ\", \"AFUTZUEXVM\", \"CYQGGUSNEK\",  #>     \"QKSAXQEAIB\", \"WMVGSBQYPB\", \"FKXBYBMICY\", \"RQDKTNHSYQ\", \"VOXRCHMDIT\",  #>     \"EZLGDZHKHT\", \"UJMNXDCYBB\", \"GXYQHIZVPD\", \"NJLMIFXDEK\", \"ISHHJNXLMR\",  #>     \"RNAOTFIWTN\", \"OPNAGRHLZM\", \"SVYPVLUGHE\", \"ZPWKFFVOCB\", \"JFHAGKINER\",  #>     \"JWFPSYZNLW\", \"BKYOKYIUGW\", \"CYQGGUSNEK\", \"HGHMEUCTEX\", \"QKSAXQEAIB\",  #>     \"GRCMVPYLDK\", \"HYUIWKYPXU\", \"JOPGMOKVOM\", \"ZPWKFFVOCB\", \"LHDUBEZXXM\",  #>     \"GXQQOGSTOQ\", \"ACYJOPUKSD\", \"AHOMYEGIBP\", \"GRCMVPYLDK\", \"MPSFHTGKEF\",  #>     \"NCXWRVCMVY\", \"OPNAGRHLZM\", \"FHCLEHLIXM\", \"GSHWBCJXVZ\", \"ZTCMALLRXB\",  #>     \"LHDUBEZXXM\", \"MPSFHTGKEF\", \"YFDQMQIVBM\", \"YROTAZMWFI\", \"CALRWQEBFZ\",  #>     \"UZRCINDECG\", \"YFDQMQIVBM\", \"TKKAYBAFGV\", \"CFXONOGTQH\", \"ASCJFWFUGV\",  #>     \"QBPHMGOGFW\", \"YDGABWKNRS\", \"ASCJFWFUGV\", \"PHIZOLWIBS\", \"HYUIWKYPXU\",  #>     \"YDGABWKNRS\", \"JPARFIKTYL\", \"GSNHQUBLXJ\", \"ISHHJNXLMR\", \"GKPLYRURBB\",  #>     \"SPBEZTBJFS\", \"VBFGFOMUQJ\", \"ZTTKZEEJZP\", \"ACYJOPUKSD\", \"JWFPSYZNLW\",  #>     \"MPSFHTGKEF\", \"WMVGSBQYPB\", \"CKNVKMZWDC\", \"CJQEUMATTB\", \"GXQQOGSTOQ\",  #>     \"JVCERYCMOA\", \"TWBOLWJGAR\", \"CMEKXFGTSR\", \"KBYFYYONYU\", \"NJLMIFXDEK\",  #>     \"YDGABWKNRS\", \"GXQQOGSTOQ\", \"GRCMVPYLDK\", \"ASCJFWFUGV\", \"MGDZOPJAFG\",  #>     \"MHVRYUZJWL\", \"VBFGFOMUQJ\", \"ASCJFWFUGV\", \"NOTPDVRLPM\", \"JHXSYICTMS\",  #>     \"DRQRVFYUCX\", \"AFUTZUEXVM\", \"ICUEBKDOGB\", \"CFSINPQYCO\", \"VOXRCHMDIT\",  #>     \"JHVIRHYUEP\", \"RFAKZMSZMB\", \"HPKSIGVDRL\", \"MHVRYUZJWL\", \"JPARFIKTYL\",  #>     \"FIXJLQEKCP\", \"HCEHZFVRBV\", \"CUYVXLQJIV\", \"UCYFOWDBOQ\", \"JHVIRHYUEP\",  #>     \"EOJBYFQEOY\", \"ACYJOPUKSD\", \"YDGABWKNRS\", \"ISHHJNXLMR\", \"RHALOWGMGJ\",  #>     \"NCXWRVCMVY\", \"UNCDYWJXLO\", \"CMEKXFGTSR\", \"BZPWNEEBHR\", \"URBJONTBBW\",  #>     \"XKSCGLSVUZ\", \"FKTIIHAGSF\", \"ESYOZKOHCU\", \"XDEAUVDMFQ\", \"DRQRVFYUCX\",  #>     \"BZPWNEEBHR\", \"UFXSCLPLER\", \"JSGBOZVHXC\", \"AQEEZTRLKH\", \"FHCLEHLIXM\",  #>     \"YFDQMQIVBM\", \"GXYQHIZVPD\", \"QMDWWKFVRU\", \"RFAKZMSZMB\", \"QMDWWKFVRU\",  #>     \"ERVIHSPAYA\", \"FKXBYBMICY\", \"RMEYEXVXVX\", \"UZRCINDECG\", \"BJUNWZLJYP\",  #>     \"WNATHOQPJS\", \"BKYOKYIUGW\", \"ZTTKZEEJZP\", \"VKEOEUOTDQ\", \"NJLMIFXDEK\",  #>     \"FIXJLQEKCP\", \"ASCJFWFUGV\", \"ESYOZKOHCU\", \"IIKTKPNNPT\", \"PALVVUCJBF\",  #>     \"HGHMEUCTEX\", \"PKBCVRCMCS\", \"LJJSFTJKBP\", \"LGWJJITBKZ\", \"HGHMEUCTEX\",  #>     \"WNATHOQPJS\", \"JFHAGKINER\", \"NOTPDVRLPM\", \"NCXWRVCMVY\", \"XDEAUVDMFQ\",  #>     \"HGHMEUCTEX\", \"LEESGFRPHV\", \"WMVGSBQYPB\", \"CFSINPQYCO\", \"JVCERYCMOA\",  #>     \"HCEHZFVRBV\", \"DRQRVFYUCX\", \"PKTRNWCHPR\", \"TBZWQOHERE\", \"BHOFOGKCJA\",  #>     \"CJQEUMATTB\", \"ASCJFWFUGV\", \"CFSINPQYCO\", \"RQDKTNHSYQ\", \"JVCERYCMOA\",  #>     \"OSNCJRVKET\", \"MHVRYUZJWL\", \"KTANGMAQMT\", \"KIJPLWHVGS\", \"WLNMRBXMPC\",  #>     \"WNATHOQPJS\", \"ISHHJNXLMR\", \"CUYVXLQJIV\", \"GRCMVPYLDK\", \"QQIQBNKASY\",  #>     \"YFDQMQIVBM\", \"JPARFIKTYL\", \"CALRWQEBFZ\", \"QBPHMGOGFW\", \"GXYQHIZVPD\",  #>     \"WMVGSBQYPB\", \"RNAOTFIWTN\", \"RMEYEXVXVX\", \"QMDWWKFVRU\", \"MMCWEZDZSL\",  #>     \"HLWNYXNVYM\", \"EAMRJPOWLU\", \"RQDKTNHSYQ\", \"UZRCINDECG\", \"XCEJMFPVDX\",  #>     \"RNAOTFIWTN\", \"XDEAUVDMFQ\", \"DRQRVFYUCX\", \"BKYOKYIUGW\", \"SVBBYDPIOA\",  #>     \"YFDQMQIVBM\", \"CFXONOGTQH\", \"ESYOZKOHCU\", \"WMVGSBQYPB\", \"XDEAUVDMFQ\",  #>     \"VKEOEUOTDQ\", \"AGJEXFMJAO\", \"XKSCGLSVUZ\", \"VKEOEUOTDQ\", \"GRCMVPYLDK\",  #>     \"IYNWQZVCCI\", \"XDEAUVDMFQ\", \"CMEKXFGTSR\", \"WNATHOQPJS\", \"ZBXYPQEVLU\",  #>     \"RQDKTNHSYQ\", \"JPARFIKTYL\", \"BZPWNEEBHR\", \"RFAKZMSZMB\", \"KTANGMAQMT\",  #>     \"RNAOTFIWTN\", \"NCXWRVCMVY\", \"TLGDIASGEL\", \"ESYOZKOHCU\", \"GRCMVPYLDK\",  #>     \"JPARFIKTYL\", \"AHOMYEGIBP\", \"QMDWWKFVRU\", \"WLNMRBXMPC\", \"XDEAUVDMFQ\",  #>     \"JPARFIKTYL\", \"EOJBYFQEOY\", \"WEDUDZADWG\", \"SPBEZTBJFS\", \"AHOMYEGIBP\",  #>     \"LGWJJITBKZ\", \"CFXONOGTQH\", \"PALVVUCJBF\", \"GKPLYRURBB\", \"UJMNXDCYBB\",  #>     \"ESYOZKOHCU\", \"TLGDIASGEL\", \"AOKHTNTQJC\", \"LHDUBEZXXM\", \"MHVRYUZJWL\",  #>     \"HCEHZFVRBV\", \"QBPHMGOGFW\", \"JVKZPZVIIU\", \"QMDWWKFVRU\", \"EZLGDZHKHT\",  #>     \"URBJONTBBW\", \"JVCERYCMOA\", \"GXYQHIZVPD\", \"SPBEZTBJFS\", \"CJQEUMATTB\",  #>     \"BHOFOGKCJA\", \"WNATHOQPJS\", \"ENXVDYZEEW\", \"ESYOZKOHCU\", \"XKSCGLSVUZ\",  #>     \"JHVIRHYUEP\", \"ERVIHSPAYA\", \"CKNVKMZWDC\", \"QBPRAWZTBF\", \"CUYVXLQJIV\",  #>     \"ZBXYPQEVLU\", \"CFSINPQYCO\", \"XKSCGLSVUZ\", \"PKBCVRCMCS\", \"TWBOLWJGAR\",  #>     \"PKBCVRCMCS\", \"RSSXENWCQU\", \"LEESGFRPHV\", \"CUYVXLQJIV\", \"EOJBYFQEOY\",  #>     \"FHCLEHLIXM\", \"NJLMIFXDEK\", \"ASCJFWFUGV\", \"JVKZPZVIIU\", \"JSGBOZVHXC\",  #>     \"JRNMLJJSDP\", \"JRNMLJJSDP\", \"WEDUDZADWG\", \"KIJPLWHVGS\", \"GSHWBCJXVZ\",  #>     \"TLGDIASGEL\", \"JOPGMOKVOM\", \"EZLGDZHKHT\", \"RMEYEXVXVX\", \"JWFPSYZNLW\",  #>     \"WMVGSBQYPB\", \"PKTRNWCHPR\", \"LGWJJITBKZ\", \"SPBEZTBJFS\", \"GSNHQUBLXJ\",  #>     \"LEESGFRPHV\", \"EZLGDZHKHT\", \"YFDQMQIVBM\", \"PALVVUCJBF\", \"JRNMLJJSDP\",  #>     \"JOPGMOKVOM\", \"MHVRYUZJWL\", \"JFHAGKINER\", \"ZTTKZEEJZP\", \"AFUTZUEXVM\",  #>     \"ESYOZKOHCU\", \"JFHAGKINER\", \"UJMNXDCYBB\", \"BBONKKTFNG\", \"PKBCVRCMCS\",  #>     \"TXFSIPGCID\", \"ENXVDYZEEW\", \"QMDWWKFVRU\", \"BHOFOGKCJA\", \"NCXWRVCMVY\",  #>     \"QCCNNYIKTH\", \"ACYJOPUKSD\", \"JFHAGKINER\", \"JHVIRHYUEP\", \"ACYJOPUKSD\",  #>     \"UJMNXDCYBB\", \"ESYOZKOHCU\", \"ENXVDYZEEW\", \"YROTAZMWFI\", \"BZPWNEEBHR\",  #>     \"EOJBYFQEOY\", \"EOJBYFQEOY\", \"KKKAFDRDCO\", \"JRNMLJJSDP\", \"SVBBYDPIOA\",  #>     \"NTSOYECHZQ\", \"YFDQMQIVBM\", \"RMEYEXVXVX\", \"CUYVXLQJIV\", \"UZRCINDECG\",  #>     \"KBYFYYONYU\", \"FIXJLQEKCP\", \"GSNHQUBLXJ\", \"ASCJFWFUGV\", \"LGWJJITBKZ\",  #>     \"RMEYEXVXVX\", \"ZBXYPQEVLU\", \"YFDQMQIVBM\", \"KBYFYYONYU\", \"KIJPLWHVGS\",  #>     \"AZVIVPYKND\", \"MPSFHTGKEF\", \"WLNMRBXMPC\", \"WEDUDZADWG\", \"FKXBYBMICY\",  #>     \"JVKZPZVIIU\", \"MQKHZKWIKA\", \"ASCJFWFUGV\", \"AIJRHVVDKP\", \"CUYVXLQJIV\",  #>     \"XDEAUVDMFQ\", \"AGJEXFMJAO\", \"JHVIRHYUEP\", \"CALRWQEBFZ\", \"BBONKKTFNG\",  #>     \"QBPRAWZTBF\", \"UJMNXDCYBB\", \"ZPWKFFVOCB\", \"CJQEUMATTB\", \"CFSINPQYCO\",  #>     \"CFSINPQYCO\", \"ISWVRSKEUK\", \"URBJONTBBW\", \"XDEAUVDMFQ\", \"JPARFIKTYL\",  #>     \"PALVVUCJBF\", \"WMVGSBQYPB\", \"KBYFYYONYU\", \"JVCERYCMOA\", \"JVKZPZVIIU\",  #>     \"XDEAUVDMFQ\", \"WEDUDZADWG\", \"PKTRNWCHPR\", \"KBYFYYONYU\", \"AHOMYEGIBP\",  #>     \"RBWJLMGEPF\", \"BZPWNEEBHR\", \"HYUIWKYPXU\", \"RMEYEXVXVX\", \"ASCJFWFUGV\",  #>     \"AFUTZUEXVM\", \"RFAKZMSZMB\", \"GRCMVPYLDK\", \"CALRWQEBFZ\", \"BHOFOGKCJA\",  #>     \"QMDWWKFVRU\", \"CONXBVIQSU\", \"JWFPSYZNLW\", \"VBFGFOMUQJ\", \"BBONKKTFNG\",  #>     \"PBLJMWGFTW\", \"PALVVUCJBF\", \"GKPLYRURBB\", \"GRCMVPYLDK\", \"CUYVXLQJIV\",  #>     \"LEESGFRPHV\", \"ESYOZKOHCU\", \"CUYVXLQJIV\", \"EAMRJPOWLU\", \"LEESGFRPHV\",  #>     \"HPKSIGVDRL\", \"CMEKXFGTSR\", \"ASCJFWFUGV\", \"RHALOWGMGJ\", \"LEESGFRPHV\",  #>     \"ACYJOPUKSD\", \"LJJSFTJKBP\", \"FIXJLQEKCP\", \"UNCDYWJXLO\", \"RHALOWGMGJ\",  #>     \"FIXJLQEKCP\", \"ASCJFWFUGV\", \"OSNCJRVKET\", \"GSNHQUBLXJ\", \"CALRWQEBFZ\",  #>     \"ONTOHBVEQC\", \"UNCDYWJXLO\", \"CALRWQEBFZ\", \"JHVIRHYUEP\", \"UJMNXDCYBB\",  #>     \"PALVVUCJBF\", \"FHCLEHLIXM\", \"FIXJLQEKCP\", \"AQEEZTRLKH\", \"MPSFHTGKEF\",  #>     \"CFSINPQYCO\", \"QBPHMGOGFW\", \"WEDUDZADWG\", \"EJSYIOEOJL\", \"JWFPSYZNLW\",  #>     \"TBZWQOHERE\", \"MPSFHTGKEF\", \"QQIQBNKASY\", \"BZPWNEEBHR\", \"RNAOTFIWTN\",  #>     \"JVCERYCMOA\", \"CJQEUMATTB\", \"LJJSFTJKBP\", \"MGDZOPJAFG\", \"WMVGSBQYPB\",  #>     \"NJLMIFXDEK\", \"WMVGSBQYPB\", \"VBFGFOMUQJ\", \"RQDKTNHSYQ\", \"NJLMIFXDEK\",  #>     \"XDEAUVDMFQ\", \"HGHMEUCTEX\", \"HYHAFAFYEA\", \"JFHAGKINER\", \"XKSCGLSVUZ\",  #>     \"HYUIWKYPXU\", \"DRQRVFYUCX\", \"ZBXYPQEVLU\", \"PHIZOLWIBS\", \"ESYOZKOHCU\",  #>     \"FHCLEHLIXM\", \"VKEOEUOTDQ\", \"PKBCVRCMCS\", \"AZVIVPYKND\", \"EAMRJPOWLU\",  #>     \"GXYQHIZVPD\", \"LEESGFRPHV\", \"FKTIIHAGSF\", \"SVBBYDPIOA\", \"RFAKZMSZMB\",  #>     \"PALVVUCJBF\", \"CUYVXLQJIV\", \"RFAKZMSZMB\", \"CMEKXFGTSR\", \"RMEYEXVXVX\",  #>     \"XKSCGLSVUZ\", \"CUYVXLQJIV\", \"NCXWRVCMVY\", \"FKXBYBMICY\", \"BBONKKTFNG\",  #>     \"GRCMVPYLDK\", \"RMEYEXVXVX\", \"HYHAFAFYEA\", \"BKYOKYIUGW\", \"TXFSIPGCID\",  #>     \"AIJRHVVDKP\", \"QMDWWKFVRU\", \"CKNVKMZWDC\", \"RNAOTFIWTN\", \"AQEEZTRLKH\",  #>     \"TKKAYBAFGV\", \"VOXRCHMDIT\", \"GXYQHIZVPD\", \"AQEEZTRLKH\", \"KTANGMAQMT\",  #>     \"ASCJFWFUGV\", \"AIJRHVVDKP\", \"XKSCGLSVUZ\", \"ASCJFWFUGV\", \"BZPWNEEBHR\",  #>     \"JPARFIKTYL\", \"JFHAGKINER\", \"JHXSYICTMS\", \"VBFGFOMUQJ\", \"MCBXZBXGJN\",  #>     \"SVYPVLUGHE\", \"GXYQHIZVPD\", \"UFXSCLPLER\", \"URBJONTBBW\", \"JSGBOZVHXC\",  #>     \"MHVRYUZJWL\", \"KKKAFDRDCO\", \"ONTOHBVEQC\", \"VOXRCHMDIT\", \"AFUTZUEXVM\",  #>     \"JPARFIKTYL\", \"TXFSIPGCID\", \"VOXRCHMDIT\", \"ERVIHSPAYA\", \"ACYJOPUKSD\",  #>     \"RSSXENWCQU\", \"PKBCVRCMCS\", \"DRQRVFYUCX\", \"UOFFHQQLIR\", \"TBZWQOHERE\",  #>     \"TWBOLWJGAR\", \"MCBXZBXGJN\", \"QBPHMGOGFW\", \"ZTCMALLRXB\", \"RBWJLMGEPF\",  #>     \"JRNMLJJSDP\", \"JVKZPZVIIU\", \"HCEHZFVRBV\", \"UOFFHQQLIR\", \"UOFFHQQLIR\",  #>     \"GXQQOGSTOQ\", \"KKKAFDRDCO\", \"LHDUBEZXXM\", \"VKEOEUOTDQ\", \"RHALOWGMGJ\",  #>     \"BHOFOGKCJA\", \"LHDUBEZXXM\", \"CUYVXLQJIV\", \"YROTAZMWFI\", \"PKTRNWCHPR\",  #>     \"ZBXYPQEVLU\", \"UFXSCLPLER\", \"TXFSIPGCID\", \"ASCJFWFUGV\", \"UFXSCLPLER\",  #>     \"MPSFHTGKEF\", \"EJSYIOEOJL\", \"GSNHQUBLXJ\", \"XKSCGLSVUZ\", \"ZPWKFFVOCB\",  #>     \"FHCLEHLIXM\", \"CUYVXLQJIV\", \"ZTTKZEEJZP\", \"RMEYEXVXVX\", \"YDGABWKNRS\",  #>     \"JVKZPZVIIU\", \"VKEOEUOTDQ\", \"CMEKXFGTSR\", \"FKXBYBMICY\", \"ZTTKZEEJZP\",  #>     \"FKXBYBMICY\", \"EAMRJPOWLU\", \"GRCMVPYLDK\", \"EJSYIOEOJL\", \"RHALOWGMGJ\",  #>     \"JVKZPZVIIU\", \"SVBBYDPIOA\", \"QQIQBNKASY\", \"ZPWKFFVOCB\", \"VOXRCHMDIT\",  #>     \"TBZWQOHERE\", \"YFDQMQIVBM\", \"CFXONOGTQH\", \"QCCNNYIKTH\", \"TWBOLWJGAR\",  #>     \"CALRWQEBFZ\", \"NOTPDVRLPM\", \"QQIQBNKASY\", \"SPBEZTBJFS\", \"AIJRHVVDKP\",  #>     \"FIXJLQEKCP\", \"ISHHJNXLMR\", \"QMDWWKFVRU\", \"RFAKZMSZMB\", \"QMDWWKFVRU\",  #>     \"AFUTZUEXVM\", \"JWFPSYZNLW\", \"DRQRVFYUCX\", \"JPARFIKTYL\", \"HCEHZFVRBV\",  #>     \"NCXWRVCMVY\", \"RHALOWGMGJ\", \"WNATHOQPJS\", \"HPKSIGVDRL\", \"WEDUDZADWG\",  #>     \"HGHMEUCTEX\", \"YDGABWKNRS\", \"UFXSCLPLER\", \"JPARFIKTYL\", \"MPSFHTGKEF\",  #>     \"AFUTZUEXVM\", \"ESYOZKOHCU\", \"EKNGZSKPGF\", \"XKSCGLSVUZ\", \"UCYFOWDBOQ\",  #>     \"WEDUDZADWG\", \"VOXRCHMDIT\", \"RFAKZMSZMB\", \"LHDUBEZXXM\", \"CUYVXLQJIV\",  #>     \"LHDUBEZXXM\", \"VBFGFOMUQJ\", \"URBJONTBBW\", \"ONTOHBVEQC\", \"MGDZOPJAFG\",  #>     \"LHDUBEZXXM\", \"YDGABWKNRS\", \"AHOMYEGIBP\", \"GXYQHIZVPD\", \"XSHYKGMBPQ\",  #>     \"QBPRAWZTBF\", \"QBPRAWZTBF\", \"GKPLYRURBB\", \"JFHAGKINER\", \"ZTTKZEEJZP\",  #>     \"RNAOTFIWTN\", \"GXYQHIZVPD\", \"SVYPVLUGHE\", \"XKSCGLSVUZ\", \"TBZWQOHERE\",  #>     \"CYQGGUSNEK\", \"AOKHTNTQJC\", \"UFXSCLPLER\", \"XKSCGLSVUZ\", \"ASCJFWFUGV\",  #>     \"BBONKKTFNG\", \"CONXBVIQSU\", \"GSHWBCJXVZ\", \"UOFFHQQLIR\", \"JRNMLJJSDP\",  #>     \"CALRWQEBFZ\", \"YDGABWKNRS\", \"WNATHOQPJS\", \"AZVIVPYKND\", \"MCBXZBXGJN\",  #>     \"KIJPLWHVGS\", \"QCCNNYIKTH\", \"CFXONOGTQH\", \"LEESGFRPHV\", \"HLWNYXNVYM\",  #>     \"RQDKTNHSYQ\", \"SVBBYDPIOA\", \"VBFGFOMUQJ\", \"ICUEBKDOGB\", \"KIJPLWHVGS\",  #>     \"SPBEZTBJFS\", \"FKTIIHAGSF\", \"ESYOZKOHCU\", \"WEDUDZADWG\", \"ASCJFWFUGV\",  #>     \"ELMZBUCGXP\", \"QKSAXQEAIB\", \"BBONKKTFNG\", \"GXQQOGSTOQ\", \"UOFFHQQLIR\",  #>     \"MGDZOPJAFG\", \"EOJBYFQEOY\", \"KBYFYYONYU\", \"JHXSYICTMS\", \"RMEYEXVXVX\",  #>     \"ISHHJNXLMR\", \"SVYPVLUGHE\", \"ESYOZKOHCU\", \"IIKTKPNNPT\", \"KTANGMAQMT\",  #>     \"YFDQMQIVBM\", \"GSNHQUBLXJ\", \"NJLMIFXDEK\", \"PKBCVRCMCS\", \"BKYOKYIUGW\",  #>     \"RHALOWGMGJ\", \"SVYPVLUGHE\", \"RFAKZMSZMB\", \"EJSYIOEOJL\", \"AIJRHVVDKP\",  #>     \"QCCNNYIKTH\", \"AOKHTNTQJC\", \"ONTOHBVEQC\", \"NJLMIFXDEK\", \"CUYVXLQJIV\",  #>     \"JOPGMOKVOM\", \"FKXBYBMICY\", \"CUYVXLQJIV\", \"QCCNNYIKTH\", \"PBLJMWGFTW\",  #>     \"MHVRYUZJWL\", \"CFSINPQYCO\", \"HPKSIGVDRL\", \"XKSCGLSVUZ\", \"EWTGOBRLKP\",  #>     \"FHCLEHLIXM\", \"QQIQBNKASY\", \"RHALOWGMGJ\", \"CFSINPQYCO\", \"HGHMEUCTEX\",  #>     \"QEAYJDRZQO\", \"LEESGFRPHV\", \"MHVRYUZJWL\", \"QMDWWKFVRU\", \"EOJBYFQEOY\",  #>     \"BHOFOGKCJA\", \"YROTAZMWFI\", \"ISHHJNXLMR\", \"LEESGFRPHV\", \"CUYVXLQJIV\",  #>     \"GKPLYRURBB\", \"RSSXENWCQU\", \"VOXRCHMDIT\", \"NOTPDVRLPM\", \"YROTAZMWFI\",  #>     \"JPARFIKTYL\", \"WEDUDZADWG\", \"JVKZPZVIIU\", \"UZRCINDECG\", \"HLWNYXNVYM\",  #>     \"CJQEUMATTB\", \"ESYOZKOHCU\", \"NCXWRVCMVY\", \"AIJRHVVDKP\", \"VKEOEUOTDQ\",  #>     \"CYQGGUSNEK\", \"FKXBYBMICY\", \"GXQQOGSTOQ\", \"HCEHZFVRBV\", \"MPSFHTGKEF\",  #>     \"URBJONTBBW\", \"CJQEUMATTB\", \"OPNAGRHLZM\", \"PBLJMWGFTW\", \"EJSYIOEOJL\",  #>     \"ZPWKFFVOCB\", \"VKEOEUOTDQ\", \"ASCJFWFUGV\", \"EZLGDZHKHT\", \"ERVIHSPAYA\",  #>     \"ZTCMALLRXB\", \"ONTOHBVEQC\", \"ZPWKFFVOCB\", \"CJQEUMATTB\", \"EAMRJPOWLU\",  #>     \"VKEOEUOTDQ\", \"HYUIWKYPXU\", \"PKBCVRCMCS\", \"CKNVKMZWDC\", \"AIJRHVVDKP\",  #>     \"CFXONOGTQH\", \"YDGABWKNRS\", \"LJJSFTJKBP\", \"AOKHTNTQJC\", \"HCEHZFVRBV\",  #>     \"OPNAGRHLZM\", \"EZLGDZHKHT\", \"AOKHTNTQJC\", \"JVCERYCMOA\", \"KBYFYYONYU\",  #>     \"ELMZBUCGXP\", \"FHCLEHLIXM\", \"JFHAGKINER\", \"JWFPSYZNLW\", \"GRCMVPYLDK\",  #>     \"PKBCVRCMCS\", \"VBFGFOMUQJ\", \"WMVGSBQYPB\", \"RFAKZMSZMB\", \"CMEKXFGTSR\",  #>     \"ZBXYPQEVLU\", \"QBPRAWZTBF\", \"KBYFYYONYU\", \"QBPRAWZTBF\", \"LGWJJITBKZ\",  #>     \"MQKHZKWIKA\", \"SPBEZTBJFS\", \"ASCJFWFUGV\", \"CMEKXFGTSR\", \"HPKSIGVDRL\",  #>     \"UJMNXDCYBB\", \"KBYFYYONYU\", \"UFXSCLPLER\", \"RNAOTFIWTN\", \"LJJSFTJKBP\",  #>     \"UJMNXDCYBB\", \"PKBCVRCMCS\", \"NJLMIFXDEK\", \"QQIQBNKASY\", \"LEESGFRPHV\",  #>     \"WEDUDZADWG\", \"DRQRVFYUCX\", \"NCXWRVCMVY\", \"CFSINPQYCO\", \"AGJEXFMJAO\",  #>     \"WEDUDZADWG\", \"NJLMIFXDEK\", \"RMEYEXVXVX\", \"YROTAZMWFI\", \"DRQRVFYUCX\",  #>     \"GSHWBCJXVZ\", \"TLGDIASGEL\", \"PALVVUCJBF\", \"UFXSCLPLER\", \"URBJONTBBW\",  #>     \"XKSCGLSVUZ\", \"ISHHJNXLMR\", \"EOJBYFQEOY\", \"KBYFYYONYU\", \"CFXONOGTQH\",  #>     \"RSSXENWCQU\", \"AZVIVPYKND\", \"LEESGFRPHV\", \"HGHMEUCTEX\", \"JSGBOZVHXC\",  #>     \"LEESGFRPHV\", \"RSSXENWCQU\", \"CFXONOGTQH\", \"MHVRYUZJWL\", \"JVKZPZVIIU\",  #>     \"BZPWNEEBHR\", \"NOTPDVRLPM\", \"CMEKXFGTSR\", \"GXQQOGSTOQ\", \"RMEYEXVXVX\",  #>     \"XDEAUVDMFQ\", \"NOTPDVRLPM\", \"RHALOWGMGJ\", \"HGHMEUCTEX\", \"FKXBYBMICY\",  #>     \"TXFSIPGCID\", \"RNAOTFIWTN\", \"CUYVXLQJIV\", \"QCCNNYIKTH\", \"URBJONTBBW\",  #>     \"XDEAUVDMFQ\", \"PKTRNWCHPR\", \"JOPGMOKVOM\", \"UFXSCLPLER\", \"KTANGMAQMT\",  #>     \"VKEOEUOTDQ\", \"WLNMRBXMPC\", \"ACYJOPUKSD\", \"HGHMEUCTEX\", \"CJQEUMATTB\",  #>     \"BBONKKTFNG\", \"ESYOZKOHCU\", \"PHIZOLWIBS\", \"CMEKXFGTSR\", \"EJSYIOEOJL\",  #>     \"PKBCVRCMCS\", \"MHVRYUZJWL\", \"WMVGSBQYPB\", \"ZPWKFFVOCB\", \"FKTIIHAGSF\",  #>     \"GKPLYRURBB\", \"AFUTZUEXVM\", \"VBFGFOMUQJ\", \"UFXSCLPLER\", \"YDGABWKNRS\",  #>     \"RSSXENWCQU\", \"JHXSYICTMS\", \"RFAKZMSZMB\", \"TBZWQOHERE\", \"UZRCINDECG\",  #>     \"KTANGMAQMT\", \"ISHHJNXLMR\", \"CFXONOGTQH\", \"TWBOLWJGAR\", \"OPNAGRHLZM\",  #>     \"EAMRJPOWLU\", \"BKYOKYIUGW\", \"YDGABWKNRS\", \"JVCERYCMOA\", \"VKEOEUOTDQ\",  #>     \"RBWJLMGEPF\", \"UJMNXDCYBB\", \"IIKTKPNNPT\", \"ZTCMALLRXB\", \"NCXWRVCMVY\",  #>     \"ACYJOPUKSD\", \"AGJEXFMJAO\", \"AHOMYEGIBP\", \"EOJBYFQEOY\", \"ENXVDYZEEW\",  #>     \"VKEOEUOTDQ\", \"CMEKXFGTSR\", \"GKPLYRURBB\", \"HYUIWKYPXU\", \"ZBXYPQEVLU\",  #>     \"VOXRCHMDIT\", \"TWBOLWJGAR\", \"OPNAGRHLZM\", \"BKYOKYIUGW\", \"GRCMVPYLDK\",  #>     \"UFXSCLPLER\", \"IYNWQZVCCI\", \"CMEKXFGTSR\", \"WMVGSBQYPB\", \"RHALOWGMGJ\",  #>     \"CMEKXFGTSR\", \"CFXONOGTQH\", \"TXFSIPGCID\", \"AGJEXFMJAO\", \"RQDKTNHSYQ\",  #>     \"QMDWWKFVRU\", \"JSGBOZVHXC\", \"CKNVKMZWDC\", \"ISHHJNXLMR\", \"AOKHTNTQJC\",  #>     \"MHVRYUZJWL\", \"FIXJLQEKCP\", \"XDEAUVDMFQ\", \"JFHAGKINER\", \"WLNMRBXMPC\",  #>     \"GKPLYRURBB\", \"UOFFHQQLIR\", \"KTANGMAQMT\", \"CALRWQEBFZ\", \"EOJBYFQEOY\",  #>     \"WEDUDZADWG\", \"MGDZOPJAFG\", \"YROTAZMWFI\", \"UZRCINDECG\", \"HGHMEUCTEX\",  #>     \"UOFFHQQLIR\", \"UNCDYWJXLO\", \"ZPWKFFVOCB\", \"CFXONOGTQH\", \"WEDUDZADWG\",  #>     \"FIXJLQEKCP\", \"ZBXYPQEVLU\", \"CFSINPQYCO\", \"MGDZOPJAFG\", \"EZLGDZHKHT\",  #>     \"ELMZBUCGXP\", \"JSGBOZVHXC\", \"GKPLYRURBB\", \"MPSFHTGKEF\", \"UOFFHQQLIR\",  #>     \"TBZWQOHERE\", \"YROTAZMWFI\", \"TLGDIASGEL\", \"UJMNXDCYBB\", \"UOFFHQQLIR\",  #>     \"YROTAZMWFI\", \"XKSCGLSVUZ\", \"HYHAFAFYEA\", \"JWFPSYZNLW\", \"AHOMYEGIBP\",  #>     \"ASCJFWFUGV\", \"ESYOZKOHCU\", \"MPSFHTGKEF\", \"NCXWRVCMVY\", \"FIXJLQEKCP\",  #>     \"AOKHTNTQJC\", \"SPBEZTBJFS\", \"QMDWWKFVRU\", \"GSNHQUBLXJ\", \"GSHWBCJXVZ\",  #>     \"BHOFOGKCJA\", \"ASCJFWFUGV\", \"JOPGMOKVOM\", \"ASCJFWFUGV\", \"PKTRNWCHPR\",  #>     \"MPSFHTGKEF\", \"JVCERYCMOA\", \"JFHAGKINER\", \"KIJPLWHVGS\", \"YROTAZMWFI\",  #>     \"GRCMVPYLDK\", \"EOJBYFQEOY\", \"RQDKTNHSYQ\", \"PALVVUCJBF\", \"RFAKZMSZMB\",  #>     \"ISHHJNXLMR\", \"FIXJLQEKCP\", \"GXYQHIZVPD\", \"IIKTKPNNPT\", \"JPARFIKTYL\",  #>     \"EJSYIOEOJL\", \"AHOMYEGIBP\", \"YFDQMQIVBM\", \"WMVGSBQYPB\", \"HPKSIGVDRL\",  #>     \"CYQGGUSNEK\", \"TBZWQOHERE\", \"GSHWBCJXVZ\", \"PKBCVRCMCS\", \"JRNMLJJSDP\",  #>     \"QQIQBNKASY\", \"CJQEUMATTB\", \"QBPHMGOGFW\", \"LEESGFRPHV\", \"TLGDIASGEL\",  #>     \"RSSXENWCQU\", \"OSNCJRVKET\", \"QKSAXQEAIB\", \"BHOFOGKCJA\", \"MGDZOPJAFG\",  #>     \"QCCNNYIKTH\", \"AZVIVPYKND\", \"JRNMLJJSDP\", \"WNATHOQPJS\", \"FKXBYBMICY\",  #>     \"AGJEXFMJAO\", \"CJQEUMATTB\", \"PALVVUCJBF\", \"JWFPSYZNLW\", \"GXQQOGSTOQ\",  #>     \"RBWJLMGEPF\", \"AFUTZUEXVM\", \"TLGDIASGEL\", \"TWBOLWJGAR\", \"WEDUDZADWG\",  #>     \"ICUEBKDOGB\", \"PHIZOLWIBS\", \"TKKAYBAFGV\", \"FKTIIHAGSF\", \"UZRCINDECG\",  #>     \"CUYVXLQJIV\", \"CALRWQEBFZ\", \"IYNWQZVCCI\", \"WNATHOQPJS\", \"JPARFIKTYL\",  #>     \"XKSCGLSVUZ\", \"QBPHMGOGFW\", \"MGDZOPJAFG\", \"NTSOYECHZQ\", \"UNCDYWJXLO\",  #>     \"BBONKKTFNG\", \"ONTOHBVEQC\", \"JVCERYCMOA\", \"ESYOZKOHCU\", \"VKEOEUOTDQ\",  #>     \"NTSOYECHZQ\", \"UZRCINDECG\", \"XKSCGLSVUZ\", \"JVCERYCMOA\", \"MPSFHTGKEF\",  #>     \"RQDKTNHSYQ\", \"YDGABWKNRS\", \"RQDKTNHSYQ\", \"TKKAYBAFGV\", \"BKYOKYIUGW\",  #>     \"ASCJFWFUGV\", \"RNAOTFIWTN\", \"GXQQOGSTOQ\", \"RMEYEXVXVX\", \"YROTAZMWFI\",  #>     \"HPKSIGVDRL\", \"IIKTKPNNPT\", \"CFSINPQYCO\", \"MGDZOPJAFG\", \"ASCJFWFUGV\",  #>     \"CYQGGUSNEK\", \"QEAYJDRZQO\", \"HPKSIGVDRL\", \"RHALOWGMGJ\", \"EOJBYFQEOY\",  #>     \"ACYJOPUKSD\", \"CJQEUMATTB\", \"JFHAGKINER\", \"UJMNXDCYBB\", \"JRNMLJJSDP\",  #>     \"VOXRCHMDIT\", \"GKPLYRURBB\", \"JOPGMOKVOM\", \"ISWVRSKEUK\", \"RHALOWGMGJ\",  #>     \"JFHAGKINER\", \"HGHMEUCTEX\", \"GRCMVPYLDK\", \"CMEKXFGTSR\", \"JFHAGKINER\",  #>     \"GKPLYRURBB\", \"UJMNXDCYBB\", \"GKPLYRURBB\", \"UCYFOWDBOQ\", \"UOFFHQQLIR\",  #>     \"FKTIIHAGSF\", \"ESYOZKOHCU\", \"RHALOWGMGJ\", \"CJQEUMATTB\", \"CALRWQEBFZ\",  #>     \"GKPLYRURBB\", \"RQDKTNHSYQ\", \"GXQQOGSTOQ\", \"VBFGFOMUQJ\", \"NOTPDVRLPM\",  #>     \"HYUIWKYPXU\", \"BKYOKYIUGW\", \"TBZWQOHERE\", \"ELMZBUCGXP\", \"YFDQMQIVBM\",  #>     \"VOXRCHMDIT\", \"XDEAUVDMFQ\", \"GSHWBCJXVZ\", \"PKBCVRCMCS\", \"UZRCINDECG\",  #>     \"FHCLEHLIXM\", \"UZRCINDECG\", \"KBYFYYONYU\", \"BKYOKYIUGW\", \"BZPWNEEBHR\",  #>     \"NTSOYECHZQ\", \"ZTTKZEEJZP\", \"ZTCMALLRXB\", \"FKXBYBMICY\", \"RHALOWGMGJ\",  #>     \"RNAOTFIWTN\", \"KBYFYYONYU\", \"SVBBYDPIOA\", \"NJLMIFXDEK\", \"AFUTZUEXVM\",  #>     \"JFHAGKINER\", \"ONTOHBVEQC\", \"CUYVXLQJIV\", \"NJLMIFXDEK\", \"NCXWRVCMVY\",  #>     \"CMEKXFGTSR\", \"PHIZOLWIBS\", \"AFUTZUEXVM\", \"ZBXYPQEVLU\", \"RQDKTNHSYQ\",  #>     \"CKNVKMZWDC\", \"CUYVXLQJIV\", \"ELMZBUCGXP\", \"XCEJMFPVDX\", \"CUYVXLQJIV\",  #>     \"ISHHJNXLMR\", \"ISWVRSKEUK\", \"TBZWQOHERE\", \"GXYQHIZVPD\", \"LJJSFTJKBP\",  #>     \"BJUNWZLJYP\", \"EZLGDZHKHT\", \"JOPGMOKVOM\", \"HYHAFAFYEA\", \"KBYFYYONYU\",  #>     \"JSGBOZVHXC\", \"GXYQHIZVPD\", \"ENXVDYZEEW\", \"CONXBVIQSU\", \"FKXBYBMICY\",  #>     \"ELMZBUCGXP\", \"BBONKKTFNG\", \"LEESGFRPHV\", \"WEDUDZADWG\", \"CONXBVIQSU\",  #>     \"ISHHJNXLMR\", \"ENXVDYZEEW\", \"QMDWWKFVRU\", \"MPSFHTGKEF\", \"TLGDIASGEL\",  #>     \"JHXSYICTMS\", \"TWBOLWJGAR\", \"ZPWKFFVOCB\", \"RNAOTFIWTN\", \"ACYJOPUKSD\",  #>     \"RHALOWGMGJ\", \"QMDWWKFVRU\", \"TLGDIASGEL\", \"JVKZPZVIIU\", \"UOFFHQQLIR\",  #>     \"BHOFOGKCJA\", \"CMEKXFGTSR\", \"RMEYEXVXVX\", \"WKXIHCQQBN\", \"ZTTKZEEJZP\",  #>     \"RFAKZMSZMB\", \"MGDZOPJAFG\", \"BZPWNEEBHR\", \"JSGBOZVHXC\", \"QBPRAWZTBF\",  #>     \"ASCJFWFUGV\", \"CFXONOGTQH\", \"WNATHOQPJS\", \"MHVRYUZJWL\", \"ZTTKZEEJZP\",  #>     \"KTANGMAQMT\", \"TXFSIPGCID\", \"UNCDYWJXLO\", \"ZPWKFFVOCB\", \"YFDQMQIVBM\",  #>     \"CFXONOGTQH\", \"JPARFIKTYL\", \"HCEHZFVRBV\", \"YFDQMQIVBM\", \"GKPLYRURBB\",  #>     \"BBONKKTFNG\", \"TBZWQOHERE\", \"WNATHOQPJS\", \"PHIZOLWIBS\", \"AOKHTNTQJC\",  #>     \"TXFSIPGCID\", \"UNCDYWJXLO\", \"RMEYEXVXVX\", \"MQKHZKWIKA\", \"HCEHZFVRBV\",  #>     \"JVCERYCMOA\", \"YROTAZMWFI\", \"CUYVXLQJIV\", \"PKBCVRCMCS\", \"GSNHQUBLXJ\",  #>     \"CFXONOGTQH\", \"RFAKZMSZMB\", \"UZRCINDECG\", \"CJQEUMATTB\", \"CUYVXLQJIV\",  #>     \"XDEAUVDMFQ\", \"CYQGGUSNEK\", \"UOFFHQQLIR\", \"CKNVKMZWDC\", \"KTANGMAQMT\",  #>     \"JVKZPZVIIU\", \"MHVRYUZJWL\", \"UOFFHQQLIR\", \"JOPGMOKVOM\", \"UCYFOWDBOQ\",  #>     \"RQDKTNHSYQ\", \"SVYPVLUGHE\", \"ASCJFWFUGV\", \"RQDKTNHSYQ\", \"NJLMIFXDEK\",  #>     \"PKTRNWCHPR\", \"KIJPLWHVGS\", \"LEESGFRPHV\", \"GXQQOGSTOQ\", \"BZPWNEEBHR\",  #>     \"JRNMLJJSDP\", \"CMEKXFGTSR\", \"ZBXYPQEVLU\", \"TLGDIASGEL\", \"QMDWWKFVRU\",  #>     \"LGWJJITBKZ\", \"FKXBYBMICY\", \"GKPLYRURBB\", \"ZTCMALLRXB\", \"UOFFHQQLIR\",  #>     \"TWBOLWJGAR\", \"BZPWNEEBHR\", \"QQIQBNKASY\", \"QBPHMGOGFW\", \"AQEEZTRLKH\",  #>     \"TWBOLWJGAR\", \"CFXONOGTQH\", \"NOTPDVRLPM\", \"EWTGOBRLKP\", \"WLNMRBXMPC\",  #>     \"BKYOKYIUGW\", \"CFSINPQYCO\", \"XDEAUVDMFQ\", \"JOPGMOKVOM\", \"ESYOZKOHCU\",  #>     \"JVCERYCMOA\", \"YROTAZMWFI\", \"TLGDIASGEL\", \"QCCNNYIKTH\", \"SPBEZTBJFS\",  #>     \"UNCDYWJXLO\", \"JPARFIKTYL\", \"UJMNXDCYBB\", \"YFDQMQIVBM\", \"MPSFHTGKEF\",  #>     \"GSNHQUBLXJ\", \"PKTRNWCHPR\", \"ENXVDYZEEW\", \"QBPHMGOGFW\", \"RMEYEXVXVX\",  #>     \"ASCJFWFUGV\", \"ESYOZKOHCU\", \"UZRCINDECG\", \"BBONKKTFNG\", \"PKBCVRCMCS\",  #>     \"PHIZOLWIBS\", \"VKEOEUOTDQ\", \"GSNHQUBLXJ\", \"TKKAYBAFGV\", \"LJJSFTJKBP\",  #>     \"ASCJFWFUGV\", \"SVYPVLUGHE\", \"JSGBOZVHXC\", \"TLGDIASGEL\", \"KBYFYYONYU\",  #>     \"GXQQOGSTOQ\", \"FKXBYBMICY\", \"VOXRCHMDIT\", \"ICUEBKDOGB\", \"CFXONOGTQH\",  #>     \"LGWJJITBKZ\", \"WEDUDZADWG\", \"QQIQBNKASY\", \"YROTAZMWFI\", \"AGJEXFMJAO\",  #>     \"AZVIVPYKND\", \"DRQRVFYUCX\", \"TKKAYBAFGV\", \"ENXVDYZEEW\", \"EZLGDZHKHT\",  #>     \"VKEOEUOTDQ\", \"HYUIWKYPXU\", \"QMDWWKFVRU\", \"PALVVUCJBF\", \"BJUNWZLJYP\",  #>     \"KKKAFDRDCO\", \"XSHYKGMBPQ\", \"LGWJJITBKZ\", \"WNATHOQPJS\", \"GKPLYRURBB\",  #>     \"TWBOLWJGAR\", \"URBJONTBBW\", \"JPARFIKTYL\", \"RMEYEXVXVX\", \"JSGBOZVHXC\",  #>     \"GKPLYRURBB\", \"BZPWNEEBHR\", \"EKNGZSKPGF\", \"RFAKZMSZMB\", \"VKEOEUOTDQ\",  #>     \"FKXBYBMICY\", \"CFSINPQYCO\", \"PKBCVRCMCS\", \"AIJRHVVDKP\", \"ZBXYPQEVLU\",  #>     \"EAMRJPOWLU\", \"JWFPSYZNLW\", \"MHVRYUZJWL\", \"CFSINPQYCO\", \"ZTCMALLRXB\",  #>     \"CYQGGUSNEK\", \"BZPWNEEBHR\", \"JVKZPZVIIU\", \"WKXIHCQQBN\", \"VKEOEUOTDQ\",  #>     \"NCXWRVCMVY\", \"HCEHZFVRBV\", \"HPKSIGVDRL\", \"URBJONTBBW\", \"JFHAGKINER\",  #>     \"QQIQBNKASY\", \"DRQRVFYUCX\", \"ACYJOPUKSD\", \"ICUEBKDOGB\", \"HPKSIGVDRL\",  #>     \"UNCDYWJXLO\", \"QCCNNYIKTH\", \"ZTCMALLRXB\", \"HYUIWKYPXU\", \"UJMNXDCYBB\",  #>     \"ZBXYPQEVLU\", \"EKNGZSKPGF\", \"YDGABWKNRS\", \"FIXJLQEKCP\", \"UFXSCLPLER\",  #>     \"CONXBVIQSU\", \"NOTPDVRLPM\", \"NOTPDVRLPM\", \"XDEAUVDMFQ\", \"YFDQMQIVBM\",  #>     \"EWTGOBRLKP\", \"WEDUDZADWG\", \"WMVGSBQYPB\", \"AFUTZUEXVM\", \"ASCJFWFUGV\",  #>     \"VKEOEUOTDQ\", \"ONTOHBVEQC\", \"ESYOZKOHCU\", \"FIXJLQEKCP\", \"TLGDIASGEL\",  #>     \"ENXVDYZEEW\", \"XDEAUVDMFQ\", \"HGHMEUCTEX\", \"TWBOLWJGAR\", \"ZBXYPQEVLU\",  #>     \"QMDWWKFVRU\", \"QBPHMGOGFW\", \"CFSINPQYCO\", \"AZVIVPYKND\", \"JVCERYCMOA\",  #>     \"XDEAUVDMFQ\", \"EOJBYFQEOY\", \"CALRWQEBFZ\", \"XDEAUVDMFQ\", \"FHCLEHLIXM\",  #>     \"UFXSCLPLER\", \"KTANGMAQMT\", \"IYNWQZVCCI\", \"PKBCVRCMCS\", \"BZPWNEEBHR\",  #>     \"MQKHZKWIKA\", \"TLGDIASGEL\", \"KBYFYYONYU\", \"DRQRVFYUCX\", \"YFDQMQIVBM\",  #>     \"QKSAXQEAIB\", \"RQDKTNHSYQ\", \"BKYOKYIUGW\", \"ISWVRSKEUK\", \"HPKSIGVDRL\",  #>     \"KBYFYYONYU\", \"MMCWEZDZSL\", \"WMVGSBQYPB\", \"KKKAFDRDCO\", \"CUYVXLQJIV\",  #>     \"YFDQMQIVBM\", \"GKPLYRURBB\", \"JFHAGKINER\", \"CUYVXLQJIV\", \"WKXIHCQQBN\",  #>     \"XDEAUVDMFQ\", \"LGWJJITBKZ\", \"CJQEUMATTB\", \"QCCNNYIKTH\", \"RMEYEXVXVX\",  #>     \"CUYVXLQJIV\", \"EZLGDZHKHT\", \"ISWVRSKEUK\", \"TXFSIPGCID\", \"JFHAGKINER\",  #>     \"YROTAZMWFI\", \"YDGABWKNRS\", \"CJQEUMATTB\", \"BZPWNEEBHR\", \"ZTCMALLRXB\",  #>     \"MHVRYUZJWL\", \"RHALOWGMGJ\", \"VKEOEUOTDQ\", \"HYUIWKYPXU\", \"ZTCMALLRXB\",  #>     \"KIJPLWHVGS\", \"FKXBYBMICY\", \"QBPRAWZTBF\", \"FHCLEHLIXM\", \"XSHYKGMBPQ\",  #>     \"KTANGMAQMT\", \"GRCMVPYLDK\", \"RMEYEXVXVX\", \"SVBBYDPIOA\", \"QEAYJDRZQO\",  #>     \"ENXVDYZEEW\", \"FKXBYBMICY\", \"NJLMIFXDEK\", \"UZRCINDECG\", \"MPSFHTGKEF\",  #>     \"EOJBYFQEOY\", \"JFHAGKINER\", \"EZLGDZHKHT\", \"RMEYEXVXVX\", \"JWFPSYZNLW\",  #>     \"QCCNNYIKTH\", \"LEESGFRPHV\", \"KTANGMAQMT\", \"GXQQOGSTOQ\", \"SVYPVLUGHE\",  #>     \"ZTCMALLRXB\", \"ZTCMALLRXB\", \"UZRCINDECG\", \"MMCWEZDZSL\", \"JFHAGKINER\",  #>     \"ZTTKZEEJZP\", \"PBLJMWGFTW\", \"EJSYIOEOJL\", \"JVCERYCMOA\", \"TKKAYBAFGV\",  #>     \"MHVRYUZJWL\", \"AGJEXFMJAO\", \"WMVGSBQYPB\", \"AOKHTNTQJC\", \"HCEHZFVRBV\",  #>     \"NTSOYECHZQ\", \"NCXWRVCMVY\", \"QQIQBNKASY\", \"QEAYJDRZQO\", \"OSNCJRVKET\",  #>     \"ZPWKFFVOCB\", \"JHXSYICTMS\", \"ESYOZKOHCU\", \"ZTCMALLRXB\", \"GSNHQUBLXJ\",  #>     \"YFDQMQIVBM\", \"CFXONOGTQH\", \"URBJONTBBW\", \"JFHAGKINER\", \"KTANGMAQMT\",  #>     \"PALVVUCJBF\", \"QBPRAWZTBF\", \"RNAOTFIWTN\", \"YFDQMQIVBM\", \"RMEYEXVXVX\",  #>     \"AFUTZUEXVM\", \"WEDUDZADWG\", \"LGWJJITBKZ\", \"UOFFHQQLIR\", \"RHALOWGMGJ\",  #>     \"ASCJFWFUGV\", \"QEAYJDRZQO\", \"OSNCJRVKET\", \"ONTOHBVEQC\", \"FKTIIHAGSF\",  #>     \"CONXBVIQSU\", \"JHVIRHYUEP\", \"JRNMLJJSDP\", \"GRCMVPYLDK\", \"CONXBVIQSU\",  #>     \"CONXBVIQSU\", \"TLGDIASGEL\", \"NCXWRVCMVY\", \"HPKSIGVDRL\", \"FKXBYBMICY\",  #>     \"LEESGFRPHV\", \"ZTTKZEEJZP\", \"ERVIHSPAYA\", \"ACYJOPUKSD\", \"MQKHZKWIKA\",  #>     \"BJUNWZLJYP\", \"FKXBYBMICY\", \"TLGDIASGEL\", \"MMCWEZDZSL\", \"ZTCMALLRXB\",  #>     \"ONTOHBVEQC\", \"PKBCVRCMCS\", \"ONTOHBVEQC\", \"QBPRAWZTBF\", \"LEESGFRPHV\",  #>     \"JFHAGKINER\", \"CALRWQEBFZ\", \"LGWJJITBKZ\", \"JHXSYICTMS\", \"GSHWBCJXVZ\",  #>     \"EKNGZSKPGF\", \"JPARFIKTYL\", \"QCCNNYIKTH\", \"IIKTKPNNPT\", \"WKXIHCQQBN\",  #>     \"ZTCMALLRXB\", \"ZBXYPQEVLU\", \"NCXWRVCMVY\", \"KBYFYYONYU\", \"WNATHOQPJS\",  #>     \"RFAKZMSZMB\", \"ASCJFWFUGV\", \"MHVRYUZJWL\", \"LJJSFTJKBP\", \"EAMRJPOWLU\",  #>     \"UJMNXDCYBB\", \"CUYVXLQJIV\", \"UCYFOWDBOQ\", \"OPNAGRHLZM\", \"JVKZPZVIIU\",  #>     \"EZLGDZHKHT\", \"RNAOTFIWTN\", \"JWFPSYZNLW\", \"FIXJLQEKCP\", \"EAMRJPOWLU\",  #>     \"FIXJLQEKCP\", \"ASCJFWFUGV\", \"GSHWBCJXVZ\", \"JOPGMOKVOM\", \"AGJEXFMJAO\",  #>     \"VKEOEUOTDQ\", \"LGWJJITBKZ\", \"GSNHQUBLXJ\", \"AHOMYEGIBP\", \"ESYOZKOHCU\",  #>     \"FKXBYBMICY\", \"YROTAZMWFI\", \"NCXWRVCMVY\", \"UJMNXDCYBB\", \"JHXSYICTMS\",  #>     \"VKEOEUOTDQ\", \"CMEKXFGTSR\", \"AOKHTNTQJC\", \"GXYQHIZVPD\", \"UZRCINDECG\",  #>     \"UOFFHQQLIR\", \"RFAKZMSZMB\", \"UOFFHQQLIR\", \"CYQGGUSNEK\", \"JFHAGKINER\",  #>     \"DRQRVFYUCX\", \"HYUIWKYPXU\", \"EOJBYFQEOY\", \"HCEHZFVRBV\", \"WKXIHCQQBN\",  #>     \"FKXBYBMICY\", \"RNAOTFIWTN\", \"NJLMIFXDEK\", \"YROTAZMWFI\", \"HCEHZFVRBV\",  #>     \"KTANGMAQMT\", \"UOFFHQQLIR\", \"CMEKXFGTSR\", \"ISHHJNXLMR\", \"GSNHQUBLXJ\",  #>     \"EKNGZSKPGF\", \"GRCMVPYLDK\", \"AGJEXFMJAO\", \"CKNVKMZWDC\", \"MHVRYUZJWL\",  #>     \"YDGABWKNRS\", \"OPNAGRHLZM\", \"TBZWQOHERE\", \"AGJEXFMJAO\", \"EJSYIOEOJL\",  #>     \"MMCWEZDZSL\", \"PKTRNWCHPR\", \"VOXRCHMDIT\", \"LJJSFTJKBP\", \"GKPLYRURBB\",  #>     \"MQKHZKWIKA\", \"LGWJJITBKZ\", \"RNAOTFIWTN\", \"HPKSIGVDRL\", \"JHXSYICTMS\",  #>     \"RFAKZMSZMB\", \"YFDQMQIVBM\", \"FKXBYBMICY\", \"SVBBYDPIOA\", \"ISWVRSKEUK\",  #>     \"JVCERYCMOA\", \"JRNMLJJSDP\", \"YROTAZMWFI\", \"HPKSIGVDRL\", \"VOXRCHMDIT\",  #>     \"TXFSIPGCID\", \"TKKAYBAFGV\", \"CFXONOGTQH\", \"XSHYKGMBPQ\", \"KBYFYYONYU\",  #>     \"QMDWWKFVRU\", \"ISWVRSKEUK\", \"TWBOLWJGAR\", \"ICUEBKDOGB\", \"RMEYEXVXVX\",  #>     \"RHALOWGMGJ\", \"ZTCMALLRXB\", \"CJQEUMATTB\", \"RNAOTFIWTN\", \"ESYOZKOHCU\",  #>     \"RSSXENWCQU\", \"PBLJMWGFTW\", \"CONXBVIQSU\", \"GSHWBCJXVZ\", \"BHOFOGKCJA\",  #>     \"NCXWRVCMVY\", \"NCXWRVCMVY\", \"NJLMIFXDEK\", \"KBYFYYONYU\", \"ZPWKFFVOCB\",  #>     \"NCXWRVCMVY\", \"WNATHOQPJS\", \"CUYVXLQJIV\", \"XKSCGLSVUZ\", \"CKNVKMZWDC\",  #>     \"SVYPVLUGHE\", \"VKEOEUOTDQ\", \"FHCLEHLIXM\", \"SVYPVLUGHE\", \"QQIQBNKASY\",  #>     \"TXFSIPGCID\", \"WNATHOQPJS\", \"CJQEUMATTB\", \"NOTPDVRLPM\", \"ACYJOPUKSD\",  #>     \"GRCMVPYLDK\", \"RFAKZMSZMB\", \"XDEAUVDMFQ\", \"AGJEXFMJAO\", \"CALRWQEBFZ\",  #>     \"BBONKKTFNG\", \"EWTGOBRLKP\", \"JVKZPZVIIU\", \"RFAKZMSZMB\", \"RNAOTFIWTN\",  #>     \"MHVRYUZJWL\", \"CFXONOGTQH\", \"OSNCJRVKET\", \"JSGBOZVHXC\", \"EWTGOBRLKP\",  #>     \"JWFPSYZNLW\", \"JRNMLJJSDP\", \"QKSAXQEAIB\", \"AHOMYEGIBP\", \"BZPWNEEBHR\",  #>     \"CYQGGUSNEK\", \"NJLMIFXDEK\", \"CYQGGUSNEK\", \"CONXBVIQSU\", \"ONTOHBVEQC\",  #>     \"GRCMVPYLDK\", \"UZRCINDECG\", \"WEDUDZADWG\", \"WLNMRBXMPC\", \"CFSINPQYCO\",  #>     \"PBLJMWGFTW\", \"AIJRHVVDKP\", \"ASCJFWFUGV\", \"ESYOZKOHCU\", \"ISHHJNXLMR\",  #>     \"KKKAFDRDCO\", \"QKSAXQEAIB\", \"HCEHZFVRBV\", \"JPARFIKTYL\", \"UZRCINDECG\",  #>     \"NJLMIFXDEK\", \"OPNAGRHLZM\", \"ENXVDYZEEW\", \"TBZWQOHERE\", \"MMCWEZDZSL\",  #>     \"XKSCGLSVUZ\", \"UCYFOWDBOQ\", \"HYUIWKYPXU\", \"RFAKZMSZMB\", \"SVBBYDPIOA\",  #>     \"PALVVUCJBF\", \"LJJSFTJKBP\", \"XKSCGLSVUZ\", \"TBZWQOHERE\", \"ESYOZKOHCU\",  #>     \"HYUIWKYPXU\", \"QBPHMGOGFW\", \"OPNAGRHLZM\", \"UOFFHQQLIR\", \"WLNMRBXMPC\",  #>     \"VOXRCHMDIT\", \"FHCLEHLIXM\", \"ONTOHBVEQC\", \"BKYOKYIUGW\", \"LJJSFTJKBP\",  #>     \"RSSXENWCQU\", \"ZTCMALLRXB\", \"WKXIHCQQBN\", \"KBYFYYONYU\", \"TBZWQOHERE\",  #>     \"ASCJFWFUGV\", \"YROTAZMWFI\", \"CYQGGUSNEK\", \"YDGABWKNRS\", \"ASCJFWFUGV\",  #>     \"ISWVRSKEUK\", \"QMDWWKFVRU\", \"VKEOEUOTDQ\", \"UOFFHQQLIR\", \"EZLGDZHKHT\",  #>     \"MPSFHTGKEF\", \"JWFPSYZNLW\", \"AGJEXFMJAO\", \"UOFFHQQLIR\", \"JFHAGKINER\",  #>     \"TKKAYBAFGV\", \"FKTIIHAGSF\", \"ZBXYPQEVLU\", \"CONXBVIQSU\", \"BBONKKTFNG\",  #>     \"QBPRAWZTBF\", \"YDGABWKNRS\", \"WLNMRBXMPC\", \"RNAOTFIWTN\", \"ENXVDYZEEW\",  #>     \"QBPRAWZTBF\", \"ISHHJNXLMR\", \"GSHWBCJXVZ\", \"AZVIVPYKND\", \"QMDWWKFVRU\",  #>     \"CUYVXLQJIV\", \"URBJONTBBW\", \"TWBOLWJGAR\", \"ESYOZKOHCU\", \"VKEOEUOTDQ\",  #>     \"KTANGMAQMT\", \"YROTAZMWFI\", \"WEDUDZADWG\", \"EOJBYFQEOY\", \"ISWVRSKEUK\",  #>     \"JSGBOZVHXC\", \"ASCJFWFUGV\", \"PALVVUCJBF\", \"PKBCVRCMCS\", \"CKNVKMZWDC\",  #>     \"HYUIWKYPXU\", \"YDGABWKNRS\", \"YDGABWKNRS\", \"JVCERYCMOA\", \"SPBEZTBJFS\",  #>     \"CJQEUMATTB\", \"LGWJJITBKZ\", \"URBJONTBBW\", \"FKXBYBMICY\", \"KIJPLWHVGS\",  #>     \"PKBCVRCMCS\", \"ZPWKFFVOCB\", \"OSNCJRVKET\", \"JWFPSYZNLW\", \"PALVVUCJBF\",  #>     \"UFXSCLPLER\", \"XCEJMFPVDX\", \"ESYOZKOHCU\", \"HLWNYXNVYM\", \"LJJSFTJKBP\",  #>     \"CFSINPQYCO\", \"ZBXYPQEVLU\", \"ZTTKZEEJZP\", \"CUYVXLQJIV\", \"ENXVDYZEEW\",  #>     \"ELMZBUCGXP\", \"ZTTKZEEJZP\", \"EKNGZSKPGF\", \"JVKZPZVIIU\", \"NTSOYECHZQ\",  #>     \"EAMRJPOWLU\", \"WMVGSBQYPB\", \"QQIQBNKASY\", \"LGWJJITBKZ\", \"UCYFOWDBOQ\",  #>     \"JWFPSYZNLW\", \"JWFPSYZNLW\", \"QCCNNYIKTH\", \"MGDZOPJAFG\", \"ASCJFWFUGV\",  #>     \"FHCLEHLIXM\", \"VKEOEUOTDQ\", \"JOPGMOKVOM\", \"CUYVXLQJIV\", \"PKTRNWCHPR\",  #>     \"RHALOWGMGJ\", \"AIJRHVVDKP\", \"ZBXYPQEVLU\", \"GKPLYRURBB\", \"BBONKKTFNG\",  #>     \"AIJRHVVDKP\", \"MPSFHTGKEF\", \"GXYQHIZVPD\", \"CKNVKMZWDC\", \"EKNGZSKPGF\",  #>     \"KIJPLWHVGS\", \"RFAKZMSZMB\", \"QKSAXQEAIB\", \"MPSFHTGKEF\", \"PKBCVRCMCS\",  #>     \"KBYFYYONYU\", \"HLWNYXNVYM\", \"VOXRCHMDIT\", \"UNCDYWJXLO\", \"QMDWWKFVRU\",  #>     \"AZVIVPYKND\", \"MPSFHTGKEF\", \"GKPLYRURBB\", \"KIJPLWHVGS\", \"RFAKZMSZMB\",  #>     \"GSHWBCJXVZ\", \"ASCJFWFUGV\", \"FKXBYBMICY\", \"PKBCVRCMCS\", \"OPNAGRHLZM\",  #>     \"QBPRAWZTBF\", \"JHXSYICTMS\", \"XDEAUVDMFQ\", \"GRCMVPYLDK\", \"AFUTZUEXVM\",  #>     \"WLNMRBXMPC\", \"ASCJFWFUGV\", \"BHOFOGKCJA\", \"DRQRVFYUCX\", \"QKSAXQEAIB\",  #>     \"OSNCJRVKET\", \"MPSFHTGKEF\", \"JPARFIKTYL\", \"XCEJMFPVDX\", \"NCXWRVCMVY\",  #>     \"BKYOKYIUGW\", \"AQEEZTRLKH\", \"TKKAYBAFGV\", \"SPBEZTBJFS\", \"TKKAYBAFGV\",  #>     \"RFAKZMSZMB\", \"RQDKTNHSYQ\", \"EJSYIOEOJL\", \"UOFFHQQLIR\", \"XKSCGLSVUZ\",  #>     \"EZLGDZHKHT\", \"NOTPDVRLPM\", \"CFSINPQYCO\", \"CALRWQEBFZ\", \"MQKHZKWIKA\",  #>     \"HYUIWKYPXU\", \"WEDUDZADWG\", \"TXFSIPGCID\", \"MGDZOPJAFG\", \"QQIQBNKASY\",  #>     \"CFXONOGTQH\", \"MPSFHTGKEF\", \"JVKZPZVIIU\", \"CJQEUMATTB\", \"PKBCVRCMCS\",  #>     \"NTSOYECHZQ\", \"RSSXENWCQU\", \"YROTAZMWFI\", \"ACYJOPUKSD\", \"OSNCJRVKET\",  #>     \"XKSCGLSVUZ\", \"LHDUBEZXXM\", \"NOTPDVRLPM\", \"OPNAGRHLZM\", \"ZTCMALLRXB\",  #>     \"CKNVKMZWDC\", \"NJLMIFXDEK\", \"WNATHOQPJS\", \"JHXSYICTMS\", \"SVYPVLUGHE\",  #>     \"CFSINPQYCO\", \"RFAKZMSZMB\", \"LHDUBEZXXM\", \"RFAKZMSZMB\", \"GXYQHIZVPD\",  #>     \"RFAKZMSZMB\", \"QQIQBNKASY\", \"HPKSIGVDRL\", \"WKXIHCQQBN\", \"ZTTKZEEJZP\",  #>     \"EZLGDZHKHT\", \"TLGDIASGEL\", \"JSGBOZVHXC\", \"PKBCVRCMCS\", \"NTSOYECHZQ\",  #>     \"GKPLYRURBB\", \"UZRCINDECG\", \"HLWNYXNVYM\", \"QCCNNYIKTH\", \"FHCLEHLIXM\",  #>     \"RQDKTNHSYQ\", \"OPNAGRHLZM\", \"WMVGSBQYPB\", \"HYUIWKYPXU\", \"GKPLYRURBB\",  #>     \"ENXVDYZEEW\", \"CYQGGUSNEK\", \"MHVRYUZJWL\", \"ZTTKZEEJZP\", \"OSNCJRVKET\",  #>     \"CMEKXFGTSR\", \"ESYOZKOHCU\", \"UZRCINDECG\", \"GKPLYRURBB\", \"TXFSIPGCID\",  #>     \"UZRCINDECG\", \"BHOFOGKCJA\", \"YROTAZMWFI\", \"KTANGMAQMT\", \"MQKHZKWIKA\",  #>     \"WNATHOQPJS\", \"QBPRAWZTBF\", \"EOJBYFQEOY\", \"HPKSIGVDRL\", \"AIJRHVVDKP\",  #>     \"RFAKZMSZMB\", \"GKPLYRURBB\", \"HYUIWKYPXU\", \"QBPHMGOGFW\", \"WLNMRBXMPC\",  #>     \"UOFFHQQLIR\", \"WKXIHCQQBN\", \"JWFPSYZNLW\", \"RMEYEXVXVX\", \"RMEYEXVXVX\",  #>     \"TWBOLWJGAR\", \"TLGDIASGEL\", \"CYQGGUSNEK\", \"VBFGFOMUQJ\", \"URBJONTBBW\",  #>     \"MQKHZKWIKA\", \"YROTAZMWFI\", \"JWFPSYZNLW\", \"JPARFIKTYL\", \"XKSCGLSVUZ\",  #>     \"LGWJJITBKZ\", \"CKNVKMZWDC\", \"GSHWBCJXVZ\", \"MGDZOPJAFG\", \"CFSINPQYCO\",  #>     \"QBPRAWZTBF\", \"ZTTKZEEJZP\", \"CUYVXLQJIV\", \"ZBXYPQEVLU\", \"JOPGMOKVOM\",  #>     \"EZLGDZHKHT\", \"NJLMIFXDEK\", \"UZRCINDECG\", \"QQIQBNKASY\", \"GXYQHIZVPD\",  #>     \"ERVIHSPAYA\", \"MHVRYUZJWL\", \"GSHWBCJXVZ\", \"OSNCJRVKET\", \"HYUIWKYPXU\",  #>     \"TWBOLWJGAR\", \"ACYJOPUKSD\", \"VBFGFOMUQJ\", \"MCBXZBXGJN\", \"YDGABWKNRS\",  #>     \"WNATHOQPJS\", \"RFAKZMSZMB\", \"MPSFHTGKEF\", \"BZPWNEEBHR\", \"GKPLYRURBB\",  #>     \"KBYFYYONYU\", \"ERVIHSPAYA\", \"OPNAGRHLZM\", \"ZBXYPQEVLU\", \"HPKSIGVDRL\",  #>     \"MPSFHTGKEF\", \"NTSOYECHZQ\", \"TWBOLWJGAR\", \"UNCDYWJXLO\", \"EJSYIOEOJL\",  #>     \"JRNMLJJSDP\", \"XKSCGLSVUZ\", \"CYQGGUSNEK\", \"NJLMIFXDEK\", \"ELMZBUCGXP\",  #>     \"WNATHOQPJS\", \"KBYFYYONYU\", \"CJQEUMATTB\", \"RQDKTNHSYQ\", \"QEAYJDRZQO\",  #>     \"WNATHOQPJS\", \"VOXRCHMDIT\", \"ACYJOPUKSD\", \"SVBBYDPIOA\", \"JWFPSYZNLW\",  #>     \"CALRWQEBFZ\", \"QKSAXQEAIB\", \"GXYQHIZVPD\", \"JVKZPZVIIU\", \"YDGABWKNRS\",  #>     \"ACYJOPUKSD\", \"FIXJLQEKCP\", \"PKBCVRCMCS\", \"EJSYIOEOJL\", \"WNATHOQPJS\",  #>     \"PKBCVRCMCS\", \"JFHAGKINER\", \"RFAKZMSZMB\", \"GXYQHIZVPD\", \"TLGDIASGEL\",  #>     \"VKEOEUOTDQ\", \"XDEAUVDMFQ\", \"WMVGSBQYPB\", \"XDEAUVDMFQ\", \"TLGDIASGEL\",  #>     \"CONXBVIQSU\", \"EKNGZSKPGF\", \"ICUEBKDOGB\", \"CYQGGUSNEK\", \"JHXSYICTMS\",  #>     \"ASCJFWFUGV\", \"UJMNXDCYBB\", \"KKKAFDRDCO\", \"GKPLYRURBB\", \"ZBXYPQEVLU\",  #>     \"AGJEXFMJAO\", \"UZRCINDECG\", \"UJMNXDCYBB\", \"ZPWKFFVOCB\", \"ISHHJNXLMR\",  #>     \"NCXWRVCMVY\", \"JHVIRHYUEP\", \"GXQQOGSTOQ\", \"ENXVDYZEEW\", \"MCBXZBXGJN\",  #>     \"HGHMEUCTEX\", \"CFXONOGTQH\", \"ZTTKZEEJZP\", \"JOPGMOKVOM\", \"ZBXYPQEVLU\",  #>     \"YFDQMQIVBM\", \"JOPGMOKVOM\", \"CJQEUMATTB\", \"LJJSFTJKBP\", \"RQDKTNHSYQ\",  #>     \"JRNMLJJSDP\", \"ZTTKZEEJZP\", \"KKKAFDRDCO\", \"ESYOZKOHCU\", \"WEDUDZADWG\",  #>     \"RFAKZMSZMB\", \"GKPLYRURBB\", \"AHOMYEGIBP\", \"ICUEBKDOGB\", \"GKPLYRURBB\",  #>     \"NOTPDVRLPM\", \"ZPWKFFVOCB\", \"JPARFIKTYL\", \"QMDWWKFVRU\", \"JOPGMOKVOM\",  #>     \"UZRCINDECG\", \"UZRCINDECG\", \"RNAOTFIWTN\", \"NJLMIFXDEK\", \"RMEYEXVXVX\",  #>     \"GSHWBCJXVZ\", \"URBJONTBBW\", \"GKPLYRURBB\", \"CFSINPQYCO\", \"TXFSIPGCID\",  #>     \"LHDUBEZXXM\", \"ERVIHSPAYA\", \"AFUTZUEXVM\", \"EOJBYFQEOY\", \"JVCERYCMOA\",  #>     \"AIJRHVVDKP\", \"CMEKXFGTSR\", \"SVYPVLUGHE\", \"FHCLEHLIXM\", \"RNAOTFIWTN\",  #>     \"PKBCVRCMCS\", \"JRNMLJJSDP\", \"OPNAGRHLZM\", \"WNATHOQPJS\", \"GXQQOGSTOQ\",  #>     \"CALRWQEBFZ\", \"ZTCMALLRXB\", \"XSHYKGMBPQ\", \"GKPLYRURBB\", \"HLWNYXNVYM\",  #>     \"AFUTZUEXVM\", \"QCCNNYIKTH\", \"QBPRAWZTBF\", \"ZTCMALLRXB\", \"AHOMYEGIBP\",  #>     \"OPNAGRHLZM\", \"FKXBYBMICY\", \"FIXJLQEKCP\", \"SVYPVLUGHE\", \"ELMZBUCGXP\",  #>     \"JFHAGKINER\", \"EAMRJPOWLU\", \"QCCNNYIKTH\", \"PKTRNWCHPR\", \"SPBEZTBJFS\",  #>     \"KTANGMAQMT\", \"UJMNXDCYBB\", \"AHOMYEGIBP\", \"GSHWBCJXVZ\", \"LGWJJITBKZ\",  #>     \"NTSOYECHZQ\", \"RNAOTFIWTN\", \"CMEKXFGTSR\", \"XDEAUVDMFQ\", \"WEDUDZADWG\",  #>     \"VKEOEUOTDQ\", \"OPNAGRHLZM\", \"WLNMRBXMPC\", \"LJJSFTJKBP\", \"RMEYEXVXVX\",  #>     \"CMEKXFGTSR\", \"EOJBYFQEOY\", \"VKEOEUOTDQ\", \"GSNHQUBLXJ\", \"HGHMEUCTEX\",  #>     \"PHIZOLWIBS\", \"CYQGGUSNEK\", \"JOPGMOKVOM\", \"AIJRHVVDKP\", \"ENXVDYZEEW\",  #>     \"RFAKZMSZMB\", \"BZPWNEEBHR\", \"IIKTKPNNPT\", \"CMEKXFGTSR\", \"JVKZPZVIIU\",  #>     \"AGJEXFMJAO\", \"LEESGFRPHV\", \"AQEEZTRLKH\", \"URBJONTBBW\", \"TLGDIASGEL\",  #>     \"MGDZOPJAFG\", \"PKBCVRCMCS\", \"GXYQHIZVPD\", \"PKBCVRCMCS\", \"QBPRAWZTBF\",  #>     \"SVBBYDPIOA\", \"ASCJFWFUGV\", \"UJMNXDCYBB\", \"XCEJMFPVDX\", \"JPARFIKTYL\",  #>     \"YDGABWKNRS\", \"URBJONTBBW\", \"LHDUBEZXXM\", \"GSHWBCJXVZ\", \"EWTGOBRLKP\",  #>     \"RHALOWGMGJ\", \"ERVIHSPAYA\", \"CUYVXLQJIV\", \"OSNCJRVKET\", \"UJMNXDCYBB\",  #>     \"HPKSIGVDRL\", \"SVBBYDPIOA\", \"ONTOHBVEQC\", \"AGJEXFMJAO\", \"XKSCGLSVUZ\",  #>     \"QKSAXQEAIB\", \"CJQEUMATTB\", \"EZLGDZHKHT\", \"AGJEXFMJAO\", \"PHIZOLWIBS\",  #>     \"QMDWWKFVRU\", \"CONXBVIQSU\", \"EZLGDZHKHT\", \"RHALOWGMGJ\", \"CFXONOGTQH\",  #>     \"CFXONOGTQH\", \"YROTAZMWFI\", \"NCXWRVCMVY\", \"FHCLEHLIXM\", \"RHALOWGMGJ\",  #>     \"RNAOTFIWTN\", \"EKNGZSKPGF\", \"HYHAFAFYEA\", \"ZPWKFFVOCB\", \"MPSFHTGKEF\",  #>     \"QKSAXQEAIB\", \"XSHYKGMBPQ\", \"FHCLEHLIXM\", \"MPSFHTGKEF\", \"XCEJMFPVDX\",  #>     \"TKKAYBAFGV\", \"RFAKZMSZMB\", \"LGWJJITBKZ\", \"JWFPSYZNLW\", \"ASCJFWFUGV\",  #>     \"QEAYJDRZQO\", \"VBFGFOMUQJ\", \"VOXRCHMDIT\", \"BZPWNEEBHR\", \"JVCERYCMOA\",  #>     \"CYQGGUSNEK\", \"AHOMYEGIBP\", \"OPNAGRHLZM\", \"AOKHTNTQJC\", \"BKYOKYIUGW\",  #>     \"RMEYEXVXVX\", \"EZLGDZHKHT\", \"MPSFHTGKEF\", \"EAMRJPOWLU\", \"BKYOKYIUGW\",  #>     \"CALRWQEBFZ\", \"ESYOZKOHCU\", \"OPNAGRHLZM\", \"EOJBYFQEOY\", \"RFAKZMSZMB\",  #>     \"ESYOZKOHCU\", \"ZPWKFFVOCB\", \"XDEAUVDMFQ\", \"XDEAUVDMFQ\", \"EOJBYFQEOY\",  #>     \"OPNAGRHLZM\", \"GXYQHIZVPD\", \"YDGABWKNRS\", \"CKNVKMZWDC\", \"JOPGMOKVOM\",  #>     \"NJLMIFXDEK\"), grade = c(4L, 4L, 4L, 5L, 3L, 5L, 5L, 5L,  #>     3L, 5L, 5L, 5L, 3L, 3L, 4L, 5L, 4L, 3L, 5L, 3L, 5L, 4L, 5L,  #>     5L, 5L, 4L, 3L, 5L, 4L, 5L, 5L, 5L, 3L, 5L, 4L, 4L, 4L, 5L,  #>     4L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 4L,  #>     4L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 4L, 3L,  #>     3L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 3L,  #>     3L, 5L, 3L, 5L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 3L, 3L, 5L,  #>     5L, 4L, 4L, 5L, 4L, 5L, 4L, 4L, 4L, 5L, 4L, 4L, 5L, 3L, 5L,  #>     4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 5L, 4L, 3L, 4L, 5L, 3L,  #>     5L, 3L, 4L, 5L, 4L, 3L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 4L,  #>     5L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 3L, 4L,  #>     3L, 3L, 4L, 4L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 3L, 5L, 3L, 4L,  #>     3L, 5L, 3L, 3L, 5L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 4L, 3L, 5L,  #>     3L, 5L, 5L, 3L, 4L, 3L, 4L, 5L, 5L, 3L, 3L, 3L, 3L, 3L, 3L,  #>     4L, 5L, 5L, 5L, 4L, 4L, 5L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 4L,  #>     5L, 3L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 3L, 4L, 3L, 5L,  #>     5L, 3L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L,  #>     4L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 4L, 4L,  #>     4L, 5L, 3L, 4L, 3L, 4L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 5L,  #>     4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L, 3L, 4L, 5L, 3L, 4L, 4L, 4L,  #>     4L, 3L, 4L, 5L, 4L, 4L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 5L,  #>     4L, 4L, 3L, 5L, 3L, 5L, 3L, 5L, 4L, 5L, 3L, 5L, 4L, 3L, 5L,  #>     3L, 4L, 5L, 3L, 3L, 4L, 4L, 4L, 5L, 4L, 5L, 3L, 5L, 4L, 5L,  #>     5L, 4L, 4L, 5L, 4L, 4L, 4L, 3L, 3L, 5L, 5L, 3L, 3L, 3L, 3L,  #>     4L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 3L, 4L, 4L, 4L,  #>     5L, 4L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 5L,  #>     5L, 5L, 4L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 3L,  #>     5L, 3L, 5L, 4L, 4L, 3L, 3L, 3L, 5L, 3L, 3L, 3L, 3L, 3L, 3L,  #>     5L, 3L, 3L, 4L, 5L, 3L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 5L, 3L,  #>     3L, 5L, 3L, 4L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 4L, 3L, 4L, 4L,  #>     5L, 5L, 5L, 3L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 3L, 4L, 4L,  #>     4L, 5L, 3L, 4L, 3L, 5L, 5L, 3L, 5L, 5L, 3L, 3L, 5L, 4L, 3L,  #>     5L, 5L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 3L,  #>     5L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 4L, 5L, 3L, 3L, 3L, 4L, 3L,  #>     5L, 5L, 5L, 3L, 4L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 3L, 5L,  #>     3L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 3L, 5L,  #>     5L, 3L, 4L, 3L, 4L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 3L, 3L, 4L,  #>     5L, 4L, 4L, 4L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 3L, 3L, 5L,  #>     3L, 5L, 4L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 4L,  #>     4L, 5L, 5L, 3L, 3L, 4L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 4L,  #>     5L, 5L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 3L,  #>     5L, 5L, 5L, 5L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 4L,  #>     4L, 3L, 3L, 4L, 3L, 3L, 5L, 5L, 5L, 3L, 5L, 3L, 3L, 3L, 5L,  #>     3L, 4L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 3L,  #>     4L, 5L, 5L, 5L, 4L, 3L, 3L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 5L,  #>     3L, 3L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 4L,  #>     4L, 4L, 3L, 3L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 5L,  #>     5L, 3L, 5L, 4L, 3L, 4L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 3L, 4L,  #>     5L, 5L, 5L, 5L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 5L, 3L, 5L, 5L,  #>     4L, 4L, 5L, 4L, 4L, 3L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 3L,  #>     4L, 3L, 5L, 5L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 4L,  #>     5L, 4L, 5L, 4L, 4L, 4L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 4L, 3L,  #>     3L, 5L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 3L, 4L, 4L, 3L, 4L,  #>     3L, 3L, 3L, 5L, 5L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L,  #>     3L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 5L,  #>     5L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 5L,  #>     3L, 3L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 4L,  #>     3L, 4L, 4L, 3L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L, 5L,  #>     5L, 5L, 5L, 4L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 5L, 3L, 5L, 5L,  #>     4L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 3L, 4L, 5L, 4L, 5L, 4L, 3L,  #>     4L, 5L, 3L, 3L, 3L, 4L, 4L, 3L, 5L, 4L, 3L, 5L, 3L, 3L, 5L,  #>     5L, 5L, 5L, 4L, 5L, 3L, 3L, 4L, 3L, 4L, 5L, 4L, 4L, 4L, 4L,  #>     5L, 3L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 4L, 5L,  #>     5L, 5L, 4L, 4L, 5L, 3L, 3L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 3L,  #>     5L, 3L, 5L, 3L, 5L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L, 4L,  #>     5L, 5L, 5L, 3L, 4L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L, 4L, 3L,  #>     3L, 4L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 5L,  #>     5L, 3L, 3L, 4L, 5L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 3L,  #>     4L, 5L, 3L, 4L, 5L, 3L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 4L, 4L,  #>     4L, 5L, 3L, 5L, 3L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 5L,  #>     4L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 5L, 3L,  #>     5L, 3L, 5L, 4L, 3L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 5L, 3L, 4L,  #>     3L, 3L, 5L, 5L, 4L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 3L, 3L, 5L,  #>     3L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 3L, 3L, 4L, 3L, 4L, 5L,  #>     3L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 5L,  #>     4L, 4L, 3L, 3L, 5L, 3L, 5L, 3L, 5L, 3L, 4L, 3L, 3L, 5L, 4L,  #>     4L, 5L, 3L, 3L, 5L, 5L, 4L, 4L, 3L, 5L, 5L, 5L, 4L, 4L, 4L,  #>     3L, 3L, 5L, 3L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 5L,  #>     4L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 5L,  #>     4L, 5L, 4L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 5L,  #>     3L, 5L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 3L, 4L, 4L, 5L, 4L,  #>     5L, 3L, 3L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 5L,  #>     4L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 4L, 4L, 5L,  #>     3L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 3L, 3L, 4L, 5L, 5L, 4L,  #>     3L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 4L, 3L, 4L, 4L, 5L,  #>     3L, 3L, 3L, 5L, 4L, 5L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 4L, 3L,  #>     3L, 5L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 5L, 4L, 3L,  #>     3L, 3L, 4L, 5L, 4L, 5L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 5L,  #>     5L, 5L, 5L, 5L, 4L, 5L, 4L, 3L, 5L, 5L, 5L, 4L, 4L, 5L, 4L,  #>     3L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 5L,  #>     5L, 5L, 5L, 5L, 5L, 4L, 5L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 3L, 4L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 3L, 5L, 4L,  #>     3L, 5L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 4L, 5L,  #>     4L, 5L, 4L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 3L,  #>     3L, 3L, 5L, 4L, 3L, 4L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 4L, 5L,  #>     4L, 3L, 3L, 5L, 3L, 5L, 5L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 3L,  #>     4L, 3L, 4L, 3L, 5L, 3L, 3L, 4L, 4L, 3L, 5L, 3L, 4L, 3L, 5L,  #>     5L, 5L, 4L, 4L, 4L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 5L, 4L, 4L,  #>     5L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 5L, 3L, 5L, 3L, 3L, 4L, 3L,  #>     5L, 4L, 4L, 4L, 4L, 4L, 5L, 4L, 3L, 5L, 4L, 3L, 5L, 3L, 5L,  #>     5L, 4L, 4L, 5L, 3L, 4L, 4L, 4L, 3L, 3L, 4L, 4L, 3L, 3L, 5L,  #>     5L, 5L, 4L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 4L,  #>     5L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 3L, 5L,  #>     5L, 5L, 3L, 4L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 4L, 4L,  #>     5L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 4L,  #>     4L, 4L, 3L, 4L, 5L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 4L,  #>     5L, 3L, 5L, 3L, 4L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 4L, 3L, 3L, 5L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 3L,  #>     3L, 5L, 3L, 4L, 3L, 5L, 3L, 5L, 4L, 3L, 5L, 5L, 3L, 3L, 4L,  #>     3L, 4L, 5L, 4L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 4L, 4L, 3L, 4L,  #>     4L, 4L, 4L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 5L, 3L,  #>     5L, 4L, 4L, 3L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 5L, 4L,  #>     5L, 4L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 3L, 3L,  #>     5L, 4L, 3L, 3L, 4L, 4L, 3L, 3L, 5L, 4L, 5L, 5L, 3L, 5L, 3L,  #>     5L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 3L,  #>     3L, 5L, 5L, 3L, 3L, 3L, 3L, 4L, 5L, 4L, 3L, 4L, 3L, 3L, 3L,  #>     3L, 3L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 4L, 4L, 5L, 5L,  #>     4L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 5L,  #>     3L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 4L, 5L, 5L, 3L, 4L, 5L,  #>     5L, 3L, 3L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 4L,  #>     5L, 5L, 3L, 3L, 4L, 4L, 3L, 5L, 5L, 4L, 5L, 4L, 5L, 3L, 5L,  #>     5L, 5L, 4L, 4L, 5L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 4L, 4L, 4L,  #>     5L, 3L, 3L, 4L, 3L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 5L, 3L, 5L,  #>     5L, 4L, 3L, 3L, 3L, 4L, 5L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 4L,  #>     4L, 5L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 5L,  #>     4L, 4L, 3L, 5L, 3L, 5L, 3L, 4L, 4L, 5L, 5L, 5L, 4L, 5L, 5L,  #>     5L, 4L, 3L, 3L, 3L, 4L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 3L, 3L,  #>     4L, 5L, 3L, 4L, 3L, 5L, 3L, 3L, 3L, 3L, 4L, 4L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 4L, 5L, 5L, 4L, 3L, 3L, 5L, 4L, 3L, 5L, 5L,  #>     5L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 4L, 5L, 3L, 5L, 5L, 4L, 4L,  #>     4L, 5L, 4L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 3L, 5L, 3L,  #>     3L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 3L,  #>     3L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 5L, 5L, 3L, 4L, 4L, 3L, 3L,  #>     3L, 4L, 3L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 4L, 4L, 5L, 5L, 4L,  #>     3L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     4L, 3L, 3L, 3L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L, 3L,  #>     3L, 3L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 3L, 5L,  #>     5L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 4L,  #>     4L, 5L, 4L, 4L, 4L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 5L, 4L,  #>     4L, 4L, 5L, 3L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 4L,  #>     5L, 5L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 5L, 3L, 4L,  #>     4L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 5L, 4L, 3L, 5L, 5L, 3L,  #>     3L, 3L, 4L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 3L,  #>     5L, 4L, 5L, 4L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 3L, 4L, 4L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 4L, 3L,  #>     5L, 5L, 5L, 4L, 3L, 5L, 3L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 5L,  #>     4L, 5L, 5L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 4L, 3L,  #>     4L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 4L, 5L,  #>     4L, 3L, 3L, 4L, 4L, 3L, 4L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 3L,  #>     4L, 4L, 3L, 5L, 4L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 3L,  #>     3L, 4L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 5L,  #>     5L, 5L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 5L, 3L,  #>     5L, 4L, 4L, 4L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 3L, 3L, 4L, 3L,  #>     5L, 5L, 5L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 4L,  #>     5L, 5L, 4L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 5L, 3L, 4L,  #>     4L, 5L, 5L, 3L, 3L, 5L, 3L, 4L, 3L, 5L, 3L, 3L, 3L, 5L, 4L,  #>     5L, 3L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 4L, 3L, 5L, 3L, 4L, 4L,  #>     3L, 4L, 4L, 3L, 3L, 3L, 5L, 4L, 5L, 4L, 3L, 3L, 4L, 4L, 4L,  #>     3L, 4L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 3L, 3L,  #>     3L, 3L, 3L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 4L, 4L, 5L, 4L, 3L,  #>     4L, 3L, 5L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 4L, 3L, 3L, 5L, 5L,  #>     5L, 3L, 3L, 3L, 4L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 3L,  #>     4L, 5L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 4L,  #>     3L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 4L, 3L,  #>     5L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 3L, 4L,  #>     4L, 5L, 5L, 3L, 4L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 3L, 5L,  #>     4L, 3L, 3L, 5L, 4L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 4L, 5L,  #>     5L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 3L, 5L,  #>     4L, 4L, 4L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 5L, 5L,  #>     3L, 5L, 4L, 5L, 5L, 4L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 5L,  #>     4L, 5L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 4L, 5L, 4L, 4L, 5L,  #>     4L, 4L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 5L, 3L, 5L, 3L, 5L,  #>     5L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 5L, 3L, 4L,  #>     5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 4L, 3L, 4L, 4L, 5L, 4L,  #>     5L, 3L, 4L, 4L, 5L, 5L, 5L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 5L,  #>     3L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 4L, 4L, 4L, 4L, 4L,  #>     4L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 4L, 5L, 3L,  #>     3L, 5L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 5L, 4L, 4L, 4L, 3L, 5L,  #>     4L, 4L, 4L, 5L, 5L, 3L, 4L, 4L, 4L, 4L, 3L, 3L, 5L, 4L, 3L,  #>     5L, 3L, 4L, 5L, 3L, 4L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 3L, 4L,  #>     5L, 5L, 3L, 5L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 4L, 3L, 4L,  #>     4L, 5L, 5L, 4L, 4L, 5L, 3L, 5L, 5L, 4L, 3L, 5L, 4L, 5L, 3L,  #>     4L, 5L, 5L, 5L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 3L,  #>     4L, 3L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 5L,  #>     5L, 5L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 4L,  #>     3L, 4L, 4L, 5L, 5L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 4L,  #>     5L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 3L, 5L, 4L, 4L, 4L, 5L, 4L,  #>     3L, 3L, 4L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 4L, 4L, 3L,  #>     3L, 3L, 3L, 4L, 4L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 4L,  #>     3L, 5L, 5L, 3L, 4L, 3L, 4L, 3L, 5L, 4L, 4L, 5L, 4L, 4L, 5L,  #>     3L, 5L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 3L, 3L,  #>     4L, 4L, 5L, 5L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 4L, 5L, 4L, 4L,  #>     4L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L,  #>     3L, 5L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 5L,  #>     4L, 3L, 5L, 5L, 4L, 4L, 5L, 4L, 5L, 3L, 3L, 4L, 4L, 4L, 5L,  #>     5L, 4L, 3L, 3L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 5L, 4L, 5L,  #>     4L, 4L, 5L, 5L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 3L,  #>     3L, 3L, 3L, 3L, 3L, 5L, 3L, 4L, 3L, 5L, 4L, 4L, 5L, 4L, 5L,  #>     3L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 4L, 3L, 4L, 5L, 4L, 3L, 3L,  #>     5L, 5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 3L, 5L, 3L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 5L, 3L, 5L, 3L, 5L, 4L, 4L, 4L, 3L, 4L, 5L,  #>     5L, 4L, 5L, 5L, 3L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 4L, 4L, 4L,  #>     5L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 3L, 5L, 4L,  #>     3L, 5L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 3L, 4L, 4L, 5L, 5L,  #>     5L, 3L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 3L,  #>     4L, 4L, 4L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 5L, 4L, 3L, 4L, 5L,  #>     4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 5L,  #>     5L, 3L, 5L, 4L, 5L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 4L,  #>     4L, 3L, 3L, 5L, 4L, 3L, 3L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 4L,  #>     3L, 3L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 5L, 3L, 4L,  #>     5L, 4L, 4L, 5L, 5L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 4L, 3L, 3L,  #>     4L, 5L, 5L, 4L, 3L, 4L, 5L, 5L, 4L, 4L, 3L, 3L, 3L, 5L, 3L,  #>     5L, 5L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 5L,  #>     4L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 4L, 3L, 3L, 5L, 5L, 3L, 4L,  #>     4L, 4L, 5L, 5L, 3L, 5L, 3L, 4L, 3L, 4L, 4L, 3L, 5L, 3L, 4L,  #>     5L, 4L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 4L, 4L, 5L, 4L, 4L, 4L,  #>     4L, 5L, 5L, 5L, 3L, 5L, 3L, 3L, 4L, 4L, 3L, 3L, 5L, 5L, 5L,  #>     5L, 5L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 5L, 5L,  #>     5L, 5L, 5L, 4L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 5L,  #>     5L, 5L, 5L, 4L, 3L, 3L, 5L, 4L, 5L, 3L, 5L, 5L, 4L, 5L, 5L,  #>     4L, 4L, 4L, 3L, 3L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 3L,  #>     4L, 3L, 5L, 5L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 4L, 5L, 5L, 3L,  #>     5L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 3L, 5L, 4L, 5L, 5L, 4L,  #>     5L, 3L, 5L, 4L, 4L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 4L, 4L,  #>     4L, 3L, 5L, 5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 5L,  #>     3L, 3L, 4L, 5L, 4L, 5L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 3L, 5L,  #>     3L, 4L, 4L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 5L, 3L,  #>     5L, 4L, 5L, 5L, 5L, 5L, 4L, 3L, 3L, 4L, 5L, 3L, 5L, 4L, 3L,  #>     4L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 4L, 4L, 5L, 4L, 3L, 3L, 5L,  #>     5L, 5L, 3L, 3L, 5L, 3L, 5L, 3L, 4L, 4L, 5L, 3L, 3L, 3L, 3L,  #>     5L, 5L, 5L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 5L, 5L, 4L,  #>     4L, 4L, 4L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 3L, 4L, 3L, 4L, 3L,  #>     5L, 4L, 3L, 4L, 3L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 4L,  #>     3L, 5L, 5L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 3L,  #>     3L, 4L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 5L, 5L, 5L,  #>     3L, 3L, 4L, 5L, 3L, 5L, 3L, 3L, 3L, 5L, 3L, 4L, 3L, 4L, 5L,  #>     5L, 4L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 5L, 3L, 4L, 5L, 4L,  #>     5L, 3L, 3L, 5L, 5L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 5L, 5L,  #>     3L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 5L, 3L,  #>     4L, 4L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 5L, 3L, 3L, 3L,  #>     5L, 5L, 3L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 5L,  #>     4L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L, 3L, 3L,  #>     3L, 5L, 5L, 5L, 3L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 5L, 5L,  #>     5L, 5L, 5L, 4L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 5L,  #>     3L, 4L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 3L, 5L,  #>     5L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 4L,  #>     3L, 4L, 5L, 4L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 3L,  #>     5L, 4L, 5L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 3L, 3L, 4L, 5L, 5L,  #>     5L, 4L, 5L, 4L, 3L, 4L, 4L, 5L, 4L, 5L, 5L, 4L, 3L, 3L, 4L,  #>     5L, 5L, 5L, 5L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 5L,  #>     3L, 5L, 4L, 4L, 3L, 5L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 3L, 4L,  #>     5L, 5L, 4L, 3L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 3L, 4L, 5L, 3L,  #>     5L, 3L, 4L, 3L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 5L, 4L, 3L, 4L,  #>     3L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 3L, 4L, 5L, 3L, 3L, 3L,  #>     5L, 5L, 5L, 5L, 5L, 5L, 5L, 4L, 3L, 4L, 3L, 4L, 4L, 3L, 5L,  #>     5L, 3L, 5L, 5L, 3L, 3L, 5L, 5L, 5L, 3L, 5L, 3L, 5L, 4L, 3L,  #>     4L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 5L, 4L, 4L,  #>     3L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 3L, 4L,  #>     3L, 5L, 3L, 5L, 3L, 3L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 5L,  #>     4L, 3L, 3L, 3L, 3L, 5L, 3L, 3L, 5L, 3L, 4L, 4L, 3L, 3L, 5L,  #>     4L, 4L, 4L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 3L,  #>     4L, 3L, 3L, 5L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 3L, 3L, 5L,  #>     3L, 4L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 5L, 3L,  #>     4L, 5L, 5L, 4L, 3L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 3L,  #>     3L, 3L, 3L, 5L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 4L, 3L,  #>     4L, 4L, 5L, 4L, 4L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 4L, 5L,  #>     5L, 4L, 5L, 4L, 4L, 3L, 3L, 4L, 4L, 5L, 3L, 4L, 5L, 3L, 5L,  #>     5L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L,  #>     4L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 5L, 3L, 5L, 3L,  #>     5L, 4L, 4L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 4L, 3L, 4L,  #>     5L, 4L, 3L, 4L, 5L, 4L, 5L, 3L, 3L, 3L, 3L, 4L, 3L, 3L, 5L,  #>     4L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 5L,  #>     5L, 4L, 3L, 5L, 5L, 5L, 5L, 3L, 4L, 4L, 4L, 3L, 5L, 5L, 5L,  #>     5L, 3L, 4L, 5L, 3L, 4L, 4L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 3L,  #>     4L, 3L, 3L, 5L, 4L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 4L, 3L,  #>     4L, 3L, 4L, 4L, 3L, 3L, 5L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 3L,  #>     4L, 3L, 5L, 3L, 5L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 5L, 5L, 5L,  #>     3L, 3L, 4L, 3L, 4L, 4L, 3L, 5L, 4L, 4L, 4L, 3L, 4L, 3L, 5L,  #>     5L, 5L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 3L, 3L, 3L, 3L,  #>     4L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 3L, 5L, 4L,  #>     4L, 4L, 5L, 4L, 5L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 3L, 5L,  #>     3L, 3L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 5L, 3L, 4L, 3L,  #>     5L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 4L, 5L,  #>     4L, 5L, 5L, 3L, 4L, 4L, 4L, 4L, 5L, 3L, 5L, 5L, 3L, 5L, 3L,  #>     4L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 3L,  #>     5L, 4L, 3L, 4L, 3L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 3L, 3L, 5L,  #>     3L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L,  #>     5L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 5L, 4L, 4L, 4L, 5L, 5L,  #>     3L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 5L,  #>     3L, 5L, 4L, 4L, 3L, 4L, 4L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 3L,  #>     3L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 5L, 3L, 5L, 5L, 4L, 3L, 4L,  #>     5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 3L, 3L,  #>     3L, 4L, 3L, 4L, 3L, 4L, 5L, 5L, 4L, 4L, 3L, 5L, 3L, 3L, 5L,  #>     4L, 5L, 5L, 5L, 3L, 4L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 5L, 3L,  #>     3L, 4L, 5L, 4L, 4L, 5L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 3L, 3L,  #>     4L, 3L, 5L, 4L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 4L, 5L,  #>     4L, 5L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 5L,  #>     3L, 3L, 4L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 5L, 4L,  #>     5L, 5L, 3L, 5L, 5L, 4L, 5L, 3L, 5L, 4L, 4L, 4L, 5L, 3L, 5L,  #>     5L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 4L,  #>     4L, 3L, 4L, 4L, 4L, 3L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 3L,  #>     5L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 4L, 4L, 3L,  #>     4L, 5L, 4L, 4L, 3L, 4L, 5L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 5L,  #>     5L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 5L, 3L, 5L, 3L, 4L,  #>     5L, 4L, 3L, 5L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 3L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 5L, 4L,  #>     3L, 3L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 4L,  #>     5L, 5L, 4L, 4L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 4L,  #>     5L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 3L, 3L, 4L, 3L, 4L, 4L, 4L,  #>     3L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 5L, 4L, 4L, 3L, 4L,  #>     4L, 3L, 3L, 5L, 3L, 3L, 4L, 3L, 3L, 4L, 3L, 3L, 4L, 4L, 4L,  #>     3L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 4L,  #>     4L, 3L, 5L, 4L, 4L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 4L, 3L, 3L,  #>     4L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 5L, 4L, 5L, 4L, 4L,  #>     5L, 3L, 5L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 4L, 3L,  #>     5L, 4L, 5L, 5L, 4L, 4L, 4L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 5L,  #>     3L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 4L, 4L,  #>     4L, 5L, 5L, 3L, 4L, 4L, 5L, 3L, 5L, 5L, 3L, 5L, 5L, 5L, 5L,  #>     5L, 4L, 4L, 5L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 5L, 5L,  #>     3L, 5L, 3L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 3L, 3L,  #>     4L, 5L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 4L, 5L,  #>     3L, 4L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 4L, 5L, 3L, 5L, 5L, 5L,  #>     3L, 5L, 4L, 4L, 3L, 3L, 4L, 5L, 3L, 5L, 3L, 3L, 3L, 3L, 3L,  #>     4L, 3L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 3L, 3L,  #>     5L, 4L, 3L, 3L, 4L, 4L, 3L, 4L, 3L, 5L, 4L, 5L, 3L, 5L, 5L,  #>     5L, 3L, 5L, 5L, 3L, 3L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 3L, 5L,  #>     4L, 5L, 4L, 5L, 3L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 4L, 4L,  #>     3L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 5L,  #>     5L, 3L, 3L, 3L, 5L, 5L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 4L, 3L,  #>     3L, 3L, 4L, 3L, 5L, 4L, 5L, 4L, 5L, 3L, 3L, 5L, 3L, 3L, 3L,  #>     5L, 4L, 3L, 3L, 5L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 5L, 5L,  #>     4L, 5L, 4L, 3L, 5L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 3L, 4L,  #>     3L, 4L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 3L,  #>     4L, 3L, 3L, 5L, 5L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 4L, 3L, 5L,  #>     4L, 4L, 3L, 5L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 3L,  #>     5L, 5L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 3L, 5L, 3L, 4L, 3L, 3L,  #>     3L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 4L, 3L, 5L, 4L, 5L, 4L,  #>     4L, 4L, 4L, 5L, 3L, 3L, 4L, 4L, 3L, 3L, 3L, 5L, 5L, 3L, 3L,  #>     4L, 4L, 3L, 3L, 3L, 3L, 5L, 3L, 5L, 3L, 4L, 5L, 5L, 4L, 3L,  #>     4L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 5L, 3L, 4L, 3L, 4L, 4L,  #>     5L, 4L, 4L, 4L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 4L,  #>     5L, 3L, 3L, 4L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 4L, 4L, 5L, 4L,  #>     4L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 3L,  #>     4L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 5L, 4L, 4L, 4L, 4L,  #>     3L, 5L, 4L, 3L, 5L, 4L, 5L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 4L,  #>     5L, 3L, 3L, 3L, 3L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 5L, 5L,  #>     3L, 4L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 4L, 4L, 3L,  #>     5L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 5L, 3L, 3L, 3L,  #>     4L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 4L, 3L, 3L, 3L, 5L, 4L, 3L,  #>     5L, 4L, 3L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 5L, 3L, 4L, 4L,  #>     5L, 3L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 4L, 5L, 4L, 3L, 5L, 5L,  #>     5L, 4L, 3L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 4L,  #>     3L, 4L, 5L, 5L, 5L, 4L, 4L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 4L,  #>     5L, 3L, 5L, 3L, 3L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 5L,  #>     5L, 5L, 5L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L,  #>     4L, 3L, 3L, 4L, 4L, 3L, 4L, 4L, 3L, 5L, 4L, 5L, 4L, 4L, 4L,  #>     4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 5L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 3L, 5L, 4L, 4L, 5L, 5L, 5L,  #>     3L, 5L, 3L, 4L, 3L, 4L, 3L, 4L, 4L, 3L, 4L, 3L, 3L, 5L, 5L,  #>     5L, 4L, 3L, 4L, 3L, 4L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 5L,  #>     4L, 5L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 5L, 4L,  #>     4L, 5L, 5L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 3L,  #>     4L, 5L, 3L, 3L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 4L, 5L, 5L,  #>     5L, 5L, 3L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 4L,  #>     4L, 5L, 5L, 5L, 5L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 4L,  #>     3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 4L,  #>     4L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 4L,  #>     5L, 3L, 5L, 3L, 3L, 4L, 5L, 4L, 4L, 4L, 4L, 5L, 5L, 3L, 4L,  #>     3L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 3L, 5L, 4L, 5L, 3L, 3L, 3L,  #>     5L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 4L,  #>     4L, 5L, 3L, 3L, 5L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 5L, 5L, 3L,  #>     5L, 4L, 5L, 3L, 4L, 3L, 5L, 3L, 5L, 4L, 5L, 3L, 4L, 5L, 4L,  #>     3L, 3L, 5L, 4L, 4L, 4L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 3L,  #>     3L, 3L, 4L, 5L, 4L, 5L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 4L, 4L,  #>     4L, 4L, 3L, 3L, 5L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 5L, 3L,  #>     5L, 3L, 4L, 5L, 3L, 3L, 4L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L,  #>     5L, 3L, 3L, 5L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 3L, 4L, 5L,  #>     3L, 5L, 4L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 5L,  #>     4L, 5L, 3L, 5L, 3L, 4L, 5L, 3L, 4L, 3L, 3L, 4L, 4L, 3L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 4L, 4L, 4L, 3L, 5L,  #>     4L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 3L,  #>     5L, 4L, 5L, 4L, 3L, 5L, 3L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 5L,  #>     5L, 4L, 5L, 3L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 3L,  #>     4L, 5L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 3L, 4L, 4L, 4L, 5L, 4L,  #>     4L, 3L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 4L,  #>     3L, 4L, 4L, 4L, 5L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 5L,  #>     5L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 5L,  #>     4L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 5L, 5L,  #>     4L, 5L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 3L,  #>     4L, 3L, 5L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 3L,  #>     3L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 3L,  #>     5L, 5L, 5L, 3L, 3L, 4L, 3L, 4L, 5L, 5L, 5L, 3L, 5L, 3L, 4L,  #>     3L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 3L,  #>     4L, 3L, 3L, 5L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 5L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 5L, 5L, 4L, 5L, 3L, 4L, 5L, 3L, 4L,  #>     5L, 3L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 4L, 5L,  #>     3L, 4L, 5L, 3L, 4L, 5L, 3L, 4L, 3L, 5L, 3L, 4L, 3L, 3L, 5L,  #>     3L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 5L, 3L, 5L,  #>     4L, 3L, 3L, 3L, 4L, 4L, 5L, 5L, 3L, 3L, 3L, 4L, 3L, 3L, 3L,  #>     3L, 5L, 5L, 3L, 4L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 5L, 3L, 4L,  #>     5L, 3L, 4L, 4L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 5L,  #>     3L, 3L, 4L, 5L, 4L, 4L, 5L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 3L,  #>     4L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L, 3L, 4L,  #>     5L, 4L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 3L,  #>     5L, 5L, 3L, 5L, 3L, 4L, 5L, 3L, 4L, 3L, 4L, 4L, 5L, 3L, 3L,  #>     5L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 3L, 5L, 5L, 5L, 4L, 3L,  #>     5L, 5L, 5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 3L, 4L, 3L,  #>     3L, 3L, 4L, 3L, 5L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 3L, 5L,  #>     4L, 3L, 4L, 3L, 5L, 4L, 4L, 3L, 4L, 4L, 5L, 4L, 3L, 5L, 5L,  #>     4L, 3L, 5L, 4L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 3L,  #>     5L, 5L, 5L, 5L, 3L, 5L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 5L,  #>     4L, 5L, 4L, 5L, 3L, 5L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 4L, 4L,  #>     4L, 5L, 3L, 5L, 4L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 4L, 4L, 3L,  #>     3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 3L, 3L, 3L, 4L, 4L, 4L, 5L,  #>     3L, 4L, 5L, 3L, 5L, 5L, 4L, 3L, 4L, 4L, 3L, 3L, 3L, 3L, 3L,  #>     4L, 3L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 5L,  #>     3L, 5L, 4L, 5L, 5L, 3L, 5L, 3L, 3L, 5L, 4L, 5L, 5L, 5L, 3L,  #>     3L, 3L, 5L, 5L, 4L, 5L, 3L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 3L,  #>     5L, 3L, 4L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 5L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 4L, 5L, 4L, 4L, 4L, 5L, 5L, 4L, 3L, 3L, 4L, 4L,  #>     4L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L,  #>     3L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 3L, 5L, 3L,  #>     5L, 5L, 3L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 4L,  #>     5L, 4L, 4L, 5L, 4L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 4L, 5L,  #>     4L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 5L,  #>     5L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 4L,  #>     5L, 4L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 5L, 5L, 3L, 3L, 5L, 5L,  #>     4L, 5L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 4L, 3L, 3L,  #>     5L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 4L, 4L, 5L, 3L, 5L, 4L, 3L,  #>     4L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 4L, 4L, 5L, 5L, 3L,  #>     5L, 4L, 3L, 4L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 3L, 4L, 4L, 3L,  #>     5L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 3L,  #>     5L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 3L,  #>     4L, 5L, 3L, 5L, 4L, 4L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L,  #>     4L, 5L, 3L, 5L, 5L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L,  #>     5L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 5L, 5L, 4L, 3L, 5L,  #>     5L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 5L,  #>     3L, 4L, 4L, 3L, 4L, 4L, 3L, 5L, 3L, 3L, 3L, 4L, 5L, 4L, 4L,  #>     4L, 4L, 4L, 3L, 4L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 3L, 5L, 5L,  #>     4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 5L, 4L, 5L, 5L,  #>     4L, 4L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 4L, 3L, 4L, 5L, 5L,  #>     3L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L,  #>     5L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 5L,  #>     4L, 4L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 4L, 5L, 4L,  #>     5L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 5L, 3L,  #>     4L, 3L, 3L, 5L, 4L, 5L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 3L,  #>     3L, 4L, 5L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 5L, 4L, 5L,  #>     5L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 4L, 4L,  #>     4L, 4L, 5L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 3L, 4L, 4L, 5L,  #>     3L, 4L, 3L, 5L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 4L,  #>     3L, 5L, 5L, 5L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 3L, 5L,  #>     5L, 5L, 4L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 3L, 3L, 4L, 5L, 4L,  #>     3L, 5L, 3L, 3L, 5L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 4L, 3L,  #>     4L, 4L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 4L, 3L, 5L, 3L, 4L, 3L,  #>     4L, 5L, 3L, 3L, 3L, 4L, 4L, 5L, 5L, 3L, 4L, 4L, 3L, 3L, 3L,  #>     3L, 4L, 5L, 3L, 4L, 3L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L,  #>     4L, 4L, 3L, 4L, 4L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 4L, 5L,  #>     4L, 3L, 3L, 5L, 4L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 3L,  #>     5L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 5L, 5L, 3L, 5L, 5L, 4L, 5L,  #>     3L, 3L, 5L, 5L, 3L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 4L, 3L, 5L,  #>     5L, 3L, 5L, 4L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 5L, 4L, 5L,  #>     3L, 4L, 4L, 3L, 4L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 5L,  #>     3L, 5L, 5L, 5L, 3L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 5L, 5L, 4L,  #>     3L, 4L, 3L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 3L,  #>     4L, 5L, 5L, 3L, 5L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 4L, 3L,  #>     3L, 4L, 5L, 3L, 5L, 5L, 4L, 5L, 4L, 4L, 5L, 5L, 3L, 4L, 3L,  #>     5L, 5L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 4L, 5L, 3L,  #>     4L, 5L, 5L, 4L, 4L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 4L, 5L, 5L,  #>     5L, 5L, 5L, 3L, 3L, 5L, 3L, 3L, 4L, 3L, 4L, 5L, 4L, 5L, 4L,  #>     3L, 5L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 4L, 4L, 5L, 3L, 5L, 5L,  #>     5L, 3L, 5L, 3L, 4L, 5L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 3L, 3L,  #>     5L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 5L, 3L, 3L,  #>     4L, 4L, 5L, 3L, 3L, 4L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 5L,  #>     3L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 5L,  #>     3L, 3L, 4L, 5L, 3L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     4L, 3L, 3L, 4L, 3L, 3L, 5L, 3L, 3L, 4L, 4L, 4L, 3L, 3L, 3L,  #>     5L, 3L, 3L, 5L, 4L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 4L,  #>     3L, 4L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 3L, 5L,  #>     5L, 4L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 4L,  #>     5L, 4L, 5L, 5L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 5L,  #>     4L, 3L, 4L, 3L, 3L, 5L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 3L,  #>     3L, 4L, 4L, 3L, 4L, 5L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 5L,  #>     4L, 4L, 3L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 5L, 5L,  #>     4L, 4L, 3L, 3L, 4L, 4L, 5L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 4L,  #>     5L, 4L, 3L, 3L, 5L, 4L, 3L, 3L, 4L, 3L, 3L, 4L, 3L, 4L, 4L,  #>     5L, 5L, 4L, 5L, 3L, 3L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 5L, 5L,  #>     5L, 5L, 5L, 5L, 5L, 5L, 4L, 3L, 3L, 4L, 5L, 3L, 3L, 3L, 5L,  #>     5L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 5L, 5L,  #>     4L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 4L, 5L, 3L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 3L, 3L,  #>     4L, 5L, 3L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 4L, 5L, 4L, 5L, 3L,  #>     5L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 3L,  #>     3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 3L,  #>     4L, 3L, 3L, 5L, 4L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 5L, 4L, 4L,  #>     4L, 3L, 4L, 4L, 5L, 3L, 4L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 5L,  #>     4L, 5L, 3L, 5L, 5L, 4L, 5L, 3L, 5L, 5L, 3L, 4L, 3L, 3L, 5L,  #>     5L, 5L, 3L, 3L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 5L,  #>     3L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 3L, 4L,  #>     3L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 4L,  #>     4L, 4L, 4L, 4L, 5L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 5L, 3L, 5L,  #>     3L, 4L, 5L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 3L,  #>     5L, 5L, 3L, 5L, 4L, 4L, 3L, 3L, 3L, 3L, 5L, 5L, 3L, 5L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 4L,  #>     3L, 4L, 3L, 3L, 3L, 4L, 3L, 3L, 4L, 5L, 3L, 3L, 3L, 3L, 4L,  #>     3L, 4L, 4L, 4L, 3L, 3L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L,  #>     4L, 5L, 3L, 3L, 3L, 3L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 4L, 5L,  #>     3L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 4L, 5L, 3L, 5L, 5L,  #>     5L, 3L, 5L, 3L, 3L, 5L, 3L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 5L,  #>     5L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 4L, 3L,  #>     4L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 5L, 3L, 5L, 4L, 4L, 4L,  #>     5L, 5L, 4L, 4L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 5L,  #>     3L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 3L, 4L,  #>     4L, 4L, 3L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 4L, 3L, 5L, 5L, 5L,  #>     4L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 5L, 5L,  #>     5L, 4L, 3L, 4L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 4L, 5L,  #>     4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 4L,  #>     3L, 3L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 5L,  #>     5L, 4L, 5L, 4L, 4L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 4L,  #>     5L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 3L,  #>     4L, 5L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 4L, 4L, 5L, 5L, 4L,  #>     4L, 5L, 3L, 3L, 3L, 4L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 3L, 4L,  #>     5L, 5L, 4L, 3L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 3L, 5L, 4L, 4L,  #>     5L, 3L, 5L, 3L, 5L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 3L,  #>     3L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 5L, 4L,  #>     3L, 4L, 5L, 3L, 5L, 3L, 5L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 4L,  #>     3L, 4L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L, 3L, 4L, 4L, 5L, 4L,  #>     3L, 3L, 3L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 4L, 5L,  #>     5L, 5L, 4L, 5L, 4L, 3L, 5L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 5L,  #>     5L, 4L, 5L, 5L, 5L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 4L, 5L,  #>     5L, 5L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 4L, 3L, 3L, 5L, 3L,  #>     4L, 4L, 3L, 5L, 3L, 4L, 4L, 4L, 4L, 3L, 4L, 5L, 3L, 5L, 3L,  #>     5L, 3L, 4L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 4L, 5L, 3L, 5L,  #>     4L, 3L, 4L, 4L, 5L, 5L, 3L, 3L, 4L, 4L, 5L, 3L, 3L, 5L, 3L,  #>     5L, 5L, 3L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L,  #>     4L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 4L,  #>     5L, 3L, 5L, 4L, 5L, 3L, 3L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 3L,  #>     5L, 5L, 5L, 5L, 4L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L,  #>     5L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 4L, 4L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 5L,  #>     3L, 4L, 4L, 3L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 4L,  #>     4L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L,  #>     5L, 4L, 5L, 4L, 5L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 4L, 3L, 4L,  #>     3L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 3L, 3L,  #>     5L, 5L, 3L, 3L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 4L, 4L, 5L,  #>     3L, 5L, 5L, 4L, 3L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 5L, 3L,  #>     5L, 5L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 5L, 4L, 3L, 4L,  #>     5L, 3L, 5L, 4L, 3L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 5L, 5L, 5L,  #>     4L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 5L,  #>     5L, 4L, 5L, 5L, 3L, 5L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 4L,  #>     3L, 5L, 5L, 5L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 4L,  #>     4L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 3L, 3L, 5L, 3L, 3L, 3L, 3L,  #>     4L, 5L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 4L, 4L, 3L,  #>     5L, 4L, 4L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 5L,  #>     4L, 4L, 4L, 4L, 5L, 3L, 4L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 4L,  #>     5L, 5L, 4L, 4L, 4L, 5L, 5L, 3L, 3L, 4L, 4L, 5L, 5L, 5L, 5L,  #>     5L, 5L, 3L, 3L, 4L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 4L, 5L,  #>     5L, 4L, 4L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 5L, 3L, 3L, 5L, 5L,  #>     5L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 3L, 5L, 4L,  #>     4L, 4L, 3L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 5L,  #>     3L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 5L, 5L,  #>     5L, 3L, 4L, 3L, 5L, 5L, 3L, 5L, 3L, 3L, 4L, 5L, 3L, 5L, 5L,  #>     4L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 5L,  #>     4L, 3L, 4L, 3L, 4L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 4L, 3L, 4L,  #>     5L, 5L, 5L, 4L, 4L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 5L,  #>     4L, 4L, 4L, 4L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 3L, 4L,  #>     3L, 5L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 3L,  #>     4L, 5L, 4L, 4L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 4L, 4L,  #>     4L, 3L, 3L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L,  #>     5L, 5L, 4L, 4L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 5L,  #>     3L, 5L, 3L, 3L, 4L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L, 4L,  #>     4L, 5L, 3L, 3L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L,  #>     3L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 4L,  #>     3L, 3L, 5L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 5L,  #>     3L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 4L,  #>     4L, 5L, 3L, 5L, 3L), gpa = c(3.2, 1.6, 3.4, 3.9, 2.1, 2.6,  #>     1.4, 2.4, 2.3, 2.3, 2.6, 3, 2.3, 3.3, 3.7, 2.8, 2.8, 2.8,  #>     2.2, 3, 3.1, 3, 3.8, 3.1, 1.3, 3.3, 3.2, 2.6, 3.4, 3, 3.6,  #>     3.1, 1.7, 3.6, 3.6, 3.6, 3.7, 2, 3.3, 3.5, 2.7, 1.2, 3.7,  #>     3.9, 2.1, 3.1, 1.3, 2.4, 3.6, 3.3, 3.6, 3.9, 2.6, 3.1, 2.8,  #>     2.8, 3.3, 2.4, 3.3, 1, 2.9, 3.9, 1.2, 3.8, 3.2, 2.8, 2.3,  #>     3, 3.2, 2.3, 3.7, 3.9, 2.9, 3.4, 2.9, 2.5, 3.6, 3.5, 2.7,  #>     3.5, 2.5, 2.5, 2.1, 2.8, 1.8, 2.8, 3.7, 3.1, 3.1, 3.1, 3.6,  #>     2.8, 2.5, 1.9, 3.3, 3.3, 3.6, 2.3, 3.1, 3.3, 2.4, 3.1, 2.9,  #>     3.2, 3.6, 3.8, 3.4, 2.6, 2.9, 3.6, 3.6, 2.2, 2.7, 3.2, 3.2,  #>     3.3, 2.4, 3, 2.9, 2.2, 3.5, 3.7, 2, 3.5, 3.1, 2.7, 3.3, 2.6,  #>     2.8, 3, 3, 2.6, 2.6, 3.1, 2.6, 2.9, 1.4, 3.6, 2.6, 2.8, 2.9,  #>     2.8, 3.1, 3.9, 1.4, 3.5, 2.5, 2.7, 3.1, 2.3, 3.3, 3.4, 3.5,  #>     2.5, 3, 3.3, 3.3, 3.4, 2.3, 3, 3.1, 2.3, 2.3, 2.9, 3.1, 2.5,  #>     3.6, 2.5, 1.9, 3, 2.8, 2.4, 3, 3.4, 3.5, 2.9, 2.8, 3.4, 2.1,  #>     3.7, 2.8, 3.6, 3.6, 3.2, 2.4, 2.3, 2.9, 3.3, 2.9, 3.5, 2.5,  #>     2.4, 3.3, 3, 2.6, 2.7, 2.5, 3.5, 3, 2.7, 2.5, 3.4, 3.2, 3.1,  #>     2.3, 3.1, 3.2, 2, 3.1, 3, 3.7, 2.6, 3.3, 2.9, 1.9, 2.6, 3.4,  #>     3.3, 2.3, 3.1, 2.3, 1.6, 2.2, 3.1, 3.6, 3, 3.7, 3.2, 3.1,  #>     1.8, 2.5, 3.2, 3.4, 2.8, 2.9, 2.1, 1.5, 3, 2, 3.7, 2.6, 2.3,  #>     3.8, 3.4, 2.5, 2.6, 3.7, 3, 2.1, 1.8, 3.3, 3.5, 2.2, 2.7,  #>     3, 3.6, 3.7, 2.1, 2.6, 3.1, 2.4, 2.7, 3.2, 1.5, 1.6, 3.5,  #>     2, 2.3, 3.7, 2.4, 1.6, 2, 3.3, 3.8, 2.2, 3.1, 2.4, 3.9, 2.5,  #>     2.6, 1.3, 3.5, 2.7, 3.3, 1.8, 3, 2, 2.2, 3.2, 2.1, 2.5, 1,  #>     2.2, 3.1, 2, 3.7, 2.8, 2.6, 3.1, 3.9, 2.5, 2.7, 3.9, 2.7,  #>     1.4, 1.7, 3.4, 3.7, 3.3, 1.9, 2.1, 3, 3.3, 2.3, 3.3, 3.5,  #>     3.6, 3.2, 2.9, 1.7, 2.5, 3.7, 2.6, 3.7, 1.8, 1, 3.7, 3.2,  #>     2.5, 1.6, 2.1, 2.7, 3.7, 3.7, 3.3, 1.8, 3.6, 3.8, 3.5, 3,  #>     3.5, 3.4, 2.9, 2.3, 2.5, 2.2, 1.9, 3.6, 2.5, 3.3, 3.5, 2.4,  #>     3.4, 3.3, 2.4, 3.5, 3.2, 2.4, 3.7, 2.6, 1.2, 1.8, 2.2, 3.3,  #>     3.7, 3.6, 3.8, 2.8, 2.9, 2.6, 3.6, 3, 2.6, 3.3, 3.2, 3.8,  #>     3.2, 3, 2.5, 2.7, 3, 2.4, 3.6, 2.8, 3.5, 3.3, 2.7, 3.2, 2.9,  #>     2.8, 3.7, 3.1, 2.6, 2.8, 2.1, 3.9, 2.5, 1.9, 3.1, 3.4, 3.6,  #>     1.5, 3.3, 2.4, 2.8, 3.1, 3.8, 3.7, 3.9, 3.4, 3.5, 2.8, 2.5,  #>     3.3, 1.8, 3.6, 2.9, 1.7, 3.3, 3.2, 3.4, 2.9, 3.8, 3.2, 2.5,  #>     1.8, 3.4, 3.1, 2.4, 3.6, 3.7, 3.3, 2.7, 1.5, 1.8, 3.3, 2.1,  #>     3.4, 3, 2.1, 2.5, 3.2, 3.2, 1.9, 2.9, 2.8, 3, 3.1, 3.2, 2.8,  #>     3.4, 1.5, 3.4, 3.5, 3.9, 2.6, 3.5, 3.5, 3.4, 3.4, 3, 3.4,  #>     3.4, 3.1, 2.5, 1.8, 3.1, 2.9, 3.8, 3.5, 2.5, 2.2, 2.5, 2,  #>     3.3, 2.4, 3.4, 3.7, 2.1, 1.7, 3.8, 3.2, 2.1, 2.9, 3.6, 3.2,  #>     2.8, 3.4, 2.4, 3.6, 3.8, 2.2, 2.7, 2.9, 1.2, 1.5, 3, 3.4,  #>     3.4, 2.4, 3.6, 3.4, 2.7, 3.1, 3, 3.6, 2.2, 2.4, 3.4, 3.3,  #>     3.2, 3.1, 1.4, 1.7, 3.4, 2.1, 2.4, 3.3, 3, 2, 3.5, 3.2, 3.3,  #>     3, 3.6, 2.8, 3.6, 1.9, 2.6, 3.8, 3.1, 2.6, 3.3, 3.1, 3, 2.7,  #>     1.6, 3.6, 2.7, 1.7, 2.9, 3.5, 3.2, 3.2, 3.3, 1.9, 2.3, 3.4,  #>     2, 3, 2.5, 3.1, 3.5, 2.5, 3.2, 3.1, 2.7, 2.7, 2.2, 2.3, 2.8,  #>     3.3, 3.8, 3.4, 2.9, 3, 2.7, 3.4, 2.9, 3.8, 3.6, 3.1, 2.4,  #>     3.1, 3.4, 3.5, 3.6, 2, 2.6, 3.9, 2.4, 2.1, 2.9, 3.5, 3, 2.1,  #>     3.4, 2.1, 3, 2.8, 1.9, 2.2, 2, 1.4, 3.4, 3.3, 2.9, 2.7, 2.8,  #>     2.4, 3.6, 3.6, 2.4, 3.5, 3.1, 2.7, 3.1, 3.1, 1.5, 2.7, 2.4,  #>     3, 3, 3.5, 3.2, 3.3, 2.4, 3.3, 2.1, 2.9, 2.3, 3.6, 3, 3,  #>     1.2, 3.7, 1.7, 1.3, 2.8, 2.7, 3.4, 3.6, 3.4, 2.6, 2.7, 1.6,  #>     2.6, 0.9, 3.4, 3.2, 1.7, 3.2, 3.9, 3.6, 3.2, 2.3, 2, 3.3,  #>     3.1, 3.6, 2.5, 3.4, 2.8, 3.6, 3.5, 2.4, 2.6, 3.5, 3.4, 2.8,  #>     1.4, 2.7, 2.7, 3.4, 2.9, 3.1, 2.1, 1.4, 2.4, 3.4, 2.8, 2.8,  #>     3.1, 2.3, 3.2, 3.7, 3.2, 3.2, 3.3, 3.5, 3.3, 3.1, 3.5, 3.7,  #>     2.3, 3, 3.5, 3.6, 3.1, 2.4, 3, 3.7, 3.1, 3.4, 3.2, 1.8, 3.5,  #>     4, 2.6, 2.9, 3.5, 3.7, 3.9, 3.6, 2.2, 3.3, 3.3, 3.9, 2.8,  #>     3.5, 2.7, 2, 2.5, 2.7, 3.4, 1.8, 3.3, 3.7, 3.9, 3.4, 2.9,  #>     2.3, 2.7, 3.2, 2.8, 2.8, 3.4, 3, 3.1, 2.9, 2.4, 3.3, 3.7,  #>     3.2, 3.7, 2.5, 2.8, 3.1, 3.4, 1.9, 2.8, 2.2, 1.5, 2, 3.6,  #>     2.7, 3.1, 3, 2.6, 2.1, 3.3, 2.9, 3.3, 3.3, 2.7, 3.1, 3.3,  #>     2.2, 2.4, 3.6, 2.9, 3.4, 3.4, 3.4, 2.8, 2.9, 2.6, 3.1, 3.2,  #>     3.3, 2.5, 3.4, 2.9, 2.3, 1.7, 3.9, 1.7, 3.8, 2.3, 2.2, 2.7,  #>     2.8, 2.7, 3.3, 2.6, 1.9, 3.6, 3, 2.6, 1.3, 2.4, 3, 2.6, 2.8,  #>     3, 3.4, 3.8, 3.4, 2.9, 2.5, 3.4, 3.4, 2.5, 3.4, 3, 2.2, 3.6,  #>     2.5, 2.1, 2.4, 2.9, 2.3, 2.7, 2.5, 3.6, 2.7, 3.9, 2.7, 1.6,  #>     3.9, 3.6, 2.8, 1.8, 2.2, 2.4, 1.2, 2.3, 3.2, 3.7, 2.7, 2.9,  #>     2, 2.9, 3, 2.6, 3.1, 3.1, 2.1, 3.6, 3.4, 3.8, 3.7, 1.8, 1.8,  #>     2.7, 3.2, 3.5, 3.6, 2.6, 3.2, 3.9, 3.1, 3.8, 3.5, 1.8, 2.8,  #>     3.1, 3.1, 2.2, 1.8, 3.4, 3.3, 2.9, 3.7, 2.3, 3.3, 3.6, 2,  #>     3.4, 2.7, 2.8, 3.2, 2.9, 2.9, 1.8, 3.2, 1.1, 1.9, 3.6, 2.9,  #>     3.2, 3.8, 1.6, 2.6, 3.3, 2.2, 3.1, 2.6, 2.6, 2.7, 1.3, 0.6,  #>     3.2, 2.2, 2.5, 3.3, 3.6, 3.5, 2.5, 3.4, 3.7, 2.8, 3.7, 3.7,  #>     1.8, 1.9, 3.7, 2.8, 2.8, 2.5, 3.8, 3.7, 3.6, 1.3, 4, 3.5,  #>     2.3, 1.8, 2.7, 2.9, 2.6, 2.1, 2.8, 3, 2.4, 2.6, 2.7, 2, 3.5,  #>     2.4, 2.3, 2.3, 3.5, 2.9, 3.2, 3.1, 2.3, 2.2, 3.5, 2.9, 2.6,  #>     3.2, 1.5, 3.7, 2.5, 3, 3.2, 3.3, 3.1, 3.1, 2.7, 3.9, 1.1,  #>     2.4, 3.7, 3.3, 3.6, 3.4, 2.1, 2, 2.6, 2.6, 3, 3.5, 1.3, 3.5,  #>     3.8, 3.4, 2.2, 2.2, 3.4, 2.9, 1.5, 3, 3.7, 3.1, 3.3, 3.5,  #>     3, 2.7, 3.2, 3.9, 2.8, 2.1, 3.6, 3.4, 2.8, 3.7, 2.1, 2.7,  #>     3.7, 3.1, 2.7, 1.5, 2.5, 2.6, 1.8, 3.4, 3.5, 3, 3, 3.8, 2.4,  #>     3.2, 3, 2.9, 3.3, 0.9, 2.7, 3.8, 2.7, 1.3, 3.4, 3, 2.2, 3.1,  #>     3.1, 2.6, 3, 2.6, 2.5, 1.7, 2.7, 2.4, 0.8, 2.5, 3.9, 3.2,  #>     2.1, 3.5, 2.6, 2.9, 3.5, 2.5, 3.4, 3.5, 3.5, 2.9, 2.5, 3.4,  #>     3.9, 3.4, 3.9, 3.8, 1.9, 2, 3.3, 3.2, 3.2, 2.9, 1.5, 1.9,  #>     2.6, 2.3, 3.6, 3.1, 3.8, 2.7, 3.7, 1.8, 3, 3, 3.8, 1.9, 3.7,  #>     3.4, 1.6, 1.1, 2.8, 1.1, 3, 3.5, 3, 3, 3.4, 2.2, 2.3, 2.5,  #>     3.5, 3, 2.9, 2.3, 3.2, 1.9, 3.6, 3.2, 3.1, 3, 3.1, 2.9, 3.7,  #>     1.8, 3.5, 3.4, 3.7, 2.8, 3.1, 2.6, 3.3, 2.4, 3.3, 3.3, 3.5,  #>     2.1, 3.5, 3.2, 2.5, 3.3, 2.5, 2.5, 1.7, 2.3, 3.3, 2.9, 2.2,  #>     1.4, 2.1, 3.6, 2.4, 2.6, 3.3, 3.6, 2.8, 1.3, 1.9, 3.2, 2.8,  #>     2.5, 3.4, 2, 3.3, 2.4, 3.7, 2.4, 3.2, 2.9, 2, 2.7, 3.8, 2.3,  #>     3.3, 3.8, 2.3, 3.7, 3, 3.5, 2.5, 2.1, 1.9, 1.8, 3.4, 3.8,  #>     3.5, 3, 3.3, 2.9, 2.6, 1.8, 2.5, 3.1, 3.3, 3.7, 2.2, 3.1,  #>     2.4, 2.3, 3.3, 3.7, 3.8, 3.5, 3.5, 3.1, 3.6, 2.3, 2.2, 2.6,  #>     2.5, 3.2, 3, 3.3, 2.9, 3.5, 2.9, 3.3, 2.7, 2.5, 2.6, 2.6,  #>     2.4, 3.9, 1.8, 3.4, 3.6, 3.4, 2.9, 1.9, 3.1, 3.5, 4, 3.6,  #>     1.7, 2.3, 3, 2.7, 3.2, 2.5, 3.1, 3.5, 2.7, 3.9, 3.1, 2.1,  #>     3.1, 3.2, 2, 3, 3.1, 2.9, 3.8, 2.6, 3.7, 3.9, 3.5, 2.1, 3.1,  #>     3.7, 3.7, 2.5, 2.7, 2.3, 1.8, 3.6, 1.4, 3.6, 2.2, 2.4, 3.5,  #>     2.7, 2.7, 3.6, 3.1, 3.8, 3.4, 3, 3.2, 1.9, 2.3, 3.3, 3.5,  #>     3.4, 3.1, 2.7, 3.8, 1.9, 3.8, 3.6, 2.4, 1.5, 3.5, 3, 1.9,  #>     2.9, 2.4, 2.7, 3.3, 3.4, 2.9, 3.5, 3, 3.2, 3.9, 2.4, 2.4,  #>     3.2, 2.8, 3.3, 3.7, 1.9, 2.3, 3.3, 3.4, 3.6, 2.4, 3.7, 2.5,  #>     3.3, 1.7, 2.9, 2.8, 3.4, 1, 2.8, 2.9, 3.3, 2.7, 3.8, 3.3,  #>     2.3, 2.2, 3.5, 1.8, 2.9, 3.2, 3.1, 3.7, 3.3, 2.8, 1.9, 3.7,  #>     3, 3.1, 2.4, 1.6, 2, 3.6, 3, 2.9, 3.2, 3.3, 2.5, 2.5, 3.1,  #>     2.7, 2.4, 2.9, 3.2, 2.7, 3.7, 3.3, 3.6, 2.5, 1.4, 2.3, 3.1,  #>     3.4, 3.7, 3.3, 3.4, 3.2, 2.9, 3.5, 3.5, 3.1, 3.3, 3.6, 3,  #>     2.6, 3.5, 3.7, 3.5, 3, 2.9, 2.9, 2.2, 2.8, 3, 3, 3.2, 3,  #>     3, 2.6, 3.5, 2.8, 2.4, 2.2, 2.5, 3.7, 3.7, 3.7, 3.9, 3.8,  #>     3, 3, 3.2, 2.1, 3.8, 3.2, 3.2, 2.5, 3.1, 2.9, 2.5, 3.2, 1.3,  #>     2.9, 3, 1, 2.6, 3.3, 2.4, 1.8, 2.9, 3.8, 3.4, 1.6, 2.2, 3.5,  #>     3.6, 3.2, 1.3, 3.3, 1.2, 3.6, 2.8, 3.3, 3.1, 1.6, 1.7, 3.3,  #>     3.8, 2.6, 3.5, 3.6, 2.1, 2.7, 2.9, 2.1, 3.4, 3.4, 3, 3.1,  #>     2.4, 3, 2.8, 2, 1.9, 2.1, 2.4, 2.4, 3.3, 2.1, 1.4, 2.2, 3.1,  #>     2, 3.2, 3, 3.3, 3.1, 2.6, 3.6, 3.2, 2.2, 3.6, 2.8, 2.8, 2.6,  #>     3.2, 3.4, 2.8, 3.2, 2.4, 1.7, 3.3, 3.7, 3.1, 3, 2.1, 2.9,  #>     3.7, 3.8, 2.2, 2.3, 2.7, 2.1, 2.7, 3.4, 2.4, 3, 3.1, 3.2,  #>     3, 2.7, 3.7, 3.2, 3.6, 3.3, 3.2, 3.1, 3.3, 2.3, 3.7, 3.1,  #>     2.8, 3, 3.2, 3.2, 3.3, 3, 3.3, 3.2, 1.6, 2.9, 3.7, 3.7, 3.2,  #>     2.7, 2.7, 3.8, 2.4, 2.6, 3.3, 3.5, 3.2, 2.9, 2.5, 2.9, 3.3,  #>     2.1, 3.4, 3.4, 3.2, 3.8, 2.3, 2.9, 3.5, 3, 2.5, 3.4, 2.4,  #>     2.1, 3.3, 1.9, 3, 3.1, 3.3, 2.8, 3.8, 1.7, 3, 3, 3, 2.1,  #>     3.3, 3.1, 3, 2.8, 3.6, 2, 2.7, 2, 2.9, 0.9, 3.3, 3.5, 1.2,  #>     3, 2.5, 1.1, 3, 2.4, 3, 3.2, 3.5, 1.2, 2.4, 3.4, 2.6, 2.9,  #>     2.2, 2.4, 2.5, 3.3, 3.1, 2.9, 2.8, 3.3, 2.3, 3.1, 1.2, 1.9,  #>     3.6, 3.3, 3.5, 3.2, 3.3, 2.7, 3.4, 3.7, 2.7, 3.5, 2.3, 3,  #>     2.4, 2.4, 2.9, 2.6, 3.6, 2.1, 3.7, 3.1, 2.7, 3.1, 3.3, 2.3,  #>     2.5, 2.7, 2.8, 2.3, 3, 3.4, 3.4, 1.6, 3.8, 2.8, 3.3, 3.5,  #>     3.1, 3, 3.7, 3.2, 1.5, 2.9, 2.7, 2.6, 2.8, 1.1, 2.5, 2.8,  #>     2, 3.9, 3.5, 2.5, 2, 3.8, 2.2, 3.3, 3.1, 3.3, 3.3, 3.6, 2.5,  #>     1.4, 2.3, 3.8, 2.4, 3.6, 2.6, 1.5, 3.1, 2.3, 3.7, 2.8, 3.1,  #>     1.9, 3.7, 3, 2.9, 3.7, 3.2, 1.1, 3.4, 1.9, 3.1, 1.9, 2.7,  #>     2.9, 0.9, 3, 4, 2.7, 2, 2.1, 1.4, 2.8, 2.7, 2.2, 3.7, 2.8,  #>     2, 3.7, 2.4, 3.7, 2, 2.5, 2, 3.1, 3.3, 3.3, 1.9, 3.1, 3.3,  #>     1.7, 2.6, 2.6, 3.5, 2.1, 2, 1.8, 3.4, 3.9, 1.6, 3.4, 2.5,  #>     2.3, 3.8, 2.6, 2.8, 3.7, 2.4, 2.8, 3, 1.7, 2.7, 3.4, 2.4,  #>     2.9, 1, 2.9, 2.3, 3.3, 2.3, 2.9, 2.5, 3.3, 2.9, 2.1, 3.8,  #>     3.4, 2.4, 3.1, 3.6, 2.6, 2.7, 2.3, 3.6, 3.5, 2.6, 2.8, 2.1,  #>     3.7, 3.3, 2, 3.5, 3.5, 2.7, 2.1, 3.1, 3.1, 2.5, 2.8, 2.6,  #>     3.1, 1.4, 2.6, 1.8, 3.3, 2.2, 3.1, 2.8, 2.5, 2.4, 2, 3.6,  #>     2.3, 3.8, 2.1, 2.9, 2.1, 2.4, 3.1, 3.3, 3.9, 2.1, 2.8, 2.5,  #>     2.7, 3.6, 3.2, 3.3, 1.6, 2.5, 2, 2.7, 3.6, 2.8, 3.5, 3.2,  #>     3.3, 3.4, 3.6, 2.1, 2.8, 2.5, 2.9, 2.8, 2.2, 1.8, 3, 2.6,  #>     2.1, 2.3, 3.1, 2.2, 3.3, 2.4, 2.9, 2.8, 2.3, 2.1, 3.1, 3.3,  #>     3.1, 3.9, 3.5, 2.8, 1.9, 3.2, 3.6, 2.5, 2.6, 3.2, 3.1, 2.9,  #>     2.8, 2.6, 3.8, 2.8, 2.1, 3.5, 2.9, 2.5, 2.2, 1.1, 3.6, 2.9,  #>     3.6, 2, 3.7, 3.7, 3.4, 2, 3.8, 1.9, 3, 3.4, 3.2, 3.1, 2.6,  #>     3.4, 3.3, 1.6, 3.7, 3.1, 3.1, 2.8, 3.3, 0.9, 3.4, 3, 3, 2.4,  #>     3.4, 3, 3.6, 3.8, 2.4, 3.8, 2.4, 2.5, 3, 3.5, 2.9, 1.5, 3,  #>     2.5, 3.4, 3.1, 2.4, 3.4, 2.2, 2.4, 3.8, 3.1, 3.1, 3.3, 2.7,  #>     2, 2.4, 2.5, 3.4, 3.4, 3.7, 3.7, 2.7, 3.4, 3.7, 3.6, 2, 3.3,  #>     2.6, 3.2, 3.2, 3.3, 2.5, 3.4, 2.5, 3.2, 3.7, 3.4, 3.6, 1.8,  #>     1.7, 2.5, 2.4, 3.1, 2.6, 3.4, 3.1, 2.7, 2.8, 3.2, 3.1, 1.5,  #>     2.5, 3.2, 2.9, 3.5, 3, 2.5, 2.5, 3.3, 3.8, 3.4, 3.1, 1.8,  #>     3, 2.9, 1.8, 2.6, 2.5, 3.7, 2.7, 3.1, 3.5, 2.4, 3, 3.2, 1.6,  #>     2.7, 3.5, 1.5, 2.3, 2.7, 3.6, 3.9, 3.3, 3.5, 2, 3.1, 2.6,  #>     3.2, 3.7, 2.9, 3.1, 2.3, 3.3, 2.4, 3.2, 3.1, 3.6, 3.2, 3.9,  #>     1.2, 2.9, 3.2, 3.3, 2.1, 3.2, 2.7, 3.1, 2.7, 2.7, 3.5, 2.9,  #>     1.4, 3.8, 3.7, 2.3, 2, 2.1, 2.5, 2, 3.9, 3.3, 3.2, 3.1, 2.7,  #>     2.6, 3.5, 1.8, 2.1, 3.3, 3.7, 3.5, 1.6, 2.5, 2, 2.3, 2.8,  #>     2.2, 3.3, 3.5, 2.9, 3.2, 3.5, 2.3, 2.6, 2.6, 3.1, 3.3, 2.4,  #>     2.8, 1.9, 3.3, 3.9, 2.9, 2.5, 2.9, 2.9, 3.3, 3.4, 2.2, 3.1,  #>     2.2, 2.8, 3, 3.5, 2.7, 2.7, 1.7, 3.1, 1.5, 3.3, 3.3, 3.8,  #>     3.3, 2.2, 3.9, 2.3, 3.2, 1.6, 3.7, 3.2, 3.5, 3.7, 1.8, 3.7,  #>     3.6, 1.3, 2.1, 1.8, 2.5, 3.1, 3.9, 2.8, 3.1, 2.9, 3.2, 2.7,  #>     2.8, 2.4, 2.9, 3.5, 2.5, 2, 3.1, 3, 3.6, 3.9, 3.1, 3.6, 2.3,  #>     2.3, 1.8, 1.7, 1.8, 2.7, 3.5, 2.7, 2.6, 1.8, 2.7, 3.1, 3.1,  #>     3, 3.5, 2.4, 2.7, 2.6, 2, 3.7, 3.4, 3.6, 2.5, 2.7, 2.4, 2.6,  #>     2.2, 3.9, 3.1, 3.2, 1.8, 3.7, 2.5, 2.9, 3.2, 3.1, 3.1, 3.9,  #>     3.5, 3.1, 2.2, 3.8, 3, 3.8, 3.4, 3, 3.1, 2.7, 1.4, 3.2, 3,  #>     2.7, 2.8, 3.5, 3.2, 3, 2.2, 3.7, 3, 3, 3.8, 2, 3.5, 2.8,  #>     3.1, 2.6, 1.6, 2.8, 2.7, 2.2, 2.3, 4, 2.7, 2.6, 3.6, 3.4,  #>     2.8, 3.9, 2.2, 3, 1.7, 2.8, 3.6, 1.2, 3.2, 1.6, 3.6, 1.4,  #>     1.6, 2.8, 2.8, 3.6, 3.8, 3.4, 2.7, 3.2, 1.9, 2.7, 3.7, 3.7,  #>     1.3, 3.2, 2.8, 1.9, 2.1, 2.4, 2.4, 2.3, 3, 2.5, 2, 2.5, 2.4,  #>     2.6, 1.4, 1.6, 3.2, 2.9, 3.2, 3.1, 2.9, 1.3, 2.8, 2.5, 2.9,  #>     3.4, 1.7, 3.1, 2.7, 3.2, 1.4, 3, 3, 3.5, 3.2, 3.3, 1.9, 0.6,  #>     3.9, 3.2, 2.9, 2.6, 3.6, 2.6, 1.9, 3.3, 2.9, 3.2, 2.2, 3.1,  #>     3.5, 3, 3.2, 2.6, 3.3, 3.2, 2.8, 2.7, 1.4, 3.6, 1.7, 2.3,  #>     2.7, 3.2, 3, 3.7, 3.2, 3.5, 3.2, 3.2, 3.3, 2.5, 3.9, 3.5,  #>     3.1, 2.8, 2.9, 3.5, 3.9, 2.9, 2.6, 3.4, 2.7, 3.6, 1.7, 3.7,  #>     3.1, 3.8, 2.3, 2.8, 3.4, 3.1, 2.8, 2.9, 2.6, 2.9, 3.4, 3.6,  #>     3.1, 3.2, 3.9, 3, 2.8, 3, 3, 2.9, 2.5, 3, 2.6, 3.4, 3.6,  #>     3.2, 2.7, 3.3, 3.1, 2.7, 1.5, 1.1, 2.8, 3.8, 2.1, 2.4, 3.2,  #>     3, 3.3, 3.1, 3.5, 2, 3.3, 1.9, 2.4, 1.6, 3.5, 2.1, 3.8, 3.2,  #>     3.2, 2.8, 3.5, 3.9, 1.6, 2.6, 2.1, 3.1, 2, 2.7, 3.2, 3, 2.9,  #>     3.7, 3.6, 3.3, 2.9, 3.1, 3.6, 3.1, 2.7, 3.7, 2.9, 3.6, 2.5,  #>     1.8, 3, 3.8, 2.8, 2.8, 2.4, 1.2, 1.5, 3.6, 2.6, 3.5, 3.5,  #>     2.9, 2.4, 3.6, 2.1, 3.3, 3.4, 3.7, 2.4, 3.1, 2.9, 3.3, 3.4,  #>     3.2, 3.4, 3.6, 3.4, 2.2, 2.6, 2.7, 3.8, 2.7, 2.8, 3.5, 3.1,  #>     3.5, 2.7, 3.4, 3.6, 2.4, 2.9, 2.3, 3.6, 3.1, 3.2, 2.8, 2.3,  #>     3.1, 2.8, 3.4, 3.7, 2.4, 3.8, 2.7, 2.9, 3.6, 3.2, 3.8, 2,  #>     2, 1.8, 2.7, 2.9, 2, 3.8, 3.3, 2.9, 3.8, 3.6, 1.9, 2.7, 1.5,  #>     2.9, 3.9, 3.3, 3.6, 3.5, 3.7, 3.2, 3.3, 2.9, 2.4, 3.2, 3.6,  #>     2.7, 3.5, 2.4, 2.5, 2.6, 3.2, 3.1, 3.8, 2.1, 2.1, 1.5, 3.3,  #>     2.5, 3.2, 3.6, 2.4, 3.5, 3.3, 2.1, 2.7, 3.4, 2.7, 3.6, 3.1,  #>     1.2, 3.6, 2.9, 2.5, 2.9, 2.7, 2.8, 3.5, 2.6, 2.9, 2.9, 3.7,  #>     3.8, 3.3, 1.3, 2.8, 3.1, 3.8, 2.4, 3.9, 3.6, 2.1, 3.6, 2.9,  #>     2.1, 1, 2.7, 2.1, 3.4, 1.8, 2.9, 2.3, 3.7, 2.6, 2.8, 3.2,  #>     3.4, 1.5, 3.2, 3.9, 2.9, 3.3, 2.5, 2.7, 3.2, 3.8, 2.4, 2.8,  #>     3.4, 2, 3.3, 3.4, 3.4, 3, 1.6, 3.4, 3.6, 2.8, 3.1, 3.4, 2.9,  #>     3.2, 3.2, 2.6, 2.5, 1.9, 2.1, 3.3, 2.9, 3.9, 2, 3.5, 2.2,  #>     3.3, 3.6, 2, 3.8, 2.8, 3, 3.1, 3.5, 3.2, 3.4, 3.3, 2.7, 3,  #>     2.9, 3.2, 1.7, 3.2, 3.9, 3, 2, 3.5, 3.9, 1.9, 2.5, 3, 3.5,  #>     3.9, 2.6, 3, 3.9, 2.3, 3.4, 3, 3.3, 3, 3.4, 3.2, 3.3, 2.4,  #>     2.1, 3.6, 2.8, 2.1, 3.3, 2.5, 3, 3.6, 2.7, 1.8, 3.2, 3.6,  #>     2.8, 2.2, 3.2, 3.3, 1.4, 3.2, 2.7, 1.7, 3, 2.4, 0.9, 2.6,  #>     3.2, 3.5, 3.1, 2.9, 2.3, 3.4, 2.7, 3.8, 3, 3, 3.2, 2.8, 2.9,  #>     2.5, 2.9, 3.9, 3.5, 1.6, 3.1, 1.8, 3.5, 3.2, 2.2, 2, 3.2,  #>     3.6, 2, 3.1, 3.4, 2.2, 2.2, 3.3, 2.9, 3.3, 2, 2.4, 3.3, 1.7,  #>     3.3, 2.1, 2.1, 3.1, 3.3, 1.6, 2.8, 2.8, 2.9, 3.1, 3.2, 1.8,  #>     3.1, 1.1, 3.6, 2.7, 3.8, 2.9, 3.3, 2.2, 2.8, 3.3, 2.7, 2.8,  #>     2.1, 3.7, 2, 2.8, 3.6, 2.2, 1.1, 2.1, 3.5, 3.1, 3.3, 2.9,  #>     2.7, 3.5, 2.7, 3.8, 3.4, 2.1, 3, 3.3, 3, 2.3, 3.4, 3.8, 2.4,  #>     2.5, 1.7, 2.8, 3.6, 3.4, 1.3, 3.2, 3.1, 2.6, 3.4, 3.2, 2,  #>     2.9, 3, 2.3, 3.4, 2.2, 2.4, 3.2, 3, 3.1, 2.9, 1.9, 1.1, 3.1,  #>     2.1, 3.4, 3.8, 2.2, 3.6, 3.6, 3.1, 3.3, 3.2, 3.3, 3.4, 3.3,  #>     2.7, 1.2, 3.1, 2, 3.2, 3.4, 3.4, 2.5, 2.8, 3.3, 1.8, 1.3,  #>     3.6, 3.1, 0.9, 2.4, 3.2, 2.7, 3.1, 3.4, 3.2, 2.6, 2, 2.7,  #>     3.1, 3.5, 3.2, 1.8, 1.5, 3.1, 3.2, 2.9, 3.6, 2.8, 3.6, 3.3,  #>     3.4, 2.9, 2.7, 2.4, 2.4, 2.9, 2.4, 3.1, 3.1, 3.1, 1.6, 2.6,  #>     1.4, 3.5, 2.7, 3.6, 3, 2, 3.2, 3.8, 3.1, 2.1, 1.9, 3, 2.5,  #>     3, 3.4, 3.4, 2.5, 3.2, 3.2, 2.8, 2.6, 2.5, 3.3, 3, 2.5, 2.2,  #>     2.8, 2.6, 1.7, 3.6, 2.7, 3, 3.5, 2.7, 3.1, 2.4, 2.8, 3.6,  #>     3.4, 3.4, 2.4, 2.8, 2.6, 2.8, 2.9, 2.7, 2.4, 2.3, 3.8, 3.1,  #>     1.4, 2.8, 3.7, 2.3, 1.7, 2.7, 1.5, 2, 3.5, 2.9, 3.2, 2.4,  #>     3.8, 2.8, 3.1, 1.6, 1.7, 3.5, 2.9, 2.4, 3, 3.8, 3.2, 3.4,  #>     3.2, 3.7, 3.1, 3.5, 2.6, 2.2, 2.8, 2.3, 2.3, 2.6, 3.8, 3.2,  #>     3.6, 3.7, 3.1, 1.5, 3.6, 2.2, 3.6, 2.1, 2.7, 3.8, 3.4, 2.9,  #>     2.6, 3.5, 2.9, 3.2, 1.7, 2.9, 3.5, 3.4, 2.5, 3, 2.2, 3.2,  #>     3.5, 3.4, 3.5, 3.7, 1.2, 3.5, 2.8, 3, 2.5, 2.1, 2.6, 2.6,  #>     2.4, 3.2, 3.3, 3, 3.1, 2.9, 3.6, 3.8, 3.2, 3.5, 2.9, 3.6,  #>     2.6, 2.5, 2.8, 2.1, 2.6, 2.1, 3.2, 2.7, 2.1, 2.4, 3, 3.9,  #>     2.4, 1.8, 2.7, 3.3, 3.4, 3.4, 2.2, 3.8, 3.3, 3.5, 3.7, 1.7,  #>     1.7, 3, 3.4, 2.6, 3.1, 2.9, 3.1, 3.1, 2.9, 3.8, 2.3, 3.3,  #>     1.4, 3.8, 3.6, 3.5, 2.7, 3.6, 3.5, 2.5, 3.3, 3.2, 3.7, 2.5,  #>     2.3, 3.1, 3.4, 3.6, 2.6, 3.5, 3.8, 3.7, 2.9, 3.6, 3.6, 2,  #>     3.5, 2.8, 2.1, 2.1, 2.6, 3.4, 1.5, 1.8, 3.2, 3.5, 3.8, 2.5,  #>     3.7, 2, 2.8, 3.6, 2.2, 2.4, 2.4, 2.7, 2.6, 3.4, 2.9, 2.5,  #>     3.1, 2.4, 3.7, 2.4, 3.8, 3.7, 3.2, 3.3, 3.5, 1.7, 3.4, 3.8,  #>     2.9, 3.6, 3.5, 3.6, 2.5, 2, 3.6, 2.9, 3.7, 2.9, 2.9, 2.8,  #>     3.2, 3.5, 2.8, 2, 3.1, 1.4, 1.7, 1.4, 3.4, 3.1, 2.9, 2.8,  #>     3.6, 3.2, 2.9, 3.8, 2.4, 2.3, 3, 3.2, 2.8, 2.9, 2.3, 2.8,  #>     2.6, 1.4, 1.8, 3, 3.6, 2.5, 2.5, 2.9, 2.1, 2.7, 3, 0.9, 2.9,  #>     3.5, 3.2, 2.3, 3.6, 3, 2.2, 3.8, 3.5, 2.7, 2.2, 3.5, 2.7,  #>     2.2, 3.1, 3.1, 2.9, 1.8, 1.6, 1.2, 2.2, 1.6, 3.5, 2.3, 3.7,  #>     3.6, 3.1, 2.3, 2, 2.4, 2.6, 3.5, 3, 2.9, 2.8, 3.6, 3.1, 2.3,  #>     2.1, 4, 3.2, 1.5, 2.9, 3.9, 2.8, 2.9, 3.3, 3.4, 3.4, 2.6,  #>     3.2, 2.5, 2.8, 2.9, 2.2, 2.8, 3.3, 3.3, 3.5, 2.8, 3.3, 3.1,  #>     2.9, 2.7, 3.1, 2.2, 2.3, 3.4, 3, 2.1, 2.5, 1.7, 3.7, 2.4,  #>     2.4, 2.3, 2.8, 3.8, 2.9, 2.7, 2.1, 1.7, 3.2, 3.6, 3.8, 2.7,  #>     1.9, 1.3, 3.6, 2.2, 2.8, 1.7, 3, 2.6, 1.5, 3.8, 2.1, 3.1,  #>     3.3, 2, 3.6, 3.3, 2.1, 3.1, 3.6, 3.3, 3, 3.2, 2.7, 3, 2.8,  #>     3, 2.3, 2.6, 2.9, 3.2, 3.1, 1.8, 2.6, 2.4, 3.4, 3.4, 2.5,  #>     3.3, 2.4, 3.6, 3.1, 3.8, 3, 3.5, 2.8, 3.5, 2.8, 3.1, 3.1,  #>     3, 2.9, 3.2, 1.7, 1.7, 3, 2.1, 3.3, 2.6, 3.3, 3.2, 2.5, 2.4,  #>     3.4, 2.4, 3.7, 2, 2.8, 3.6, 3.7, 2.9, 2.6, 3.1, 2.7, 3.5,  #>     3.2, 3.6, 3.6, 2.4, 3.4, 3.6, 3, 3.4, 3.3, 3.5, 2.2, 3.2,  #>     2.8, 3.2, 1.5, 3.4, 2.7, 2.8, 3.1, 3.2, 2.3, 3.4, 3.5, 3.8,  #>     2.5, 3.5, 2.4, 3.9, 3.2, 3.1, 3.8, 3.7, 3.5, 3.4, 2.6, 3.6,  #>     2.7, 3.7, 2.8, 3.7, 3.5, 3, 3.2, 3, 2.7, 2.7, 2.5, 3.2, 3.3,  #>     2.9, 3.3, 3.1, 3.8, 3.2, 3.6, 2.5, 3.8, 3, 3.3, 3.7, 3.2,  #>     2.6, 2.7, 3.7, 2.2, 2.6, 2.9, 2.8, 2.3, 1.9, 2.3, 2.5, 2.3,  #>     2.8, 1.3, 3.7, 3.7, 2.6, 3.8, 1.5, 3.8, 3.1, 3.5, 2.9, 2.3,  #>     3.7, 3, 3.5, 2.5, 3.2, 2.8, 2.2, 2.7, 2.4, 3.6, 2.8, 2.4,  #>     2.7, 2.5, 3.7, 2, 3.5, 3.1, 2.9, 3.7, 0.9, 2, 2.9, 2.7, 3.3,  #>     2.4, 3.6, 1.4, 2.5, 2.4, 3, 3.3, 2.2, 3.7, 3.1, 3.2, 3.2,  #>     3, 2.3, 3.1, 2.3, 3.8, 3, 3.2, 3.7, 2.9, 2.4, 2.8, 2.2, 3.1,  #>     3.1, 1.6, 3.8, 3.5, 3.2, 2.9, 3.4, 2.5, 3.3, 3.4, 2.1, 3.5,  #>     2.6, 3.3, 2.4, 2.7, 2.3, 2.4, 2.7, 3, 1.7, 2.1, 2.6, 2.8,  #>     3.5, 2.1, 1.9, 2.5, 2, 3.2, 2.1, 3.6, 3.4, 1.6, 2.5, 1.6,  #>     3.2, 3.4, 2.9, 2, 3.1, 2.9, 2.4, 2.5, 3.5, 3.2, 2.4, 3.2,  #>     3.2, 2.7, 2, 2.4, 3.4, 3.3, 3.4, 3.6, 3.8, 2.6, 2.2, 2.3,  #>     3.2, 3.2, 3.2, 3.7, 3, 3, 3.2, 3, 1.7, 2.6, 3.3, 3.5, 3.5,  #>     2.8, 3.3, 3.8, 2.9, 2.5, 2.5, 2.5, 3.6, 3.2, 2.9, 2.1, 2.5,  #>     2.7, 1.1, 1.8, 3.9, 2.7, 2.9, 1.5, 3.7, 2.8, 1.3, 3, 3.6,  #>     2.8, 3, 2.8, 3.8, 2.9, 3.3, 2.5, 1.4, 3.2, 2.9, 2.9, 3.3,  #>     3.8, 2, 2.9, 2.6, 2.5, 2.4, 3.8, 3.1, 3.8, 1.9, 3.2, 2.8,  #>     3.3, 3.8, 3.3, 1.2, 2.1, 1.9, 1.3, 3.6, 2.9, 3.3, 3.6, 2.1,  #>     2.7, 2.5, 3.2, 3.8, 2.9, 2.8, 3.1, 2.5, 3.9, 3.4, 3.1, 2.4,  #>     2.4, 2.3, 2.7, 2.5, 2, 3.1, 3.2, 3.8, 2, 3.6, 3.2, 3.6, 3.5,  #>     2.3, 2.6, 3.2, 2.8, 2.7, 3.6, 3.3, 3.7, 2, 2.9, 3, 3, 3.1,  #>     2.6, 3.1, 3, 2.2, 3.1, 3.4, 1.7, 2.3, 2.4, 0.6, 1.8, 3.3,  #>     3.7, 3.5, 2.3, 1.7, 3.8, 3.2, 3.2, 3.4, 2.6, 2.7, 3.7, 3.1,  #>     1.9, 3.5, 2.3, 2.9, 2.3, 1, 1.9, 2.1, 2.7, 2.6, 3.4, 2.9,  #>     2.9, 3.1, 2.8, 2.8, 2.8, 2.5, 3, 3.5, 3.5, 1.5, 2.7, 3.8,  #>     3.4, 3.1, 3.1, 2.9, 3.7, 3.4, 3.3, 2.9, 3.2, 2.4, 2.3, 2.9,  #>     2.8, 1.9, 1.8, 2.4, 1.8, 2.4, 2.3, 2.2, 1.9, 3.2, 2.8, 3.2,  #>     2.8, 2.8, 2.3, 1.7, 2.4, 3.6, 2.1, 3.4, 2.8, 3.5, 1.6, 2.9,  #>     2.5, 0.9, 3.6, 3, 3.8, 2.4, 2.7, 2.4, 3.1, 3.2, 3.1, 2.3,  #>     3.1, 3.6, 2.7, 2.3, 3.5, 3.1, 3.6, 2.4, 3.9, 2.2, 2.7, 3.6,  #>     3.2, 3.7, 3.2, 2.3, 2.9, 2.8, 1.6, 3, 2.7, 3.1, 2.7, 2.9,  #>     3.3, 3.4, 3, 1.6, 3.8, 1.8, 2.2, 3.5, 2.8, 3.2, 2.8, 3.7,  #>     2.4, 1.7, 2.5, 3.6, 3.7, 3.4, 1.7, 3.6, 1.5, 2.4, 2.6, 3.3,  #>     2.9, 2.2, 2.5, 3.2, 3.5, 2.6, 2.3, 3.2, 1.5, 1.1, 2.7, 2.9,  #>     2.5, 2.1, 3.5, 3, 3.8, 2.8, 3.7, 3.6, 3.2, 3.4, 3, 3.5, 3.3,  #>     2.6, 2.7, 2.9, 3.8, 2.6, 2.5, 1.8, 3.1, 2.6, 2.9, 3.5, 3.2,  #>     1.6, 3.6, 2.4, 1.9, 2, 2.1, 4, 3.1, 2.4, 2, 3.4, 3.9, 2.6,  #>     2.8, 2, 3.5, 3.1, 3.4, 3, 2.7, 1.4, 1.2, 2.5, 3.2, 2, 1.9,  #>     2, 3.7, 3.7, 1.7, 3.1, 2.4, 2.9, 2.4, 2.8, 3.8, 1.4, 1.3,  #>     3.3, 1.6, 3.3, 3.6, 2.5, 3.2, 2.9, 2.8, 3.2, 2.4, 3.5, 3.2,  #>     3.5, 3.5, 2.6, 3.2, 3.2, 2.5, 3.7, 3.3, 3.1, 2.4, 2.6, 2.3,  #>     3.6, 3.3, 2.8, 3, 3.5, 3.8, 2.5, 2.2, 3, 3.5, 3.6, 3, 3.9,  #>     2.8, 1.5, 2.7, 3.1, 3, 3, 3.3, 2.9, 1.4, 3.1, 2.6, 3.4, 3,  #>     1.4, 2.6, 2.1, 3, 2.7, 3.7, 3.4, 1.8, 3.2, 2.7, 1.5, 3.2,  #>     3.6, 3.6, 2.9, 2.7, 3.5, 3.8, 1.9, 3, 2.5, 3, 2.9, 3.3, 3.1,  #>     2.9, 3.8, 2.3, 3.3, 3.1, 3.6, 2.2, 3.2, 2.7, 3.5, 2.9, 2.1,  #>     1.7, 2, 2.8, 3.7, 3.6, 3.8, 2.1, 2.4, 3.5, 3.3, 3.2, 2.7,  #>     3.5, 2.5, 3.7, 1.8, 3.3, 2.4, 1.6, 3.2, 3.7, 2.8, 3.4, 2.1,  #>     2.5, 1.8, 2.5, 3, 1, 2.6, 2.6, 3, 2.5, 3.6, 2.7, 2.2, 1.9,  #>     3.7, 3.2, 3.3, 3.7, 2.6, 3, 2.8, 2.9, 2.5, 2.4, 2.6, 3.2,  #>     3.3, 2.9, 2.2, 3.5, 3.2, 2.3, 2.7, 2.4, 3.2, 3.7, 3.4, 3.8,  #>     3.1, 3.2, 2.2, 2.6, 2.8, 3.9, 3.4, 1.7, 2.9, 3.2, 3.3, 3.7,  #>     1.2, 2.4, 3, 2.3, 2.6, 4, 2.5, 2.3, 2.5, 3.4, 2.8, 1.8, 3.7,  #>     1.8, 3.2, 3.2, 3.1, 2, 2.6, 3.5, 2.1, 3.4, 2.2, 2.6, 3.1,  #>     2.6, 2.4, 2.2, 2, 3.3, 2.8, 3.4, 2.9, 1.7, 2.4, 2.2, 2.5,  #>     1.5, 2.6, 4, 3.7, 3.4, 3.7, 2.7, 3.2, 3.3, 2, 3.6, 3.4, 2.1,  #>     3.2, 2.9, 3.4, 3.6, 2.8, 3.5, 1.4, 3.2, 3.2, 2.8, 3.2, 2.7,  #>     2.9, 2.7, 1.3, 3, 2.7, 3.4, 3.5, 3.6, 0.6, 2.8, 3.6, 1.9,  #>     1.6, 3.4, 2.7, 3.6, 3.2, 2, 3.6, 2.8, 2.5, 3.1, 1.6, 3.6,  #>     2.3, 3.5, 2.4, 3.2, 2.8, 3, 3, 2, 3.2, 3.3, 3.7, 2.8, 3.1,  #>     1.8, 1.9, 2.7, 3.2, 3.3, 2.7, 3, 3.3, 3.8, 1.8, 1.6, 3.3,  #>     2, 2.8, 3.2, 2.4, 3.3, 3, 2.1, 3.6, 2.3, 3.1, 3.6, 3, 2.9,  #>     3.6, 1.6, 2.8, 2.9, 1.6, 2.4, 2.4, 2.5, 1.7, 3.1, 2.6, 3.1,  #>     2.8, 2.3, 1, 2.7, 2.1, 3.4, 3, 2.1, 3.6, 3.4, 3.8, 3, 3.5,  #>     2.7, 3.5, 3.5, 3.5, 2.5, 1.7, 2.5, 3.1, 2, 2.4, 3.1, 3, 2.4,  #>     2.9, 2.6, 2.9, 2.1, 2.9, 3, 2.9, 3.6, 2.4, 3.5, 2.4, 1.9,  #>     3.2, 2.7, 3.5, 2.5, 2.6, 2.4, 3.7, 1.9, 1.8, 3.2, 2.7, 2.5,  #>     3.2, 2.6, 2.8, 3.5, 3.8, 3.1, 3.6, 2.9, 3.7, 1.8, 3.2, 3.1,  #>     3, 3.4, 3.6, 2.2, 3.8, 3.8, 1.9, 3.6, 3, 3, 3.1, 2.2, 3.2,  #>     2.1, 3.1, 2.9, 3.3, 3.2, 2.2, 2.7, 2.8, 3.7, 3.5, 3.5, 3.7,  #>     3.6, 2.5, 1.8, 3.1, 3.8, 2.4, 3.8, 3.1, 3, 3.8, 2.8, 2.9,  #>     3.4, 2.8, 2.8, 3, 1.7, 3.8, 2.3, 2.2, 3.5, 1.6, 2.8, 2.1,  #>     2.9, 3.7, 3, 2.3, 3, 2.7, 1.6, 2.9, 2, 3.3, 2.7, 2.9, 3.5,  #>     3.2, 2.9, 3.8, 3.3, 3, 3.1, 3.7, 2.5, 3.1, 2, 3.2, 3.3, 2.8,  #>     2.4, 2, 3.5, 3.6, 2.9, 2.5, 3.9, 2.1, 3.3, 2.9, 2.6, 2.8,  #>     3.3, 2.3, 2.6, 2.4, 3.1, 2.8, 2.1, 3.6, 3.5, 3.4, 2.3, 3,  #>     3.7, 3.5, 3.3, 1, 3.3, 3.8, 3.9, 3.3, 1.2, 2.5, 1.6, 3.2,  #>     3.6, 3, 1.9, 2.2, 1.5, 2.5, 2.4, 3.2, 3.4, 3.7, 2.4, 3.2,  #>     2.8, 3.4, 1.8, 2.9, 2.5, 2.3, 3.3, 3.2, 3.6, 3.4, 3.6, 2.7,  #>     3.3, 2.4, 3.6, 2.5, 3.5, 3.6, 3.8, 3.4, 3.6, 2.1, 1.7, 3.2,  #>     2.3, 3.1, 3.6, 1.6, 2.3, 3.4, 3.8, 3.9, 2.5, 2.6, 3.4, 3.5,  #>     3.3, 3.4, 3.6, 3.1, 1.6, 2.6, 3, 2.6, 3.1, 3.8, 3, 2.2, 3.4,  #>     2.6, 3.2, 1.4, 3.7, 2.8, 2.8, 3.3, 3.4, 3, 3.7, 3.4, 3.1,  #>     3.6, 2.3, 1.6, 2.3, 3.5, 3.7, 2.5, 2.8, 3.2, 1.3, 2.8, 3.2,  #>     3.6, 3, 3, 2.3, 1.7, 2.3, 2.8, 1.5, 1.8, 2.7, 2.9, 3.2, 3.2,  #>     2.6, 3.2, 3.1, 2.9, 3.1, 3.7, 3.8, 2.7, 2.9, 2.7, 3.2, 3.6,  #>     1.3, 2.7, 2.4, 3.3, 3.7, 2.5, 3.4, 1.5, 2.2, 3.4, 2.6, 3.4,  #>     3.2, 3.2, 2.8, 2.9, 3.4, 2, 3.4, 1.3, 2.9, 3, 3.4, 3, 2,  #>     3.6, 3.7, 2.7, 2.7, 2.4, 2.9, 2.5, 1.9, 3.8, 1.3, 3.6, 1.9,  #>     3.3, 2.9, 2.7, 3.7, 3.9, 2.7, 2.6, 2.3, 3.6, 3.7, 1.8, 2.2,  #>     3.2, 2.6, 3.7, 1, 2.8, 3.6, 3.5, 3, 3.5, 2.6, 3.4, 2.5, 2.2,  #>     3.6, 2.4, 3.5, 2, 3.3, 3.8, 2.4, 2.1, 2.4, 3.6, 3.1, 2.7,  #>     3.5, 3.3, 3.3, 3.5, 1.8, 3.2, 3, 3, 2.5, 2.8, 3.5, 2, 2.7,  #>     1.8, 2.2, 2.9, 3.7, 2.6, 3.6, 3.7, 3.6, 3.3, 2.3, 2.8, 2.3,  #>     3.8, 3.5, 3.5, 1.8, 2.6, 2.7, 3.2, 2.9, 3, 3.2, 3.5, 3.2,  #>     2.8, 3.3, 3.5, 1.8, 3.3, 3.5, 2.5, 2.2, 3.3, 3.5, 3.1, 3.4,  #>     3, 2.5, 3.6, 2.7, 1.6, 3.4, 2.6, 2.9, 3.6, 3.5, 3.8, 2.6,  #>     2.9, 3.6, 3.2, 2.1, 3.8, 3.5, 3.1, 2.5, 2.2, 2.4, 3.1, 3.2,  #>     3.3, 1.4, 2.4, 3.1, 3.5, 3.4, 3.3, 2.4, 0.9, 3.5, 3, 1.4,  #>     2.7, 2.9, 2.8, 3.5, 3.1, 3.6, 2.1, 2.4, 2.8, 2, 2.9, 2.9,  #>     1.9, 3.4, 2.2, 3.6, 3.1, 3, 3.5, 2.5, 3.8, 3.1, 2.1, 2.9,  #>     1.8, 3.6, 3.7, 2.6, 3.3, 3.6, 3.7, 2.7, 3.1, 3.3, 3.4, 3.3,  #>     3.8, 3.8, 2.6, 3.1, 2.4, 1.8, 2.2, 1.4, 2.1, 3.6, 2.5, 0.9,  #>     3.6, 2.4, 2, 2.3, 2.8, 2.6, 3.4, 1.1, 3.1, 1.2, 3, 2.5, 2.7,  #>     2.2, 3.6, 2.6, 3.5, 2.9, 3.8, 1.9, 1.6, 2.9, 2.5, 3.2, 3.2,  #>     3.8, 3.2, 3.2, 2.1, 3, 3, 1.8, 1.9, 3, 2.6, 3.4, 3.5, 1.4,  #>     2.1, 3.6, 2.7, 3.6, 2.4, 3.4, 2.4, 3.7, 2.7, 3, 3.3, 3.5,  #>     3.7, 1.2, 3.9, 2.9, 2.9, 2.9, 3.7, 2.7, 3.6, 3.2, 3.2, 3.1,  #>     2.9, 2.3, 2.8, 1.4, 3.4, 3.3, 3.4, 2.4, 3.6, 3.1, 3.6, 3.1,  #>     1.7, 3, 3.3, 3.7, 2.7, 3, 2.4, 3, 2.7, 3.6, 3, 2.3, 2.1,  #>     2.2, 1.4, 2.9, 2.2, 3.3, 2.5, 3.3, 3.5, 3.5, 2.6, 2.4, 2.4,  #>     3.3, 3.2, 2.9, 1.6, 3.2, 2.4, 3.7, 3.7, 2.6, 3.8, 2.2, 3.7,  #>     2.3, 2.5, 3, 2, 2.5, 3, 3, 2.6, 3.3, 3.4, 2.3, 2.6, 3.5,  #>     3, 1.6, 2.7, 3.4, 2.4, 3, 3.1, 2.8, 2.9, 3.4, 3.3, 3.4, 3,  #>     3.9, 1.1, 2.9, 3, 1.6, 2.9, 3.2, 3.2, 3.7, 2.5, 3.8, 2, 3.1,  #>     3.5, 3.3, 2.1, 1.9, 3.2, 2.8, 2.7, 2.6, 3.5, 2.8, 2.6, 3.2,  #>     3.4, 1.5, 1.9, 2.4, 3.5, 3.4, 2.3, 3, 1.5, 2.6, 3.7, 2.9,  #>     2.6, 3.3, 3.4, 3.6, 2.8, 1.8, 3.9, 1.8, 2.4, 3.8, 3.7, 3,  #>     2.8, 2.9, 1.8, 2.9, 3.4, 2.3, 1.7, 3, 3.6, 3.5, 3, 3.4, 3.6,  #>     3.9, 3.1, 2.4, 2.8, 2.2, 1.8, 3.3, 2.8, 3, 2.2, 2.6, 2.7,  #>     3.1, 2.6, 3.2, 2.4, 3, 2, 3.5, 2.4, 3.5, 3.2, 2.9, 2.2, 3.4,  #>     2.6, 2.8, 2.6, 1.9, 3.2, 2.9, 2.4, 2.8, 2.8, 3.1, 3.4, 3.7,  #>     3.1, 1.9, 3.4, 2.2, 2.9, 3.6, 2.3, 3.4, 3.4, 1, 1.8, 1.8,  #>     2, 3.6, 2.9, 3.2, 3.4, 2.5, 2.7, 2.7, 3.2, 3.3, 3.1, 2.8,  #>     1.5, 2, 3.7, 2.8, 2.6, 3.6, 2.5, 3.5, 3.3, 3.1, 2.2, 3.5,  #>     3.4, 3.4, 3.2, 2, 2.5, 3.3, 3, 2.6, 2.3, 2.2, 2.7, 3.5, 3,  #>     2.3, 2.4, 3.2, 3.6, 3.6, 1.1, 2.1, 2.4, 2.5, 2.9, 2.7, 1.8,  #>     2.7, 2.2, 3.1, 2.5, 1.2, 3.1, 2.1, 3.4, 2.5, 1.5, 3.4, 2.7,  #>     2.9, 3.1, 1.7, 3.2, 3.6, 2.7, 2.6, 2.5, 2.8, 3, 2.5, 3.1,  #>     3.7, 3.8, 3.1, 3.8, 3.1, 2.4, 3.5, 3.5, 2.7, 2.4, 3.2, 3.2,  #>     3.3, 3.2, 3.3, 3, 3.4, 2.7, 3.5, 2.6, 2.4, 3.7, 3.6, 1.6,  #>     3.1, 1.6, 2.9, 2.8, 2.4, 2.6, 2.5, 2.8, 2.6, 3, 2.8, 3.4,  #>     3, 2.4, 3.1, 3.7, 1.6, 3.3, 2.6, 1.7, 3.8, 2.9, 1.2, 2.1,  #>     3.1, 3.5, 3.5, 3.1, 2.6, 2.8, 3.7, 3.2, 3.2, 3.6, 1.6, 2.9,  #>     2.7, 3.9, 3, 3.3, 3.4, 3.5, 2.4, 3.6, 2.6, 3.3, 2.3, 1.6,  #>     3.7, 3.6, 2.9, 3.2, 3.7, 2.6, 3.4, 2.9, 3.8, 2.9, 3.1, 1.3,  #>     1.7, 2.5, 3.2, 3.1, 2.2, 2.4, 2.3, 1.3, 2.8, 3.2, 3.7, 3.9,  #>     2.5, 1.7, 2.4, 3.1, 2.7, 2.2, 3, 2.6, 3.4, 1.8, 2.8, 2, 2.9,  #>     3.7, 2.4, 3.8, 3, 3.3, 3.6, 2.3, 2.4, 2.1, 2, 3.1, 2.3, 2.2,  #>     3.7, 2, 3.4, 3, 2.8, 3.6, 3.3, 2.3, 3.1, 3.7, 2.8, 3.1, 3.1,  #>     3.4, 2.1, 3.5, 3.5, 3, 3, 3.4, 2, 2.7, 2.3, 1, 3.1, 3.3,  #>     2.9, 3.5, 3.2, 3.1, 3.7, 3.6, 3, 3.2, 3.4, 1.8, 3.1, 1.5,  #>     3.1, 3.4, 3.3, 3.5, 2, 2.1, 3, 2.7, 3.4, 2.9, 3.7, 3.5, 3,  #>     2.1, 3.3, 2.4, 3.3, 2.1, 2.9, 3.4, 3.6, 2.7, 3.1, 2.8, 0.8,  #>     3.3, 3.9, 3.5, 3.2, 3.1, 3.8, 1.6, 3.1, 2.9, 3.9, 1.8, 2.7,  #>     2.5, 2.7, 2.5, 1.8, 3.7, 3, 2.8, 2.5, 2.1, 3, 3.5, 3.3, 2.6,  #>     1.7, 2.7, 2.5, 1.9, 3.7, 2.1, 3.2, 3.5, 2.9, 2.8, 3.7, 3,  #>     2.6, 2.4, 2.8, 3.1, 3.6, 3.4, 1.7, 0.9, 3.7, 2.4, 2.7, 3.3,  #>     3.9, 3.2, 3.9, 3.3, 3.2, 2.2, 3.4, 3.5, 2.2, 3, 3.9, 2.7,  #>     3.5, 3.5, 3.4, 3.6, 3.2, 3.3, 3.6, 3, 2.7, 2.6, 2, 2.5, 2.6,  #>     2.9, 2.9, 1.7, 3.4, 3.3, 3.8, 3.5, 3.7, 1.7, 0.9, 2.6, 3.8,  #>     2.9, 2.8, 2.4, 2.4, 3.5, 3.2, 3.7, 3.7, 3.3, 3.1, 2.8, 1.5,  #>     1.2, 2.3, 2.7, 3.2, 3.6, 3.6, 2.6, 3, 1.6, 3, 2, 3.1, 3.5,  #>     3.6, 2.6, 2.3, 3.3, 3.1, 3.8, 3.5, 2.7, 3.2, 2.8, 2.4, 3.3,  #>     3.1, 1.3, 3.6, 3.1, 3.1, 3.1, 2.7, 2.2, 3, 1.7, 1.7, 2, 2.4,  #>     3.3, 2.8, 3.5, 2.6, 1.4, 3.3, 2.5, 2.9, 1.9, 3.7, 3.2, 3.2,  #>     3.1, 2.1, 2.3, 1.6, 2.9, 2.9, 3.8, 2.5, 1.8, 3.3, 2.5, 2.4,  #>     3.4, 2.9, 3.6, 1.9, 2.1, 2.7, 3.1, 2, 3.3, 2.9, 2.5, 2.7,  #>     2.7, 2.5, 3.9, 3.2, 2.7, 3.1, 3.3, 3.8, 1.6, 3, 3.5, 3.3,  #>     3, 2.8, 3.1, 3.6, 2.4, 3.2, 3.3, 3.5, 2.7, 2.2, 3.4, 2.7,  #>     2.8, 2.4, 3.8, 2.8, 3.7, 3.3, 3.3, 3.1, 3.3, 3.9, 3.3, 2.5,  #>     3, 2.2, 3.8, 1.2, 2.9, 3.3, 3.5, 3.3, 2.7, 3.7, 2.6, 2.9,  #>     2.8, 3.2, 1.7, 2.5, 3.5, 3.6, 2.8, 2.8, 2.3, 1.9, 2.8, 1.6,  #>     3.5, 2.7, 1.7, 3.5, 3.7, 2.5, 1.4, 2.7, 2.6, 3.3, 2.3, 2.8,  #>     2.4, 1.4, 1.7, 3.2, 3.3, 2.5, 3.1, 1.5, 3, 2.9, 3.1, 2.7,  #>     3.1, 3.3, 1.9, 2.4, 1.4, 3.1, 3.5, 3.6, 3.3, 3.5, 3.8, 3.7,  #>     3.3, 2.9, 3.2, 3.7, 3.4, 3.1, 1.9, 3.3, 1.7, 3, 2.5, 1.3,  #>     3.6, 3, 3.9, 3.1, 2.7, 3.4, 3.8, 2.1, 3.1, 2.4, 2.2, 2.8,  #>     2.7, 3.2, 3.2, 2.5, 2.3, 2.5, 3.9, 3.2, 2.7, 2.5, 2.5, 3.4,  #>     3.6, 2.7, 2.1, 2, 3.8, 3.6, 2.7, 3.5, 3, 3.3, 2.3, 3.4, 3.6,  #>     3.9, 2.9, 2.9, 3.2, 2.5, 2.6, 1.8, 2.9, 3.2, 2.7, 2.5, 3.5,  #>     3.7, 3.4, 3.5, 2.1, 3.4, 2.1, 3.4, 2.2, 2.8, 3.1, 2.8, 1.7,  #>     1.9, 3.7, 2.6, 2.1, 2.7, 2, 1.8, 2.5, 3.9, 2.4, 2.6, 2.7,  #>     2.5, 3.5, 3.6, 3.1, 3.8, 2.7, 3.4, 2.5, 3.2, 3.1, 3, 1.7,  #>     3.3, 2, 3.5, 3, 3.2, 3.3, 3.8, 2.9, 3, 3.5, 2.8, 2.5, 2.5,  #>     2.4, 2.7, 3.5, 2, 3.3, 2.9, 3.2, 2, 3.8, 2.6, 3.5, 3.7, 3.2,  #>     3.2, 2.8, 3.1, 2.9, 1.2, 3, 2.6, 1.3, 2.8, 1.7, 3.3, 3.1,  #>     3.2, 1.7, 3.8, 2.2, 1.6, 3.8, 2.1, 3.5, 2.9, 3.8, 3.6, 2.4,  #>     2.8, 1.5, 3, 3.8, 2.1, 3.1, 3.5, 2.4, 2.3, 3.1, 3.2, 2.9,  #>     3.6, 3.2, 2.7, 2.6, 3.5, 3, 1.9, 2.6, 1.4, 3.6, 0.5, 2.9,  #>     2.7, 3.1, 3.6, 3.4, 1.4, 3.2, 2.3, 1.7, 3.3, 2.7, 3.4, 2,  #>     1.5, 3.9, 2.4, 3.1, 1.6, 2.2, 3.4, 2.9, 3.1, 2.9, 2.9, 3.5,  #>     3.5, 3.3, 3.5, 3.1, 3.2, 3.5, 3.2, 2.9, 3.1, 2.8, 2.8, 2.4,  #>     2.5, 3.3, 3.3, 3.3, 3, 3.3, 1.8, 2.7, 3.9, 3.1, 3, 0.8, 3.3,  #>     2.9, 3.3, 2.6, 2.6, 3.1, 2.9, 2.4, 2, 2.3, 2.4, 3.3, 3.1,  #>     3.3, 3.7, 3.1, 3.5, 3.6, 3.6, 3, 3.1, 2.2, 2.1, 3.6, 3, 3.7,  #>     3.2, 1.7, 3.1, 3.3, 3.1, 3.7, 3.2, 1.7, 3.5, 2.3, 2, 2.5,  #>     3, 3, 2, 2.5, 1.6, 3.7, 3.7, 2.8, 3.1, 3.7, 2.1, 3.5, 2.7,  #>     1.9, 2.7, 1.4, 2, 3.3, 3.5, 3.7, 3.7, 3.3, 1.5, 2.7, 2.8,  #>     3.2, 3.8, 3.6, 2.9, 3.1, 3.6, 2.5, 2.4, 3.7, 3.1, 3.1, 2.9,  #>     3.9, 2.7, 1.5, 2.4, 2.5, 1.3, 2.5, 3.3, 3.8, 2.9, 2.5, 2,  #>     2.1, 3.4, 2.5, 3.3, 3, 2.9, 2.5, 3.9, 3.3, 2.9, 2.5, 3, 3.2,  #>     3.6, 2.9, 3.2, 1.5, 3.5, 2.4, 2.4, 1.7, 3.2, 1.9, 2.2, 2.6,  #>     2.9, 3.5, 2.4, 2.9, 3.7, 2.9, 3.8, 2, 3.4, 3, 2.9, 2.8, 2.9,  #>     2, 1.9, 2.7, 3.2, 3.5, 3.9, 3.8, 3.7, 3.3, 3.1, 3.4, 3.3,  #>     3.3, 3, 3.6, 1.7, 3.1, 2.5, 3.2, 2.6, 1.9, 2.6, 2.1, 2.6,  #>     2.8, 3.8, 1.8, 2.9, 3.3, 3.3, 2.9, 2.9, 3.4, 2.9, 3.3, 3.7,  #>     2.6, 3.4, 2.9, 3.1, 3.7, 2.1, 3.2, 3.6, 2.8, 2.6, 3.7, 3.8,  #>     1.9, 2.9, 2.2, 2.6, 2.7, 2.7, 2.7, 3.7, 2.4, 2.7, 2.9, 3.3,  #>     2.4, 2.3, 3.2, 3.1, 3.6, 2.9, 2.7, 3.2, 3.1, 1.9, 2.5, 2.5,  #>     2.5, 3.6, 3, 3.9, 1.9, 1.9, 2.2, 3.2, 2.4, 3.6, 2.6, 2.7,  #>     3.3, 3.2, 3.1, 0.9, 2.4, 3.4, 2.4, 3.8, 3.6, 2.7, 1.4, 3.1,  #>     3.7, 1.8, 2.3, 3, 2.9, 3.4, 3.2, 3.3, 2.9, 2.9, 1.7, 2.7,  #>     3, 2.4, 2.6, 3.1, 1.6, 2.6, 3.5, 2.7, 2.5, 3.5, 3.7, 2.4,  #>     1.7, 2.8, 3.6, 2.8, 2.8, 2.5, 2.9, 3.7, 2.4, 1.7, 2.8, 3.5,  #>     3.1, 2.1, 3.7, 2.7, 3.5, 3, 3.5, 3.2, 3.2, 2.2, 2.7, 2.7,  #>     3.7, 2.5, 2.7, 2.5, 3.8, 3.6, 2, 2.3, 3, 2.7, 3.7, 2.7, 2.4,  #>     3, 2.6, 3, 2.8, 2.8, 3.6, 3.9, 2.8, 2.6, 2.6, 2.8, 2.7, 2.3,  #>     2.7, 2.7, 2.9, 1.7, 3.8, 3.7, 3.7, 3.2, 2.8, 2.9, 2.5, 2.4,  #>     3.5, 3.3, 0.9, 3, 3.3, 3.3, 1.8, 3.4, 2.6, 3.6, 2.5, 2.7,  #>     1.5, 2.8, 3.2, 3.3, 3, 2.4, 3.4, 3.1, 3.2, 2.3, 3.1, 2.5,  #>     3.6, 2.2, 3.1, 2.4, 3, 3.2, 3.5, 3.5, 3, 2.6, 3.6, 3, 3.9,  #>     2.2, 3.8, 2.2, 3.6, 2.4, 3.4, 2.8, 2.3, 3.1, 2.8, 2.7, 3.2,  #>     3.5, 3.4, 3, 3.5, 2.3, 2.4, 1.8, 2.2, 3.3, 3.3, 2.3, 3.6,  #>     2.8, 1.8, 3.5, 3.7, 1.9, 2.7, 3.6, 2.7, 3, 3.6, 3.4, 3.4,  #>     2.6, 2.4, 2.3, 2.8, 2.3, 2.2, 2.4, 3, 3.4, 1.9, 2.8, 2.9,  #>     3.5, 2.7, 3.3, 3, 3.2, 2.7, 2.5, 2.1, 1.8, 3, 3.2, 3.7, 3.5,  #>     3.1, 2.4, 2.9, 2.5, 3.3, 3.7, 3.3, 3.3, 3.7, 2.4, 1.9, 3.6,  #>     1.6, 3, 2.8, 3.4, 2.4, 2.5, 3.3, 3.9, 2.7, 2.4, 2, 2.7, 3.5,  #>     2.7, 2.9, 3.6, 2.5, 3.2, 2.8, 1.4, 2.3, 3.4, 2.2, 3.2, 3.8,  #>     3.5, 3.4, 2.7, 3.3, 3.3, 2.7, 3.7, 3.8, 3.2, 2.9, 3.4, 2.9,  #>     3.2, 2.7, 3.5, 3.1, 2, 3, 2.2, 3.8, 1.8, 2.6, 2.7, 2.2, 3.2,  #>     3.5, 3.6, 3.5, 2.9, 2.1, 3.4, 2.2, 3.3, 3.3, 1.7, 1.6, 1.7,  #>     2.1, 3.2, 2, 3.3, 1.1, 3.3, 3.6, 3, 3.4, 3.2, 2.7, 2.4, 3.2,  #>     3.3, 3.3, 3.8, 3.4, 2.2, 2.7, 2.6, 2.1, 3.9, 3.6, 3.5, 3.6,  #>     2.9, 2.4, 3.6, 3.4, 3.2, 2.5, 2.7, 2.8, 3.1, 3.4, 3.7, 2.8,  #>     2.2, 3.6, 1.8, 2.6, 2.4, 3.7, 3.2, 3.4, 2.8, 2.9, 3.1, 1.7,  #>     2.9, 3.2, 2, 2.7, 3.4, 3.1, 3.1, 2.7, 2.6, 3, 2.2, 2.3, 1.6,  #>     1.3, 2.6, 2.3, 2.4, 2.4, 2.1, 3, 1.8, 3.6, 3.2, 3, 2.9, 1.9,  #>     2.6, 3.2, 3.3, 3.7, 2.7, 3.8, 3.1, 3.1, 3.9, 2.4, 3.6, 2.8,  #>     3, 2.3, 2.5, 3.2, 3.2, 2.4, 2.2, 3.3, 2.5, 2.5, 2.1, 2.1,  #>     1.3, 3, 1.4, 3.1, 2.9, 2.2, 2.2, 1, 1.7, 2.9, 3.2, 3.2, 1.7,  #>     2.9, 2.3, 3.6, 3.4, 3.6, 2.5, 2.8, 2.9, 3, 2.9, 3.7, 3.6,  #>     3.9, 3, 2.6, 2.7, 2.6, 3.2, 3.2, 3.5, 2.9, 3.3, 3.3, 3.8,  #>     3.6, 2.6, 3.3, 1.8, 2.4, 2.5, 2.4, 3.5, 3.1, 3.2, 3.3, 1.7,  #>     1.4, 3.4, 2.4, 1.7, 3.1, 2.7, 1.7, 3.4, 3.9, 2.9, 1.8, 3.6,  #>     3.2, 3.6, 3, 3, 3.1, 1.9, 3, 2.6, 3, 2.3, 3.6, 3.7, 3.7,  #>     2.5, 3.4, 2.8, 1.4, 2.1, 3.7, 3.1, 2.9, 3.5, 2.1, 3, 2.6,  #>     3.3, 3.7, 2.4, 2.8, 1.8, 2.2, 2.6, 2.9, 3.4, 3.5, 2.3, 3.7,  #>     2.1, 2.7, 2.6, 2.8, 3.3, 2.4, 2.9, 2.4, 2.6, 3.2, 3, 3.5,  #>     2.6, 2.6, 2, 2.5, 3.6, 2, 2.8, 3.9, 3.7, 2.4, 2.7, 2.4, 3.2,  #>     2.3, 3.4, 2.6, 2.6, 3.4, 2.1, 3, 3, 2.7, 2.7, 2, 2.1, 3.4,  #>     3.8, 3.9, 1.3, 2.7, 2, 3.5, 2.5, 3.5, 3.3, 2.3, 3.6, 2.3,  #>     3.5, 3, 3, 2.5, 2.9, 3.7, 3.5, 2.7, 3.2, 2.1, 2.3, 2.4, 3.2,  #>     3.7, 3.1, 2.1, 3.3, 1.7, 2.5, 3, 2.3, 2.7, 3.7, 1.9, 2, 3.4,  #>     2.4, 1, 2.2, 3, 3.7, 3.3, 3.2, 2.7, 3.5, 3.7, 3.5, 3.1, 3.7,  #>     3.5, 3.2, 3.6, 3.4, 2.2, 2.2, 2.1, 2.8, 2.4, 2, 2.4, 3.3,  #>     3.4, 3, 1.8, 3.4, 2.1, 2.1, 2.5, 3.2, 3.6, 2.6, 2.7, 3.5,  #>     3, 1.6, 2.5, 2, 3.6, 2.2, 2.5, 3.2, 2.1, 2.8, 3, 2.5, 2.4,  #>     3.1, 1.6, 2.9, 2.4, 2.1, 1.8, 2.9, 1.7, 2.1, 2.9, 2.2, 3.3,  #>     3.2, 2.4, 2.9, 3.7, 1.9, 3.1, 2.9, 3.7, 3.3, 3.5, 0.8, 3,  #>     2.5, 3.7, 3.7, 2.7, 3.1, 2.9, 3.5, 3.3, 3.1, 2.2, 2.2, 1.5,  #>     2.8, 2.9, 2.9, 3.5, 3.1, 2.8, 2, 3.7, 3.3, 3.1, 3.4, 2.6,  #>     3.2, 3.7, 1.8, 2.7, 2.9, 3.5, 2.9, 3.7, 3.8, 0.7, 2.2, 2.9,  #>     3.2, 2, 2.6, 3.5, 2.4, 3.2, 1.4, 3.2, 3.4, 3.3, 3, 2.8, 2.1,  #>     3.2, 3.2, 3.8, 3, 3.6, 3.1, 1.5, 2.3, 3.2, 2.5, 3.4, 2.5,  #>     2.3, 3.2, 3.5, 2.8, 3.1, 2.9, 3.1, 2.3, 3.5, 3.5, 1.1, 2.9,  #>     3.4, 3.8, 2.7, 2.7, 3.2, 3, 3.2, 2.4, 2.9, 2, 3.1, 3, 1.2,  #>     3.1, 3.4, 3.4, 3, 3.7, 1.6, 2.7, 2.7, 2.9, 2.6, 3.7, 2.7,  #>     2.7, 3.4, 3.3, 3.4, 3, 2.4, 1.7, 3.9, 2.7, 3.8, 2.4, 3.1,  #>     3.9, 2.2, 3.6, 3.4, 3.5, 3, 3.7, 2.5, 3.3, 3.6, 1.7, 3.2,  #>     1.8, 3.5, 3.3, 1.8, 2.2, 3.2, 3.1, 3.1, 3, 3, 2.9, 3.6, 1.6,  #>     1.8, 3.1, 2.5, 3.5, 2.5, 3.1, 3.6, 2.7, 2.7, 3.7, 2.7, 3.2,  #>     3.6, 1.9, 3.5, 3.4, 3.2, 2.7, 3.6, 2.2, 2.8, 2, 3, 2.4, 1.4,  #>     3, 3.6, 2.7, 2.4, 3, 2.8, 2.9, 3, 1.8, 2.4, 3, 2.8, 2, 3,  #>     2.8, 3.1, 2.7, 2.8, 3.3, 2.6, 3.3, 2, 1.1, 3.7, 3.5, 3.4,  #>     3.7, 2.8, 2.2, 2.9, 3.4, 2.7, 2.7, 2.9, 3.3, 3.6, 3.8, 2.8,  #>     3.2, 3.1, 2.7, 1.6, 3.5, 3.7, 3.1, 2.7, 3.3, 3.3, 2.9, 3.5,  #>     2, 3.8, 3.1, 3, 2.4, 1.6, 2.2, 3.8, 2.4, 3.1, 2.7, 3.8, 3.2,  #>     2.5, 2.1, 2.4, 2.1, 3.5, 3, 3.3, 1.8, 2.5, 2.5, 2.7, 2.5,  #>     3.3, 2.7, 3.7, 2.1, 3.4, 3.5, 3, 2.9, 1.7, 2.8, 3.7, 3.5,  #>     3.9, 3.1, 3.8, 1, 2.4, 2.7, 3.2, 2.4, 3.4, 3.2, 2.5, 3.8,  #>     1.2, 3.5, 2.7, 3.5, 3.3, 3.1, 1.7, 1.6, 3.4, 2.5, 2.8, 3.8,  #>     3.5, 2.7, 3, 1.2, 1.8, 1.8, 3.8, 3.9, 3.4, 3.2, 3.5, 3.2,  #>     3.8, 1.8, 2.8, 2.4, 3.6, 2.5, 2.9, 2.4, 3.4, 3.1, 2.7, 2.9,  #>     2.9, 2.5, 2.9, 1.3, 2.3, 3.6, 3.3, 1.9, 2.8, 3.3, 2.3, 3.7,  #>     3.3, 3.2, 2.6, 2.6, 2.9, 2.4, 2.1, 2.1, 3.2, 2.4, 3, 3, 2.5,  #>     2.3, 3, 3.6, 1.5, 1.9, 3.8, 3, 2.8, 2.1, 3.7, 2.8, 3.7, 2.2,  #>     3, 2.9, 2.7, 2.7, 2.4, 3.7, 2.6, 3.2, 2.2, 3.7, 2.2, 3.1,  #>     2.8, 3.4, 2.9, 2.1, 3.4, 2.9, 2.2, 2.2, 2.7, 2.5, 2.2, 3.3,  #>     2.7, 2.8, 3.3, 1.9, 3.9, 2.5, 1.7, 2.9, 2.8, 1.7, 1.5, 2.7,  #>     1.7, 3.9, 2.3, 3.2, 1.4, 3.5, 3.9, 2, 3.9, 3.6, 2, 2.6, 3.7,  #>     3.6, 2.4, 3.5, 2.7, 3.1, 3.4, 2.8, 3, 3.4, 2.6, 3.7, 3.1,  #>     1.6, 2.7, 3.1, 3.3, 3.4, 3.6, 3.6, 1.8, 3.1, 3.5, 3.2, 3,  #>     2.8, 2.9, 2.2, 3.5, 2.7, 1.4, 3.5, 2, 1.3, 3.3, 3.4, 3.2,  #>     3.4, 2.8, 3.1, 3.4, 3, 3.1, 2.4, 3.2, 2.2, 2.4, 1.2, 3.6,  #>     3.5, 1, 3.2, 2.2, 2.8, 3.5, 3, 3.8, 2.1, 3.4, 3.3, 3, 2.5,  #>     3, 3.7, 3.4, 3, 3, 2.3, 2.4, 3.7, 3.1, 2, 3.5, 3.5, 2.1,  #>     3.4, 2, 3.3, 2.2, 3.3, 1.8, 2.9, 2.2, 1.8, 3.3, 1.7, 3.4,  #>     3.2, 2.4, 3.7, 2.9, 2.3, 3.2, 2.7, 2.3, 2.5, 2.7, 2.4, 2.9,  #>     3.5, 3.4, 2.2, 3.4, 2.7, 2.1, 3.3, 3.9, 3, 2.2, 3.6, 3, 2.5,  #>     3.6, 3.2, 3.2, 3.6, 2.7, 3.5, 3.2, 2.8, 3.1, 2.9, 1.6, 3.1,  #>     1.8, 2.6, 1.4, 2.8, 3.2, 3.8, 2.2, 2.9, 3.3, 1.3, 3.2, 3.4,  #>     3.1, 2.8, 3.3, 3, 3.8, 3.2, 3.3, 2.6, 3.6, 2.9, 2.3, 2.4,  #>     2.5, 1.8, 2.8, 3.3, 3.4, 3, 2.2, 4, 2.9, 3.4, 3.1, 3.5, 3.1,  #>     3.1, 2.6, 3.5, 1.9, 2.8, 3.5, 2.9, 2.7, 3.1, 2.8, 2.3, 2.9,  #>     2.2, 2.3, 1.5, 1.9, 3, 2.9, 2, 1.7, 2.4, 4, 3.2, 2.6, 3.2,  #>     2.7, 3.1, 3.5, 3.4, 0.8, 3.2, 2.8, 2.8, 2.6, 2.9, 2.7, 2.6,  #>     2.5, 2.3, 3, 1.9, 3.8, 2.8, 3.3, 3.4, 2.6, 2.2, 1.7, 3.5,  #>     3.1, 3.8, 2.3, 2.8, 3.3, 3.7, 2.9, 3.7, 2.1, 2.4, 3.8, 2.7,  #>     2.1, 1.2, 2.7, 3.2, 1.4, 2.3, 2.5, 3.2, 3.2, 3.2, 3.3, 2.8,  #>     3.6, 3.6, 2.3, 3.1, 2.8, 3.7, 3.1, 2.4, 2.3, 2.3, 3.2, 1.5,  #>     3.5, 2.2, 3.5, 2.7, 3, 3.2, 3.8, 3.6, 3.8, 3.5, 3.2, 3.1,  #>     3.7, 3.3, 2.5, 2.5, 3.3, 3, 3.2, 3.4, 3.7, 2.1, 3.8, 3.6,  #>     2.3, 2.5, 2.1, 2.9, 2.7, 2.4, 3.3, 2.7, 2.7, 3.3, 3.1, 3.3,  #>     3.5, 2.1, 3.6, 1.5, 2.2, 3.5, 3.2, 3.8, 2.9, 2.7, 2.9, 3,  #>     2.6, 3.6, 2.3, 2.5, 3.4, 2.8, 2, 2.4, 2.7, 3.5, 2.9, 2.6,  #>     3.3, 2.2, 2.1, 3.3, 3.6, 3, 2.2, 2.7, 2.8, 3.8, 3.1, 1.5,  #>     2.6, 1.7, 3.1, 3.1, 2.6, 2.8, 2.7, 3.2, 2.7, 3, 2.5, 1.8,  #>     3.1, 1.6, 3.4, 3.9, 2.7, 2.5, 2.1, 3.4, 3.3, 2.7, 2.6, 3.4,  #>     1.5, 2.4, 1.4, 2.3, 3.6, 2.6, 3.4, 3.5, 2.7, 3, 2.2, 2.4,  #>     3.3, 3.2, 3.3, 3, 2.8, 3.7, 3, 2.4, 3, 3.5, 3, 3.5, 3, 1.5,  #>     1.6, 2.2, 2.7, 3.6, 2.5, 3.2, 3.3, 2.4, 3.1, 2.6, 2.4, 1.3,  #>     3.1, 3.2, 2.2, 2.2, 2.7, 3.2, 2.3, 3.7, 3, 3.3, 3.7, 3.6,  #>     3.3, 2.2, 2.6, 3.3, 1.7, 2.5, 2.8, 3.1, 3.4, 2.5, 2.5, 2,  #>     2.8, 2.6, 1.7, 3.3, 2.5, 3, 3.8, 2.7, 2.7, 2.5, 1.8, 2.7,  #>     1.8, 3.7, 2.8, 1.4, 3.1, 3.3, 2.7, 3.7, 3.3, 3.7, 3.6, 3.4,  #>     2.1, 2.9, 3.5, 2.3, 2.5, 3.5, 3.8, 2.4, 1.8, 2.6, 3.2, 2.6,  #>     2.9, 2.8, 2.9, 2.2, 3.3, 3, 2.4, 2.8, 2.2, 3.2, 3.5, 2.6,  #>     3.2, 2.9, 3.2, 1.9, 3.1, 3, 2.8, 2.7, 3.5, 2.5, 3.4, 3.9,  #>     3.5, 3.2, 3.5, 3.1, 3.7, 2.9, 3.7, 2.7, 3.3, 3.1, 2.1, 2.2,  #>     2.8, 2.9, 3.1, 2.7, 3.7, 3.5, 2.9, 3.3, 2.6, 2.8, 3.6, 2.2,  #>     3.4, 3, 3.4, 2.3, 3.3, 2.6, 2.3, 3.6, 2.7, 3.3, 1.7, 1.8,  #>     3.7, 2.3, 3.3, 1.8, 3.4, 2.8, 3, 3, 3.1, 3.3, 3.9, 2.1, 2.1,  #>     3.5, 3, 3.2, 3.5, 1.4, 2.7, 2.8, 3.8, 3.1, 2.7, 3.7, 3.9,  #>     2.9, 1.4, 3.3, 3.3, 3.6, 1.6, 3.5, 1.1, 2.5, 3.5, 3.7, 3,  #>     2.3, 2.7, 2.5, 3.5, 2.9, 3, 3.3, 3.8, 3.7, 2.7, 3.5, 3.1,  #>     3.7, 3.6, 1.6, 3.4, 3, 3, 3.5, 3, 1.8, 2.2, 2.8, 3.2, 3.1,  #>     1.9, 3.1, 3.4, 3.2, 3.1, 3.3, 3.7, 3.1, 1.9, 2.1, 2.7, 3.2,  #>     3, 2.7, 2.6, 3, 3.4, 3.3, 3.2, 3.5, 2.3, 3, 3.4, 3.6, 2.3,  #>     2, 3.5, 3, 2.5, 2, 1.7, 2.1, 3.3, 2.5, 3.6, 3.1, 3.7, 3.2,  #>     2.6, 3.5, 2.6, 3.1, 3.1, 1.8, 1.7, 3, 2.7, 3.4, 1.4, 1.9,  #>     1.3, 3, 3.8, 2.8, 3, 3.2, 2.5, 3, 3.8, 3.1, 3.6, 2.7, 2.4,  #>     3.8, 2, 2.9, 2.2, 3.3, 2.9, 3.1, 3.4, 3.6, 2.8, 2.8, 3.2,  #>     2.6, 3.4, 2.6, 2.7, 2.3, 3.5, 2.2, 3.3, 1.6, 2.6, 1.9, 2.2,  #>     2.3, 2.9, 2.9, 2.9, 2.5, 3.3, 1.2, 3.1, 1.7, 2.9, 3, 0.8,  #>     2.3, 2.3, 3.4, 3.7, 3.6, 3.4, 2.8, 2.5, 3.2, 2.4, 2.6, 2.7,  #>     2.5, 2.4, 2.9, 1.9, 3.8, 2.9, 3.1, 3.3, 2.4, 3.7, 2.5, 3.2,  #>     3.9, 3.1, 3.5, 2.8, 3.1, 3.3, 2.7, 3.2, 2.8, 2.7, 2.7, 3.3,  #>     2.5, 2.7, 3.1, 3.7, 2.4, 2.6, 2.7, 3.9, 3.6, 3.1, 2.4, 3.6,  #>     2.3, 2.9, 1.1, 1.9, 3, 3.8, 2.8, 2.8, 1.5, 2.6, 2.6, 1.8,  #>     2.3, 2.6, 3.5, 3.1, 3, 3.4, 3.7, 2.2, 3.2, 2, 3.8, 2.2, 3.6,  #>     3.4, 1.4, 1.6, 2.5, 3.4, 1.9, 3.8, 2.7, 3.7, 2.2, 2.7, 2.6,  #>     2.8, 1.7, 3.4, 1.8, 3.1, 2.6, 2.3, 2.4, 2.7, 3.3, 3.2, 3.1,  #>     2.9, 2.9, 3.1, 3.1, 1.9, 3.9, 3.3, 3.2, 3.6, 1.3, 2.4, 2.9,  #>     1.7, 2.7, 3.7, 2.8, 3.8, 3.3, 1.9, 2.9, 1.1, 2.4, 3.6, 3.5,  #>     3.4, 2.2, 2.7, 3, 3.2, 2.8, 3.1, 3.4, 3.2, 1.8, 2.4, 3.5,  #>     2.6, 3, 3, 3, 3.1, 3.2, 3.2, 0.7, 2.7, 3, 3.9, 2.1, 2, 2.8,  #>     2.7, 3.3, 1.9, 2.2, 3.4, 3.5, 3.3, 2.5, 2.1, 2.9, 3.3, 3.1,  #>     2.9, 2.9, 1.1, 2, 2.5, 3.5, 2.9, 1.6, 2.7, 2.6, 3.3, 2.3,  #>     3, 2.7, 3.2, 3.1, 3.4, 3.4, 3.1, 1.8, 3.1, 3.3, 2.8, 3.1,  #>     1.8, 2.2, 3.6, 3, 2.5, 3, 1.4, 1.7, 3.6, 1.6, 3.5, 2.5, 3.3,  #>     2.5, 2.8, 3.4, 3.2, 3.1, 1.1, 3.7, 2.8, 2.9, 2.6, 2.5, 2,  #>     3.7, 2.2, 2.9, 2.9, 2.9, 3.1, 3.6, 3.3, 3.4, 3.2, 3.4, 3.8,  #>     2.3, 3.5, 3.4, 3.6, 3.3, 1.2, 2.6, 2.9, 3.4, 3.3, 1.6, 3.1,  #>     3, 3.9, 3.1, 3, 1.1, 4, 3, 3.1, 2.8, 3.4, 3.6, 2.8, 2.9,  #>     2.3, 3, 3.2, 2.7, 3.2, 1.7, 3.4, 3, 3.3, 3.4, 2.9, 3.4, 3.8,  #>     1.7, 3, 3.5, 3.7, 1.8, 2.6, 2.2, 1.6, 3.7, 3.4, 2.8, 2.9,  #>     2.7, 2.4, 2.4, 1.9, 3, 3.1, 2.4, 3.1, 1.9, 3, 1.6, 3.5, 1.4,  #>     2.1, 2.2, 3.6, 2.8, 1.3, 2.2, 3.8, 3.5, 3.3, 3.3, 2.2, 3.5,  #>     3.4, 2.6, 3.3, 2.8, 2.5, 1.1, 2.2, 3.3, 3.4, 3, 3.7, 2.2,  #>     2.7, 3.7, 3.5, 3.8, 2.1, 2.7, 1.6, 2.1, 2.5, 3.2, 2.3, 3.6,  #>     2.1, 3.1, 1.9, 2.7, 2.3, 3.3, 2.7, 2.6, 2.9, 0.7, 3, 2.4,  #>     3.1, 1.7, 2.9, 2.7, 3.1, 2.8, 3.5, 3.5, 3.5, 2.6, 2.6, 2.7,  #>     3.9, 3, 2.2, 3.3, 2.4, 2, 3.3, 2.7, 1.9, 2.1, 2.7, 3.8, 3.3,  #>     2.2, 2.9, 2, 3.1, 3.7, 2.6, 2.7, 3.1, 3.2, 3.4, 2.1, 3.5,  #>     2.2, 2, 3.3, 2.9, 2, 3.9, 2.6, 2.4, 3.3, 2.7, 1.9, 3, 3.4,  #>     2.6, 2.3, 3.1, 3.4, 2.9, 1.5, 2.5, 2.6, 3.8, 3.2, 3.4, 3.4,  #>     3.1, 3.2, 2.5, 2.1, 2.3, 1.5, 2, 3.7, 2.3, 3.9, 2.5, 2.6,  #>     2.5, 3.3, 3.6, 2.6, 2.5, 2.9, 3.6, 2.9, 2.3, 3, 2, 3.2, 1.9,  #>     3.7, 2.9, 1.7, 2.6, 2.4, 2, 3.2, 3.3, 4, 1.3, 2.8, 3.2, 1.7,  #>     3, 3.5, 2.9, 3.6, 3.3, 2.7, 2.3, 2, 2.3, 3.1, 3.6, 2.4, 3.7,  #>     3.5, 3.4, 1.3, 3.1, 2.3, 2.4, 2.9, 1.6, 2.9, 3.1, 2.6, 3.6,  #>     3.5, 3.6, 3.1, 2.3, 2.3, 3.1, 2, 1.8, 2.8, 2.1, 2.6, 2, 3.2,  #>     2, 3.5, 2.2, 2.1, 2.5, 3.7, 2.9, 1.3, 1.9, 3.7, 4, 3.2, 3.6,  #>     2.9, 2.4, 3.5, 3.1, 1.2, 2.7, 3.7, 1.8, 2.7, 3.8, 2.4, 3.3,  #>     2.8, 3.6, 2.5, 3.5, 3.6, 3.6, 3.1, 3.1, 3.2, 2.2, 3.8, 3,  #>     3, 2.3, 3.6, 2.4, 2.6, 3.2, 3.1, 1.7, 2.2, 3.7, 2.7, 3.9,  #>     3.4, 3.3, 3.4, 2.9, 3.5, 3.8, 1.9, 3.1, 3.4, 3, 2, 3.4, 3.4,  #>     2.8, 2.8, 3.4, 3.3, 2.5, 2.6, 2.2, 2.6, 3.8, 1.5, 2.6, 3.2,  #>     2.5, 3, 1.4, 3.4, 2, 2.5, 2.4, 2.7, 3.2, 2.5, 2.8, 3.7, 3.4,  #>     3.6, 2.7, 3.2, 3.3, 2.9, 3.2, 1.9, 3.4, 1.9, 2.8, 3.1, 2.9,  #>     1.8, 1.7, 2.6, 2.6, 1.8, 2.6, 2.2, 3.9, 3.3, 1.6, 2.8, 3.7,  #>     1.8, 2.8, 2.9, 3, 3.6, 2.9, 3.4, 2.2, 2.4, 3.3, 3.1, 3.4,  #>     3.3, 3.5, 3.1, 3.1, 3.2, 3.6, 2.7, 3.4, 3.3, 2.8, 2.8, 3.7,  #>     2.9, 2.8, 3.5, 3.5, 3, 2.1, 3.8, 2.1, 3.7, 2.4, 3.5, 0.6,  #>     3, 3.4, 2.9, 3.2, 3.2, 3.8, 3.3, 3.8, 2.8, 2.2, 2.8, 1.5,  #>     2.9, 3, 3.6, 1.1, 2.9, 3, 1.7, 3.5, 3, 3.6, 3.2, 3.7, 1.4,  #>     2.4, 2.2, 2.9, 3.4, 3.1, 2.6, 3.7, 2.4, 2.4, 3.6, 1.7, 3.1,  #>     3.5, 2.9, 3.2, 3.5, 2.7, 2.2, 2.4, 2.2, 2.9, 3.4, 3.5, 3.9,  #>     2.1, 2.8, 3, 3.5, 1.9, 4, 3.4, 3, 1.1, 2.7, 3.1, 1.8, 3.4,  #>     3.2, 3.6, 1.1, 2.9, 3.6, 3, 2.8, 2.6, 2.4, 1.5, 2.9, 3, 3.7,  #>     2.9, 2.4, 1.9, 3.5, 2.5, 3.4, 3.7, 3.2, 3.9, 2.2, 2, 2.6,  #>     2, 3.2, 3.2, 2, 2.8, 3.4, 2.8, 2.5, 3.3, 3.3, 2.2, 3.3, 3.3,  #>     3.8, 3.3, 2.4, 2.2, 2.7, 3.2, 2.2, 3.8, 3.4, 3.1, 3.2, 2.7,  #>     2.4, 2, 2.6, 2.8, 3.1, 3.6, 2.7, 3.5, 2.7, 3.5, 2.6, 3.9,  #>     3.1, 3, 2.3, 3.1, 3.3, 1.1, 3.6, 3.3, 3.3, 2.7, 3.8, 2.9,  #>     1.6, 2.3, 2.6, 2.1, 2.8, 3.1, 3.6, 3.1, 3.4, 1.8, 3.1, 3.3,  #>     1.4, 2.3, 3.4, 2.7, 3, 2.8, 2.2, 2.4, 3.2, 3.5, 3.9, 3.8,  #>     3.2, 2.9, 2.3, 3.9, 3.6, 2.5, 2.6, 3.3, 2.2, 3.8, 3.4, 1.7,  #>     1.7, 2.5, 3, 2.1, 3.3, 2.9, 3.2, 3.5, 3.1, 2.6, 2.3, 2.9,  #>     2.9, 3.4, 2.6, 1.1, 3.3, 1.6, 1.5, 3, 2.4, 2.2, 3.2, 2.6,  #>     3.4, 3.5, 3.1, 2.1, 3, 3, 3, 3.3, 3, 3.8, 1.9, 1.3, 3.6,  #>     2.3, 3.5, 2.7, 3.2, 2.9, 3.4, 2.6, 2.1, 3.3, 3.3, 2.6, 3.4,  #>     2.9, 2.9, 2.8, 3.3, 2.4, 3, 2.5, 2.6, 2.2, 3.3, 1.9, 3.4,  #>     3.1, 3.4, 2.9, 2.7, 2.3, 2.8, 2.7, 1.8, 2.5, 0.9, 2.8, 3,  #>     2.1, 3.7, 1.8, 1.8, 3.6, 2.7, 3.3, 3, 3.3, 2.4, 2.8, 1.7,  #>     2.4, 2.8, 3.8, 2.4, 3.3, 2.4, 1.9, 1.4, 3.7, 1.3, 3.3, 3.3,  #>     3.1, 2.9, 3.2, 2.6, 2.2, 2.5, 3.7, 2.1, 2.3, 2.4, 3.8, 3.3,  #>     3.6, 3.3, 3, 2.7, 2.9, 2.8, 3.2, 3, 1.3, 2.2, 2.8, 2.1, 2.9,  #>     1.9, 2.9, 2.4, 1.9, 2.2, 2.5, 2.5, 3.4, 2.2, 3.1, 1.5, 3.4,  #>     3.5, 3.2, 2.6, 2.9, 2.6, 2.6, 3.6, 3.5, 3.1, 3.9, 2.7, 2.8,  #>     1.1, 2.5, 3.2, 3, 3, 2.3, 2.1, 3.2, 2.7, 3.1, 2.1, 2.8, 2.2,  #>     3.2, 2.8, 3.8, 2.6, 2.1, 2.9, 3.1, 3.5, 3, 1.8, 3.7, 3.3,  #>     3.4, 3.4, 2.8, 3.3, 3.6, 2.7, 3.2, 1.9, 2.6, 3.6, 2.9, 3.8,  #>     2.9, 3.5, 3, 2.6, 3.5, 3.3, 2.6, 2.8, 2.2, 2.8, 3.5, 3.1,  #>     2, 2.2, 1.3, 3.6, 2.7, 2.7, 2.1, 3.2, 1.9, 3.3, 2.6, 3, 2,  #>     3.3, 3.4, 3.4, 3, 3.3, 2.8, 2.9, 3.6, 1.7, 2.7, 2.8, 3.3,  #>     1.6, 2.3, 2.6, 3, 2.1, 2.7, 2.5, 3.9, 2.5, 3, 3.7, 2.5, 3.9,  #>     4, 3.1, 3, 2.8, 2.8, 3, 2.7, 2.1, 3.4, 2.5, 3.3, 3.1, 3.5,  #>     3.8, 3.1, 2.9, 3.3, 3.2, 1.9, 0.5, 3.5, 3.6, 3.2, 2.8, 3.7,  #>     2.1, 4, 2.5, 2, 1.7, 2.6, 3.7, 3.4, 3, 3.8, 3.1, 3.4, 2.4,  #>     1.5, 3.5, 2.9, 3.5, 2, 1.8, 2.3, 0.8, 2.7, 1.4, 3.6, 3.6,  #>     3.3, 1.4, 3.2, 3.9, 3.7, 2.7, 1.5, 3.4, 3.2, 2.9, 3.1, 3.1,  #>     3.5, 1.7, 0.6, 3.8, 3.1, 2.5, 3.6, 2, 2.6, 2.9, 2.8, 2.6,  #>     2.3, 3.9, 3.4, 3.7, 3.7, 2.4, 2.4, 2.8, 2.8, 2.8, 3.1, 3.1,  #>     3.9, 1.3, 2.7, 3.1, 2.7, 2.8, 3.6, 2.7, 3.6, 3.7, 2.1, 3.8,  #>     3.3, 3.2, 3, 3.2, 3.6, 2.4, 3.1, 1.8, 3.4, 2.9, 2.1, 3.6,  #>     3.7, 3, 3.5, 3.5, 1.3, 3.2, 3.6, 0.8, 3.1, 3.2, 3.1, 3.1,  #>     2.2, 3.6, 3, 2.5, 2.1, 2.9, 2.6, 3.3, 3, 3.5, 2.7, 3, 2.3,  #>     2.3, 2.1, 2.5, 2.8, 2.3, 3.1, 2.7, 2.3, 3, 3.5, 2.6, 2.9,  #>     3, 1.6, 2.8, 2.7, 3.5, 2.2, 2.2, 3.4, 2.8, 3.5, 3.4, 2.8,  #>     2.6, 2.5, 2.4, 3.2, 3, 3.6, 3.8, 3.5, 2.5, 2.5, 1.8, 3.8,  #>     2.6, 2.3, 2.5, 2.1, 2.7, 2.2, 3, 3.5, 3, 3.3, 3.7, 2.7, 2.9,  #>     3.4, 3.6, 3.2, 2.5, 3, 2.9, 2.1, 3.6, 3.5, 3.2, 2.7, 2, 3.1,  #>     1.7, 3.3, 2.6, 2.9, 2.1, 2.9, 2.4, 3.6, 3, 3.9, 1.6, 3.1,  #>     2.4, 2.7, 3.6, 2.5, 3.7, 2.6, 3.3, 3.4, 1.7, 2.9, 3.1, 3.4,  #>     2.7, 3.5, 1.4, 3.7, 2.5, 3.7, 4, 3.7, 3.5, 2, 1.2, 3.4, 2.7,  #>     2.4, 2.3, 2.8, 2, 3.4, 3.1, 2.9, 3.2, 3.7, 1.8, 3.5, 3.7,  #>     3.4, 3, 3, 2.3, 3.1, 3.8, 3, 3.6, 3, 3.5, 3.4, 2.4, 2.5,  #>     2.1, 3.6, 3.4, 2.4, 3.8, 3.7, 1.8, 2.7, 2.2, 2.3, 3.3, 2.8,  #>     1.4, 3.8, 3.5, 3.1, 3.9, 3.6, 2.5, 2.9, 2.3, 2.4, 3.2, 2,  #>     3.3, 3.4, 2.7, 3.3, 2.8, 3.2, 3.1, 2.4, 2.3, 3.7, 2.2, 2.4,  #>     3.6, 1.8, 1.5, 3, 3.5, 3.5, 1.7, 2.5, 2.7, 3.5, 3.3, 2.8,  #>     1.6, 3, 2.5, 1.4, 2.7, 3.6, 1.8, 2.9, 3.4, 2.8, 2.7, 3.7,  #>     2.4, 1.5, 2.9, 3, 2.9, 1.8, 2.5, 2.9, 4, 3.6, 2.1, 3.9, 2.9 #>     ), math = c(90, 79, 99, 79, 75, 86, 79, 84, 83, 64, 70, 71,  #>     65, 70, 66, 87, 76, 79, 76, 81, 68, 70, 79, 62, 84, 78, 60,  #>     93, 66, 99, 85, 88, 75, 78, 48, 62, 77, 96, 94, 86, 70, 45,  #>     68, 94, 88, 58, 89, 80, 61, 82, 100, 58, 100, 85, 87, 79,  #>     70, 77, 88, 75, 56, 60, 70, 88, 69, 100, 78, 84, 68, 80,  #>     70, 87, 87, 88, 71, 68, 98, 70, 74, 78, 65, 80, 67, 87, 87,  #>     87, 63, 98, 82, 64, 72, 96, 53, 79, 100, 85, 52, 92, 86,  #>     100, 70, 84, 69, 57, 75, 97, 71, 100, 80, 68, 83, 90, 49,  #>     92, 89, 88, 75, 51, 63, 53, 83, 71, 70, 68, 81, 68, 53, 83,  #>     94, 50, 100, 75, 67, 55, 83, 91, 67, 69, 77, 69, 89, 89,  #>     85, 79, 77, 50, 59, 53, 74, 78, 67, 84, 79, 85, 57, 100,  #>     76, 77, 90, 61, 91, 44, 99, 61, 67, 47, 70, 45, 74, 69, 80,  #>     75, 93, 85, 80, 46, 78, 50, 67, 59, 76, 63, 92, 100, 57,  #>     79, 66, 82, 80, 65, 64, 48, 92, 70, 80, 77, 80, 73, 68, 98,  #>     71, 91, 85, 71, 66, 51, 79, 71, 82, 88, 69, 58, 89, 62, 75,  #>     88, 73, 71, 75, 83, 85, 67, 62, 69, 60, 100, 58, 75, 75,  #>     86, 81, 72, 80, 74, 70, 86, 74, 95, 72, 89, 79, 70, 75, 64,  #>     70, 81, 86, 64, 76, 92, 71, 75, 63, 100, 65, 55, 52, 72,  #>     85, 48, 55, 94, 76, 61, 74, 47, 85, 88, 72, 66, 86, 85, 87,  #>     83, 90, 90, 95, 92, 83, 66, 86, 82, 80, 79, 88, 53, 53, 68,  #>     71, 49, 89, 76, 50, 79, 75, 93, 98, 100, 76, 95, 55, 99,  #>     94, 50, 75, 85, 48, 80, 87, 66, 77, 85, 74, 89, 70, 86, 71,  #>     75, 79, 79, 82, 51, 92, 60, 67, 78, 46, 72, 65, 99, 88, 58,  #>     82, 70, 83, 82, 87, 64, 86, 58, 87, 69, 59, 77, 80, 73, 68,  #>     84, 98, 77, 52, 66, 86, 93, 100, 55, 94, 74, 52, 82, 82,  #>     60, 83, 77, 75, 65, 95, 90, 74, 79, 90, 52, 70, 86, 74, 50,  #>     65, 72, 68, 79, 87, 69, 68, 81, 100, 93, 66, 97, 88, 93,  #>     85, 50, 77, 56, 91, 70, 76, 93, 81, 77, 91, 79, 100, 92,  #>     74, 86, 77, 81, 100, 82, 83, 89, 88, 94, 70, 73, 84, 69,  #>     50, 85, 92, 49, 95, 51, 97, 92, 90, 76, 55, 88, 67, 69, 81,  #>     90, 79, 99, 84, 63, 82, 67, 99, 68, 63, 81, 84, 94, 62, 98,  #>     83, 91, 51, 80, 76, 59, 74, 63, 86, 90, 64, 91, 80, 81, 51,  #>     82, 86, 86, 71, 63, 79, 64, 60, 71, 60, 71, 71, 89, 66, 56,  #>     71, 62, 68, 63, 80, 84, 87, 87, 68, 64, 56, 90, 72, 49, 88,  #>     67, 77, 75, 96, 74, 88, 85, 62, 55, 48, 66, 80, 85, 79, 58,  #>     72, 88, 66, 76, 47, 85, 72, 88, 80, 65, 65, 70, 78, 79, 94,  #>     98, 73, 58, 90, 65, 54, 77, 72, 90, 56, 69, 96, 51, 62, 95,  #>     40, 68, 54, 95, 68, 65, 84, 96, 75, 71, 73, 78, 80, 73, 98,  #>     79, 100, 85, 87, 53, 96, 74, 64, 59, 95, 62, 58, 91, 92,  #>     97, 83, 64, 47, 94, 97, 72, 63, 86, 92, 90, 84, 53, 56, 87,  #>     76, 83, 77, 56, 69, 80, 65, 74, 86, 98, 83, 85, 83, 87, 82,  #>     84, 67, 91, 63, 97, 59, 91, 84, 89, 54, 82, 80, 90, 84, 42,  #>     76, 53, 89, 75, 98, 71, 55, 74, 81, 73, 93, 79, 72, 89, 94,  #>     66, 75, 73, 82, 99, 66, 76, 90, 36, 64, 99, 70, 81, 71, 95,  #>     89, 89, 80, 78, 55, 72, 64, 91, 83, 43, 93, 72, 89, 64, 63,  #>     62, 100, 70, 73, 74, 95, 61, 59, 89, 61, 71, 84, 85, 82,  #>     44, 76, 91, 57, 41, 84, 83, 98, 90, 100, 74, 87, 69, 73,  #>     68, 82, 88, 87, 86, 82, 86, 83, 70, 59, 85, 52, 61, 75, 84,  #>     53, 82, 92, 63, 89, 90, 76, 96, 69, 99, 91, 73, 83, 75, 52,  #>     90, 84, 88, 56, 67, 75, 48, 81, 81, 82, 83, 66, 69, 94, 86,  #>     85, 58, 77, 80, 81, 91, 77, 72, 50, 76, 39, 89, 72, 47, 68,  #>     54, 62, 61, 88, 88, 69, 83, 95, 69, 56, 88, 81, 88, 89, 96,  #>     82, 67, 77, 65, 66, 92, 95, 81, 68, 60, 73, 76, 73, 69, 96,  #>     59, 69, 74, 70, 78, 73, 63, 75, 75, 64, 52, 94, 78, 56, 91,  #>     88, 58, 75, 91, 55, 86, 70, 64, 69, 96, 89, 88, 95, 78, 57,  #>     77, 58, 56, 100, 99, 88, 86, 83, 78, 77, 60, 58, 70, 53,  #>     75, 97, 56, 83, 76, 90, 77, 64, 81, 82, 82, 88, 88, 60, 91,  #>     88, 40, 86, 58, 86, 68, 71, 58, 59, 90, 90, 77, 76, 80, 74,  #>     80, 62, 82, 64, 95, 87, 74, 100, 97, 95, 71, 82, 88, 81,  #>     68, 59, 86, 91, 84, 98, 99, 85, 92, 60, 99, 60, 77, 62, 62,  #>     72, 75, 87, 68, 84, 93, 80, 84, 68, 71, 88, 64, 81, 67, 74,  #>     86, 93, 88, 92, 97, 85, 77, 96, 80, 93, 69, 75, 81, 69, 57,  #>     96, 62, 82, 66, 72, 84, 86, 78, 90, 62, 68, 96, 53, 96, 91,  #>     80, 84, 75, 53, 48, 88, 63, 66, 82, 66, 81, 98, 62, 67, 84,  #>     73, 75, 100, 91, 81, 58, 77, 88, 79, 75, 82, 74, 83, 100,  #>     68, 51, 84, 65, 93, 74, 56, 85, 83, 87, 60, 90, 97, 84, 67,  #>     87, 62, 76, 97, 74, 77, 86, 49, 100, 69, 51, 82, 83, 79,  #>     65, 62, 72, 61, 76, 80, 93, 73, 51, 57, 89, 78, 50, 78, 77,  #>     66, 95, 89, 63, 77, 88, 94, 60, 78, 61, 73, 81, 74, 51, 60,  #>     62, 97, 64, 82, 68, 78, 90, 74, 87, 87, 85, 100, 58, 86,  #>     73, 54, 87, 68, 82, 61, 75, 94, 61, 55, 91, 98, 84, 85, 95,  #>     81, 80, 67, 100, 98, 75, 75, 60, 95, 70, 57, 81, 78, 84,  #>     61, 66, 82, 91, 87, 63, 91, 86, 64, 80, 85, 89, 72, 63, 67,  #>     86, 99, 84, 97, 72, 87, 61, 75, 68, 83, 78, 49, 59, 57, 53,  #>     68, 80, 89, 65, 76, 54, 69, 83, 100, 73, 96, 82, 78, 48,  #>     72, 97, 88, 79, 85, 75, 57, 54, 66, 71, 71, 76, 55, 73, 69,  #>     89, 66, 90, 77, 78, 83, 100, 78, 82, 98, 66, 81, 91, 73,  #>     69, 78, 83, 58, 90, 97, 55, 88, 87, 85, 67, 85, 75, 75, 81,  #>     100, 89, 58, 48, 77, 62, 87, 59, 76, 76, 71, 75, 92, 53,  #>     50, 70, 80, 68, 49, 85, 84, 62, 58, 75, 86, 75, 45, 68, 99,  #>     57, 71, 97, 67, 83, 60, 94, 74, 55, 60, 79, 70, 57, 78, 73,  #>     66, 79, 93, 93, 68, 75, 75, 91, 82, 70, 53, 73, 82, 87, 85,  #>     73, 71, 70, 71, 47, 92, 73, 100, 91, 75, 96, 78, 79, 82,  #>     78, 96, 60, 75, 84, 79, 53, 73, 86, 78, 100, 88, 75, 85,  #>     90, 89, 63, 69, 100, 73, 97, 89, 82, 72, 77, 97, 100, 64,  #>     57, 87, 78, 74, 47, 82, 83, 67, 93, 85, 66, 67, 70, 84, 68,  #>     84, 53, 90, 92, 87, 71, 47, 85, 69, 94, 76, 91, 98, 92, 77,  #>     67, 95, 62, 65, 89, 82, 94, 75, 77, 83, 89, 88, 87, 83, 62,  #>     62, 95, 49, 81, 83, 79, 87, 78, 80, 88, 60, 66, 73, 88, 93,  #>     100, 100, 98, 42, 46, 92, 68, 76, 67, 78, 49, 73, 73, 77,  #>     87, 68, 82, 66, 73, 71, 61, 88, 62, 94, 57, 85, 89, 71, 95,  #>     78, 77, 61, 68, 88, 100, 74, 52, 87, 73, 50, 82, 62, 83,  #>     81, 93, 84, 50, 94, 80, 85, 87, 97, 65, 68, 92, 72, 79, 95,  #>     84, 93, 83, 92, 96, 87, 87, 65, 64, 41, 67, 97, 66, 62, 66,  #>     85, 50, 97, 68, 77, 88, 66, 78, 55, 90, 41, 73, 88, 62, 59,  #>     69, 46, 84, 78, 99, 59, 79, 68, 84, 92, 44, 74, 79, 81, 69,  #>     61, 38, 88, 62, 98, 95, 62, 87, 51, 76, 72, 68, 94, 78, 67,  #>     76, 76, 43, 84, 71, 100, 44, 83, 89, 53, 87, 45, 60, 68,  #>     91, 100, 95, 70, 81, 84, 83, 63, 71, 90, 71, 67, 87, 80,  #>     88, 78, 100, 81, 81, 83, 86, 80, 81, 81, 60, 83, 69, 54,  #>     95, 53, 100, 68, 58, 42, 90, 48, 79, 62, 63, 78, 82, 94,  #>     81, 94, 82, 52, 59, 73, 70, 87, 90, 57, 69, 87, 90, 59, 80,  #>     59, 64, 97, 74, 72, 67, 46, 91, 99, 85, 70, 77, 47, 91, 94,  #>     51, 81, 87, 66, 85, 71, 65, 95, 54, 70, 90, 83, 85, 65, 76,  #>     55, 63, 91, 78, 79, 62, 100, 87, 67, 75, 90, 95, 95, 79,  #>     71, 51, 60, 60, 50, 89, 74, 85, 75, 88, 74, 64, 72, 87, 64,  #>     100, 61, 72, 66, 94, 93, 80, 91, 88, 75, 86, 79, 61, 95,  #>     84, 67, 59, 93, 84, 59, 73, 53, 71, 65, 84, 100, 59, 68,  #>     93, 59, 95, 76, 80, 82, 86, 86, 80, 84, 81, 59, 57, 70, 85,  #>     73, 75, 97, 100, 55, 89, 70, 66, 97, 72, 82, 80, 69, 42,  #>     89, 92, 89, 89, 81, 85, 74, 64, 78, 75, 70, 95, 91, 60, 72,  #>     84, 92, 96, 74, 65, 87, 89, 59, 68, 69, 81, 99, 87, 87, 81,  #>     94, 69, 40, 82, 79, 87, 56, 66, 69, 64, 82, 52, 56, 64, 96,  #>     72, 70, 61, 89, 76, 63, 79, 80, 66, 55, 66, 58, 76, 79, 65,  #>     92, 78, 89, 80, 79, 53, 73, 62, 71, 63, 80, 90, 84, 67, 83,  #>     90, 76, 81, 80, 54, 85, 100, 58, 65, 79, 75, 76, 91, 76,  #>     65, 89, 81, 80, 65, 69, 70, 84, 80, 83, 63, 66, 67, 75, 73,  #>     50, 89, 50, 86, 64, 56, 82, 96, 60, 84, 76, 62, 81, 60, 71,  #>     58, 62, 67, 61, 82, 61, 86, 70, 92, 59, 94, 73, 49, 76, 100,  #>     82, 54, 81, 69, 80, 84, 79, 89, 88, 93, 97, 76, 84, 99, 73,  #>     100, 100, 89, 52, 94, 89, 81, 68, 83, 54, 58, 100, 60, 89,  #>     74, 88, 87, 75, 60, 74, 77, 94, 74, 80, 71, 81, 89, 50, 73,  #>     58, 69, 92, 68, 90, 64, 76, 63, 68, 73, 100, 71, 88, 72,  #>     80, 88, 70, 94, 90, 96, 79, 86, 82, 71, 58, 58, 55, 95, 51,  #>     72, 75, 60, 80, 99, 70, 98, 72, 87, 93, 62, 83, 100, 92,  #>     94, 48, 57, 65, 56, 81, 50, 86, 84, 86, 56, 94, 94, 69, 94,  #>     74, 82, 81, 98, 60, 58, 82, 79, 81, 87, 71, 72, 54, 83, 92,  #>     87, 68, 94, 86, 62, 82, 80, 80, 87, 84, 62, 64, 69, 82, 83,  #>     88, 79, 89, 79, 48, 51, 88, 75, 61, 91, 72, 91, 61, 71, 91,  #>     65, 88, 99, 49, 75, 50, 62, 49, 72, 78, 90, 90, 57, 79, 77,  #>     64, 74, 74, 95, 82, 52, 79, 56, 72, 75, 59, 60, 99, 78, 65,  #>     83, 74, 100, 89, 87, 69, 84, 45, 75, 76, 65, 60, 99, 79,  #>     62, 77, 98, 90, 78, 83, 81, 90, 75, 61, 64, 83, 59, 66, 83,  #>     78, 56, 73, 83, 98, 64, 93, 54, 69, 78, 71, 93, 80, 71, 90,  #>     81, 77, 69, 85, 75, 62, 70, 76, 43, 61, 57, 98, 87, 96, 63,  #>     67, 75, 82, 62, 61, 83, 98, 66, 93, 63, 84, 97, 95, 60, 86,  #>     74, 95, 83, 61, 84, 87, 63, 61, 74, 86, 100, 65, 83, 97,  #>     78, 65, 70, 57, 61, 75, 84, 80, 83, 96, 65, 86, 88, 67, 72,  #>     84, 66, 78, 74, 62, 80, 78, 75, 62, 81, 86, 62, 76, 85, 49,  #>     81, 69, 73, 97, 72, 67, 82, 98, 100, 47, 78, 81, 90, 48,  #>     78, 60, 39, 65, 95, 61, 62, 51, 55, 80, 85, 86, 76, 84, 53,  #>     53, 54, 85, 78, 70, 49, 76, 82, 71, 80, 65, 59, 82, 64, 82,  #>     74, 91, 74, 70, 93, 75, 73, 98, 88, 63, 73, 84, 75, 88, 41,  #>     59, 98, 88, 45, 86, 99, 93, 68, 84, 94, 56, 85, 54, 86, 61,  #>     51, 75, 65, 75, 78, 77, 88, 83, 95, 89, 51, 74, 69, 67, 82,  #>     90, 94, 92, 100, 82, 60, 64, 96, 51, 71, 73, 87, 58, 91,  #>     77, 97, 91, 95, 89, 83, 61, 99, 59, 72, 75, 77, 88, 73, 73,  #>     70, 69, 57, 96, 46, 87, 80, 80, 54, 59, 67, 91, 68, 82, 90,  #>     68, 66, 58, 91, 72, 69, 60, 61, 87, 47, 71, 55, 82, 69, 89,  #>     92, 70, 77, 51, 70, 88, 78, 97, 86, 82, 61, 78, 75, 90, 62,  #>     100, 82, 86, 62, 81, 91, 74, 94, 66, 76, 86, 68, 69, 88,  #>     66, 60, 71, 51, 73, 89, 86, 75, 83, 68, 99, 83, 62, 73, 51,  #>     84, 62, 87, 70, 90, 91, 95, 95, 48, 49, 88, 89, 91, 80, 84,  #>     95, 44, 53, 80, 97, 54, 77, 63, 95, 98, 57, 81, 100, 57,  #>     52, 84, 73, 73, 71, 92, 65, 73, 75, 81, 70, 65, 47, 83, 54,  #>     75, 73, 80, 76, 70, 73, 74, 47, 63, 72, 56, 93, 52, 55, 88,  #>     75, 69, 88, 56, 80, 87, 75, 89, 83, 83, 62, 97, 73, 92, 67,  #>     50, 87, 93, 60, 79, 90, 94, 66, 45, 68, 79, 81, 59, 48, 98,  #>     69, 79, 51, 97, 78, 70, 87, 61, 92, 84, 59, 85, 69, 70, 59,  #>     43, 81, 69, 81, 87, 97, 87, 91, 64, 63, 63, 58, 58, 65, 89,  #>     96, 83, 70, 90, 60, 56, 98, 73, 89, 79, 71, 91, 94, 64, 59,  #>     62, 78, 97, 55, 80, 58, 99, 49, 89, 68, 66, 81, 57, 80, 72,  #>     80, 71, 86, 89, 71, 57, 73, 69, 46, 53, 83, 94, 50, 76, 85,  #>     80, 98, 80, 74, 83, 98, 100, 90, 77, 74, 52, 73, 91, 68,  #>     52, 78, 72, 93, 62, 74, 76, 64, 69, 89, 78, 69, 81, 81, 87,  #>     70, 50, 47, 87, 78, 90, 82, 72, 60, 58, 94, 75, 48, 71, 71,  #>     49, 83, 82, 73, 76, 68, 100, 56, 79, 75, 98, 74, 55, 74,  #>     72, 87, 51, 67, 67, 62, 78, 69, 95, 63, 73, 95, 77, 97, 75,  #>     94, 85, 78, 42, 84, 88, 82, 56, 76, 62, 69, 96, 91, 59, 69,  #>     93, 51, 86, 62, 89, 92, 49, 84, 99, 85, 97, 80, 72, 61, 89,  #>     84, 81, 86, 41, 55, 57, 69, 60, 62, 76, 91, 57, 71, 65, 79,  #>     72, 92, 76, 60, 66, 75, 73, 78, 83, 78, 64, 92, 85, 90, 44,  #>     92, 64, 90, 71, 80, 61, 45, 61, 87, 80, 74, 88, 100, 66,  #>     73, 66, 69, 87, 92, 75, 95, 83, 95, 66, 54, 59, 87, 62, 83,  #>     90, 50, 42, 64, 80, 89, 67, 85, 76, 99, 89, 70, 51, 86, 64,  #>     72, 93, 82, 71, 73, 69, 73, 81, 83, 76, 47, 93, 62, 80, 69,  #>     75, 90, 89, 73, 87, 56, 100, 100, 63, 67, 91, 75, 85, 44,  #>     68, 75, 81, 69, 74, 100, 75, 100, 96, 77, 90, 96, 77, 70,  #>     67, 70, 89, 77, 92, 65, 81, 63, 96, 60, 78, 98, 87, 88, 63,  #>     78, 81, 80, 73, 57, 53, 69, 50, 56, 56, 64, 70, 74, 66, 100,  #>     86, 78, 83, 49, 74, 87, 73, 57, 74, 93, 94, 96, 87, 77, 86,  #>     70, 83, 56, 64, 94, 91, 95, 75, 89, 86, 65, 88, 79, 61, 79,  #>     72, 56, 76, 68, 79, 79, 52, 96, 95, 89, 60, 79, 66, 82, 83,  #>     70, 63, 77, 96, 67, 57, 61, 61, 90, 76, 65, 88, 81, 88, 58,  #>     68, 78, 81, 62, 83, 72, 61, 66, 62, 68, 84, 70, 73, 68, 68,  #>     85, 94, 69, 72, 80, 79, 89, 64, 61, 62, 75, 80, 59, 76, 74,  #>     71, 76, 81, 68, 78, 76, 98, 100, 43, 76, 86, 73, 76, 88,  #>     87, 97, 59, 57, 86, 59, 85, 80, 78, 61, 89, 65, 68, 100,  #>     79, 84, 82, 79, 60, 88, 84, 71, 72, 40, 85, 82, 55, 86, 71,  #>     58, 76, 36, 89, 80, 66, 72, 72, 83, 46, 71, 62, 79, 49, 100,  #>     93, 93, 51, 92, 61, 74, 56, 73, 79, 63, 84, 82, 79, 98, 83,  #>     75, 85, 77, 85, 72, 55, 63, 71, 100, 81, 83, 95, 82, 59,  #>     63, 74, 65, 93, 81, 72, 80, 100, 66, 81, 100, 45, 82, 57,  #>     94, 76, 79, 58, 68, 97, 100, 86, 69, 73, 76, 90, 100, 97,  #>     61, 74, 95, 79, 85, 96, 66, 90, 69, 82, 89, 70, 79, 77, 92,  #>     76, 85, 86, 85, 69, 89, 73, 86, 76, 88, 81, 72, 53, 97, 96,  #>     85, 54, 97, 94, 91, 84, 67, 68, 74, 58, 76, 79, 56, 78, 89,  #>     80, 75, 81, 100, 89, 74, 67, 66, 85, 92, 91, 62, 85, 80,  #>     60, 89, 88, 69, 99, 65, 76, 79, 72, 63, 83, 71, 73, 49, 89,  #>     77, 80, 78, 64, 65, 91, 83, 94, 76, 82, 91, 66, 100, 100,  #>     85, 81, 86, 84, 91, 76, 72, 81, 81, 84, 77, 80, 80, 89, 98,  #>     70, 83, 64, 66, 94, 80, 74, 97, 75, 70, 70, 76, 85, 90, 88,  #>     100, 74, 56, 93, 93, 98, 87, 85, 81, 71, 85, 69, 49, 77,  #>     70, 55, 59, 76, 75, 58, 78, 96, 97, 59, 59, 63, 92, 76, 64,  #>     98, 96, 73, 69, 57, 61, 92, 91, 83, 83, 82, 69, 54, 89, 62,  #>     81, 71, 72, 88, 72, 69, 99, 78, 92, 94, 83, 74, 84, 88, 97,  #>     85, 94, 56, 72, 41, 75, 88, 73, 64, 83, 80, 74, 47, 53, 80,  #>     92, 63, 82, 81, 90, 75, 70, 63, 41, 89, 77, 68, 64, 78, 71,  #>     73, 75, 90, 78, 69, 84, 87, 81, 68, 80, 44, 75, 81, 76, 90,  #>     75, 100, 65, 99, 58, 80, 93, 80, 73, 100, 97, 64, 69, 77,  #>     78, 85, 77, 76, 74, 49, 100, 80, 80, 51, 62, 76, 85, 65,  #>     89, 62, 91, 89, 93, 83, 90, 60, 79, 80, 87, 50, 58, 84, 100,  #>     93, 65, 84, 65, 61, 69, 52, 75, 54, 75, 67, 92, 93, 54, 86,  #>     98, 81, 70, 95, 82, 48, 85, 99, 77, 89, 69, 94, 74, 59, 70,  #>     72, 57, 99, 82, 55, 46, 61, 86, 56, 76, 72, 80, 79, 88, 100,  #>     51, 95, 79, 100, 86, 75, 86, 99, 74, 73, 94, 88, 62, 91,  #>     78, 66, 57, 90, 95, 77, 52, 57, 84, 50, 49, 49, 70, 88, 75,  #>     90, 70, 98, 63, 97, 84, 83, 60, 100, 90, 47, 70, 72, 78,  #>     67, 69, 77, 71, 98, 90, 65, 81, 68, 71, 82, 58, 57, 89, 71,  #>     85, 97, 92, 84, 86, 57, 72, 81, 48, 71, 61, 49, 71, 80, 62,  #>     55, 63, 93, 78, 55, 91, 82, 99, 71, 70, 84, 72, 53, 61, 61,  #>     88, 88, 98, 66, 67, 52, 69, 74, 86, 55, 81, 87, 70, 72, 72,  #>     81, 82, 100, 88, 80, 93, 92, 53, 81, 96, 61, 60, 67, 100,  #>     100, 78, 77, 77, 57, 100, 65, 82, 69, 89, 85, 66, 85, 52,  #>     83, 90, 99, 85, 85, 71, 69, 94, 85, 94, 100, 67, 67, 79,  #>     79, 90, 66, 66, 66, 78, 46, 86, 80, 74, 99, 65, 98, 65, 71,  #>     70, 79, 74, 75, 55, 73, 58, 40, 77, 53, 86, 90, 74, 88, 95,  #>     82, 72, 67, 86, 85, 90, 70, 73, 96, 86, 73, 84, 100, 79,  #>     63, 94, 68, 97, 46, 89, 77, 90, 73, 100, 88, 66, 56, 75,  #>     94, 96, 64, 50, 78, 43, 88, 70, 79, 58, 62, 73, 62, 71, 78,  #>     79, 73, 58, 67, 79, 71, 98, 95, 43, 64, 79, 66, 100, 89,  #>     75, 59, 91, 73, 78, 76, 86, 90, 49, 65, 88, 94, 75, 66, 76,  #>     83, 98, 79, 100, 82, 63, 71, 82, 93, 88, 99, 69, 90, 70,  #>     47, 86, 66, 76, 70, 74, 81, 87, 81, 76, 60, 79, 81, 72, 69,  #>     88, 52, 66, 97, 51, 60, 86, 89, 87, 70, 65, 87, 64, 81, 76,  #>     95, 60, 82, 90, 65, 81, 82, 91, 77, 82, 85, 67, 80, 86, 78,  #>     92, 86, 47, 48, 88, 57, 49, 76, 85, 48, 93, 100, 77, 66,  #>     72, 73, 42, 85, 97, 55, 79, 67, 52, 75, 78, 96, 88, 61, 100,  #>     93, 81, 78, 100, 83, 91, 97, 79, 79, 78, 94, 64, 50, 42,  #>     77, 92, 63, 64, 58, 78, 100, 90, 87, 61, 83, 90, 76, 76,  #>     72, 79, 51, 65, 89, 89, 78, 100, 82, 83, 90, 79, 76, 83,  #>     58, 60, 64, 91, 84, 52, 89, 97, 85, 50, 72, 98, 71, 63, 57,  #>     73, 67, 90, 92, 67, 84, 71, 74, 72, 95, 69, 82, 54, 74, 58,  #>     89, 46, 77, 77, 83, 82, 58, 71, 72, 59, 96, 85, 78, 81, 76,  #>     74, 81, 81, 67, 90, 77, 65, 78, 80, 96, 87, 56, 67, 69, 55,  #>     97, 59, 89, 51, 70, 98, 92, 99, 89, 68, 88, 90, 59, 78, 80,  #>     86, 68, 82, 80, 43, 63, 54, 79, 95, 58, 83, 87, 60, 85, 74,  #>     68, 55, 65, 71, 87, 72, 92, 61, 55, 60, 87, 64, 79, 61, 74,  #>     67, 85, 63, 75, 84, 59, 84, 88, 78, 77, 58, 92, 92, 83, 75,  #>     82, 72, 99, 75, 64, 45, 44, 82, 92, 57, 50, 78, 83, 75, 91,  #>     82, 91, 53, 67, 100, 67, 59, 82, 49, 73, 81, 85, 74, 54,  #>     97, 90, 67, 94, 72, 61, 66, 57, 88, 92, 81, 92, 86, 53, 57,  #>     91, 51, 74, 86, 84, 75, 42, 70, 85, 85, 43, 64, 98, 90, 96,  #>     83, 72, 100, 93, 63, 98, 90, 59, 93, 55, 79, 91, 82, 91,  #>     96, 76, 61, 90, 82, 91, 70, 74, 82, 75, 81, 86, 64, 75, 84,  #>     73, 80, 80, 100, 67, 54, 60, 79, 51, 97, 74, 63, 57, 93,  #>     67, 88, 89, 62, 71, 67, 95, 83, 41, 60, 71, 76, 77, 68, 88,  #>     69, 77, 93, 87, 67, 98, 76, 56, 91, 75, 66, 90, 93, 70, 53,  #>     81, 73, 85, 74, 95, 81, 86, 80, 94, 62, 53, 98, 82, 72, 56,  #>     71, 72, 78, 76, 71, 81, 71, 66, 62, 69, 63, 55, 68, 93, 62,  #>     70, 82, 63, 68, 84, 86, 67, 94, 94, 57, 73, 64, 60, 70, 55,  #>     82, 82, 86, 78, 75, 73, 72, 89, 91, 90, 60, 66, 87, 83, 62,  #>     80, 91, 85, 58, 65, 52, 63, 90, 86, 74, 75, 64, 98, 73, 63,  #>     59, 50, 84, 96, 79, 77, 77, 67, 89, 93, 45, 77, 72, 85, 91,  #>     71, 92, 60, 75, 77, 72, 87, 92, 91, 85, 67, 86, 72, 51, 90,  #>     48, 79, 63, 56, 98, 74, 75, 74, 91, 76, 98, 83, 85, 79, 100,  #>     100, 87, 65, 56, 46, 92, 77, 71, 74, 64, 75, 70, 73, 86,  #>     81, 95, 92, 70, 63, 83, 59, 75, 50, 84, 78, 51, 63, 56, 78,  #>     88, 77, 87, 92, 52, 83, 53, 77, 77, 52, 78, 49, 58, 87, 89,  #>     88, 70, 68, 52, 91, 87, 55, 69, 74, 61, 98, 97, 63, 92, 98,  #>     82, 72, 69, 95, 53, 73, 81, 76, 77, 83, 65, 66, 77, 88, 75,  #>     83, 75, 54, 89, 81, 92, 98, 64, 74, 91, 84, 74, 76, 80, 58,  #>     88, 94, 78, 59, 60, 84, 88, 97, 68, 59, 85, 82, 75, 90, 42,  #>     66, 85, 100, 76, 58, 62, 84, 96, 65, 87, 73, 61, 59, 99,  #>     75, 61, 82, 76, 81, 84, 48, 84, 56, 54, 82, 50, 93, 80, 80,  #>     80, 95, 60, 66, 55, 96, 86, 92, 74, 97, 73, 54, 90, 84, 72,  #>     62, 94, 81, 63, 78, 68, 57, 63, 85, 82, 69, 79, 78, 94, 86,  #>     73, 60, 89, 88, 91, 78, 97, 76, 94, 71, 77, 59, 85, 62, 100,  #>     87, 56, 53, 73, 62, 80, 83, 90, 74, 80, 83, 88, 85, 85, 81,  #>     71, 73, 62, 77, 77, 68, 85, 77, 82, 97, 55, 65, 54, 54, 86,  #>     63, 86, 77, 90, 81, 73, 71, 46, 87, 77, 100, 80, 87, 70,  #>     54, 84, 79, 81, 95, 66, 95, 53, 71, 73, 52, 92, 61, 54, 90,  #>     62, 71, 69, 65, 88, 64, 66, 50, 86, 65, 92, 53, 84, 50, 100,  #>     97, 77, 98, 91, 81, 66, 93, 76, 60, 84, 71, 81, 72, 89, 54,  #>     69, 55, 66, 87, 87, 63, 88, 68, 61, 85, 86, 77, 83, 82, 76,  #>     76, 99, 73, 56, 86, 71, 86, 52, 57, 90, 49, 61, 90, 95, 82,  #>     84, 87, 97, 93, 85, 99, 81, 88, 84, 87, 77, 66, 97, 86, 81,  #>     77, 78, 76, 66, 86, 81, 89, 94, 72, 87, 56, 66, 99, 84, 76,  #>     71, 97, 59, 84, 75, 72, 81, 64, 82, 77, 89, 69, 59, 82, 89,  #>     80, 69, 71, 81, 89, 63, 67, 86, 45, 83, 79, 92, 68, 46, 82,  #>     48, 62, 73, 76, 71, 95, 88, 67, 77, 86, 85, 88, 82, 87, 50,  #>     81, 85, 91, 89, 61, 85, 91, 70, 98, 55, 83, 98, 62, 83, 89,  #>     79, 99, 89, 81, 97, 89, 50, 81, 64, 67, 72, 87, 97, 98, 77,  #>     91, 80, 85, 74, 69, 53, 78, 63, 96, 94, 72, 79, 89, 89, 72,  #>     94, 93, 84, 95, 67, 72, 92, 66, 91, 100, 90, 59, 95, 49,  #>     78, 87, 55, 53, 91, 75, 68, 77, 77, 86, 68, 53, 91, 74, 73,  #>     72, 96, 100, 76, 48, 91, 86, 81, 50, 66, 55, 69, 91, 73,  #>     77, 86, 95, 81, 69, 85, 75, 63, 71, 97, 79, 71, 58, 92, 68,  #>     92, 91, 98, 60, 92, 73, 74, 85, 43, 65, 96, 56, 87, 94, 86,  #>     97, 97, 77, 57, 93, 95, 68, 59, 90, 75, 90, 92, 96, 90, 88,  #>     75, 63, 88, 78, 78, 76, 55, 90, 87, 71, 68, 52, 77, 95, 85,  #>     70, 55, 48, 96, 59, 91, 84, 62, 95, 98, 67, 71, 66, 59, 61,  #>     72, 86, 87, 95, 88, 68, 61, 75, 66, 77, 80, 91, 75, 90, 95,  #>     75, 87, 83, 99, 51, 97, 85, 90, 83, 86, 95, 77, 97, 76, 84,  #>     92, 88, 75, 84, 96, 54, 63, 68, 81, 92, 74, 86, 86, 75, 84,  #>     55, 90, 92, 84, 89, 86, 53, 83, 64, 91, 80, 80, 76, 68, 93,  #>     73, 56, 74, 88, 65, 99, 60, 87, 61, 97, 91, 92, 74, 83, 90,  #>     83, 61, 86, 56, 66, 94, 93, 73, 68, 76, 56, 72, 86, 87, 98,  #>     84, 70, 83, 49, 82, 72, 99, 88, 77, 84, 66, 64, 70, 52, 69,  #>     72, 52, 99, 74, 87, 60, 76, 86, 54, 74, 58, 82, 72, 79, 92,  #>     94, 74, 60, 77, 60, 97, 75, 96, 61, 68, 80, 60, 87, 83, 87,  #>     79, 74, 89, 79, 83, 83, 86, 78, 72, 100, 62, 77, 94, 60,  #>     94, 61, 69, 67, 79, 73, 79, 81, 68, 89, 52, 76, 72, 51, 91,  #>     76, 79, 62, 87, 78, 89, 51, 95, 75, 50, 72, 59, 69, 81, 76,  #>     96, 62, 98, 84, 90, 88, 48, 91, 85, 100, 83, 65, 53, 78,  #>     67, 93, 78, 58, 62, 99, 52, 74, 83, 78, 86, 54, 78, 92, 51,  #>     67, 74, 79, 76, 72, 99, 68, 54, 68, 68, 93, 73, 54, 74, 91,  #>     88, 60, 93, 70, 93, 78, 72, 93, 58, 80, 56, 98, 58, 72, 88,  #>     78, 88, 79, 78, 66, 74, 77, 59, 50, 69, 62, 54, 84, 93, 68,  #>     80, 81, 73, 56, 94, 100, 72, 73, 80, 54, 86, 53, 92, 63,  #>     76, 61, 80, 89, 86, 81, 84, 80, 87, 75, 63, 55, 54, 62, 59,  #>     69, 88, 68, 69, 92, 86, 85, 93, 100, 54, 58, 78, 82, 75,  #>     73, 78, 75, 89, 72, 84, 91, 59, 60, 58, 96, 50, 97, 80, 58,  #>     82, 77, 88, 57, 61, 87, 82, 80, 78, 66, 89, 77, 94, 81, 76,  #>     53, 62, 90, 77, 84, 66, 91, 85, 87, 80, 89, 82, 61, 67, 82,  #>     62, 80, 89, 95, 74, 78, 83, 73, 95, 77, 96, 91, 43, 86, 85,  #>     87, 62, 88, 93, 59, 76, 73, 92, 47, 66, 57, 76, 86, 61, 92,  #>     45, 50, 81, 60, 63, 82, 93, 98, 75, 79, 79, 69, 100, 41,  #>     59, 94, 76, 84, 70, 89, 72, 73, 74, 72, 68, 70, 94, 77, 77,  #>     98, 92, 72, 61, 98, 76, 49, 92, 83, 61, 55, 76, 92, 84, 65,  #>     100, 85, 61, 59, 89, 81, 54, 95, 80, 69, 80, 65, 74, 72,  #>     100, 58, 80, 80, 92, 64, 87, 99, 83, 73, 84, 55, 65, 87,  #>     71, 87, 74, 77, 68, 88, 95, 62, 78, 79, 62, 80, 97, 100,  #>     95, 100, 94, 48, 54, 65, 96, 81, 73, 82, 66, 64, 71, 84,  #>     85, 92, 64, 61, 89, 67, 73, 85, 100, 68, 64, 80, 72, 59,  #>     68, 90, 62, 62, 58, 72, 84, 91, 62, 59, 82, 84, 52, 92, 87,  #>     81, 92, 96, 75, 66, 60, 85, 88, 80, 100, 72, 78, 62, 76,  #>     78, 98, 64, 61, 92, 87, 81, 85, 97, 68, 72, 83, 100, 68,  #>     80, 83, 92, 87, 56, 65, 72, 93, 86, 46, 52, 88, 65, 82, 56,  #>     75, 74, 85, 86, 93, 63, 77, 62, 91, 48, 85, 65, 89, 72, 60,  #>     87, 85, 85, 79, 92, 95, 52, 100, 96, 80, 88, 68, 79, 90,  #>     79, 56, 85, 60, 81, 86, 64, 67, 86, 84, 97, 81, 57, 67, 85,  #>     89, 76, 67, 89, 72, 92, 88, 84, 93, 87, 83, 62, 81, 93, 62,  #>     76, 70, 82, 91, 84, 48, 89, 85, 98, 79, 91, 71, 50, 56, 73,  #>     72, 100, 85, 68, 67, 86, 77, 78, 72, 70, 86, 90, 56, 80,  #>     88, 70, 79, 54, 80, 94, 62, 74, 65, 75, 88, 90, 68, 72, 77,  #>     88, 82, 67, 72, 77, 72, 61, 53, 85, 95, 72, 56, 64, 64, 89,  #>     77, 82, 89, 97, 87, 86, 70, 84, 78, 61, 86, 99, 100, 86,  #>     83, 66, 74, 69, 54, 65, 98, 91, 70, 81, 89, 81, 75, 84, 90,  #>     52, 81, 85, 70, 83, 67, 87, 82, 84, 71, 86, 76, 95, 59, 62,  #>     80, 86, 92, 83, 78, 57, 90, 80, 46, 89, 64, 81, 68, 83, 70,  #>     81, 100, 77, 63, 86, 85, 88, 69, 58, 90, 92, 65, 95, 40,  #>     95, 91, 74, 64, 63, 91, 82, 72, 78, 43, 55, 75, 67, 84, 90,  #>     58, 99, 72, 46, 80, 64, 77, 60, 93, 81, 88, 82, 93, 89, 69,  #>     95, 59, 79, 54, 77, 68, 55, 78, 87, 93, 78, 73, 87, 81, 94,  #>     84, 46, 95, 88, 78, 76, 67, 89, 74, 85, 91, 90, 85, 48, 86,  #>     63, 68, 70, 93, 72, 65, 87, 73, 62, 82, 95, 72, 64, 94, 79,  #>     84, 71, 56, 62, 85, 90, 67, 98, 68, 76, 74, 75, 84, 79, 81,  #>     70, 86, 97, 71, 88, 90, 76, 70, 75, 77, 84, 76, 79, 82, 67,  #>     79, 77, 92, 94, 82, 60, 59, 86, 61, 99, 71, 99, 97, 100,  #>     66, 99, 79, 89, 83, 44, 47, 53, 84, 62, 81, 90, 89, 56, 73,  #>     97, 73, 78, 93, 60, 68, 73, 88, 63, 45, 98, 83, 86, 98, 77,  #>     63, 60, 69, 77, 95, 53, 96, 63, 91, 58, 86, 70, 62, 90, 59,  #>     94, 74, 80, 73, 80, 62, 63, 53, 73, 68, 84, 80, 67, 76, 100,  #>     94, 91, 60, 54, 95, 84, 78, 68, 90, 69, 82, 71, 67, 85, 87,  #>     66, 83, 89, 99, 98, 84, 56, 75, 89, 81, 46, 70, 73, 96, 63,  #>     87, 88, 84, 78, 80, 76, 53, 85, 71, 86, 55, 58, 80, 79, 66,  #>     90, 70, 94, 73, 75, 84, 63, 54, 66, 86, 84, 56, 69, 74, 93,  #>     61, 99, 62, 90, 53, 80, 58, 55, 73, 59, 85, 63, 75, 82, 79,  #>     82, 82, 59, 65, 86, 84, 95, 71, 91, 76, 52, 100, 83, 88,  #>     79, 90, 80, 94, 97, 69, 68, 59, 47, 58, 99, 68, 96, 66, 68,  #>     58, 49, 99, 82, 80, 93, 72, 78, 80, 92, 89, 55, 79, 86, 86,  #>     90, 79, 96, 66, 62, 68, 77, 99, 97, 92, 88, 91, 91, 61, 89,  #>     64, 100, 83, 76, 44, 60, 82, 53, 93, 100, 85, 50, 70, 56,  #>     74, 89, 83, 76, 84, 98, 82, 92, 44, 72, 77, 86, 99, 75, 61,  #>     60, 88, 78, 82, 76, 57, 61, 80, 73, 79, 77, 58, 92, 44, 66,  #>     64, 73, 84, 62, 79, 98, 82, 78, 65, 90, 80, 90, 70, 75, 76,  #>     56, 93, 90, 89, 82, 61, 60, 60, 73, 86, 61, 68, 90, 91, 84,  #>     96, 51, 89, 48, 91, 82, 84, 100, 57, 68, 73, 86, 92, 49,  #>     81, 70, 68, 72, 73, 65, 81, 61, 93, 78, 69, 59, 73, 66, 95,  #>     68, 62, 77, 88, 73, 58, 69, 87, 59, 67, 66, 87, 57, 83, 98,  #>     92, 49, 81, 70, 82, 94, 74, 61, 81, 90, 64, 69, 74, 79, 84,  #>     59, 92, 78, 92, 62, 72, 50, 94, 82, 74, 96, 63, 51, 56, 76,  #>     94, 76, 88, 99, 94, 70, 72, 83, 43, 100, 69, 62, 64, 87,  #>     85, 44, 65, 68, 74, 57, 75, 85, 98, 73, 78, 98, 71, 77, 73,  #>     51, 67, 89, 97, 68, 63, 86, 77, 82, 87, 92, 46, 49, 73, 94,  #>     80, 100, 57, 56, 58, 84, 90, 54, 68, 90, 72, 76, 72, 62,  #>     89, 68, 48, 70, 92, 93, 61, 63, 96, 80, 90, 47, 84, 84, 87,  #>     100, 94, 64, 80, 50, 71, 84, 82, 80, 88, 82, 62, 100, 58,  #>     84, 72, 79, 71, 91, 80, 92, 86, 97, 54, 89, 47, 83, 66, 95,  #>     85, 100, 72, 75, 63, 81, 56, 75, 80, 88, 93, 72, 97, 83,  #>     87, 88, 74, 74, 85, 53, 73, 75, 75, 90, 71, 95, 89, 76, 66,  #>     84, 96, 91, 81, 80, 65, 67, 65, 54, 91, 66, 86, 81, 75, 95,  #>     84, 90, 60, 80, 93, 92, 84, 69, 72, 67, 72, 89, 90, 75, 75,  #>     76, 97, 57, 58, 89, 73, 98, 83, 84, 71, 61, 83, 88, 82, 90,  #>     72, 74, 76, 69, 68, 87, 92, 65, 63, 87, 75, 94, 81, 74, 76,  #>     91, 73, 65, 67, 93, 58, 96, 87, 73, 53, 79, 85, 86, 88, 90,  #>     75, 51, 90, 86, 66, 80, 52, 66, 77, 81, 97, 54, 55, 98, 82,  #>     87, 87, 68, 79, 90, 68, 87, 90, 68, 66, 73, 79, 66, 62, 100,  #>     47, 51, 69, 68, 71, 96, 63, 87, 67, 72, 80, 80, 57, 72, 88,  #>     97, 63, 79, 65, 97, 73, 86, 83, 69, 84, 86, 73, 64, 91, 84,  #>     75, 55, 87, 72, 74, 93, 93, 91, 90, 76, 85, 50, 83, 77, 62,  #>     39, 69, 74, 58, 95, 93, 85, 92, 91, 95, 72, 79, 89, 67, 75,  #>     73, 52, 58, 86, 88, 78, 83, 94, 95, 47, 60, 72, 70, 77, 63,  #>     100, 72, 65, 77, 51, 58, 80, 76, 91, 70, 90, 68, 67, 65,  #>     71, 76, 60, 78, 76, 64, 88, 96, 93, 88, 91, 84, 85, 72, 82,  #>     66, 86, 96, 81, 61, 93, 77, 59, 83, 90, 94, 72, 55, 81, 52,  #>     100, 48, 96, 83, 83, 79, 85, 55, 100, 76, 80, 63, 66, 83,  #>     48, 80, 90, 82, 95, 62, 64, 75, 75, 85, 82, 72, 80, 85, 100,  #>     76, 87, 71, 69, 94, 63, 91, 93, 73, 75, 99, 76, 75, 79, 84,  #>     92, 90, 85, 64, 65, 77, 74, 70, 71, 62, 72, 42, 69, 97, 70,  #>     54, 56, 67, 79, 66, 43, 84, 68, 80, 91, 84, 100, 57, 93,  #>     92, 73, 78, 74, 76, 69, 83, 66, 49, 83, 80, 83, 86, 61, 95,  #>     80, 59, 62, 50, 71, 97, 89, 59, 54, 74, 72, 89, 91, 73, 95,  #>     60, 88, 64, 59, 54, 70, 76, 41, 79, 71, 99, 84, 78, 92, 61,  #>     79, 65, 99, 85, 53, 79, 67, 74, 87, 89, 72, 71, 60, 83, 66,  #>     87, 56, 74, 88, 97, 69, 70, 88, 70, 53, 96, 65, 75, 87, 64,  #>     73, 50, 77, 88, 95, 66, 100, 47, 89, 57, 45, 68, 89, 81,  #>     80, 68, 88, 86, 80, 67, 58, 80, 75, 62, 68, 97, 91, 84, 87,  #>     59, 77, 72, 71, 83, 86, 86, 73, 64, 82, 58, 59, 59, 89, 92,  #>     76, 84, 52, 64, 41, 75, 47, 62, 66, 90, 61, 72, 88, 90, 81,  #>     51, 90, 73, 71, 85, 70, 64, 81, 51, 77, 91, 84, 96, 84, 95,  #>     58, 86, 76, 71, 83, 58, 96, 89, 80, 94, 89, 66, 86, 74, 67,  #>     76, 79, 84, 97, 49, 71, 78, 82, 81, 82, 59, 64, 98, 75, 97,  #>     60, 90, 74, 85, 52, 74, 79, 56, 72, 74, 78, 50, 59, 95, 53,  #>     94, 66, 77, 61, 93, 94, 72, 90, 72, 87, 92, 51, 75, 82, 92,  #>     71, 46, 92, 93, 72, 65, 86, 78, 100, 71, 58, 82, 89, 90,  #>     87, 79, 71, 96, 71, 52, 64, 49, 78, 71, 84, 100, 59, 95,  #>     98, 62, 98, 70, 66, 84, 58, 94, 77, 81, 62, 74, 93, 51, 76,  #>     50, 72, 78, 63, 87, 61, 60, 76, 97, 64, 77, 68, 58, 69, 83,  #>     60, 69, 94, 79, 61, 63, 77, 96, 58, 56, 59, 86, 59, 88, 87,  #>     64, 68, 61, 64, 49, 59, 59, 88, 58, 76, 65, 87, 83, 100,  #>     92, 56, 98, 76, 51, 86, 95, 54, 100, 78, 71, 90, 66, 54,  #>     72, 63, 72, 55, 89, 54, 45, 75, 91, 69, 65, 82, 40, 86, 77,  #>     72, 61, 74, 82, 63, 67, 74, 58, 84, 79, 90, 92, 81, 81, 78,  #>     56, 95, 77, 70, 89, 73, 69, 88, 70, 81, 78, 72, 92, 68, 81,  #>     53, 78, 88, 86, 82, 63, 65, 65, 74, 58, 75, 93, 85, 75, 89,  #>     78, 82, 84, 59, 85, 78, 59, 91, 80, 57, 82, 69, 87, 91, 71,  #>     67, 82, 48, 82, 100, 81, 85, 69, 93, 92, 98, 69, 93, 82,  #>     90, 86, 70, 91, 64, 58, 92, 87, 60, 85, 76, 54, 69, 77, 81,  #>     89, 48, 92, 88, 69, 58, 72, 82, 61, 75, 62, 66, 50, 80, 64,  #>     88, 82, 71, 45, 77, 78, 75, 87, 96, 93, 80, 97, 75, 70, 66,  #>     88, 100, 93, 84, 62, 47, 89, 85, 56, 74, 74, 55, 69, 84,  #>     86, 87, 74, 69, 80, 64, 68, 92, 76, 92, 96, 55, 53, 64, 64,  #>     92, 75, 77, 49, 93, 49, 87, 50, 76, 82, 80, 57, 77, 86, 100,  #>     85, 86, 82, 44, 65, 56, 64, 90, 77, 60, 87, 64, 62, 63, 100,  #>     87, 77, 86, 75, 69, 43, 68, 100, 84, 59, 80, 57, 56, 69,  #>     88, 88, 76, 63, 54, 84, 96, 99, 80, 68, 73, 95, 61, 76, 84,  #>     91, 92, 90, 81, 88, 81, 86, 72, 72, 72, 47, 80, 75, 70, 78,  #>     63, 89, 64, 71, 70, 72, 75, 69, 69, 96, 81, 59, 74, 88, 59,  #>     82, 78, 96, 88, 98, 72, 98, 61, 55, 81, 68, 88, 64, 91, 54,  #>     62, 80, 64, 76, 70, 68, 100, 82, 83, 88, 85, 90, 67, 86,  #>     44, 72, 88, 70, 45, 88, 81, 87, 65, 81, 88, 82, 68, 68, 77,  #>     77, 73, 45, 83, 89, 75, 85, 49, 89, 83, 88, 74, 84, 48, 86,  #>     91, 51, 99, 66, 67, 76, 83, 76, 76, 62, 70, 57, 70, 66, 60,  #>     78, 80, 73, 74, 76, 88, 90, 88, 51, 56, 99, 74, 92, 78, 73,  #>     81, 76, 54, 73, 61, 54, 95, 97, 74, 82, 76, 84, 78, 78, 62,  #>     88, 83, 60, 55, 89, 87, 71, 85, 60, 58, 64, 66, 86, 93, 52,  #>     68, 74, 76, 60, 94, 80, 80, 74, 80, 88, 65, 95, 75, 86, 78,  #>     63, 78, 52, 84, 92, 86, 65, 85, 72, 100, 54, 81, 80, 90,  #>     78, 95, 79, 95, 60, 89, 86, 63, 63, 78, 69, 89, 87, 100,  #>     95, 54, 50, 91, 57, 94, 94, 58, 57, 95, 80, 85, 81, 54, 88,  #>     100, 74, 60, 75, 74, 97, 92, 90, 75, 59, 83, 94, 90, 67,  #>     72, 75, 86, 72, 75, 71, 60, 73, 59, 70, 58, 51, 76, 89, 66,  #>     54, 85, 81, 45, 77, 69, 64, 90, 88, 75, 76, 93, 64, 86, 59,  #>     64, 93, 74, 62, 89, 92, 70, 74, 67, 75, 72, 95, 95, 91, 96,  #>     83, 100, 81, 75, 88, 72, 96, 82, 94, 59, 89, 83, 100, 74,  #>     98, 88, 64, 93, 88, 71, 67, 62, 97, 74, 59, 81, 79, 98, 94,  #>     86, 75, 89, 73, 70, 51, 80, 55, 75, 73, 94, 87, 68, 61, 77,  #>     36, 71, 85, 81, 92, 73, 81, 60, 87, 62, 68, 80, 53, 61, 87,  #>     58, 95, 65, 62, 79, 93, 100, 80, 93, 69, 81, 76, 92, 74,  #>     90, 81, 50, 73, 77, 71, 98, 59, 71, 49, 92, 86, 58, 91, 89,  #>     87, 92, 80, 83, 83, 77, 66, 71, 99, 88, 100, 75, 95, 92,  #>     65, 75, 100, 58, 100, 78, 60, 54, 70, 83, 70, 74, 50, 85,  #>     67, 60, 50, 80, 76, 78, 82, 97, 69, 84, 61, 79, 70, 80, 49,  #>     68, 50, 95, 78, 59, 79, 98, 78, 70, 74, 53, 85, 82, 85, 78,  #>     89, 53, 84, 89, 98, 100, 58, 79, 91, 96, 82, 96, 70, 80,  #>     74, 80, 69, 81, 84, 75, 80, 70, 99, 53, 57, 61, 82, 93, 82,  #>     57, 64, 83, 79, 47, 87, 57, 75, 71, 100, 64, 85, 53, 57,  #>     75, 73, 65, 84, 70, 76, 85, 73, 85, 81, 92, 84, 77, 55, 98,  #>     97, 92, 82, 39, 72, 81, 94, 74, 86, 69, 65, 94, 85, 83, 88,  #>     72, 77, 77, 86, 80, 69, 81, 100, 59, 93, 48, 50, 74, 67,  #>     51, 83, 53, 72, 95, 62, 87, 66, 87, 74, 97, 64, 92, 85, 66,  #>     70, 80, 83, 49, 86, 84, 92, 66, 74, 68, 83, 86, 82, 94, 68,  #>     64, 85, 90, 98, 65, 66, 88, 77, 62, 73, 87, 67, 72, 67, 53,  #>     64, 85, 64, 79, 72, 65, 75, 89, 88, 71, 86, 90, 87, 69, 88,  #>     66, 72, 90, 82, 96, 80, 67, 97, 74, 68, 100, 77, 68, 81,  #>     95, 98, 62, 69, 73, 84, 73, 93, 92, 65, 78, 81, 91, 48, 68,  #>     50, 75, 72, 54, 45, 71, 96, 73, 82, 68, 66, 74, 90, 96, 98,  #>     77, 77, 70, 84, 93, 86, 69, 83, 78, 87, 97, 90, 77, 80, 88,  #>     90, 78, 92, 90, 81, 63, 70, 95, 91, 62, 88, 59, 84, 91, 66,  #>     61, 68, 78, 72, 89, 51, 87, 49, 81, 45, 57, 88, 55, 89, 60,  #>     92, 80, 63, 68, 84, 72, 61, 95, 74, 83, 66, 51, 58, 62, 79,  #>     63, 84, 76, 42, 67, 51, 85, 63, 44, 79, 82, 73, 80, 81, 71,  #>     74, 81, 82, 58, 59, 71, 81, 84, 66, 64, 76, 84, 79, 62, 82,  #>     76, 70, 79, 78, 91, 78, 82, 70, 87, 71, 51, 91, 78, 91, 90,  #>     81, 67, 88, 65, 74, 74, 82, 79, 84, 75, 70, 87, 77, 99, 88,  #>     62, 66, 54, 82, 79, 82, 61, 67, 72, 93, 57, 67, 73, 78, 85,  #>     70, 92, 92, 48, 68, 62, 99, 64, 57, 83, 79, 66, 72, 78, 78,  #>     87, 61, 90, 59, 62, 61, 72, 96, 84, 91, 70, 49, 76, 88, 69,  #>     79, 61, 67, 71, 100, 93, 88, 95, 86, 52, 85, 91, 63, 75,  #>     91, 69, 73, 75, 76, 73, 89, 82, 68, 94, 84, 86, 74, 83, 58,  #>     58, 76, 83, 76, 98, 87, 63, 75, 86, 70, 86, 55, 68, 59, 74,  #>     72, 87, 49, 55, 80, 73, 90, 69, 67, 62, 91, 57, 57, 62, 79,  #>     91, 93, 95, 88, 50, 75, 97, 66, 82, 86, 64, 73, 84, 80, 77,  #>     59, 89, 57, 64, 95, 86, 97, 76, 81, 71, 93, 70, 66, 65, 59,  #>     49, 68, 65, 49, 91, 54, 77, 80, 79, 64, 61, 66, 94, 89, 78,  #>     80, 74, 79, 74, 70, 73, 53, 77, 72, 62, 94, 60, 49, 88, 82,  #>     86, 77, 63, 82, 60, 94, 81, 66, 58, 58, 86, 42, 89, 58, 58,  #>     77, 81, 82, 86, 49, 73, 63, 50, 79, 65, 91, 57, 63, 100,  #>     93, 93, 78, 91, 59, 75, 80, 89, 84, 72, 59, 81, 60, 64, 77,  #>     58, 54, 55, 78, 75, 100, 58, 99, 64, 80, 84, 81, 75, 93,  #>     71, 81, 77, 57, 74, 75, 53, 50, 56, 86, 69, 48, 81, 92, 92,  #>     94, 80, 78, 65, 80, 93, 68, 65, 75, 77, 81, 81, 70, 73, 85,  #>     82, 58, 97, 55, 96, 68, 69, 79, 50, 95, 84, 98, 67, 76, 84,  #>     97, 74, 91, 70, 89, 79, 70, 83, 85, 100, 80, 56, 84, 76,  #>     69, 94, 75, 88, 57, 53, 69, 78, 99, 84, 71, 65, 82, 99, 77,  #>     62, 81, 77, 81, 62, 87, 44, 82, 75, 70, 100, 75, 91, 60,  #>     55, 91, 90, 41, 83, 89, 80, 78, 93, 93, 94, 67, 97, 53, 69,  #>     85, 56, 77, 56, 55, 76, 68, 83, 88, 79, 82, 62, 68, 93, 53,  #>     59, 62, 87, 61, 42, 82, 89, 84, 89, 80, 78, 67, 71, 95, 68,  #>     56, 79, 85, 98, 81, 93, 90, 67, 74, 91, 88, 64, 66, 64, 56,  #>     88, 98, 77, 77, 90, 65, 77, 86, 76, 88, 71, 73, 73, 66, 80,  #>     65, 81, 74, 72, 98, 86, 75, 79, 80, 97, 79, 70, 71, 90, 57,  #>     83, 100, 85, 63, 72, 90, 75, 65, 86, 87, 92, 98, 76, 69,  #>     57, 67, 99, 72, 92, 73, 84, 71, 51, 88, 82, 77, 58, 80, 93,  #>     97, 95, 72, 62, 63, 78, 68, 92, 91, 90, 68, 72, 77, 86, 69,  #>     100, 76, 84, 84, 91, 87, 63, 77, 59, 95, 87, 94, 87, 100,  #>     49, 63, 78, 67, 77, 79, 89, 79, 81, 88, 84, 66, 45, 84, 86,  #>     100, 65, 76, 56, 67, 67, 68, 64, 66, 94, 94, 62, 72, 99,  #>     90, 72, 84, 87, 88, 57, 62, 82, 79, 88, 80, 78, 65, 88, 72,  #>     98, 86, 77, 66, 84, 71, 69, 63, 71, 87, 81, 87, 95, 75, 100,  #>     100, 87, 82, 63, 96, 87, 98, 77, 67, 76, 70, 81, 54, 64,  #>     81, 61, 93, 52, 65, 88, 64, 87, 65, 64, 62, 89, 85, 91, 83,  #>     80, 57, 55, 75, 73, 73, 69, 88, 72, 55, 75, 99, 80, 93, 60,  #>     66, 75, 100, 69, 78, 84, 88, 73, 100, 72, 87, 79, 95, 89,  #>     83, 77, 73, 82, 89, 88, 84, 76, 76, 62, 50, 83, 68, 90, 91,  #>     66, 50, 69, 99, 71, 97, 48, 57, 94, 68, 99, 66, 66, 90, 94,  #>     95, 72, 100, 78, 83, 96, 73, 61, 62, 88, 46, 86, 47, 42,  #>     74, 73, 47, 65, 72, 97, 76, 73, 83, 75, 75, 68, 49, 82, 69,  #>     100, 93, 84, 57, 84, 91, 83, 82, 79, 99, 93, 74, 45, 86,  #>     74, 93, 96, 74, 84, 91, 76, 82, 67, 94, 74, 64, 72, 83, 73,  #>     84, 61, 81, 80, 47, 94, 86, 90, 67, 67, 90, 81, 87, 66, 54,  #>     63, 58, 64, 46, 88, 75, 60, 69, 79, 80, 72, 86, 70, 79, 99,  #>     74, 88, 86, 86, 58, 66, 76, 92, 96, 84, 64, 43, 74, 49, 84,  #>     75, 57, 52, 85, 84, 72, 83, 75, 74, 100, 94, 73, 64, 42,  #>     89, 100, 61, 60, 78, 65, 95, 95, 90, 88, 44, 92, 56, 78,  #>     78, 75, 58, 74, 86, 85, 49, 92, 81, 93, 72, 82, 94, 82, 90,  #>     76, 79, 48, 53, 79, 74, 82, 62, 97, 91, 90, 88, 66, 99, 89,  #>     87, 97, 66, 87, 87, 84, 71, 63, 85, 89, 91, 94, 56, 64, 63,  #>     100, 59, 65, 87, 46, 65, 50, 80, 67, 71, 95, 90, 79, 78,  #>     91, 78, 74, 61, 67, 60, 86, 54, 64, 40, 74, 71, 93, 67, 76,  #>     81, 78, 72, 63, 59, 73, 99, 81, 78, 88, 80, 67, 52, 86, 69,  #>     83, 49, 88, 90, 78, 62, 83, 62, 90, 45, 63, 93, 84, 85, 67,  #>     84, 100, 96, 78, 58, 68, 89, 67, 73, 78, 83, 89, 68, 90,  #>     84, 92, 70, 86, 87, 54, 88, 77, 93, 66, 68, 72, 80, 96, 78,  #>     73, 97, 82, 59, 95, 82, 69, 68, 80, 87, 100, 99, 61, 86,  #>     48, 89, 64, 55, 73, 69, 78, 93, 62, 65, 95, 67, 85, 60, 72,  #>     95, 73, 47, 84, 100, 71, 53, 99, 70, 69, 73, 81, 59, 65,  #>     76, 74, 52, 67, 88, 65, 68, 68, 58, 60, 77, 98, 82, 91, 75,  #>     94, 59, 60, 79, 99, 57, 54, 75, 83, 92, 94, 71, 78, 100,  #>     83, 98, 87, 96, 91, 81, 83, 96, 86, 83, 66, 87, 72, 76, 92,  #>     79, 71, 93, 84, 69, 71, 41, 80, 80, 100, 57, 80, 74, 77,  #>     91, 51, 76, 78, 66, 85, 79, 63, 100, 90, 86, 89, 85, 93,  #>     79, 76, 76, 54, 98, 94, 92, 91, 83, 95, 72, 77, 96, 86, 69,  #>     100, 83, 69, 84, 89, 56, 60, 75, 82, 77, 92, 71, 70, 69,  #>     79, 86, 72, 95, 91, 77, 43, 76, 69, 72, 85, 45, 67, 81, 82,  #>     76, 93, 56, 88, 62, 92, 74, 65, 84, 78, 86, 84, 69, 50, 99,  #>     83, 70, 93, 75, 59, 95, 50, 94, 79, 82, 97, 93, 48, 83, 94,  #>     85, 73, 77, 100, 76, 89, 85, 67, 61, 86, 93, 71, 68, 86,  #>     51, 77, 88, 79, 81, 64, 65, 65, 97, 67, 100, 74, 84, 72,  #>     90, 82, 95, 95, 95, 75, 88, 73, 54, 70, 73, 67, 78, 71, 89,  #>     69, 76, 93, 85, 88, 94, 75, 76, 84, 76, 72, 81, 82, 89, 86,  #>     82, 85, 71, 75, 59, 70, 74, 80, 75, 87, 88, 45, 77, 91, 81,  #>     70, 58, 69, 63, 82, 86, 74, 61, 67, 56, 62, 87, 90, 84, 61,  #>     70, 96, 60, 96, 82, 62, 55, 87, 64, 67, 50, 66, 51, 83, 85,  #>     71, 68, 50, 93, 63, 76, 47, 51, 73, 98, 46, 80, 61, 56, 99,  #>     80, 78, 57, 87, 82, 76, 67, 86, 60, 100, 74, 59, 66, 88,  #>     89, 78, 73, 73, 76, 88, 50, 44, 91, 65, 87, 63, 64, 100,  #>     71, 86, 87, 96, 60, 91, 94, 66, 97, 88, 79, 59, 66, 94, 75,  #>     56, 88, 82, 92, 69, 62, 51, 83, 97, 58, 80, 97, 74, 67, 60,  #>     67, 67, 63, 85, 81, 93, 60, 83, 74, 75, 69, 100, 82, 96,  #>     68, 67, 89, 91, 57, 58, 85, 98, 85, 80, 62, 93, 52, 100,  #>     92, 60, 93, 90, 69, 66, 78, 70, 72, 74, 52, 94, 79, 59, 82,  #>     61, 74, 66, 87, 78, 96, 65, 66, 87, 62, 68, 95, 81, 74, 87,  #>     81, 84, 84, 69, 54, 67, 80, 68, 54, 68, 53, 58, 63, 81, 79,  #>     81, 81, 91, 90, 53, 72, 97, 75, 61, 79, 75, 84, 59, 92, 70,  #>     58, 60, 91, 100, 62, 84, 61, 68, 64, 69, 63, 67, 89, 76,  #>     88, 75, 76, 73, 82, 72, 97, 66, 76, 73, 66, 60, 94, 99, 73,  #>     82, 69, 83, 94, 45, 92, 82, 80, 91, 98, 41, 62, 48, 86, 52,  #>     95, 63, 90, 96, 77, 66, 86, 80, 74, 77, 68, 83, 54, 100,  #>     78, 60, 82, 70, 86, 74, 66, 61, 85, 85, 95, 81, 66), treatment. = c(0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  #>     1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0,  #>     1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1,  #>     1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,  #>     1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1,  #>     0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,  #>     0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,  #>     1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0,  #>     1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0,  #>     1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,  #>     1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1,  #>     0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,  #>     1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,  #>     0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1,  #>     1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1,  #>     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1,  #>     1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0,  #>     0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,  #>     1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,  #>     1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0,  #>     0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1,  #>     0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,  #>     1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1,  #>     1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1,  #>     0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,  #>     0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,  #>     1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0,  #>     1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     1, 1, 1, 0, 1, 0, 0, 0, 0, 0)), class = \"data.frame\", row.names = c(\"1\",  #> \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\",  #> \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",  #> \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\",  #> \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",  #> \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\",  #> \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\",  #> \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",  #> \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\",  #> \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\",  #> \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\",  #> \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\",  #> \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\",  #> \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\",  #> \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\",  #> \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\",  #> \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\",  #> \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\",  #> \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\",  #> \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\",  #> \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\",  #> \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\",  #> \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\",  #> \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\",  #> \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\",  #> \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\",  #> \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\",  #> \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\",  #> \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\",  #> \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\",  #> \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\",  #> \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\",  #> \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\",  #> \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\",  #> \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\",  #> \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\",  #> \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\",  #> \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\",  #> \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\",  #> \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\",  #> \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\",  #> \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\",  #> \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\",  #> \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\",  #> \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\",  #> \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\",  #> \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\",  #> \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\",  #> \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\",  #> \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\",  #> \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\",  #> \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\",  #> \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\",  #> \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\",  #> \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\",  #> \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\",  #> \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\",  #> \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\",  #> \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\",  #> \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\",  #> \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\",  #> \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\",  #> \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\",  #> \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\",  #> \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\",  #> \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\",  #> \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\",  #> \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\",  #> \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\",  #> \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\",  #> \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\",  #> \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\",  #> \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\",  #> \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\",  #> \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\",  #> \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\",  #> \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\",  #> \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\",  #> \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\",  #> \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\",  #> \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\",  #> \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\",  #> \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\",  #> \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\",  #> \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\",  #> \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\",  #> \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\",  #> \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\",  #> \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\",  #> \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\",  #> \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\",  #> \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\",  #> \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\",  #> \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\",  #> \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\",  #> \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\",  #> \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\",  #> \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\",  #> \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\",  #> \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\",  #> \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\",  #> \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\",  #> \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\",  #> \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\",  #> \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\",  #> \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\",  #> \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\",  #> \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\",  #> \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\",  #> \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\",  #> \"1001\", \"1002\", \"1003\", \"1004\", \"1005\", \"1006\", \"1007\", \"1008\",  #> \"1009\", \"1010\", \"1011\", \"1012\", \"1013\", \"1014\", \"1015\", \"1016\",  #> \"1017\", \"1018\", \"1019\", \"1020\", \"1021\", \"1022\", \"1023\", \"1024\",  #> \"1025\", \"1026\", \"1027\", \"1028\", \"1029\", \"1030\", \"1031\", \"1032\",  #> \"1033\", \"1034\", \"1035\", \"1036\", \"1037\", \"1038\", \"1039\", \"1040\",  #> \"1041\", \"1042\", \"1043\", \"1044\", \"1045\", \"1046\", \"1047\", \"1048\",  #> \"1049\", \"1050\", \"1051\", \"1052\", \"1053\", \"1054\", \"1055\", \"1056\",  #> \"1057\", \"1058\", \"1059\", \"1060\", \"1061\", \"1062\", \"1063\", \"1064\",  #> \"1065\", \"1066\", \"1067\", \"1068\", \"1069\", \"1070\", \"1071\", \"1072\",  #> \"1073\", \"1074\", \"1075\", \"1076\", \"1077\", \"1078\", \"1079\", \"1080\",  #> \"1081\", \"1082\", \"1083\", \"1084\", \"1085\", \"1086\", \"1087\", \"1088\",  #> \"1089\", \"1090\", \"1091\", \"1092\", \"1093\", \"1094\", \"1095\", \"1096\",  #> \"1097\", \"1098\", \"1099\", \"1100\", \"1101\", \"1102\", \"1103\", \"1104\",  #> \"1105\", \"1106\", \"1107\", \"1108\", \"1109\", \"1110\", \"1111\", \"1112\",  #> \"1113\", \"1114\", \"1115\", \"1116\", \"1117\", \"1118\", \"1119\", \"1120\",  #> \"1121\", \"1122\", \"1123\", \"1124\", \"1125\", \"1126\", \"1127\", \"1128\",  #> \"1129\", \"1130\", \"1131\", \"1132\", \"1133\", \"1134\", \"1135\", \"1136\",  #> \"1137\", \"1138\", \"1139\", \"1140\", \"1141\", \"1142\", \"1143\", \"1144\",  #> \"1145\", \"1146\", \"1147\", \"1148\", \"1149\", \"1150\", \"1151\", \"1152\",  #> \"1153\", \"1154\", \"1155\", \"1156\", \"1157\", \"1158\", \"1159\", \"1160\",  #> \"1161\", \"1162\", \"1163\", \"1164\", \"1165\", \"1166\", \"1167\", \"1168\",  #> \"1169\", \"1170\", \"1171\", \"1172\", \"1173\", \"1174\", \"1175\", \"1176\",  #> \"1177\", \"1178\", \"1179\", \"1180\", \"1181\", \"1182\", \"1183\", \"1184\",  #> \"1185\", \"1186\", \"1187\", \"1188\", \"1189\", \"1190\", \"1191\", \"1192\",  #> \"1193\", \"1194\", \"1195\", \"1196\", \"1197\", \"1198\", \"1199\", \"1200\",  #> \"1201\", \"1202\", \"1203\", \"1204\", \"1205\", \"1206\", \"1207\", \"1208\",  #> \"1209\", \"1210\", \"1211\", \"1212\", \"1213\", \"1214\", \"1215\", \"1216\",  #> \"1217\", \"1218\", \"1219\", \"1220\", \"1221\", \"1222\", \"1223\", \"1224\",  #> \"1225\", \"1226\", \"1227\", \"1228\", \"1229\", \"1230\", \"1231\", \"1232\",  #> \"1233\", \"1234\", \"1235\", \"1236\", \"1237\", \"1238\", \"1239\", \"1240\",  #> \"1241\", \"1242\", \"1243\", \"1244\", \"1245\", \"1246\", \"1247\", \"1248\",  #> \"1249\", \"1250\", \"1251\", \"1252\", \"1253\", \"1254\", \"1255\", \"1256\",  #> \"1257\", \"1258\", \"1259\", \"1260\", \"1261\", \"1262\", \"1263\", \"1264\",  #> \"1265\", \"1266\", \"1267\", \"1268\", \"1269\", \"1270\", \"1271\", \"1272\",  #> \"1273\", \"1274\", \"1275\", \"1276\", \"1277\", \"1278\", \"1279\", \"1280\",  #> \"1281\", \"1282\", \"1283\", \"1284\", \"1285\", \"1286\", \"1287\", \"1288\",  #> \"1289\", \"1290\", \"1291\", \"1292\", \"1293\", \"1294\", \"1295\", \"1296\",  #> \"1297\", \"1298\", \"1299\", \"1300\", \"1301\", \"1302\", \"1303\", \"1304\",  #> \"1305\", \"1306\", \"1307\", \"1308\", \"1309\", \"1310\", \"1311\", \"1312\",  #> \"1313\", \"1314\", \"1315\", \"1316\", \"1317\", \"1318\", \"1319\", \"1320\",  #> \"1321\", \"1322\", \"1323\", \"1324\", \"1325\", \"1326\", \"1327\", \"1328\",  #> \"1329\", \"1330\", \"1331\", \"1332\", \"1333\", \"1334\", \"1335\", \"1336\",  #> \"1337\", \"1338\", \"1339\", \"1340\", \"1341\", \"1342\", \"1343\", \"1344\",  #> \"1345\", \"1346\", \"1347\", \"1348\", \"1349\", \"1350\", \"1351\", \"1352\",  #> \"1353\", \"1354\", \"1355\", \"1356\", \"1357\", \"1358\", \"1359\", \"1360\",  #> \"1361\", \"1362\", \"1363\", \"1364\", \"1365\", \"1366\", \"1367\", \"1368\",  #> \"1369\", \"1370\", \"1371\", \"1372\", \"1373\", \"1374\", \"1375\", \"1376\",  #> \"1377\", \"1378\", \"1379\", \"1380\", \"1381\", \"1382\", \"1383\", \"1384\",  #> \"1385\", \"1386\", \"1387\", \"1388\", \"1389\", \"1390\", \"1391\", \"1392\",  #> \"1393\", \"1394\", \"1395\", \"1396\", \"1397\", \"1398\", \"1399\", \"1400\",  #> \"1401\", \"1402\", \"1403\", \"1404\", \"1405\", \"1406\", \"1407\", \"1408\",  #> \"1409\", \"1410\", \"1411\", \"1412\", \"1413\", \"1414\", \"1415\", \"1416\",  #> \"1417\", \"1418\", \"1419\", \"1420\", \"1421\", \"1422\", \"1423\", \"1424\",  #> \"1425\", \"1426\", \"1427\", \"1428\", \"1429\", \"1430\", \"1431\", \"1432\",  #> \"1433\", \"1434\", \"1435\", \"1436\", \"1437\", \"1438\", \"1439\", \"1440\",  #> \"1441\", \"1442\", \"1443\", \"1444\", \"1445\", \"1446\", \"1447\", \"1448\",  #> \"1449\", \"1450\", \"1451\", \"1452\", \"1453\", \"1454\", \"1455\", \"1456\",  #> \"1457\", \"1458\", \"1459\", \"1460\", \"1461\", \"1462\", \"1463\", \"1464\",  #> \"1465\", \"1466\", \"1467\", \"1468\", \"1469\", \"1470\", \"1471\", \"1472\",  #> \"1473\", \"1474\", \"1475\", \"1476\", \"1477\", \"1478\", \"1479\", \"1480\",  #> \"1481\", \"1482\", \"1483\", \"1484\", \"1485\", \"1486\", \"1487\", \"1488\",  #> \"1489\", \"1490\", \"1491\", \"1492\", \"1493\", \"1494\", \"1495\", \"1496\",  #> \"1497\", \"1498\", \"1499\", \"1500\", \"1501\", \"1502\", \"1503\", \"1504\",  #> \"1505\", \"1506\", \"1507\", \"1508\", \"1509\", \"1510\", \"1511\", \"1512\",  #> \"1513\", \"1514\", \"1515\", \"1516\", \"1517\", \"1518\", \"1519\", \"1520\",  #> \"1521\", \"1522\", \"1523\", \"1524\", \"1525\", \"1526\", \"1527\", \"1528\",  #> \"1529\", \"1530\", \"1531\", \"1532\", \"1533\", \"1534\", \"1535\", \"1536\",  #> \"1537\", \"1538\", \"1539\", \"1540\", \"1541\", \"1542\", \"1543\", \"1544\",  #> \"1545\", \"1546\", \"1547\", \"1548\", \"1549\", \"1550\", \"1551\", \"1552\",  #> \"1553\", \"1554\", \"1555\", \"1556\", \"1557\", \"1558\", \"1559\", \"1560\",  #> \"1561\", \"1562\", \"1563\", \"1564\", \"1565\", \"1566\", \"1567\", \"1568\",  #> \"1569\", \"1570\", \"1571\", \"1572\", \"1573\", \"1574\", \"1575\", \"1576\",  #> \"1577\", \"1578\", \"1579\", \"1580\", \"1581\", \"1582\", \"1583\", \"1584\",  #> \"1585\", \"1586\", \"1587\", \"1588\", \"1589\", \"1590\", \"1591\", \"1592\",  #> \"1593\", \"1594\", \"1595\", \"1596\", \"1597\", \"1598\", \"1599\", \"1600\",  #> \"1601\", \"1602\", \"1603\", \"1604\", \"1605\", \"1606\", \"1607\", \"1608\",  #> \"1609\", \"1610\", \"1611\", \"1612\", \"1613\", \"1614\", \"1615\", \"1616\",  #> \"1617\", \"1618\", \"1619\", \"1620\", \"1621\", \"1622\", \"1623\", \"1624\",  #> \"1625\", \"1626\", \"1627\", \"1628\", \"1629\", \"1630\", \"1631\", \"1632\",  #> \"1633\", \"1634\", \"1635\", \"1636\", \"1637\", \"1638\", \"1639\", \"1640\",  #> \"1641\", \"1642\", \"1643\", \"1644\", \"1645\", \"1646\", \"1647\", \"1648\",  #> \"1649\", \"1650\", \"1651\", \"1652\", \"1653\", \"1654\", \"1655\", \"1656\",  #> \"1657\", \"1658\", \"1659\", \"1660\", \"1661\", \"1662\", \"1663\", \"1664\",  #> \"1665\", \"1666\", \"1667\", \"1668\", \"1669\", \"1670\", \"1671\", \"1672\",  #> \"1673\", \"1674\", \"1675\", \"1676\", \"1677\", \"1678\", \"1679\", \"1680\",  #> \"1681\", \"1682\", \"1683\", \"1684\", \"1685\", \"1686\", \"1687\", \"1688\",  #> \"1689\", \"1690\", \"1691\", \"1692\", \"1693\", \"1694\", \"1695\", \"1696\",  #> \"1697\", \"1698\", \"1699\", \"1700\", \"1701\", \"1702\", \"1703\", \"1704\",  #> \"1705\", \"1706\", \"1707\", \"1708\", \"1709\", \"1710\", \"1711\", \"1712\",  #> \"1713\", \"1714\", \"1715\", \"1716\", \"1717\", \"1718\", \"1719\", \"1720\",  #> \"1721\", \"1722\", \"1723\", \"1724\", \"1725\", \"1726\", \"1727\", \"1728\",  #> \"1729\", \"1730\", \"1731\", \"1732\", \"1733\", \"1734\", \"1735\", \"1736\",  #> \"1737\", \"1738\", \"1739\", \"1740\", \"1741\", \"1742\", \"1743\", \"1744\",  #> \"1745\", \"1746\", \"1747\", \"1748\", \"1749\", \"1750\", \"1751\", \"1752\",  #> \"1753\", \"1754\", \"1755\", \"1756\", \"1757\", \"1758\", \"1759\", \"1760\",  #> \"1761\", \"1762\", \"1763\", \"1764\", \"1765\", \"1766\", \"1767\", \"1768\",  #> \"1769\", \"1770\", \"1771\", \"1772\", \"1773\", \"1774\", \"1775\", \"1776\",  #> \"1777\", \"1778\", \"1779\", \"1780\", \"1781\", \"1782\", \"1783\", \"1784\",  #> \"1785\", \"1786\", \"1787\", \"1788\", \"1789\", \"1790\", \"1791\", \"1792\",  #> \"1793\", \"1794\", \"1795\", \"1796\", \"1797\", \"1798\", \"1799\", \"1800\",  #> \"1801\", \"1802\", \"1803\", \"1804\", \"1805\", \"1806\", \"1807\", \"1808\",  #> \"1809\", \"1810\", \"1811\", \"1812\", \"1813\", \"1814\", \"1815\", \"1816\",  #> \"1817\", \"1818\", \"1819\", \"1820\", \"1821\", \"1822\", \"1823\", \"1824\",  #> \"1825\", \"1826\", \"1827\", \"1828\", \"1829\", \"1830\", \"1831\", \"1832\",  #> \"1833\", \"1834\", \"1835\", \"1836\", \"1837\", \"1838\", \"1839\", \"1840\",  #> \"1841\", \"1842\", \"1843\", \"1844\", \"1845\", \"1846\", \"1847\", \"1848\",  #> \"1849\", \"1850\", \"1851\", \"1852\", \"1853\", \"1854\", \"1855\", \"1856\",  #> \"1857\", \"1858\", \"1859\", \"1860\", \"1861\", \"1862\", \"1863\", \"1864\",  #> \"1865\", \"1866\", \"1867\", \"1868\", \"1869\", \"1870\", \"1871\", \"1872\",  #> \"1873\", \"1874\", \"1875\", \"1876\", \"1877\", \"1878\", \"1879\", \"1880\",  #> \"1881\", \"1882\", \"1883\", \"1884\", \"1885\", \"1886\", \"1887\", \"1888\",  #> \"1889\", \"1890\", \"1891\", \"1892\", \"1893\", \"1894\", \"1895\", \"1896\",  #> \"1897\", \"1898\", \"1899\", \"1900\", \"1901\", \"1902\", \"1903\", \"1904\",  #> \"1905\", \"1906\", \"1907\", \"1908\", \"1909\", \"1910\", \"1911\", \"1912\",  #> \"1913\", \"1914\", \"1915\", \"1916\", \"1917\", \"1918\", \"1919\", \"1920\",  #> \"1921\", \"1922\", \"1923\", \"1924\", \"1925\", \"1926\", \"1927\", \"1928\",  #> \"1929\", \"1930\", \"1931\", \"1932\", \"1933\", \"1934\", \"1935\", \"1936\",  #> \"1937\", \"1938\", \"1939\", \"1940\", \"1941\", \"1942\", \"1943\", \"1944\",  #> \"1945\", \"1946\", \"1947\", \"1948\", \"1949\", \"1950\", \"1951\", \"1952\",  #> \"1953\", \"1954\", \"1955\", \"1956\", \"1957\", \"1958\", \"1959\", \"1960\",  #> \"1961\", \"1962\", \"1963\", \"1964\", \"1965\", \"1966\", \"1967\", \"1968\",  #> \"1969\", \"1970\", \"1971\", \"1972\", \"1973\", \"1974\", \"1975\", \"1976\",  #> \"1977\", \"1978\", \"1979\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\",  #> \"1985\", \"1986\", \"1987\", \"1988\", \"1989\", \"1990\", \"1991\", \"1992\",  #> \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\",  #> \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\",  #> \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\",  #> \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\",  #> \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\",  #> \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\",  #> \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\",  #> \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\",  #> \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\",  #> \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\",  #> \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\",  #> \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\",  #> \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\",  #> \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\",  #> \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\",  #> \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\",  #> \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\",  #> \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\",  #> \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\",  #> \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\",  #> \"2153\", \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\",  #> \"2161\", \"2162\", \"2163\", \"2164\", \"2165\", \"2166\", \"2167\", \"2168\",  #> \"2169\", \"2170\", \"2171\", \"2172\", \"2173\", \"2174\", \"2175\", \"2176\",  #> \"2177\", \"2178\", \"2179\", \"2180\", \"2181\", \"2182\", \"2183\", \"2184\",  #> \"2185\", \"2186\", \"2187\", \"2188\", \"2189\", \"2190\", \"2191\", \"2192\",  #> \"2193\", \"2194\", \"2195\", \"2196\", \"2197\", \"2198\", \"2199\", \"2200\",  #> \"2201\", \"2202\", \"2203\", \"2204\", \"2205\", \"2206\", \"2207\", \"2208\",  #> \"2209\", \"2210\", \"2211\", \"2212\", \"2213\", \"2214\", \"2215\", \"2216\",  #> \"2217\", \"2218\", \"2219\", \"2220\", \"2221\", \"2222\", \"2223\", \"2224\",  #> \"2225\", \"2226\", \"2227\", \"2228\", \"2229\", \"2230\", \"2231\", \"2232\",  #> \"2233\", \"2234\", \"2235\", \"2236\", \"2237\", \"2238\", \"2239\", \"2240\",  #> \"2241\", \"2242\", \"2243\", \"2244\", \"2245\", \"2246\", \"2247\", \"2248\",  #> \"2249\", \"2250\", \"2251\", \"2252\", \"2253\", \"2254\", \"2255\", \"2256\",  #> \"2257\", \"2258\", \"2259\", \"2260\", \"2261\", \"2262\", \"2263\", \"2264\",  #> \"2265\", \"2266\", \"2267\", \"2268\", \"2269\", \"2270\", \"2271\", \"2272\",  #> \"2273\", \"2274\", \"2275\", \"2276\", \"2277\", \"2278\", \"2279\", \"2280\",  #> \"2281\", \"2282\", \"2283\", \"2284\", \"2285\", \"2286\", \"2287\", \"2288\",  #> \"2289\", \"2290\", \"2291\", \"2292\", \"2293\", \"2294\", \"2295\", \"2296\",  #> \"2297\", \"2298\", \"2299\", \"2300\", \"2301\", \"2302\", \"2303\", \"2304\",  #> \"2305\", \"2306\", \"2307\", \"2308\", \"2309\", \"2310\", \"2311\", \"2312\",  #> \"2313\", \"2314\", \"2315\", \"2316\", \"2317\", \"2318\", \"2319\", \"2320\",  #> \"2321\", \"2322\", \"2323\", \"2324\", \"2325\", \"2326\", \"2327\", \"2328\",  #> \"2329\", \"2330\", \"2331\", \"2332\", \"2333\", \"2334\", \"2335\", \"2336\",  #> \"2337\", \"2338\", \"2339\", \"2340\", \"2341\", \"2342\", \"2343\", \"2344\",  #> \"2345\", \"2346\", \"2347\", \"2348\", \"2349\", \"2350\", \"2351\", \"2352\",  #> \"2353\", \"2354\", \"2355\", \"2356\", \"2357\", \"2358\", \"2359\", \"2360\",  #> \"2361\", \"2362\", \"2363\", \"2364\", \"2365\", \"2366\", \"2367\", \"2368\",  #> \"2369\", \"2370\", \"2371\", \"2372\", \"2373\", \"2374\", \"2375\", \"2376\",  #> \"2377\", \"2378\", \"2379\", \"2380\", \"2381\", \"2382\", \"2383\", \"2384\",  #> \"2385\", \"2386\", \"2387\", \"2388\", \"2389\", \"2390\", \"2391\", \"2392\",  #> \"2393\", \"2394\", \"2395\", \"2396\", \"2397\", \"2398\", \"2399\", \"2400\",  #> \"2401\", \"2402\", \"2403\", \"2404\", \"2405\", \"2406\", \"2407\", \"2408\",  #> \"2409\", \"2410\", \"2411\", \"2412\", \"2413\", \"2414\", \"2415\", \"2416\",  #> \"2417\", \"2418\", \"2419\", \"2420\", \"2421\", \"2422\", \"2423\", \"2424\",  #> \"2425\", \"2426\", \"2427\", \"2428\", \"2429\", \"2430\", \"2431\", \"2432\",  #> \"2433\", \"2434\", \"2435\", \"2436\", \"2437\", \"2438\", \"2439\", \"2440\",  #> \"2441\", \"2442\", \"2443\", \"2444\", \"2445\", \"2446\", \"2447\", \"2448\",  #> \"2449\", \"2450\", \"2451\", \"2452\", \"2453\", \"2454\", \"2455\", \"2456\",  #> \"2457\", \"2458\", \"2459\", \"2460\", \"2461\", \"2462\", \"2463\", \"2464\",  #> \"2465\", \"2466\", \"2467\", \"2468\", \"2469\", \"2470\", \"2471\", \"2472\",  #> \"2473\", \"2474\", \"2475\", \"2476\", \"2477\", \"2478\", \"2479\", \"2480\",  #> \"2481\", \"2482\", \"2483\", \"2484\", \"2485\", \"2486\", \"2487\", \"2488\",  #> \"2489\", \"2490\", \"2491\", \"2492\", \"2493\", \"2494\", \"2495\", \"2496\",  #> \"2497\", \"2498\", \"2499\", \"2500\", \"2501\", \"2502\", \"2503\", \"2504\",  #> \"2505\", \"2506\", \"2507\", \"2508\", \"2509\", \"2510\", \"2511\", \"2512\",  #> \"2513\", \"2514\", \"2515\", \"2516\", \"2517\", \"2518\", \"2519\", \"2520\",  #> \"2521\", \"2522\", \"2523\", \"2524\", \"2525\", \"2526\", \"2527\", \"2528\",  #> \"2529\", \"2530\", \"2531\", \"2532\", \"2533\", \"2534\", \"2535\", \"2536\",  #> \"2537\", \"2538\", \"2539\", \"2540\", \"2541\", \"2542\", \"2543\", \"2544\",  #> \"2545\", \"2546\", \"2547\", \"2548\", \"2549\", \"2550\", \"2551\", \"2552\",  #> \"2553\", \"2554\", \"2555\", \"2556\", \"2557\", \"2558\", \"2559\", \"2560\",  #> \"2561\", \"2562\", \"2563\", \"2564\", \"2565\", \"2566\", \"2567\", \"2568\",  #> \"2569\", \"2570\", \"2571\", \"2572\", \"2573\", \"2574\", \"2575\", \"2576\",  #> \"2577\", \"2578\", \"2579\", \"2580\", \"2581\", \"2582\", \"2583\", \"2584\",  #> \"2585\", \"2586\", \"2587\", \"2588\", \"2589\", \"2590\", \"2591\", \"2592\",  #> \"2593\", \"2594\", \"2595\", \"2596\", \"2597\", \"2598\", \"2599\", \"2600\",  #> \"2601\", \"2602\", \"2603\", \"2604\", \"2605\", \"2606\", \"2607\", \"2608\",  #> \"2609\", \"2610\", \"2611\", \"2612\", \"2613\", \"2614\", \"2615\", \"2616\",  #> \"2617\", \"2618\", \"2619\", \"2620\", \"2621\", \"2622\", \"2623\", \"2624\",  #> \"2625\", \"2626\", \"2627\", \"2628\", \"2629\", \"2630\", \"2631\", \"2632\",  #> \"2633\", \"2634\", \"2635\", \"2636\", \"2637\", \"2638\", \"2639\", \"2640\",  #> \"2641\", \"2642\", \"2643\", \"2644\", \"2645\", \"2646\", \"2647\", \"2648\",  #> \"2649\", \"2650\", \"2651\", \"2652\", \"2653\", \"2654\", \"2655\", \"2656\",  #> \"2657\", \"2658\", \"2659\", \"2660\", \"2661\", \"2662\", \"2663\", \"2664\",  #> \"2665\", \"2666\", \"2667\", \"2668\", \"2669\", \"2670\", \"2671\", \"2672\",  #> \"2673\", \"2674\", \"2675\", \"2676\", \"2677\", \"2678\", \"2679\", \"2680\",  #> \"2681\", \"2682\", \"2683\", \"2684\", \"2685\", \"2686\", \"2687\", \"2688\",  #> \"2689\", \"2690\", \"2691\", \"2692\", \"2693\", \"2694\", \"2695\", \"2696\",  #> \"2697\", \"2698\", \"2699\", \"2700\", \"2701\", \"2702\", \"2703\", \"2704\",  #> \"2705\", \"2706\", \"2707\", \"2708\", \"2709\", \"2710\", \"2711\", \"2712\",  #> \"2713\", \"2714\", \"2715\", \"2716\", \"2717\", \"2718\", \"2719\", \"2720\",  #> \"2721\", \"2722\", \"2723\", \"2724\", \"2725\", \"2726\", \"2727\", \"2728\",  #> \"2729\", \"2730\", \"2731\", \"2732\", \"2733\", \"2734\", \"2735\", \"2736\",  #> \"2737\", \"2738\", \"2739\", \"2740\", \"2741\", \"2742\", \"2743\", \"2744\",  #> \"2745\", \"2746\", \"2747\", \"2748\", \"2749\", \"2750\", \"2751\", \"2752\",  #> \"2753\", \"2754\", \"2755\", \"2756\", \"2757\", \"2758\", \"2759\", \"2760\",  #> \"2761\", \"2762\", \"2763\", \"2764\", \"2765\", \"2766\", \"2767\", \"2768\",  #> \"2769\", \"2770\", \"2771\", \"2772\", \"2773\", \"2774\", \"2775\", \"2776\",  #> \"2777\", \"2778\", \"2779\", \"2780\", \"2781\", \"2782\", \"2783\", \"2784\",  #> \"2785\", \"2786\", \"2787\", \"2788\", \"2789\", \"2790\", \"2791\", \"2792\",  #> \"2793\", \"2794\", \"2795\", \"2796\", \"2797\", \"2798\", \"2799\", \"2800\",  #> \"2801\", \"2802\", \"2803\", \"2804\", \"2805\", \"2806\", \"2807\", \"2808\",  #> \"2809\", \"2810\", \"2811\", \"2812\", \"2813\", \"2814\", \"2815\", \"2816\",  #> \"2817\", \"2818\", \"2819\", \"2820\", \"2821\", \"2822\", \"2823\", \"2824\",  #> \"2825\", \"2826\", \"2827\", \"2828\", \"2829\", \"2830\", \"2831\", \"2832\",  #> \"2833\", \"2834\", \"2835\", \"2836\", \"2837\", \"2838\", \"2839\", \"2840\",  #> \"2841\", \"2842\", \"2843\", \"2844\", \"2845\", \"2846\", \"2847\", \"2848\",  #> \"2849\", \"2850\", \"2851\", \"2852\", \"2853\", \"2854\", \"2855\", \"2856\",  #> \"2857\", \"2858\", \"2859\", \"2860\", \"2861\", \"2862\", \"2863\", \"2864\",  #> \"2865\", \"2866\", \"2867\", \"2868\", \"2869\", \"2870\", \"2871\", \"2872\",  #> \"2873\", \"2874\", \"2875\", \"2876\", \"2877\", \"2878\", \"2879\", \"2880\",  #> \"2881\", \"2882\", \"2883\", \"2884\", \"2885\", \"2886\", \"2887\", \"2888\",  #> \"2889\", \"2890\", \"2891\", \"2892\", \"2893\", \"2894\", \"2895\", \"2896\",  #> \"2897\", \"2898\", \"2899\", \"2900\", \"2901\", \"2902\", \"2903\", \"2904\",  #> \"2905\", \"2906\", \"2907\", \"2908\", \"2909\", \"2910\", \"2911\", \"2912\",  #> \"2913\", \"2914\", \"2915\", \"2916\", \"2917\", \"2918\", \"2919\", \"2920\",  #> \"2921\", \"2922\", \"2923\", \"2924\", \"2925\", \"2926\", \"2927\", \"2928\",  #> \"2929\", \"2930\", \"2931\", \"2932\", \"2933\", \"2934\", \"2935\", \"2936\",  #> \"2937\", \"2938\", \"2939\", \"2940\", \"2941\", \"2942\", \"2943\", \"2944\",  #> \"2945\", \"2946\", \"2947\", \"2948\", \"2949\", \"2950\", \"2951\", \"2952\",  #> \"2953\", \"2954\", \"2955\", \"2956\", \"2957\", \"2958\", \"2959\", \"2960\",  #> \"2961\", \"2962\", \"2963\", \"2964\", \"2965\", \"2966\", \"2967\", \"2968\",  #> \"2969\", \"2970\", \"2971\", \"2972\", \"2973\", \"2974\", \"2975\", \"2976\",  #> \"2977\", \"2978\", \"2979\", \"2980\", \"2981\", \"2982\", \"2983\", \"2984\",  #> \"2985\", \"2986\", \"2987\", \"2988\", \"2989\", \"2990\", \"2991\", \"2992\",  #> \"2993\", \"2994\", \"2995\", \"2996\", \"2997\", \"2998\", \"2999\", \"3000\",  #> \"3001\", \"3002\", \"3003\", \"3004\", \"3005\", \"3006\", \"3007\", \"3008\",  #> \"3009\", \"3010\", \"3011\", \"3012\", \"3013\", \"3014\", \"3015\", \"3016\",  #> \"3017\", \"3018\", \"3019\", \"3020\", \"3021\", \"3022\", \"3023\", \"3024\",  #> \"3025\", \"3026\", \"3027\", \"3028\", \"3029\", \"3030\", \"3031\", \"3032\",  #> \"3033\", \"3034\", \"3035\", \"3036\", \"3037\", \"3038\", \"3039\", \"3040\",  #> \"3041\", \"3042\", \"3043\", \"3044\", \"3045\", \"3046\", \"3047\", \"3048\",  #> \"3049\", \"3050\", \"3051\", \"3052\", \"3053\", \"3054\", \"3055\", \"3056\",  #> \"3057\", \"3058\", \"3059\", \"3060\", \"3061\", \"3062\", \"3063\", \"3064\",  #> \"3065\", \"3066\", \"3067\", \"3068\", \"3069\", \"3070\", \"3071\", \"3072\",  #> \"3073\", \"3074\", \"3075\", \"3076\", \"3077\", \"3078\", \"3079\", \"3080\",  #> \"3081\", \"3082\", \"3083\", \"3084\", \"3085\", \"3086\", \"3087\", \"3088\",  #> \"3089\", \"3090\", \"3091\", \"3092\", \"3093\", \"3094\", \"3095\", \"3096\",  #> \"3097\", \"3098\", \"3099\", \"3100\", \"3101\", \"3102\", \"3103\", \"3104\",  #> \"3105\", \"3106\", \"3107\", \"3108\", \"3109\", \"3110\", \"3111\", \"3112\",  #> \"3113\", \"3114\", \"3115\", \"3116\", \"3117\", \"3118\", \"3119\", \"3120\",  #> \"3121\", \"3122\", \"3123\", \"3124\", \"3125\", \"3126\", \"3127\", \"3128\",  #> \"3129\", \"3130\", \"3131\", \"3132\", \"3133\", \"3134\", \"3135\", \"3136\",  #> \"3137\", \"3138\", \"3139\", \"3140\", \"3141\", \"3142\", \"3143\", \"3144\",  #> \"3145\", \"3146\", \"3147\", \"3148\", \"3149\", \"3150\", \"3151\", \"3152\",  #> \"3153\", \"3154\", \"3155\", \"3156\", \"3157\", \"3158\", \"3159\", \"3160\",  #> \"3161\", \"3162\", \"3163\", \"3164\", \"3165\", \"3166\", \"3167\", \"3168\",  #> \"3169\", \"3170\", \"3171\", \"3172\", \"3173\", \"3174\", \"3175\", \"3176\",  #> \"3177\", \"3178\", \"3179\", \"3180\", \"3181\", \"3182\", \"3183\", \"3184\",  #> \"3185\", \"3186\", \"3187\", \"3188\", \"3189\", \"3190\", \"3191\", \"3192\",  #> \"3193\", \"3194\", \"3195\", \"3196\", \"3197\", \"3198\", \"3199\", \"3200\",  #> \"3201\", \"3202\", \"3203\", \"3204\", \"3205\", \"3206\", \"3207\", \"3208\",  #> \"3209\", \"3210\", \"3211\", \"3212\", \"3213\", \"3214\", \"3215\", \"3216\",  #> \"3217\", \"3218\", \"3219\", \"3220\", \"3221\", \"3222\", \"3223\", \"3224\",  #> \"3225\", \"3226\", \"3227\", \"3228\", \"3229\", \"3230\", \"3231\", \"3232\",  #> \"3233\", \"3234\", \"3235\", \"3236\", \"3237\", \"3238\", \"3239\", \"3240\",  #> \"3241\", \"3242\", \"3243\", \"3244\", \"3245\", \"3246\", \"3247\", \"3248\",  #> \"3249\", \"3250\", \"3251\", \"3252\", \"3253\", \"3254\", \"3255\", \"3256\",  #> \"3257\", \"3258\", \"3259\", \"3260\", \"3261\", \"3262\", \"3263\", \"3264\",  #> \"3265\", \"3266\", \"3267\", \"3268\", \"3269\", \"3270\", \"3271\", \"3272\",  #> \"3273\", \"3274\", \"3275\", \"3276\", \"3277\", \"3278\", \"3279\", \"3280\",  #> \"3281\", \"3282\", \"3283\", \"3284\", \"3285\", \"3286\", \"3287\", \"3288\",  #> \"3289\", \"3290\", \"3291\", \"3292\", \"3293\", \"3294\", \"3295\", \"3296\",  #> \"3297\", \"3298\", \"3299\", \"3300\", \"3301\", \"3302\", \"3303\", \"3304\",  #> \"3305\", \"3306\", \"3307\", \"3308\", \"3309\", \"3310\", \"3311\", \"3312\",  #> \"3313\", \"3314\", \"3315\", \"3316\", \"3317\", \"3318\", \"3319\", \"3320\",  #> \"3321\", \"3322\", \"3323\", \"3324\", \"3325\", \"3326\", \"3327\", \"3328\",  #> \"3329\", \"3330\", \"3331\", \"3332\", \"3333\", \"3334\", \"3335\", \"3336\",  #> \"3337\", \"3338\", \"3339\", \"3340\", \"3341\", \"3342\", \"3343\", \"3344\",  #> \"3345\", \"3346\", \"3347\", \"3348\", \"3349\", \"3350\", \"3351\", \"3352\",  #> \"3353\", \"3354\", \"3355\", \"3356\", \"3357\", \"3358\", \"3359\", \"3360\",  #> \"3361\", \"3362\", \"3363\", \"3364\", \"3365\", \"3366\", \"3367\", \"3368\",  #> \"3369\", \"3370\", \"3371\", \"3372\", \"3373\", \"3374\", \"3375\", \"3376\",  #> \"3377\", \"3378\", \"3379\", \"3380\", \"3381\", \"3382\", \"3383\", \"3384\",  #> \"3385\", \"3386\", \"3387\", \"3388\", \"3389\", \"3390\", \"3391\", \"3392\",  #> \"3393\", \"3394\", \"3395\", \"3396\", \"3397\", \"3398\", \"3399\", \"3400\",  #> \"3401\", \"3402\", \"3403\", \"3404\", \"3405\", \"3406\", \"3407\", \"3408\",  #> \"3409\", \"3410\", \"3411\", \"3412\", \"3413\", \"3414\", \"3415\", \"3416\",  #> \"3417\", \"3418\", \"3419\", \"3420\", \"3421\", \"3422\", \"3423\", \"3424\",  #> \"3425\", \"3426\", \"3427\", \"3428\", \"3429\", \"3430\", \"3431\", \"3432\",  #> \"3433\", \"3434\", \"3435\", \"3436\", \"3437\", \"3438\", \"3439\", \"3440\",  #> \"3441\", \"3442\", \"3443\", \"3444\", \"3445\", \"3446\", \"3447\", \"3448\",  #> \"3449\", \"3450\", \"3451\", \"3452\", \"3453\", \"3454\", \"3455\", \"3456\",  #> \"3457\", \"3458\", \"3459\", \"3460\", \"3461\", \"3462\", \"3463\", \"3464\",  #> \"3465\", \"3466\", \"3467\", \"3468\", \"3469\", \"3470\", \"3471\", \"3472\",  #> \"3473\", \"3474\", \"3475\", \"3476\", \"3477\", \"3478\", \"3479\", \"3480\",  #> \"3481\", \"3482\", \"3483\", \"3484\", \"3485\", \"3486\", \"3487\", \"3488\",  #> \"3489\", \"3490\", \"3491\", \"3492\", \"3493\", \"3494\", \"3495\", \"3496\",  #> \"3497\", \"3498\", \"3499\", \"3500\", \"3501\", \"3502\", \"3503\", \"3504\",  #> \"3505\", \"3506\", \"3507\", \"3508\", \"3509\", \"3510\", \"3511\", \"3512\",  #> \"3513\", \"3514\", \"3515\", \"3516\", \"3517\", \"3518\", \"3519\", \"3520\",  #> \"3521\", \"3522\", \"3523\", \"3524\", \"3525\", \"3526\", \"3527\", \"3528\",  #> \"3529\", \"3530\", \"3531\", \"3532\", \"3533\", \"3534\", \"3535\", \"3536\",  #> \"3537\", \"3538\", \"3539\", \"3540\", \"3541\", \"3542\", \"3543\", \"3544\",  #> \"3545\", \"3546\", \"3547\", \"3548\", \"3549\", \"3550\", \"3551\", \"3552\",  #> \"3553\", \"3554\", \"3555\", \"3556\", \"3557\", \"3558\", \"3559\", \"3560\",  #> \"3561\", \"3562\", \"3563\", \"3564\", \"3565\", \"3566\", \"3567\", \"3568\",  #> \"3569\", \"3570\", \"3571\", \"3572\", \"3573\", \"3574\", \"3575\", \"3576\",  #> \"3577\", \"3578\", \"3579\", \"3580\", \"3581\", \"3582\", \"3583\", \"3584\",  #> \"3585\", \"3586\", \"3587\", \"3588\", \"3589\", \"3590\", \"3591\", \"3592\",  #> \"3593\", \"3594\", \"3595\", \"3596\", \"3597\", \"3598\", \"3599\", \"3600\",  #> \"3601\", \"3602\", \"3603\", \"3604\", \"3605\", \"3606\", \"3607\", \"3608\",  #> \"3609\", \"3610\", \"3611\", \"3612\", \"3613\", \"3614\", \"3615\", \"3616\",  #> \"3617\", \"3618\", \"3619\", \"3620\", \"3621\", \"3622\", \"3623\", \"3624\",  #> \"3625\", \"3626\", \"3627\", \"3628\", \"3629\", \"3630\", \"3631\", \"3632\",  #> \"3633\", \"3634\", \"3635\", \"3636\", \"3637\", \"3638\", \"3639\", \"3640\",  #> \"3641\", \"3642\", \"3643\", \"3644\", \"3645\", \"3646\", \"3647\", \"3648\",  #> \"3649\", \"3650\", \"3651\", \"3652\", \"3653\", \"3654\", \"3655\", \"3656\",  #> \"3657\", \"3658\", \"3659\", \"3660\", \"3661\", \"3662\", \"3663\", \"3664\",  #> \"3665\", \"3666\", \"3667\", \"3668\", \"3669\", \"3670\", \"3671\", \"3672\",  #> \"3673\", \"3674\", \"3675\", \"3676\", \"3677\", \"3678\", \"3679\", \"3680\",  #> \"3681\", \"3682\", \"3683\", \"3684\", \"3685\", \"3686\", \"3687\", \"3688\",  #> \"3689\", \"3690\", \"3691\", \"3692\", \"3693\", \"3694\", \"3695\", \"3696\",  #> \"3697\", \"3698\", \"3699\", \"3700\", \"3701\", \"3702\", \"3703\", \"3704\",  #> \"3705\", \"3706\", \"3707\", \"3708\", \"3709\", \"3710\", \"3711\", \"3712\",  #> \"3713\", \"3714\", \"3715\", \"3716\", \"3717\", \"3718\", \"3719\", \"3720\",  #> \"3721\", \"3722\", \"3723\", \"3724\", \"3725\", \"3726\", \"3727\", \"3728\",  #> \"3729\", \"3730\", \"3731\", \"3732\", \"3733\", \"3734\", \"3735\", \"3736\",  #> \"3737\", \"3738\", \"3739\", \"3740\", \"3741\", \"3742\", \"3743\", \"3744\",  #> \"3745\", \"3746\", \"3747\", \"3748\", \"3749\", \"3750\", \"3751\", \"3752\",  #> \"3753\", \"3754\", \"3755\", \"3756\", \"3757\", \"3758\", \"3759\", \"3760\",  #> \"3761\", \"3762\", \"3763\", \"3764\", \"3765\", \"3766\", \"3767\", \"3768\",  #> \"3769\", \"3770\", \"3771\", \"3772\", \"3773\", \"3774\", \"3775\", \"3776\",  #> \"3777\", \"3778\", \"3779\", \"3780\", \"3781\", \"3782\", \"3783\", \"3784\",  #> \"3785\", \"3786\", \"3787\", \"3788\", \"3789\", \"3790\", \"3791\", \"3792\",  #> \"3793\", \"3794\", \"3795\", \"3796\", \"3797\", \"3798\", \"3799\", \"3800\",  #> \"3801\", \"3802\", \"3803\", \"3804\", \"3805\", \"3806\", \"3807\", \"3808\",  #> \"3809\", \"3810\", \"3811\", \"3812\", \"3813\", \"3814\", \"3815\", \"3816\",  #> \"3817\", \"3818\", \"3819\", \"3820\", \"3821\", \"3822\", \"3823\", \"3824\",  #> \"3825\", \"3826\", \"3827\", \"3828\", \"3829\", \"3830\", \"3831\", \"3832\",  #> \"3833\", \"3834\", \"3835\", \"3836\", \"3837\", \"3838\", \"3839\", \"3840\",  #> \"3841\", \"3842\", \"3843\", \"3844\", \"3845\", \"3846\", \"3847\", \"3848\",  #> \"3849\", \"3850\", \"3851\", \"3852\", \"3853\", \"3854\", \"3855\", \"3856\",  #> \"3857\", \"3858\", \"3859\", \"3860\", \"3861\", \"3862\", \"3863\", \"3864\",  #> \"3865\", \"3866\", \"3867\", \"3868\", \"3869\", \"3870\", \"3871\", \"3872\",  #> \"3873\", \"3874\", \"3875\", \"3876\", \"3877\", \"3878\", \"3879\", \"3880\",  #> \"3881\", \"3882\", \"3883\", \"3884\", \"3885\", \"3886\", \"3887\", \"3888\",  #> \"3889\", \"3890\", \"3891\", \"3892\", \"3893\", \"3894\", \"3895\", \"3896\",  #> \"3897\", \"3898\", \"3899\", \"3900\", \"3901\", \"3902\", \"3903\", \"3904\",  #> \"3905\", \"3906\", \"3907\", \"3908\", \"3909\", \"3910\", \"3911\", \"3912\",  #> \"3913\", \"3914\", \"3915\", \"3916\", \"3917\", \"3918\", \"3919\", \"3920\",  #> \"3921\", \"3922\", \"3923\", \"3924\", \"3925\", \"3926\", \"3927\", \"3928\",  #> \"3929\", \"3930\", \"3931\", \"3932\", \"3933\", \"3934\", \"3935\", \"3936\",  #> \"3937\", \"3938\", \"3939\", \"3940\", \"3941\", \"3942\", \"3943\", \"3944\",  #> \"3945\", \"3946\", \"3947\", \"3948\", \"3949\", \"3950\", \"3951\", \"3952\",  #> \"3953\", \"3954\", \"3955\", \"3956\", \"3957\", \"3958\", \"3959\", \"3960\",  #> \"3961\", \"3962\", \"3963\", \"3964\", \"3965\", \"3966\", \"3967\", \"3968\",  #> \"3969\", \"3970\", \"3971\", \"3972\", \"3973\", \"3974\", \"3975\", \"3976\",  #> \"3977\", \"3978\", \"3979\", \"3980\", \"3981\", \"3982\", \"3983\", \"3984\",  #> \"3985\", \"3986\", \"3987\", \"3988\", \"3989\", \"3990\", \"3991\", \"3992\",  #> \"3993\", \"3994\", \"3995\", \"3996\", \"3997\", \"3998\", \"3999\", \"4000\",  #> \"4001\", \"4002\", \"4003\", \"4004\", \"4005\", \"4006\", \"4007\", \"4008\",  #> \"4009\", \"4010\", \"4011\", \"4012\", \"4013\", \"4014\", \"4015\", \"4016\",  #> \"4017\", \"4018\", \"4019\", \"4020\", \"4021\", \"4022\", \"4023\", \"4024\",  #> \"4025\", \"4026\", \"4027\", \"4028\", \"4029\", \"4030\", \"4031\", \"4032\",  #> \"4033\", \"4034\", \"4035\", \"4036\", \"4037\", \"4038\", \"4039\", \"4040\",  #> \"4041\", \"4042\", \"4043\", \"4044\", \"4045\", \"4046\", \"4047\", \"4048\",  #> \"4049\", \"4050\", \"4051\", \"4052\", \"4053\", \"4054\", \"4055\", \"4056\",  #> \"4057\", \"4058\", \"4059\", \"4060\", \"4061\", \"4062\", \"4063\", \"4064\",  #> \"4065\", \"4066\", \"4067\", \"4068\", \"4069\", \"4070\", \"4071\", \"4072\",  #> \"4073\", \"4074\", \"4075\", \"4076\", \"4077\", \"4078\", \"4079\", \"4080\",  #> \"4081\", \"4082\", \"4083\", \"4084\", \"4085\", \"4086\", \"4087\", \"4088\",  #> \"4089\", \"4090\", \"4091\", \"4092\", \"4093\", \"4094\", \"4095\", \"4096\",  #> \"4097\", \"4098\", \"4099\", \"4100\", \"4101\", \"4102\", \"4103\", \"4104\",  #> \"4105\", \"4106\", \"4107\", \"4108\", \"4109\", \"4110\", \"4111\", \"4112\",  #> \"4113\", \"4114\", \"4115\", \"4116\", \"4117\", \"4118\", \"4119\", \"4120\",  #> \"4121\", \"4122\", \"4123\", \"4124\", \"4125\", \"4126\", \"4127\", \"4128\",  #> \"4129\", \"4130\", \"4131\", \"4132\", \"4133\", \"4134\", \"4135\", \"4136\",  #> \"4137\", \"4138\", \"4139\", \"4140\", \"4141\", \"4142\", \"4143\", \"4144\",  #> \"4145\", \"4146\", \"4147\", \"4148\", \"4149\", \"4150\", \"4151\", \"4152\",  #> \"4153\", \"4154\", \"4155\", \"4156\", \"4157\", \"4158\", \"4159\", \"4160\",  #> \"4161\", \"4162\", \"4163\", \"4164\", \"4165\", \"4166\", \"4167\", \"4168\",  #> \"4169\", \"4170\", \"4171\", \"4172\", \"4173\", \"4174\", \"4175\", \"4176\",  #> \"4177\", \"4178\", \"4179\", \"4180\", \"4181\", \"4182\", \"4183\", \"4184\",  #> \"4185\", \"4186\", \"4187\", \"4188\", \"4189\", \"4190\", \"4191\", \"4192\",  #> \"4193\", \"4194\", \"4195\", \"4196\", \"4197\", \"4198\", \"4199\", \"4200\",  #> \"4201\", \"4202\", \"4203\", \"4204\", \"4205\", \"4206\", \"4207\", \"4208\",  #> \"4209\", \"4210\", \"4211\", \"4212\", \"4213\", \"4214\", \"4215\", \"4216\",  #> \"4217\", \"4218\", \"4219\", \"4220\", \"4221\", \"4222\", \"4223\", \"4224\",  #> \"4225\", \"4226\", \"4227\", \"4228\", \"4229\", \"4230\", \"4231\", \"4232\",  #> \"4233\", \"4234\", \"4235\", \"4236\", \"4237\", \"4238\", \"4239\", \"4240\",  #> \"4241\", \"4242\", \"4243\", \"4244\", \"4245\", \"4246\", \"4247\", \"4248\",  #> \"4249\", \"4250\", \"4251\", \"4252\", \"4253\", \"4254\", \"4255\", \"4256\",  #> \"4257\", \"4258\", \"4259\", \"4260\", \"4261\", \"4262\", \"4263\", \"4264\",  #> \"4265\", \"4266\", \"4267\", \"4268\", \"4269\", \"4270\", \"4271\", \"4272\",  #> \"4273\", \"4274\", \"4275\", \"4276\", \"4277\", \"4278\", \"4279\", \"4280\",  #> \"4281\", \"4282\", \"4283\", \"4284\", \"4285\", \"4286\", \"4287\", \"4288\",  #> \"4289\", \"4290\", \"4291\", \"4292\", \"4293\", \"4294\", \"4295\", \"4296\",  #> \"4297\", \"4298\", \"4299\", \"4300\", \"4301\", \"4302\", \"4303\", \"4304\",  #> \"4305\", \"4306\", \"4307\", \"4308\", \"4309\", \"4310\", \"4311\", \"4312\",  #> \"4313\", \"4314\", \"4315\", \"4316\", \"4317\", \"4318\", \"4319\", \"4320\",  #> \"4321\", \"4322\", \"4323\", \"4324\", \"4325\", \"4326\", \"4327\", \"4328\",  #> \"4329\", \"4330\", \"4331\", \"4332\", \"4333\", \"4334\", \"4335\", \"4336\",  #> \"4337\", \"4338\", \"4339\", \"4340\", \"4341\", \"4342\", \"4343\", \"4344\",  #> \"4345\", \"4346\", \"4347\", \"4348\", \"4349\", \"4350\", \"4351\", \"4352\",  #> \"4353\", \"4354\", \"4355\", \"4356\", \"4357\", \"4358\", \"4359\", \"4360\",  #> \"4361\", \"4362\", \"4363\", \"4364\", \"4365\", \"4366\", \"4367\", \"4368\",  #> \"4369\", \"4370\", \"4371\", \"4372\", \"4373\", \"4374\", \"4375\", \"4376\",  #> \"4377\", \"4378\", \"4379\", \"4380\", \"4381\", \"4382\", \"4383\", \"4384\",  #> \"4385\", \"4386\", \"4387\", \"4388\", \"4389\", \"4390\", \"4391\", \"4392\",  #> \"4393\", \"4394\", \"4395\", \"4396\", \"4397\", \"4398\", \"4399\", \"4400\",  #> \"4401\", \"4402\", \"4403\", \"4404\", \"4405\", \"4406\", \"4407\", \"4408\",  #> \"4409\", \"4410\", \"4411\", \"4412\", \"4413\", \"4414\", \"4415\", \"4416\",  #> \"4417\", \"4418\", \"4419\", \"4420\", \"4421\", \"4422\", \"4423\", \"4424\",  #> \"4425\", \"4426\", \"4427\", \"4428\", \"4429\", \"4430\", \"4431\", \"4432\",  #> \"4433\", \"4434\", \"4435\", \"4436\", \"4437\", \"4438\", \"4439\", \"4440\",  #> \"4441\", \"4442\", \"4443\", \"4444\", \"4445\", \"4446\", \"4447\", \"4448\",  #> \"4449\", \"4450\", \"4451\", \"4452\", \"4453\", \"4454\", \"4455\", \"4456\",  #> \"4457\", \"4458\", \"4459\", \"4460\", \"4461\", \"4462\", \"4463\", \"4464\",  #> \"4465\", \"4466\", \"4467\", \"4468\", \"4469\", \"4470\", \"4471\", \"4472\",  #> \"4473\", \"4474\", \"4475\", \"4476\", \"4477\", \"4478\", \"4479\", \"4480\",  #> \"4481\", \"4482\", \"4483\", \"4484\", \"4485\", \"4486\", \"4487\", \"4488\",  #> \"4489\", \"4490\", \"4491\", \"4492\", \"4493\", \"4494\", \"4495\", \"4496\",  #> \"4497\", \"4498\", \"4499\", \"4500\", \"4501\", \"4502\", \"4503\", \"4504\",  #> \"4505\", \"4506\", \"4507\", \"4508\", \"4509\", \"4510\", \"4511\", \"4512\",  #> \"4513\", \"4514\", \"4515\", \"4516\", \"4517\", \"4518\", \"4519\", \"4520\",  #> \"4521\", \"4522\", \"4523\", \"4524\", \"4525\", \"4526\", \"4527\", \"4528\",  #> \"4529\", \"4530\", \"4531\", \"4532\", \"4533\", \"4534\", \"4535\", \"4536\",  #> \"4537\", \"4538\", \"4539\", \"4540\", \"4541\", \"4542\", \"4543\", \"4544\",  #> \"4545\", \"4546\", \"4547\", \"4548\", \"4549\", \"4550\", \"4551\", \"4552\",  #> \"4553\", \"4554\", \"4555\", \"4556\", \"4557\", \"4558\", \"4559\", \"4560\",  #> \"4561\", \"4562\", \"4563\", \"4564\", \"4565\", \"4566\", \"4567\", \"4568\",  #> \"4569\", \"4570\", \"4571\", \"4572\", \"4573\", \"4574\", \"4575\", \"4576\",  #> \"4577\", \"4578\", \"4579\", \"4580\", \"4581\", \"4582\", \"4583\", \"4584\",  #> \"4585\", \"4586\", \"4587\", \"4588\", \"4589\", \"4590\", \"4591\", \"4592\",  #> \"4593\", \"4594\", \"4595\", \"4596\", \"4597\", \"4598\", \"4599\", \"4600\",  #> \"4601\", \"4602\", \"4603\", \"4604\", \"4605\", \"4606\", \"4607\", \"4608\",  #> \"4609\", \"4610\", \"4611\", \"4612\", \"4613\", \"4614\", \"4615\", \"4616\",  #> \"4617\", \"4618\", \"4619\", \"4620\", \"4621\", \"4622\", \"4623\", \"4624\",  #> \"4625\", \"4626\", \"4627\", \"4628\", \"4629\", \"4630\", \"4631\", \"4632\",  #> \"4633\", \"4634\", \"4635\", \"4636\", \"4637\", \"4638\", \"4639\", \"4640\",  #> \"4641\", \"4642\", \"4643\", \"4644\", \"4645\", \"4646\", \"4647\", \"4648\",  #> \"4649\", \"4650\", \"4651\", \"4652\", \"4653\", \"4654\", \"4655\", \"4656\",  #> \"4657\", \"4658\", \"4659\", \"4660\", \"4661\", \"4662\", \"4663\", \"4664\",  #> \"4665\", \"4666\", \"4667\", \"4668\", \"4669\", \"4670\", \"4671\", \"4672\",  #> \"4673\", \"4674\", \"4675\", \"4676\", \"4677\", \"4678\", \"4679\", \"4680\",  #> \"4681\", \"4682\", \"4683\", \"4684\", \"4685\", \"4686\", \"4687\", \"4688\",  #> \"4689\", \"4690\", \"4691\", \"4692\", \"4693\", \"4694\", \"4695\", \"4696\",  #> \"4697\", \"4698\", \"4699\", \"4700\", \"4701\", \"4702\", \"4703\", \"4704\",  #> \"4705\", \"4706\", \"4707\", \"4708\", \"4709\", \"4710\", \"4711\", \"4712\",  #> \"4713\", \"4714\", \"4715\", \"4716\", \"4717\", \"4718\", \"4719\", \"4720\",  #> \"4721\", \"4722\", \"4723\", \"4724\", \"4725\", \"4726\", \"4727\", \"4728\",  #> \"4729\", \"4730\", \"4731\", \"4732\", \"4733\", \"4734\", \"4735\", \"4736\",  #> \"4737\", \"4738\", \"4739\", \"4740\", \"4741\", \"4742\", \"4743\", \"4744\",  #> \"4745\", \"4746\", \"4747\", \"4748\", \"4749\", \"4750\", \"4751\", \"4752\",  #> \"4753\", \"4754\", \"4755\", \"4756\", \"4757\", \"4758\", \"4759\", \"4760\",  #> \"4761\", \"4762\", \"4763\", \"4764\", \"4765\", \"4766\", \"4767\", \"4768\",  #> \"4769\", \"4770\", \"4771\", \"4772\", \"4773\", \"4774\", \"4775\", \"4776\",  #> \"4777\", \"4778\", \"4779\", \"4780\", \"4781\", \"4782\", \"4783\", \"4784\",  #> \"4785\", \"4786\", \"4787\", \"4788\", \"4789\", \"4790\", \"4791\", \"4792\",  #> \"4793\", \"4794\", \"4795\", \"4796\", \"4797\", \"4798\", \"4799\", \"4800\",  #> \"4801\", \"4802\", \"4803\", \"4804\", \"4805\", \"4806\", \"4807\", \"4808\",  #> \"4809\", \"4810\", \"4811\", \"4812\", \"4813\", \"4814\", \"4815\", \"4816\",  #> \"4817\", \"4818\", \"4819\", \"4820\", \"4821\", \"4822\", \"4823\", \"4824\",  #> \"4825\", \"4826\", \"4827\", \"4828\", \"4829\", \"4830\", \"4831\", \"4832\",  #> \"4833\", \"4834\", \"4835\", \"4836\", \"4837\", \"4838\", \"4839\", \"4840\",  #> \"4841\", \"4842\", \"4843\", \"4844\", \"4845\", \"4846\", \"4847\", \"4848\",  #> \"4849\", \"4850\", \"4851\", \"4852\", \"4853\", \"4854\", \"4855\", \"4856\",  #> \"4857\", \"4858\", \"4859\", \"4860\", \"4861\", \"4862\", \"4863\", \"4864\",  #> \"4865\", \"4866\", \"4867\", \"4868\", \"4869\", \"4870\", \"4871\", \"4872\",  #> \"4873\", \"4874\", \"4875\", \"4876\", \"4877\", \"4878\", \"4879\", \"4880\",  #> \"4881\", \"4882\", \"4883\", \"4884\", \"4885\", \"4886\", \"4887\", \"4888\",  #> \"4889\", \"4890\", \"4891\", \"4892\", \"4893\", \"4894\", \"4895\", \"4896\",  #> \"4897\", \"4898\", \"4899\", \"4900\", \"4901\", \"4902\", \"4903\", \"4904\",  #> \"4905\", \"4906\", \"4907\", \"4908\", \"4909\", \"4910\", \"4911\", \"4912\",  #> \"4913\", \"4914\", \"4915\", \"4916\", \"4917\", \"4918\", \"4919\", \"4920\",  #> \"4921\", \"4922\", \"4923\", \"4924\", \"4925\", \"4926\", \"4927\", \"4928\",  #> \"4929\", \"4930\", \"4931\", \"4932\", \"4933\", \"4934\", \"4935\", \"4936\",  #> \"4937\", \"4938\", \"4939\", \"4940\", \"4941\", \"4942\", \"4943\", \"4944\",  #> \"4945\", \"4946\", \"4947\", \"4948\", \"4949\", \"4950\", \"4951\", \"4952\",  #> \"4953\", \"4954\", \"4955\", \"4956\", \"4957\", \"4958\", \"4959\", \"4960\",  #> \"4961\", \"4962\", \"4963\", \"4964\", \"4965\", \"4966\", \"4967\", \"4968\",  #> \"4969\", \"4970\", \"4971\", \"4972\", \"4973\", \"4974\", \"4975\", \"4976\",  #> \"4977\", \"4978\", \"4979\", \"4980\", \"4981\", \"4982\", \"4983\", \"4984\",  #> \"4985\", \"4986\", \"4987\", \"4988\", \"4989\", \"4990\", \"4991\", \"4992\",  #> \"4993\", \"4994\", \"4995\", \"4996\", \"4997\", \"4998\", \"4999\", \"5000\",  #> \"5001\", \"5002\", \"5003\", \"5004\", \"5005\", \"5006\", \"5007\", \"5008\",  #> \"5009\", \"5010\", \"5011\", \"5012\", \"5013\", \"5014\", \"5015\", \"5016\",  #> \"5017\", \"5018\", \"5019\", \"5020\", \"5021\", \"5022\", \"5023\", \"5024\",  #> \"5025\", \"5026\", \"5027\", \"5028\", \"5029\", \"5030\", \"5031\", \"5032\",  #> \"5033\", \"5034\", \"5035\", \"5036\", \"5037\", \"5038\", \"5039\", \"5040\",  #> \"5041\", \"5042\", \"5043\", \"5044\", \"5045\", \"5046\", \"5047\", \"5048\",  #> \"5049\", \"5050\", \"5051\", \"5052\", \"5053\", \"5054\", \"5055\", \"5056\",  #> \"5057\", \"5058\", \"5059\", \"5060\", \"5061\", \"5062\", \"5063\", \"5064\",  #> \"5065\", \"5066\", \"5067\", \"5068\", \"5069\", \"5070\", \"5071\", \"5072\",  #> \"5073\", \"5074\", \"5075\", \"5076\", \"5077\", \"5078\", \"5079\", \"5080\",  #> \"5081\", \"5082\", \"5083\", \"5084\", \"5085\", \"5086\", \"5087\", \"5088\",  #> \"5089\", \"5090\", \"5091\", \"5092\", \"5093\", \"5094\", \"5095\", \"5096\",  #> \"5097\", \"5098\", \"5099\", \"5100\", \"5101\", \"5102\", \"5103\", \"5104\",  #> \"5105\", \"5106\", \"5107\", \"5108\", \"5109\", \"5110\", \"5111\", \"5112\",  #> \"5113\", \"5114\", \"5115\", \"5116\", \"5117\", \"5118\", \"5119\", \"5120\",  #> \"5121\", \"5122\", \"5123\", \"5124\", \"5125\", \"5126\", \"5127\", \"5128\",  #> \"5129\", \"5130\", \"5131\", \"5132\", \"5133\", \"5134\", \"5135\", \"5136\",  #> \"5137\", \"5138\", \"5139\", \"5140\", \"5141\", \"5142\", \"5143\", \"5144\",  #> \"5145\", \"5146\", \"5147\", \"5148\", \"5149\", \"5150\", \"5151\", \"5152\",  #> \"5153\", \"5154\", \"5155\", \"5156\", \"5157\", \"5158\", \"5159\", \"5160\",  #> \"5161\", \"5162\", \"5163\", \"5164\", \"5165\", \"5166\", \"5167\", \"5168\",  #> \"5169\", \"5170\", \"5171\", \"5172\", \"5173\", \"5174\", \"5175\", \"5176\",  #> \"5177\", \"5178\", \"5179\", \"5180\", \"5181\", \"5182\", \"5183\", \"5184\",  #> \"5185\", \"5186\", \"5187\", \"5188\", \"5189\", \"5190\", \"5191\", \"5192\",  #> \"5193\", \"5194\", \"5195\", \"5196\", \"5197\", \"5198\", \"5199\", \"5200\",  #> \"5201\", \"5202\", \"5203\", \"5204\", \"5205\", \"5206\", \"5207\", \"5208\",  #> \"5209\", \"5210\", \"5211\", \"5212\", \"5213\", \"5214\", \"5215\", \"5216\",  #> \"5217\", \"5218\", \"5219\", \"5220\", \"5221\", \"5222\", \"5223\", \"5224\",  #> \"5225\", \"5226\", \"5227\", \"5228\", \"5229\", \"5230\", \"5231\", \"5232\",  #> \"5233\", \"5234\", \"5235\", \"5236\", \"5237\", \"5238\", \"5239\", \"5240\",  #> \"5241\", \"5242\", \"5243\", \"5244\", \"5245\", \"5246\", \"5247\", \"5248\",  #> \"5249\", \"5250\", \"5251\", \"5252\", \"5253\", \"5254\", \"5255\", \"5256\",  #> \"5257\", \"5258\", \"5259\", \"5260\", \"5261\", \"5262\", \"5263\", \"5264\",  #> \"5265\", \"5266\", \"5267\", \"5268\", \"5269\", \"5270\", \"5271\", \"5272\",  #> \"5273\", \"5274\", \"5275\", \"5276\", \"5277\", \"5278\", \"5279\", \"5280\",  #> \"5281\", \"5282\", \"5283\", \"5284\", \"5285\", \"5286\", \"5287\", \"5288\",  #> \"5289\", \"5290\", \"5291\", \"5292\", \"5293\", \"5294\", \"5295\", \"5296\",  #> \"5297\", \"5298\", \"5299\", \"5300\", \"5301\", \"5302\", \"5303\", \"5304\",  #> \"5305\", \"5306\", \"5307\", \"5308\", \"5309\", \"5310\", \"5311\", \"5312\",  #> \"5313\", \"5314\", \"5315\", \"5316\", \"5317\", \"5318\", \"5319\", \"5320\",  #> \"5321\", \"5322\", \"5323\", \"5324\", \"5325\", \"5326\", \"5327\", \"5328\",  #> \"5329\", \"5330\", \"5331\", \"5332\", \"5333\", \"5334\", \"5335\", \"5336\",  #> \"5337\", \"5338\", \"5339\", \"5340\", \"5341\", \"5342\", \"5343\", \"5344\",  #> \"5345\", \"5346\", \"5347\", \"5348\", \"5349\", \"5350\", \"5351\", \"5352\",  #> \"5353\", \"5354\", \"5355\", \"5356\", \"5357\", \"5358\", \"5359\", \"5360\",  #> \"5361\", \"5362\", \"5363\", \"5364\", \"5365\", \"5366\", \"5367\", \"5368\",  #> \"5369\", \"5370\", \"5371\", \"5372\", \"5373\", \"5374\", \"5375\", \"5376\",  #> \"5377\", \"5378\", \"5379\", \"5380\", \"5381\", \"5382\", \"5383\", \"5384\",  #> \"5385\", \"5386\", \"5387\", \"5388\", \"5389\", \"5390\", \"5391\", \"5392\",  #> \"5393\", \"5394\", \"5395\", \"5396\", \"5397\", \"5398\", \"5399\", \"5400\",  #> \"5401\", \"5402\", \"5403\", \"5404\", \"5405\", \"5406\", \"5407\", \"5408\",  #> \"5409\", \"5410\", \"5411\", \"5412\", \"5413\", \"5414\", \"5415\", \"5416\",  #> \"5417\", \"5418\", \"5419\", \"5420\", \"5421\", \"5422\", \"5423\", \"5424\",  #> \"5425\", \"5426\", \"5427\", \"5428\", \"5429\", \"5430\", \"5431\", \"5432\",  #> \"5433\", \"5434\", \"5435\", \"5436\", \"5437\", \"5438\", \"5439\", \"5440\",  #> \"5441\", \"5442\", \"5443\", \"5444\", \"5445\", \"5446\", \"5447\", \"5448\",  #> \"5449\", \"5450\", \"5451\", \"5452\", \"5453\", \"5454\", \"5455\", \"5456\",  #> \"5457\", \"5458\", \"5459\", \"5460\", \"5461\", \"5462\", \"5463\", \"5464\",  #> \"5465\", \"5466\", \"5467\", \"5468\", \"5469\", \"5470\", \"5471\", \"5472\",  #> \"5473\", \"5474\", \"5475\", \"5476\", \"5477\", \"5478\", \"5479\", \"5480\",  #> \"5481\", \"5482\", \"5483\", \"5484\", \"5485\", \"5486\", \"5487\", \"5488\",  #> \"5489\", \"5490\", \"5491\", \"5492\", \"5493\", \"5494\", \"5495\", \"5496\",  #> \"5497\", \"5498\", \"5499\", \"5500\", \"5501\", \"5502\", \"5503\", \"5504\",  #> \"5505\", \"5506\", \"5507\", \"5508\", \"5509\", \"5510\", \"5511\", \"5512\",  #> \"5513\", \"5514\", \"5515\", \"5516\", \"5517\", \"5518\", \"5519\", \"5520\",  #> \"5521\", \"5522\", \"5523\", \"5524\", \"5525\", \"5526\", \"5527\", \"5528\",  #> \"5529\", \"5530\", \"5531\", \"5532\", \"5533\", \"5534\", \"5535\", \"5536\",  #> \"5537\", \"5538\", \"5539\", \"5540\", \"5541\", \"5542\", \"5543\", \"5544\",  #> \"5545\", \"5546\", \"5547\", \"5548\", \"5549\", \"5550\", \"5551\", \"5552\",  #> \"5553\", \"5554\", \"5555\", \"5556\", \"5557\", \"5558\", \"5559\", \"5560\",  #> \"5561\", \"5562\", \"5563\", \"5564\", \"5565\", \"5566\", \"5567\", \"5568\",  #> \"5569\", \"5570\", \"5571\", \"5572\", \"5573\", \"5574\", \"5575\", \"5576\",  #> \"5577\", \"5578\", \"5579\", \"5580\", \"5581\", \"5582\", \"5583\", \"5584\",  #> \"5585\", \"5586\", \"5587\", \"5588\", \"5589\", \"5590\", \"5591\", \"5592\",  #> \"5593\", \"5594\", \"5595\", \"5596\", \"5597\", \"5598\", \"5599\", \"5600\",  #> \"5601\", \"5602\", \"5603\", \"5604\", \"5605\", \"5606\", \"5607\", \"5608\",  #> \"5609\", \"5610\", \"5611\", \"5612\", \"5613\", \"5614\", \"5615\", \"5616\",  #> \"5617\", \"5618\", \"5619\", \"5620\", \"5621\", \"5622\", \"5623\", \"5624\",  #> \"5625\", \"5626\", \"5627\", \"5628\", \"5629\", \"5630\", \"5631\", \"5632\",  #> \"5633\", \"5634\", \"5635\", \"5636\", \"5637\", \"5638\", \"5639\", \"5640\",  #> \"5641\", \"5642\", \"5643\", \"5644\", \"5645\", \"5646\", \"5647\", \"5648\",  #> \"5649\", \"5650\", \"5651\", \"5652\", \"5653\", \"5654\", \"5655\", \"5656\",  #> \"5657\", \"5658\", \"5659\", \"5660\", \"5661\", \"5662\", \"5663\", \"5664\",  #> \"5665\", \"5666\", \"5667\", \"5668\", \"5669\", \"5670\", \"5671\", \"5672\",  #> \"5673\", \"5674\", \"5675\", \"5676\", \"5677\", \"5678\", \"5679\", \"5680\",  #> \"5681\", \"5682\", \"5683\", \"5684\", \"5685\", \"5686\", \"5687\", \"5688\",  #> \"5689\", \"5690\", \"5691\", \"5692\", \"5693\", \"5694\", \"5695\", \"5696\",  #> \"5697\", \"5698\", \"5699\", \"5700\", \"5701\", \"5702\", \"5703\", \"5704\",  #> \"5705\", \"5706\", \"5707\", \"5708\", \"5709\", \"5710\", \"5711\", \"5712\",  #> \"5713\", \"5714\", \"5715\", \"5716\", \"5717\", \"5718\", \"5719\", \"5720\",  #> \"5721\", \"5722\", \"5723\", \"5724\", \"5725\", \"5726\", \"5727\", \"5728\",  #> \"5729\", \"5730\", \"5731\", \"5732\", \"5733\", \"5734\", \"5735\", \"5736\",  #> \"5737\", \"5738\", \"5739\", \"5740\", \"5741\", \"5742\", \"5743\", \"5744\",  #> \"5745\", \"5746\", \"5747\", \"5748\", \"5749\", \"5750\", \"5751\", \"5752\",  #> \"5753\", \"5754\", \"5755\", \"5756\", \"5757\", \"5758\", \"5759\", \"5760\",  #> \"5761\", \"5762\", \"5763\", \"5764\", \"5765\", \"5766\", \"5767\", \"5768\",  #> \"5769\", \"5770\", \"5771\", \"5772\", \"5773\", \"5774\", \"5775\", \"5776\",  #> \"5777\", \"5778\", \"5779\", \"5780\", \"5781\", \"5782\", \"5783\", \"5784\",  #> \"5785\", \"5786\", \"5787\", \"5788\", \"5789\", \"5790\", \"5791\", \"5792\",  #> \"5793\", \"5794\", \"5795\", \"5796\", \"5797\", \"5798\", \"5799\", \"5800\",  #> \"5801\", \"5802\", \"5803\", \"5804\", \"5805\", \"5806\", \"5807\", \"5808\",  #> \"5809\", \"5810\", \"5811\", \"5812\", \"5813\", \"5814\", \"5815\", \"5816\",  #> \"5817\", \"5818\", \"5819\", \"5820\", \"5821\", \"5822\", \"5823\", \"5824\",  #> \"5825\", \"5826\", \"5827\", \"5828\", \"5829\", \"5830\", \"5831\", \"5832\",  #> \"5833\", \"5834\", \"5835\", \"5836\", \"5837\", \"5838\", \"5839\", \"5840\",  #> \"5841\", \"5842\", \"5843\", \"5844\", \"5845\", \"5846\", \"5847\", \"5848\",  #> \"5849\", \"5850\", \"5851\", \"5852\", \"5853\", \"5854\", \"5855\", \"5856\",  #> \"5857\", \"5858\", \"5859\", \"5860\", \"5861\", \"5862\", \"5863\", \"5864\",  #> \"5865\", \"5866\", \"5867\", \"5868\", \"5869\", \"5870\", \"5871\", \"5872\",  #> \"5873\", \"5874\", \"5875\", \"5876\", \"5877\", \"5878\", \"5879\", \"5880\",  #> \"5881\", \"5882\", \"5883\", \"5884\", \"5885\", \"5886\", \"5887\", \"5888\",  #> \"5889\", \"5890\", \"5891\", \"5892\", \"5893\", \"5894\", \"5895\", \"5896\",  #> \"5897\", \"5898\", \"5899\", \"5900\", \"5901\", \"5902\", \"5903\", \"5904\",  #> \"5905\", \"5906\", \"5907\", \"5908\", \"5909\", \"5910\", \"5911\", \"5912\",  #> \"5913\", \"5914\", \"5915\", \"5916\", \"5917\", \"5918\", \"5919\", \"5920\",  #> \"5921\", \"5922\", \"5923\", \"5924\", \"5925\", \"5926\", \"5927\", \"5928\",  #> \"5929\", \"5930\", \"5931\", \"5932\", \"5933\", \"5934\", \"5935\", \"5936\",  #> \"5937\", \"5938\", \"5939\", \"5940\", \"5941\", \"5942\", \"5943\", \"5944\",  #> \"5945\", \"5946\", \"5947\", \"5948\", \"5949\", \"5950\", \"5951\", \"5952\",  #> \"5953\", \"5954\", \"5955\", \"5956\", \"5957\", \"5958\", \"5959\", \"5960\",  #> \"5961\", \"5962\", \"5963\", \"5964\", \"5965\", \"5966\", \"5967\", \"5968\",  #> \"5969\", \"5970\", \"5971\", \"5972\", \"5973\", \"5974\", \"5975\", \"5976\",  #> \"5977\", \"5978\", \"5979\", \"5980\", \"5981\", \"5982\", \"5983\", \"5984\",  #> \"5985\", \"5986\", \"5987\", \"5988\", \"5989\", \"5990\", \"5991\", \"5992\",  #> \"5993\", \"5994\", \"5995\", \"5996\", \"5997\", \"5998\", \"5999\", \"6000\",  #> \"6001\", \"6002\", \"6003\", \"6004\", \"6005\", \"6006\", \"6007\", \"6008\",  #> \"6009\", \"6010\", \"6011\", \"6012\", \"6013\", \"6014\", \"6015\", \"6016\",  #> \"6017\", \"6018\", \"6019\", \"6020\", \"6021\", \"6022\", \"6023\", \"6024\",  #> \"6025\", \"6026\", \"6027\", \"6028\", \"6029\", \"6030\", \"6031\", \"6032\",  #> \"6033\", \"6034\", \"6035\", \"6036\", \"6037\", \"6038\", \"6039\", \"6040\",  #> \"6041\", \"6042\", \"6043\", \"6044\", \"6045\", \"6046\", \"6047\", \"6048\",  #> \"6049\", \"6050\", \"6051\", \"6052\", \"6053\", \"6054\", \"6055\", \"6056\",  #> \"6057\", \"6058\", \"6059\", \"6060\", \"6061\", \"6062\", \"6063\", \"6064\",  #> \"6065\", \"6066\", \"6067\", \"6068\", \"6069\", \"6070\", \"6071\", \"6072\",  #> \"6073\", \"6074\", \"6075\", \"6076\", \"6077\", \"6078\", \"6079\", \"6080\",  #> \"6081\", \"6082\", \"6083\", \"6084\", \"6085\", \"6086\", \"6087\", \"6088\",  #> \"6089\", \"6090\", \"6091\", \"6092\", \"6093\", \"6094\", \"6095\", \"6096\",  #> \"6097\", \"6098\", \"6099\", \"6100\", \"6101\", \"6102\", \"6103\", \"6104\",  #> \"6105\", \"6106\", \"6107\", \"6108\", \"6109\", \"6110\", \"6111\", \"6112\",  #> \"6113\", \"6114\", \"6115\", \"6116\", \"6117\", \"6118\", \"6119\", \"6120\",  #> \"6121\", \"6122\", \"6123\", \"6124\", \"6125\", \"6126\", \"6127\", \"6128\",  #> \"6129\", \"6130\", \"6131\", \"6132\", \"6133\", \"6134\", \"6135\", \"6136\",  #> \"6137\", \"6138\", \"6139\", \"6140\", \"6141\", \"6142\", \"6143\", \"6144\",  #> \"6145\", \"6146\", \"6147\", \"6148\", \"6149\", \"6150\", \"6151\", \"6152\",  #> \"6153\", \"6154\", \"6155\", \"6156\", \"6157\", \"6158\", \"6159\", \"6160\",  #> \"6161\", \"6162\", \"6163\", \"6164\", \"6165\", \"6166\", \"6167\", \"6168\",  #> \"6169\", \"6170\", \"6171\", \"6172\", \"6173\", \"6174\", \"6175\", \"6176\",  #> \"6177\", \"6178\", \"6179\", \"6180\", \"6181\", \"6182\", \"6183\", \"6184\",  #> \"6185\", \"6186\", \"6187\", \"6188\", \"6189\", \"6190\", \"6191\", \"6192\",  #> \"6193\", \"6194\", \"6195\", \"6196\", \"6197\", \"6198\", \"6199\", \"6200\",  #> \"6201\", \"6202\", \"6203\", \"6204\", \"6205\", \"6206\", \"6207\", \"6208\",  #> \"6209\", \"6210\", \"6211\", \"6212\", \"6213\", \"6214\", \"6215\", \"6216\",  #> \"6217\", \"6218\", \"6219\", \"6220\", \"6221\", \"6222\", \"6223\", \"6224\",  #> \"6225\", \"6226\", \"6227\", \"6228\", \"6229\", \"6230\", \"6231\", \"6232\",  #> \"6233\", \"6234\", \"6235\", \"6236\", \"6237\", \"6238\", \"6239\", \"6240\",  #> \"6241\", \"6242\", \"6243\", \"6244\", \"6245\", \"6246\", \"6247\", \"6248\",  #> \"6249\", \"6250\", \"6251\", \"6252\", \"6253\", \"6254\", \"6255\", \"6256\",  #> \"6257\", \"6258\", \"6259\", \"6260\", \"6261\", \"6262\", \"6263\", \"6264\",  #> \"6265\", \"6266\", \"6267\", \"6268\", \"6269\", \"6270\", \"6271\", \"6272\",  #> \"6273\", \"6274\", \"6275\", \"6276\", \"6277\", \"6278\", \"6279\", \"6280\",  #> \"6281\", \"6282\", \"6283\", \"6284\", \"6285\", \"6286\", \"6287\", \"6288\",  #> \"6289\", \"6290\", \"6291\", \"6292\", \"6293\", \"6294\", \"6295\", \"6296\",  #> \"6297\", \"6298\", \"6299\", \"6300\", \"6301\", \"6302\", \"6303\", \"6304\",  #> \"6305\", \"6306\", \"6307\", \"6308\", \"6309\", \"6310\", \"6311\", \"6312\",  #> \"6313\", \"6314\", \"6315\", \"6316\", \"6317\", \"6318\", \"6319\", \"6320\",  #> \"6321\", \"6322\", \"6323\", \"6324\", \"6325\", \"6326\", \"6327\", \"6328\",  #> \"6329\", \"6330\", \"6331\", \"6332\", \"6333\", \"6334\", \"6335\", \"6336\",  #> \"6337\", \"6338\", \"6339\", \"6340\", \"6341\", \"6342\", \"6343\", \"6344\",  #> \"6345\", \"6346\", \"6347\", \"6348\", \"6349\", \"6350\", \"6351\", \"6352\",  #> \"6353\", \"6354\", \"6355\", \"6356\", \"6357\", \"6358\", \"6359\", \"6360\",  #> \"6361\", \"6362\", \"6363\", \"6364\", \"6365\", \"6366\", \"6367\", \"6368\",  #> \"6369\", \"6370\", \"6371\", \"6372\", \"6373\", \"6374\", \"6375\", \"6376\",  #> \"6377\", \"6378\", \"6379\", \"6380\", \"6381\", \"6382\", \"6383\", \"6384\",  #> \"6385\", \"6386\", \"6387\", \"6388\", \"6389\", \"6390\", \"6391\", \"6392\",  #> \"6393\", \"6394\", \"6395\", \"6396\", \"6397\", \"6398\", \"6399\", \"6400\",  #> \"6401\", \"6402\", \"6403\", \"6404\", \"6405\", \"6406\", \"6407\", \"6408\",  #> \"6409\", \"6410\", \"6411\", \"6412\", \"6413\", \"6414\", \"6415\", \"6416\",  #> \"6417\", \"6418\", \"6419\", \"6420\", \"6421\", \"6422\", \"6423\", \"6424\",  #> \"6425\", \"6426\", \"6427\", \"6428\", \"6429\", \"6430\", \"6431\", \"6432\",  #> \"6433\", \"6434\", \"6435\", \"6436\", \"6437\", \"6438\", \"6439\", \"6440\",  #> \"6441\", \"6442\", \"6443\", \"6444\", \"6445\", \"6446\", \"6447\", \"6448\",  #> \"6449\", \"6450\", \"6451\", \"6452\", \"6453\", \"6454\", \"6455\", \"6456\",  #> \"6457\", \"6458\", \"6459\", \"6460\", \"6461\", \"6462\", \"6463\", \"6464\",  #> \"6465\", \"6466\", \"6467\", \"6468\", \"6469\", \"6470\", \"6471\", \"6472\",  #> \"6473\", \"6474\", \"6475\", \"6476\", \"6477\", \"6478\", \"6479\", \"6480\",  #> \"6481\", \"6482\", \"6483\", \"6484\", \"6485\", \"6486\", \"6487\", \"6488\",  #> \"6489\", \"6490\", \"6491\", \"6492\", \"6493\", \"6494\", \"6495\", \"6496\",  #> \"6497\", \"6498\", \"6499\", \"6500\", \"6501\", \"6502\", \"6503\", \"6504\",  #> \"6505\", \"6506\", \"6507\", \"6508\", \"6509\", \"6510\", \"6511\", \"6512\",  #> \"6513\", \"6514\", \"6515\", \"6516\", \"6517\", \"6518\", \"6519\", \"6520\",  #> \"6521\", \"6522\", \"6523\", \"6524\", \"6525\", \"6526\", \"6527\", \"6528\",  #> \"6529\", \"6530\", \"6531\", \"6532\", \"6533\", \"6534\", \"6535\", \"6536\",  #> \"6537\", \"6538\", \"6539\", \"6540\", \"6541\", \"6542\", \"6543\", \"6544\",  #> \"6545\", \"6546\", \"6547\", \"6548\", \"6549\", \"6550\", \"6551\", \"6552\",  #> \"6553\", \"6554\", \"6555\", \"6556\", \"6557\", \"6558\", \"6559\", \"6560\",  #> \"6561\", \"6562\", \"6563\", \"6564\", \"6565\", \"6566\", \"6567\", \"6568\",  #> \"6569\", \"6570\", \"6571\", \"6572\", \"6573\", \"6574\", \"6575\", \"6576\",  #> \"6577\", \"6578\", \"6579\", \"6580\", \"6581\", \"6582\", \"6583\", \"6584\",  #> \"6585\", \"6586\", \"6587\", \"6588\", \"6589\", \"6590\", \"6591\", \"6592\",  #> \"6593\", \"6594\", \"6595\", \"6596\", \"6597\", \"6598\", \"6599\", \"6600\",  #> \"6601\", \"6602\", \"6603\", \"6604\", \"6605\", \"6606\", \"6607\", \"6608\",  #> \"6609\", \"6610\", \"6611\", \"6612\", \"6613\", \"6614\", \"6615\", \"6616\",  #> \"6617\", \"6618\", \"6619\", \"6620\", \"6621\", \"6622\", \"6623\", \"6624\",  #> \"6625\", \"6626\", \"6627\", \"6628\", \"6629\", \"6630\", \"6631\", \"6632\",  #> \"6633\", \"6634\", \"6635\", \"6636\", \"6637\", \"6638\", \"6639\", \"6640\",  #> \"6641\", \"6642\", \"6643\", \"6644\", \"6645\", \"6646\", \"6647\", \"6648\",  #> \"6649\", \"6650\", \"6651\", \"6652\", \"6653\", \"6654\", \"6655\", \"6656\",  #> \"6657\", \"6658\", \"6659\", \"6660\", \"6661\", \"6662\", \"6663\", \"6664\",  #> \"6665\", \"6666\", \"6667\", \"6668\", \"6669\", \"6670\", \"6671\", \"6672\",  #> \"6673\", \"6674\", \"6675\", \"6676\", \"6677\", \"6678\", \"6679\", \"6680\",  #> \"6681\", \"6682\", \"6683\", \"6684\", \"6685\", \"6686\", \"6687\", \"6688\",  #> \"6689\", \"6690\", \"6691\", \"6692\", \"6693\", \"6694\", \"6695\", \"6696\",  #> \"6697\", \"6698\", \"6699\", \"6700\", \"6701\", \"6702\", \"6703\", \"6704\",  #> \"6705\", \"6706\", \"6707\", \"6708\", \"6709\", \"6710\", \"6711\", \"6712\",  #> \"6713\", \"6714\", \"6715\", \"6716\", \"6717\", \"6718\", \"6719\", \"6720\",  #> \"6721\", \"6722\", \"6723\", \"6724\", \"6725\", \"6726\", \"6727\", \"6728\",  #> \"6729\", \"6730\", \"6731\", \"6732\", \"6733\", \"6734\", \"6735\", \"6736\",  #> \"6737\", \"6738\", \"6739\", \"6740\", \"6741\", \"6742\", \"6743\", \"6744\",  #> \"6745\", \"6746\", \"6747\", \"6748\", \"6749\", \"6750\", \"6751\", \"6752\",  #> \"6753\", \"6754\", \"6755\", \"6756\", \"6757\", \"6758\", \"6759\", \"6760\",  #> \"6761\", \"6762\", \"6763\", \"6764\", \"6765\", \"6766\", \"6767\", \"6768\",  #> \"6769\", \"6770\", \"6771\", \"6772\", \"6773\", \"6774\", \"6775\", \"6776\",  #> \"6777\", \"6778\", \"6779\", \"6780\", \"6781\", \"6782\", \"6783\", \"6784\",  #> \"6785\", \"6786\", \"6787\", \"6788\", \"6789\", \"6790\", \"6791\", \"6792\",  #> \"6793\", \"6794\", \"6795\", \"6796\", \"6797\", \"6798\", \"6799\", \"6800\",  #> \"6801\", \"6802\", \"6803\", \"6804\", \"6805\", \"6806\", \"6807\", \"6808\",  #> \"6809\", \"6810\", \"6811\", \"6812\", \"6813\", \"6814\", \"6815\", \"6816\",  #> \"6817\", \"6818\", \"6819\", \"6820\", \"6821\", \"6822\", \"6823\", \"6824\",  #> \"6825\", \"6826\", \"6827\", \"6828\", \"6829\", \"6830\", \"6831\", \"6832\",  #> \"6833\", \"6834\", \"6835\", \"6836\", \"6837\", \"6838\", \"6839\", \"6840\",  #> \"6841\", \"6842\", \"6843\", \"6844\", \"6845\", \"6846\", \"6847\", \"6848\",  #> \"6849\", \"6850\", \"6851\", \"6852\", \"6853\", \"6854\", \"6855\", \"6856\",  #> \"6857\", \"6858\", \"6859\", \"6860\", \"6861\", \"6862\", \"6863\", \"6864\",  #> \"6865\", \"6866\", \"6867\", \"6868\", \"6869\", \"6870\", \"6871\", \"6872\",  #> \"6873\", \"6874\", \"6875\", \"6876\", \"6877\", \"6878\", \"6879\", \"6880\",  #> \"6881\", \"6882\", \"6883\", \"6884\", \"6885\", \"6886\", \"6887\", \"6888\",  #> \"6889\", \"6890\", \"6891\", \"6892\", \"6893\", \"6894\", \"6895\", \"6896\",  #> \"6897\", \"6898\", \"6899\", \"6900\", \"6901\", \"6902\", \"6903\", \"6904\",  #> \"6905\", \"6906\", \"6907\", \"6908\", \"6909\", \"6910\", \"6911\", \"6912\",  #> \"6913\", \"6914\", \"6915\", \"6916\", \"6917\", \"6918\", \"6919\", \"6920\",  #> \"6921\", \"6922\", \"6923\", \"6924\", \"6925\", \"6926\", \"6927\", \"6928\",  #> \"6929\", \"6930\", \"6931\", \"6932\", \"6933\", \"6934\", \"6935\", \"6936\",  #> \"6937\", \"6938\", \"6939\", \"6940\", \"6941\", \"6942\", \"6943\", \"6944\",  #> \"6945\", \"6946\", \"6947\", \"6948\", \"6949\", \"6950\", \"6951\", \"6952\",  #> \"6953\", \"6954\", \"6955\", \"6956\", \"6957\", \"6958\", \"6959\", \"6960\",  #> \"6961\", \"6962\", \"6963\", \"6964\", \"6965\", \"6966\", \"6967\", \"6968\",  #> \"6969\", \"6970\", \"6971\", \"6972\", \"6973\", \"6974\", \"6975\", \"6976\",  #> \"6977\", \"6978\", \"6979\", \"6980\", \"6981\", \"6982\", \"6983\", \"6984\",  #> \"6985\", \"6986\", \"6987\", \"6988\", \"6989\", \"6990\", \"6991\", \"6992\",  #> \"6993\", \"6994\", \"6995\", \"6996\", \"6997\", \"6998\", \"6999\", \"7000\",  #> \"7001\", \"7002\", \"7003\", \"7004\", \"7005\", \"7006\", \"7007\", \"7008\",  #> \"7009\", \"7010\", \"7011\", \"7012\", \"7013\", \"7014\", \"7015\", \"7016\",  #> \"7017\", \"7018\", \"7019\", \"7020\", \"7021\", \"7022\", \"7023\", \"7024\",  #> \"7025\", \"7026\", \"7027\", \"7028\", \"7029\", \"7030\", \"7031\", \"7032\",  #> \"7033\", \"7034\", \"7035\", \"7036\", \"7037\", \"7038\", \"7039\", \"7040\",  #> \"7041\", \"7042\", \"7043\", \"7044\", \"7045\", \"7046\", \"7047\", \"7048\",  #> \"7049\", \"7050\", \"7051\", \"7052\", \"7053\", \"7054\", \"7055\", \"7056\",  #> \"7057\", \"7058\", \"7059\", \"7060\", \"7061\", \"7062\", \"7063\", \"7064\",  #> \"7065\", \"7066\", \"7067\", \"7068\", \"7069\", \"7070\", \"7071\", \"7072\",  #> \"7073\", \"7074\", \"7075\", \"7076\", \"7077\", \"7078\", \"7079\", \"7080\",  #> \"7081\", \"7082\", \"7083\", \"7084\", \"7085\", \"7086\", \"7087\", \"7088\",  #> \"7089\", \"7090\", \"7091\", \"7092\", \"7093\", \"7094\", \"7095\", \"7096\",  #> \"7097\", \"7098\", \"7099\", \"7100\", \"7101\", \"7102\", \"7103\", \"7104\",  #> \"7105\", \"7106\", \"7107\", \"7108\", \"7109\", \"7110\", \"7111\", \"7112\",  #> \"7113\", \"7114\", \"7115\", \"7116\", \"7117\", \"7118\", \"7119\", \"7120\",  #> \"7121\", \"7122\", \"7123\", \"7124\", \"7125\", \"7126\", \"7127\", \"7128\",  #> \"7129\", \"7130\", \"7131\", \"7132\", \"7133\", \"7134\", \"7135\", \"7136\",  #> \"7137\", \"7138\", \"7139\", \"7140\", \"7141\", \"7142\", \"7143\", \"7144\",  #> \"7145\", \"7146\", \"7147\", \"7148\", \"7149\", \"7150\", \"7151\", \"7152\",  #> \"7153\", \"7154\", \"7155\", \"7156\", \"7157\", \"7158\", \"7159\", \"7160\",  #> \"7161\", \"7162\", \"7163\", \"7164\", \"7165\", \"7166\", \"7167\", \"7168\",  #> \"7169\", \"7170\", \"7171\", \"7172\", \"7173\", \"7174\", \"7175\", \"7176\",  #> \"7177\", \"7178\", \"7179\", \"7180\", \"7181\", \"7182\", \"7183\", \"7184\",  #> \"7185\", \"7186\", \"7187\", \"7188\", \"7189\", \"7190\", \"7191\", \"7192\",  #> \"7193\", \"7194\", \"7195\", \"7196\", \"7197\", \"7198\", \"7199\", \"7200\",  #> \"7201\", \"7202\", \"7203\", \"7204\", \"7205\", \"7206\", \"7207\", \"7208\",  #> \"7209\", \"7210\", \"7211\", \"7212\", \"7213\", \"7214\", \"7215\", \"7216\",  #> \"7217\", \"7218\", \"7219\", \"7220\", \"7221\", \"7222\", \"7223\", \"7224\",  #> \"7225\", \"7226\", \"7227\", \"7228\", \"7229\", \"7230\", \"7231\", \"7232\",  #> \"7233\", \"7234\", \"7235\", \"7236\", \"7237\", \"7238\", \"7239\", \"7240\",  #> \"7241\", \"7242\", \"7243\", \"7244\", \"7245\", \"7246\", \"7247\", \"7248\",  #> \"7249\", \"7250\", \"7251\", \"7252\", \"7253\", \"7254\", \"7255\", \"7256\",  #> \"7257\", \"7258\", \"7259\", \"7260\", \"7261\", \"7262\", \"7263\", \"7264\",  #> \"7265\", \"7266\", \"7267\", \"7268\", \"7269\", \"7270\", \"7271\", \"7272\",  #> \"7273\", \"7274\", \"7275\", \"7276\", \"7277\", \"7278\", \"7279\", \"7280\",  #> \"7281\", \"7282\", \"7283\", \"7284\", \"7285\", \"7286\", \"7287\", \"7288\",  #> \"7289\", \"7290\", \"7291\", \"7292\", \"7293\", \"7294\", \"7295\", \"7296\",  #> \"7297\", \"7298\", \"7299\", \"7300\", \"7301\", \"7302\", \"7303\", \"7304\",  #> \"7305\", \"7306\", \"7307\", \"7308\", \"7309\", \"7310\", \"7311\", \"7312\",  #> \"7313\", \"7314\", \"7315\", \"7316\", \"7317\", \"7318\", \"7319\", \"7320\",  #> \"7321\", \"7322\", \"7323\", \"7324\", \"7325\", \"7326\", \"7327\", \"7328\",  #> \"7329\", \"7330\", \"7331\", \"7332\", \"7333\", \"7334\", \"7335\", \"7336\",  #> \"7337\", \"7338\", \"7339\", \"7340\", \"7341\", \"7342\", \"7343\", \"7344\",  #> \"7345\", \"7346\", \"7347\", \"7348\", \"7349\", \"7350\", \"7351\", \"7352\",  #> \"7353\", \"7354\", \"7355\", \"7356\", \"7357\", \"7358\", \"7359\", \"7360\",  #> \"7361\", \"7362\", \"7363\", \"7364\", \"7365\", \"7366\", \"7367\", \"7368\",  #> \"7369\", \"7370\", \"7371\", \"7372\", \"7373\", \"7374\", \"7375\", \"7376\",  #> \"7377\", \"7378\", \"7379\", \"7380\", \"7381\", \"7382\", \"7383\", \"7384\",  #> \"7385\", \"7386\", \"7387\", \"7388\", \"7389\", \"7390\", \"7391\", \"7392\",  #> \"7393\", \"7394\", \"7395\", \"7396\", \"7397\", \"7398\", \"7399\", \"7400\",  #> \"7401\", \"7402\", \"7403\", \"7404\", \"7405\", \"7406\", \"7407\", \"7408\",  #> \"7409\", \"7410\", \"7411\", \"7412\", \"7413\", \"7414\", \"7415\", \"7416\",  #> \"7417\", \"7418\", \"7419\", \"7420\", \"7421\", \"7422\", \"7423\", \"7424\",  #> \"7425\", \"7426\", \"7427\", \"7428\", \"7429\", \"7430\", \"7431\", \"7432\",  #> \"7433\", \"7434\", \"7435\", \"7436\", \"7437\", \"7438\", \"7439\", \"7440\",  #> \"7441\", \"7442\", \"7443\", \"7444\", \"7445\", \"7446\", \"7447\", \"7448\",  #> \"7449\", \"7450\", \"7451\", \"7452\", \"7453\", \"7454\", \"7455\", \"7456\",  #> \"7457\", \"7458\", \"7459\", \"7460\", \"7461\", \"7462\", \"7463\", \"7464\",  #> \"7465\", \"7466\", \"7467\", \"7468\", \"7469\", \"7470\", \"7471\", \"7472\",  #> \"7473\", \"7474\", \"7475\", \"7476\", \"7477\", \"7478\", \"7479\", \"7480\",  #> \"7481\", \"7482\", \"7483\", \"7484\", \"7485\", \"7486\", \"7487\", \"7488\",  #> \"7489\", \"7490\", \"7491\", \"7492\", \"7493\", \"7494\", \"7495\", \"7496\",  #> \"7497\", \"7498\", \"7499\", \"7500\", \"7501\", \"7502\", \"7503\", \"7504\",  #> \"7505\", \"7506\", \"7507\", \"7508\", \"7509\", \"7510\", \"7511\", \"7512\",  #> \"7513\", \"7514\", \"7515\", \"7516\", \"7517\", \"7518\", \"7519\", \"7520\",  #> \"7521\", \"7522\", \"7523\", \"7524\", \"7525\", \"7526\", \"7527\", \"7528\",  #> \"7529\", \"7530\", \"7531\", \"7532\", \"7533\", \"7534\", \"7535\", \"7536\",  #> \"7537\", \"7538\", \"7539\", \"7540\", \"7541\", \"7542\", \"7543\", \"7544\",  #> \"7545\", \"7546\", \"7547\", \"7548\", \"7549\", \"7550\", \"7551\", \"7552\",  #> \"7553\", \"7554\", \"7555\", \"7556\", \"7557\", \"7558\", \"7559\", \"7560\",  #> \"7561\", \"7562\", \"7563\", \"7564\", \"7565\", \"7566\", \"7567\", \"7568\",  #> \"7569\", \"7570\", \"7571\", \"7572\", \"7573\", \"7574\", \"7575\", \"7576\",  #> \"7577\", \"7578\", \"7579\", \"7580\", \"7581\", \"7582\", \"7583\", \"7584\",  #> \"7585\", \"7586\", \"7587\", \"7588\", \"7589\", \"7590\", \"7591\", \"7592\",  #> \"7593\", \"7594\", \"7595\", \"7596\", \"7597\", \"7598\", \"7599\", \"7600\",  #> \"7601\", \"7602\", \"7603\", \"7604\", \"7605\", \"7606\", \"7607\", \"7608\",  #> \"7609\", \"7610\", \"7611\", \"7612\", \"7613\", \"7614\", \"7615\", \"7616\",  #> \"7617\", \"7618\", \"7619\", \"7620\", \"7621\", \"7622\", \"7623\", \"7624\",  #> \"7625\", \"7626\", \"7627\", \"7628\", \"7629\", \"7630\", \"7631\", \"7632\",  #> \"7633\", \"7634\", \"7635\", \"7636\", \"7637\", \"7638\", \"7639\", \"7640\",  #> \"7641\", \"7642\", \"7643\", \"7644\", \"7645\", \"7646\", \"7647\", \"7648\",  #> \"7649\", \"7650\", \"7651\", \"7652\", \"7653\", \"7654\", \"7655\", \"7656\",  #> \"7657\", \"7658\", \"7659\", \"7660\", \"7661\", \"7662\", \"7663\", \"7664\",  #> \"7665\", \"7666\", \"7667\", \"7668\", \"7669\", \"7670\", \"7671\", \"7672\",  #> \"7673\", \"7674\", \"7675\", \"7676\", \"7677\", \"7678\", \"7679\", \"7680\",  #> \"7681\", \"7682\", \"7683\", \"7684\", \"7685\", \"7686\", \"7687\", \"7688\",  #> \"7689\", \"7690\", \"7691\", \"7692\", \"7693\", \"7694\", \"7695\", \"7696\",  #> \"7697\", \"7698\", \"7699\", \"7700\", \"7701\", \"7702\", \"7703\", \"7704\",  #> \"7705\", \"7706\", \"7707\", \"7708\", \"7709\", \"7710\", \"7711\", \"7712\",  #> \"7713\", \"7714\", \"7715\", \"7716\", \"7717\", \"7718\", \"7719\", \"7720\",  #> \"7721\", \"7722\", \"7723\", \"7724\", \"7725\", \"7726\", \"7727\", \"7728\",  #> \"7729\", \"7730\", \"7731\", \"7732\", \"7733\", \"7734\", \"7735\", \"7736\",  #> \"7737\", \"7738\", \"7739\", \"7740\", \"7741\", \"7742\", \"7743\", \"7744\",  #> \"7745\", \"7746\", \"7747\", \"7748\", \"7749\", \"7750\", \"7751\", \"7752\",  #> \"7753\", \"7754\", \"7755\", \"7756\", \"7757\", \"7758\", \"7759\", \"7760\",  #> \"7761\", \"7762\", \"7763\", \"7764\", \"7765\", \"7766\", \"7767\", \"7768\",  #> \"7769\", \"7770\", \"7771\", \"7772\", \"7773\", \"7774\", \"7775\", \"7776\",  #> \"7777\", \"7778\", \"7779\", \"7780\", \"7781\", \"7782\", \"7783\", \"7784\",  #> \"7785\", \"7786\", \"7787\", \"7788\", \"7789\", \"7790\", \"7791\", \"7792\",  #> \"7793\", \"7794\", \"7795\", \"7796\", \"7797\", \"7798\", \"7799\", \"7800\",  #> \"7801\", \"7802\", \"7803\", \"7804\", \"7805\", \"7806\", \"7807\", \"7808\",  #> \"7809\", \"7810\", \"7811\", \"7812\", \"7813\", \"7814\", \"7815\", \"7816\",  #> \"7817\", \"7818\", \"7819\", \"7820\", \"7821\", \"7822\", \"7823\", \"7824\",  #> \"7825\", \"7826\", \"7827\", \"7828\", \"7829\", \"7830\", \"7831\", \"7832\",  #> \"7833\", \"7834\", \"7835\", \"7836\", \"7837\", \"7838\", \"7839\", \"7840\",  #> \"7841\", \"7842\", \"7843\", \"7844\", \"7845\", \"7846\", \"7847\", \"7848\",  #> \"7849\", \"7850\", \"7851\", \"7852\", \"7853\", \"7854\", \"7855\", \"7856\",  #> \"7857\", \"7858\", \"7859\", \"7860\", \"7861\", \"7862\", \"7863\", \"7864\",  #> \"7865\", \"7866\", \"7867\", \"7868\", \"7869\", \"7870\", \"7871\", \"7872\",  #> \"7873\", \"7874\", \"7875\", \"7876\", \"7877\", \"7878\", \"7879\", \"7880\",  #> \"7881\", \"7882\", \"7883\", \"7884\", \"7885\", \"7886\", \"7887\", \"7888\",  #> \"7889\", \"7890\", \"7891\", \"7892\", \"7893\", \"7894\", \"7895\", \"7896\",  #> \"7897\", \"7898\", \"7899\", \"7900\", \"7901\", \"7902\", \"7903\", \"7904\",  #> \"7905\", \"7906\", \"7907\", \"7908\", \"7909\", \"7910\", \"7911\", \"7912\",  #> \"7913\", \"7914\", \"7915\", \"7916\", \"7917\", \"7918\", \"7919\", \"7920\",  #> \"7921\", \"7922\", \"7923\", \"7924\", \"7925\", \"7926\", \"7927\", \"7928\",  #> \"7929\", \"7930\", \"7931\", \"7932\", \"7933\", \"7934\", \"7935\", \"7936\",  #> \"7937\", \"7938\", \"7939\", \"7940\", \"7941\", \"7942\", \"7943\", \"7944\",  #> \"7945\", \"7946\", \"7947\", \"7948\", \"7949\", \"7950\", \"7951\", \"7952\",  #> \"7953\", \"7954\", \"7955\", \"7956\", \"7957\", \"7958\", \"7959\", \"7960\",  #> \"7961\", \"7962\", \"7963\", \"7964\", \"7965\", \"7966\", \"7967\", \"7968\",  #> \"7969\", \"7970\", \"7971\", \"7972\", \"7973\", \"7974\", \"7975\", \"7976\",  #> \"7977\", \"7978\", \"7979\", \"7980\", \"7981\", \"7982\", \"7983\", \"7984\",  #> \"7985\", \"7986\", \"7987\", \"7988\", \"7989\", \"7990\", \"7991\", \"7992\",  #> \"7993\", \"7994\", \"7995\", \"7996\", \"7997\", \"7998\", \"7999\", \"8000\",  #> \"8001\", \"8002\", \"8003\", \"8004\", \"8005\", \"8006\", \"8007\", \"8008\",  #> \"8009\", \"8010\", \"8011\", \"8012\", \"8013\", \"8014\", \"8015\", \"8016\",  #> \"8017\", \"8018\", \"8019\", \"8020\", \"8021\", \"8022\", \"8023\", \"8024\",  #> \"8025\", \"8026\", \"8027\", \"8028\", \"8029\", \"8030\", \"8031\", \"8032\",  #> \"8033\", \"8034\", \"8035\", \"8036\", \"8037\", \"8038\", \"8039\", \"8040\",  #> \"8041\", \"8042\", \"8043\", \"8044\", \"8045\", \"8046\", \"8047\", \"8048\",  #> \"8049\", \"8050\", \"8051\", \"8052\", \"8053\", \"8054\", \"8055\", \"8056\",  #> \"8057\", \"8058\", \"8059\", \"8060\", \"8061\", \"8062\", \"8063\", \"8064\",  #> \"8065\", \"8066\", \"8067\", \"8068\", \"8069\", \"8070\", \"8071\", \"8072\",  #> \"8073\", \"8074\", \"8075\", \"8076\", \"8077\", \"8078\", \"8079\", \"8080\",  #> \"8081\", \"8082\", \"8083\", \"8084\", \"8085\", \"8086\", \"8087\", \"8088\",  #> \"8089\", \"8090\", \"8091\", \"8092\", \"8093\", \"8094\", \"8095\", \"8096\",  #> \"8097\", \"8098\", \"8099\", \"8100\", \"8101\", \"8102\", \"8103\", \"8104\",  #> \"8105\", \"8106\", \"8107\", \"8108\", \"8109\", \"8110\", \"8111\", \"8112\",  #> \"8113\", \"8114\", \"8115\", \"8116\", \"8117\", \"8118\", \"8119\", \"8120\",  #> \"8121\", \"8122\", \"8123\", \"8124\", \"8125\", \"8126\", \"8127\", \"8128\",  #> \"8129\", \"8130\", \"8131\", \"8132\", \"8133\", \"8134\", \"8135\", \"8136\",  #> \"8137\", \"8138\", \"8139\", \"8140\", \"8141\", \"8142\", \"8143\", \"8144\",  #> \"8145\", \"8146\", \"8147\", \"8148\", \"8149\", \"8150\", \"8151\", \"8152\",  #> \"8153\", \"8154\", \"8155\", \"8156\", \"8157\", \"8158\", \"8159\", \"8160\",  #> \"8161\", \"8162\", \"8163\", \"8164\", \"8165\", \"8166\", \"8167\", \"8168\",  #> \"8169\", \"8170\", \"8171\", \"8172\", \"8173\", \"8174\", \"8175\", \"8176\",  #> \"8177\", \"8178\", \"8179\", \"8180\", \"8181\", \"8182\", \"8183\", \"8184\",  #> \"8185\", \"8186\", \"8187\", \"8188\", \"8189\", \"8190\", \"8191\", \"8192\",  #> \"8193\", \"8194\", \"8195\", \"8196\", \"8197\", \"8198\", \"8199\", \"8200\",  #> \"8201\", \"8202\", \"8203\", \"8204\", \"8205\", \"8206\", \"8207\", \"8208\",  #> \"8209\", \"8210\", \"8211\", \"8212\", \"8213\", \"8214\", \"8215\", \"8216\",  #> \"8217\", \"8218\", \"8219\", \"8220\", \"8221\", \"8222\", \"8223\", \"8224\",  #> \"8225\", \"8226\", \"8227\", \"8228\", \"8229\", \"8230\", \"8231\", \"8232\",  #> \"8233\", \"8234\", \"8235\", \"8236\", \"8237\", \"8238\", \"8239\", \"8240\",  #> \"8241\", \"8242\", \"8243\", \"8244\", \"8245\", \"8246\", \"8247\", \"8248\",  #> \"8249\", \"8250\", \"8251\", \"8252\", \"8253\", \"8254\", \"8255\", \"8256\",  #> \"8257\", \"8258\", \"8259\", \"8260\", \"8261\", \"8262\", \"8263\", \"8264\",  #> \"8265\", \"8266\", \"8267\", \"8268\", \"8269\", \"8270\", \"8271\", \"8272\",  #> \"8273\", \"8274\", \"8275\", \"8276\", \"8277\", \"8278\", \"8279\", \"8280\",  #> \"8281\", \"8282\", \"8283\", \"8284\", \"8285\", \"8286\", \"8287\", \"8288\",  #> \"8289\", \"8290\", \"8291\", \"8292\", \"8293\", \"8294\", \"8295\", \"8296\",  #> \"8297\", \"8298\", \"8299\", \"8300\", \"8301\", \"8302\", \"8303\", \"8304\",  #> \"8305\", \"8306\", \"8307\", \"8308\", \"8309\", \"8310\", \"8311\", \"8312\",  #> \"8313\", \"8314\", \"8315\", \"8316\", \"8317\", \"8318\", \"8319\", \"8320\",  #> \"8321\", \"8322\", \"8323\", \"8324\", \"8325\", \"8326\", \"8327\", \"8328\",  #> \"8329\", \"8330\", \"8331\", \"8332\", \"8333\", \"8334\", \"8335\", \"8336\",  #> \"8337\", \"8338\", \"8339\", \"8340\", \"8341\", \"8342\", \"8343\", \"8344\",  #> \"8345\", \"8346\", \"8347\", \"8348\", \"8349\", \"8350\", \"8351\", \"8352\",  #> \"8353\", \"8354\", \"8355\", \"8356\", \"8357\", \"8358\", \"8359\", \"8360\",  #> \"8361\", \"8362\", \"8363\", \"8364\", \"8365\", \"8366\", \"8367\", \"8368\",  #> \"8369\", \"8370\", \"8371\", \"8372\", \"8373\", \"8374\", \"8375\", \"8376\",  #> \"8377\", \"8378\", \"8379\", \"8380\", \"8381\", \"8382\", \"8383\", \"8384\",  #> \"8385\", \"8386\", \"8387\", \"8388\", \"8389\", \"8390\", \"8391\", \"8392\",  #> \"8393\", \"8394\", \"8395\", \"8396\", \"8397\", \"8398\", \"8399\", \"8400\",  #> \"8401\", \"8402\", \"8403\", \"8404\", \"8405\", \"8406\", \"8407\", \"8408\",  #> \"8409\", \"8410\", \"8411\", \"8412\", \"8413\", \"8414\", \"8415\", \"8416\",  #> \"8417\", \"8418\", \"8419\", \"8420\", \"8421\", \"8422\", \"8423\", \"8424\",  #> \"8425\", \"8426\", \"8427\", \"8428\", \"8429\", \"8430\", \"8431\", \"8432\",  #> \"8433\", \"8434\", \"8435\", \"8436\", \"8437\", \"8438\", \"8439\", \"8440\",  #> \"8441\", \"8442\", \"8443\", \"8444\", \"8445\", \"8446\", \"8447\", \"8448\",  #> \"8449\", \"8450\", \"8451\", \"8452\", \"8453\", \"8454\", \"8455\", \"8456\",  #> \"8457\", \"8458\", \"8459\", \"8460\", \"8461\", \"8462\", \"8463\", \"8464\",  #> \"8465\", \"8466\", \"8467\", \"8468\", \"8469\", \"8470\", \"8471\", \"8472\",  #> \"8473\", \"8474\", \"8475\", \"8476\", \"8477\", \"8478\", \"8479\", \"8480\",  #> \"8481\", \"8482\", \"8483\", \"8484\", \"8485\", \"8486\", \"8487\", \"8488\",  #> \"8489\", \"8490\", \"8491\", \"8492\", \"8493\", \"8494\", \"8495\", \"8496\",  #> \"8497\", \"8498\", \"8499\", \"8500\", \"8501\", \"8502\", \"8503\", \"8504\",  #> \"8505\", \"8506\", \"8507\", \"8508\", \"8509\", \"8510\", \"8511\", \"8512\",  #> \"8513\", \"8514\", \"8515\", \"8516\", \"8517\", \"8518\", \"8519\", \"8520\",  #> \"8521\", \"8522\", \"8523\", \"8524\", \"8525\", \"8526\", \"8527\", \"8528\",  #> \"8529\", \"8530\", \"8531\", \"8532\", \"8533\", \"8534\", \"8535\", \"8536\",  #> \"8537\", \"8538\", \"8539\", \"8540\", \"8541\", \"8542\", \"8543\", \"8544\",  #> \"8545\", \"8546\", \"8547\", \"8548\", \"8549\", \"8550\", \"8551\", \"8552\",  #> \"8553\", \"8554\", \"8555\", \"8556\", \"8557\", \"8558\", \"8559\", \"8560\",  #> \"8561\", \"8562\", \"8563\", \"8564\", \"8565\", \"8566\", \"8567\", \"8568\",  #> \"8569\", \"8570\", \"8571\", \"8572\", \"8573\", \"8574\", \"8575\", \"8576\",  #> \"8577\", \"8578\", \"8579\", \"8580\", \"8581\", \"8582\", \"8583\", \"8584\",  #> \"8585\", \"8586\", \"8587\", \"8588\", \"8589\", \"8590\", \"8591\", \"8592\",  #> \"8593\", \"8594\", \"8595\", \"8596\", \"8597\", \"8598\", \"8599\", \"8600\",  #> \"8601\", \"8602\", \"8603\", \"8604\", \"8605\", \"8606\", \"8607\", \"8608\",  #> \"8609\", \"8610\", \"8611\", \"8612\", \"8613\", \"8614\", \"8615\", \"8616\",  #> \"8617\", \"8618\", \"8619\", \"8620\", \"8621\", \"8622\", \"8623\", \"8624\",  #> \"8625\", \"8626\", \"8627\", \"8628\", \"8629\", \"8630\", \"8631\", \"8632\",  #> \"8633\", \"8634\", \"8635\", \"8636\", \"8637\", \"8638\", \"8639\", \"8640\",  #> \"8641\", \"8642\", \"8643\", \"8644\", \"8645\", \"8646\", \"8647\", \"8648\",  #> \"8649\", \"8650\", \"8651\", \"8652\", \"8653\", \"8654\", \"8655\", \"8656\",  #> \"8657\", \"8658\", \"8659\", \"8660\", \"8661\", \"8662\", \"8663\", \"8664\",  #> \"8665\", \"8666\", \"8667\", \"8668\", \"8669\", \"8670\", \"8671\", \"8672\",  #> \"8673\", \"8674\", \"8675\", \"8676\", \"8677\", \"8678\", \"8679\", \"8680\",  #> \"8681\", \"8682\", \"8683\", \"8684\", \"8685\", \"8686\", \"8687\", \"8688\",  #> \"8689\", \"8690\", \"8691\", \"8692\", \"8693\", \"8694\", \"8695\", \"8696\",  #> \"8697\", \"8698\", \"8699\", \"8700\", \"8701\", \"8702\", \"8703\", \"8704\",  #> \"8705\", \"8706\", \"8707\", \"8708\", \"8709\", \"8710\", \"8711\", \"8712\",  #> \"8713\"))) #>  #> Coefficients: #> (Intercept)   treatment.   #>      75.769        1.905   #>   # Treatment effect by grade lmitt(math ~ as.factor(grade), design = des, data = studentdata) #>  #> Call: #> stats::lm(formula = math ~ `as.factor(grade)4` + `as.factor(grade)5` +  #>     `treatment._as.factor(grade)3` + `treatment._as.factor(grade)4` +  #>     `treatment._as.factor(grade)5`, data = structure(list(studentid = 1:8713,  #>     schoolid = c(\"NJLMIFXDEK\", \"GSHWBCJXVZ\", \"ZBXYPQEVLU\", \"MCBXZBXGJN\",  #>     \"NOTPDVRLPM\", \"NTSOYECHZQ\", \"VKEOEUOTDQ\", \"ZBXYPQEVLU\", \"ZTTKZEEJZP\",  #>     \"JHVIRHYUEP\", \"AHOMYEGIBP\", \"TLGDIASGEL\", \"PKBCVRCMCS\", \"TKKAYBAFGV\",  #>     \"CFSINPQYCO\", \"MHVRYUZJWL\", \"WLNMRBXMPC\", \"PHIZOLWIBS\", \"EOJBYFQEOY\",  #>     \"ISHHJNXLMR\", \"HLWNYXNVYM\", \"CFSINPQYCO\", \"RNAOTFIWTN\", \"CJQEUMATTB\",  #>     \"TWBOLWJGAR\", \"NOTPDVRLPM\", \"SPBEZTBJFS\", \"VKEOEUOTDQ\", \"LGWJJITBKZ\",  #>     \"HLWNYXNVYM\", \"XDEAUVDMFQ\", \"RNAOTFIWTN\", \"ZPWKFFVOCB\", \"VOXRCHMDIT\",  #>     \"RMEYEXVXVX\", \"GXQQOGSTOQ\", \"AHOMYEGIBP\", \"VOXRCHMDIT\", \"TXFSIPGCID\",  #>     \"LGWJJITBKZ\", \"OPNAGRHLZM\", \"EAMRJPOWLU\", \"NJLMIFXDEK\", \"CJQEUMATTB\",  #>     \"PHIZOLWIBS\", \"YDGABWKNRS\", \"OPNAGRHLZM\", \"BJUNWZLJYP\", \"UCYFOWDBOQ\",  #>     \"ACYJOPUKSD\", \"GSNHQUBLXJ\", \"LEESGFRPHV\", \"GRCMVPYLDK\", \"AIJRHVVDKP\",  #>     \"VKEOEUOTDQ\", \"YROTAZMWFI\", \"SVBBYDPIOA\", \"PBLJMWGFTW\", \"CJQEUMATTB\",  #>     \"JVKZPZVIIU\", \"FKXBYBMICY\", \"IYNWQZVCCI\", \"BKYOKYIUGW\", \"DRQRVFYUCX\",  #>     \"KTANGMAQMT\", \"CMEKXFGTSR\", \"SVBBYDPIOA\", \"CJQEUMATTB\", \"QKSAXQEAIB\",  #>     \"RHALOWGMGJ\", \"ASCJFWFUGV\", \"WLNMRBXMPC\", \"ZPWKFFVOCB\", \"PKTRNWCHPR\",  #>     \"IYNWQZVCCI\", \"SPBEZTBJFS\", \"SVBBYDPIOA\", \"VKEOEUOTDQ\", \"CJQEUMATTB\",  #>     \"JVCERYCMOA\", \"FHCLEHLIXM\", \"CALRWQEBFZ\", \"HPKSIGVDRL\", \"CUYVXLQJIV\",  #>     \"CJQEUMATTB\", \"AZVIVPYKND\", \"VBFGFOMUQJ\", \"EAMRJPOWLU\", \"QBPRAWZTBF\",  #>     \"UFXSCLPLER\", \"AZVIVPYKND\", \"YDGABWKNRS\", \"QMDWWKFVRU\", \"ZTCMALLRXB\",  #>     \"JPARFIKTYL\", \"HGHMEUCTEX\", \"AFUTZUEXVM\", \"MMCWEZDZSL\", \"TWBOLWJGAR\",  #>     \"FHCLEHLIXM\", \"FHCLEHLIXM\", \"HYHAFAFYEA\", \"RMEYEXVXVX\", \"WNATHOQPJS\",  #>     \"JPARFIKTYL\", \"CKNVKMZWDC\", \"TWBOLWJGAR\", \"RMEYEXVXVX\", \"EAMRJPOWLU\",  #>     \"YFDQMQIVBM\", \"CFSINPQYCO\", \"TLGDIASGEL\", \"AOKHTNTQJC\", \"PHIZOLWIBS\",  #>     \"KTANGMAQMT\", \"JVCERYCMOA\", \"JFHAGKINER\", \"QMDWWKFVRU\", \"XDEAUVDMFQ\",  #>     \"HYUIWKYPXU\", \"AOKHTNTQJC\", \"XKSCGLSVUZ\", \"NJLMIFXDEK\", \"ELMZBUCGXP\",  #>     \"RFAKZMSZMB\", \"GXYQHIZVPD\", \"RFAKZMSZMB\", \"NCXWRVCMVY\", \"QQIQBNKASY\",  #>     \"RQDKTNHSYQ\", \"OSNCJRVKET\", \"AHOMYEGIBP\", \"ZTTKZEEJZP\", \"CKNVKMZWDC\",  #>     \"KTANGMAQMT\", \"ESYOZKOHCU\", \"UZRCINDECG\", \"KTANGMAQMT\", \"JFHAGKINER\",  #>     \"NOTPDVRLPM\", \"GSNHQUBLXJ\", \"FKXBYBMICY\", \"DRQRVFYUCX\", \"AIJRHVVDKP\",  #>     \"ZTCMALLRXB\", \"EWTGOBRLKP\", \"ENXVDYZEEW\", \"VKEOEUOTDQ\", \"EJSYIOEOJL\",  #>     \"YFDQMQIVBM\", \"YFDQMQIVBM\", \"PBLJMWGFTW\", \"CKNVKMZWDC\", \"ACYJOPUKSD\",  #>     \"LGWJJITBKZ\", \"AHOMYEGIBP\", \"ELMZBUCGXP\", \"KBYFYYONYU\", \"ESYOZKOHCU\",  #>     \"ESYOZKOHCU\", \"WMVGSBQYPB\", \"RMEYEXVXVX\", \"NJLMIFXDEK\", \"ZTCMALLRXB\",  #>     \"CFSINPQYCO\", \"AOKHTNTQJC\", \"EKNGZSKPGF\", \"EZLGDZHKHT\", \"MGDZOPJAFG\",  #>     \"XKSCGLSVUZ\", \"PKTRNWCHPR\", \"TWBOLWJGAR\", \"YFDQMQIVBM\", \"RNAOTFIWTN\",  #>     \"JSGBOZVHXC\", \"YFDQMQIVBM\", \"JOPGMOKVOM\", \"ELMZBUCGXP\", \"GXYQHIZVPD\",  #>     \"AQEEZTRLKH\", \"HYUIWKYPXU\", \"XSHYKGMBPQ\", \"EZLGDZHKHT\", \"QCCNNYIKTH\",  #>     \"URBJONTBBW\", \"WMVGSBQYPB\", \"ERVIHSPAYA\", \"JVKZPZVIIU\", \"ESYOZKOHCU\",  #>     \"HGHMEUCTEX\", \"LGWJJITBKZ\", \"TXFSIPGCID\", \"JWFPSYZNLW\", \"PKTRNWCHPR\",  #>     \"PHIZOLWIBS\", \"WNATHOQPJS\", \"JWFPSYZNLW\", \"AIJRHVVDKP\", \"JSGBOZVHXC\",  #>     \"GRCMVPYLDK\", \"HYUIWKYPXU\", \"HPKSIGVDRL\", \"CYQGGUSNEK\", \"UCYFOWDBOQ\",  #>     \"UNCDYWJXLO\", \"WNATHOQPJS\", \"DRQRVFYUCX\", \"JFHAGKINER\", \"AQEEZTRLKH\",  #>     \"GXQQOGSTOQ\", \"KIJPLWHVGS\", \"GXYQHIZVPD\", \"LHDUBEZXXM\", \"CONXBVIQSU\",  #>     \"KKKAFDRDCO\", \"DRQRVFYUCX\", \"JRNMLJJSDP\", \"RHALOWGMGJ\", \"RNAOTFIWTN\",  #>     \"JHXSYICTMS\", \"VKEOEUOTDQ\", \"JVKZPZVIIU\", \"CYQGGUSNEK\", \"JPARFIKTYL\",  #>     \"UZRCINDECG\", \"KTANGMAQMT\", \"WMVGSBQYPB\", \"QBPHMGOGFW\", \"JOPGMOKVOM\",  #>     \"TLGDIASGEL\", \"AGJEXFMJAO\", \"TBZWQOHERE\", \"LJJSFTJKBP\", \"ESYOZKOHCU\",  #>     \"RFAKZMSZMB\", \"VKEOEUOTDQ\", \"BZPWNEEBHR\", \"QBPHMGOGFW\", \"ONTOHBVEQC\",  #>     \"YDGABWKNRS\", \"KBYFYYONYU\", \"LEESGFRPHV\", \"YROTAZMWFI\", \"WNATHOQPJS\",  #>     \"UOFFHQQLIR\", \"QBPRAWZTBF\", \"AOKHTNTQJC\", \"QQIQBNKASY\", \"CUYVXLQJIV\",  #>     \"UJMNXDCYBB\", \"XKSCGLSVUZ\", \"MHVRYUZJWL\", \"AIJRHVVDKP\", \"ZTCMALLRXB\",  #>     \"JOPGMOKVOM\", \"CMEKXFGTSR\", \"CJQEUMATTB\", \"ZPWKFFVOCB\", \"JHVIRHYUEP\",  #>     \"JFHAGKINER\", \"YDGABWKNRS\", \"EJSYIOEOJL\", \"ESYOZKOHCU\", \"WKXIHCQQBN\",  #>     \"NTSOYECHZQ\", \"MPSFHTGKEF\", \"KTANGMAQMT\", \"VKEOEUOTDQ\", \"ZTTKZEEJZP\",  #>     \"WLNMRBXMPC\", \"SPBEZTBJFS\", \"OPNAGRHLZM\", \"HGHMEUCTEX\", \"RHALOWGMGJ\",  #>     \"RBWJLMGEPF\", \"ISHHJNXLMR\", \"RQDKTNHSYQ\", \"ESYOZKOHCU\", \"WMVGSBQYPB\",  #>     \"GXQQOGSTOQ\", \"MPSFHTGKEF\", \"TLGDIASGEL\", \"QQIQBNKASY\", \"ZBXYPQEVLU\",  #>     \"QCCNNYIKTH\", \"NOTPDVRLPM\", \"ELMZBUCGXP\", \"QQIQBNKASY\", \"AIJRHVVDKP\",  #>     \"VBFGFOMUQJ\", \"CMEKXFGTSR\", \"QKSAXQEAIB\", \"GXQQOGSTOQ\", \"LHDUBEZXXM\",  #>     \"ZBXYPQEVLU\", \"HYHAFAFYEA\", \"SPBEZTBJFS\", \"CUYVXLQJIV\", \"CUYVXLQJIV\",  #>     \"ISHHJNXLMR\", \"BKYOKYIUGW\", \"ASCJFWFUGV\", \"AFUTZUEXVM\", \"JPARFIKTYL\",  #>     \"QMDWWKFVRU\", \"EOJBYFQEOY\", \"KBYFYYONYU\", \"TLGDIASGEL\", \"ENXVDYZEEW\",  #>     \"JFHAGKINER\", \"QBPRAWZTBF\", \"XKSCGLSVUZ\", \"MMCWEZDZSL\", \"HYHAFAFYEA\",  #>     \"AOKHTNTQJC\", \"ENXVDYZEEW\", \"XCEJMFPVDX\", \"CFSINPQYCO\", \"ELMZBUCGXP\",  #>     \"JRNMLJJSDP\", \"NTSOYECHZQ\", \"LEESGFRPHV\", \"ONTOHBVEQC\", \"LEESGFRPHV\",  #>     \"UZRCINDECG\", \"MGDZOPJAFG\", \"KBYFYYONYU\", \"TWBOLWJGAR\", \"EOJBYFQEOY\",  #>     \"WNATHOQPJS\", \"KIJPLWHVGS\", \"ZTTKZEEJZP\", \"AGJEXFMJAO\", \"GSNHQUBLXJ\",  #>     \"HPKSIGVDRL\", \"URBJONTBBW\", \"VBFGFOMUQJ\", \"QBPHMGOGFW\", \"FIXJLQEKCP\",  #>     \"ERVIHSPAYA\", \"FKTIIHAGSF\", \"ERVIHSPAYA\", \"HGHMEUCTEX\", \"ESYOZKOHCU\",  #>     \"VOXRCHMDIT\", \"MHVRYUZJWL\", \"WEDUDZADWG\", \"EJSYIOEOJL\", \"TLGDIASGEL\",  #>     \"CKNVKMZWDC\", \"HGHMEUCTEX\", \"KTANGMAQMT\", \"EAMRJPOWLU\", \"PALVVUCJBF\",  #>     \"CKNVKMZWDC\", \"FIXJLQEKCP\", \"FHCLEHLIXM\", \"TWBOLWJGAR\", \"MHVRYUZJWL\",  #>     \"LEESGFRPHV\", \"CMEKXFGTSR\", \"ESYOZKOHCU\", \"ISHHJNXLMR\", \"OPNAGRHLZM\",  #>     \"UZRCINDECG\", \"SPBEZTBJFS\", \"CFXONOGTQH\", \"TKKAYBAFGV\", \"AIJRHVVDKP\",  #>     \"ISWVRSKEUK\", \"CUYVXLQJIV\", \"LHDUBEZXXM\", \"UCYFOWDBOQ\", \"JVCERYCMOA\",  #>     \"BKYOKYIUGW\", \"AOKHTNTQJC\", \"TKKAYBAFGV\", \"CFSINPQYCO\", \"KBYFYYONYU\",  #>     \"JPARFIKTYL\", \"SVYPVLUGHE\", \"JOPGMOKVOM\", \"QMDWWKFVRU\", \"TKKAYBAFGV\",  #>     \"VBFGFOMUQJ\", \"ENXVDYZEEW\", \"RHALOWGMGJ\", \"JWFPSYZNLW\", \"RFAKZMSZMB\",  #>     \"OSNCJRVKET\", \"TWBOLWJGAR\", \"QBPHMGOGFW\", \"RHALOWGMGJ\", \"BKYOKYIUGW\",  #>     \"PHIZOLWIBS\", \"RQDKTNHSYQ\", \"ZPWKFFVOCB\", \"VKEOEUOTDQ\", \"WNATHOQPJS\",  #>     \"KIJPLWHVGS\", \"LGWJJITBKZ\", \"KBYFYYONYU\", \"SVYPVLUGHE\", \"EAMRJPOWLU\",  #>     \"XDEAUVDMFQ\", \"JWFPSYZNLW\", \"CYQGGUSNEK\", \"HYHAFAFYEA\", \"QMDWWKFVRU\",  #>     \"CJQEUMATTB\", \"NOTPDVRLPM\", \"UZRCINDECG\", \"ZTCMALLRXB\", \"CJQEUMATTB\",  #>     \"UJMNXDCYBB\", \"BZPWNEEBHR\", \"RMEYEXVXVX\", \"QCCNNYIKTH\", \"QMDWWKFVRU\",  #>     \"DRQRVFYUCX\", \"QKSAXQEAIB\", \"XSHYKGMBPQ\", \"HPKSIGVDRL\", \"YROTAZMWFI\",  #>     \"CFSINPQYCO\", \"LJJSFTJKBP\", \"RQDKTNHSYQ\", \"XKSCGLSVUZ\", \"RNAOTFIWTN\",  #>     \"ZBXYPQEVLU\", \"VKEOEUOTDQ\", \"WMVGSBQYPB\", \"IYNWQZVCCI\", \"KKKAFDRDCO\",  #>     \"EOJBYFQEOY\", \"DRQRVFYUCX\", \"ASCJFWFUGV\", \"ERVIHSPAYA\", \"HYHAFAFYEA\",  #>     \"ONTOHBVEQC\", \"EAMRJPOWLU\", \"RFAKZMSZMB\", \"RFAKZMSZMB\", \"CJQEUMATTB\",  #>     \"TLGDIASGEL\", \"UJMNXDCYBB\", \"WMVGSBQYPB\", \"QBPRAWZTBF\", \"SVBBYDPIOA\",  #>     \"RQDKTNHSYQ\", \"CKNVKMZWDC\", \"UNCDYWJXLO\", \"JFHAGKINER\", \"RHALOWGMGJ\",  #>     \"UZRCINDECG\", \"BBONKKTFNG\", \"PBLJMWGFTW\", \"CYQGGUSNEK\", \"ERVIHSPAYA\",  #>     \"RQDKTNHSYQ\", \"WEDUDZADWG\", \"JVKZPZVIIU\", \"HCEHZFVRBV\", \"BJUNWZLJYP\",  #>     \"OSNCJRVKET\", \"BBONKKTFNG\", \"FHCLEHLIXM\", \"AFUTZUEXVM\", \"NTSOYECHZQ\",  #>     \"CMEKXFGTSR\", \"JPARFIKTYL\", \"KBYFYYONYU\", \"SPBEZTBJFS\", \"LJJSFTJKBP\",  #>     \"LEESGFRPHV\", \"VKEOEUOTDQ\", \"AFUTZUEXVM\", \"CONXBVIQSU\", \"RQDKTNHSYQ\",  #>     \"EAMRJPOWLU\", \"KTANGMAQMT\", \"UOFFHQQLIR\", \"KIJPLWHVGS\", \"EZLGDZHKHT\",  #>     \"JWFPSYZNLW\", \"WEDUDZADWG\", \"RMEYEXVXVX\", \"ZBXYPQEVLU\", \"QEAYJDRZQO\",  #>     \"AFUTZUEXVM\", \"RQDKTNHSYQ\", \"HYUIWKYPXU\", \"PBLJMWGFTW\", \"RQDKTNHSYQ\",  #>     \"JOPGMOKVOM\", \"JOPGMOKVOM\", \"LGWJJITBKZ\", \"BKYOKYIUGW\", \"QCCNNYIKTH\",  #>     \"QMDWWKFVRU\", \"KBYFYYONYU\", \"AQEEZTRLKH\", \"NJLMIFXDEK\", \"ZBXYPQEVLU\",  #>     \"FKTIIHAGSF\", \"NJLMIFXDEK\", \"HCEHZFVRBV\", \"TKKAYBAFGV\", \"WNATHOQPJS\",  #>     \"QQIQBNKASY\", \"EOJBYFQEOY\", \"JRNMLJJSDP\", \"ZTTKZEEJZP\", \"EOJBYFQEOY\",  #>     \"ISHHJNXLMR\", \"AZVIVPYKND\", \"RMEYEXVXVX\", \"JSGBOZVHXC\", \"TKKAYBAFGV\",  #>     \"MGDZOPJAFG\", \"QBPRAWZTBF\", \"NJLMIFXDEK\", \"JHVIRHYUEP\", \"ESYOZKOHCU\",  #>     \"QMDWWKFVRU\", \"EZLGDZHKHT\", \"ISHHJNXLMR\", \"LEESGFRPHV\", \"WEDUDZADWG\",  #>     \"ACYJOPUKSD\", \"KIJPLWHVGS\", \"ZBXYPQEVLU\", \"PALVVUCJBF\", \"EAMRJPOWLU\",  #>     \"EOJBYFQEOY\", \"CFXONOGTQH\", \"QMDWWKFVRU\", \"JRNMLJJSDP\", \"JWFPSYZNLW\",  #>     \"QKSAXQEAIB\", \"SVBBYDPIOA\", \"LEESGFRPHV\", \"PHIZOLWIBS\", \"JOPGMOKVOM\",  #>     \"QQIQBNKASY\", \"RQDKTNHSYQ\", \"URBJONTBBW\", \"GRCMVPYLDK\", \"QKSAXQEAIB\",  #>     \"XDEAUVDMFQ\", \"MQKHZKWIKA\", \"JFHAGKINER\", \"ACYJOPUKSD\", \"AIJRHVVDKP\",  #>     \"ZPWKFFVOCB\", \"JVCERYCMOA\", \"GSHWBCJXVZ\", \"WLNMRBXMPC\", \"WEDUDZADWG\",  #>     \"ZTCMALLRXB\", \"ESYOZKOHCU\", \"CMEKXFGTSR\", \"SVYPVLUGHE\", \"RBWJLMGEPF\",  #>     \"XDEAUVDMFQ\", \"CONXBVIQSU\", \"UZRCINDECG\", \"KBYFYYONYU\", \"GRCMVPYLDK\",  #>     \"GXYQHIZVPD\", \"HGHMEUCTEX\", \"XDEAUVDMFQ\", \"ISHHJNXLMR\", \"CFSINPQYCO\",  #>     \"ONTOHBVEQC\", \"BKYOKYIUGW\", \"JHXSYICTMS\", \"OPNAGRHLZM\", \"NTSOYECHZQ\",  #>     \"JWFPSYZNLW\", \"ZTTKZEEJZP\", \"CALRWQEBFZ\", \"VKEOEUOTDQ\", \"JVCERYCMOA\",  #>     \"AOKHTNTQJC\", \"UCYFOWDBOQ\", \"VOXRCHMDIT\", \"EJSYIOEOJL\", \"RNAOTFIWTN\",  #>     \"CYQGGUSNEK\", \"RFAKZMSZMB\", \"QBPRAWZTBF\", \"ASCJFWFUGV\", \"HCEHZFVRBV\",  #>     \"JVCERYCMOA\", \"HPKSIGVDRL\", \"GKPLYRURBB\", \"CUYVXLQJIV\", \"ISHHJNXLMR\",  #>     \"AGJEXFMJAO\", \"XKSCGLSVUZ\", \"JVCERYCMOA\", \"RQDKTNHSYQ\", \"PKBCVRCMCS\",  #>     \"VKEOEUOTDQ\", \"GSNHQUBLXJ\", \"ZTTKZEEJZP\", \"CUYVXLQJIV\", \"ERVIHSPAYA\",  #>     \"EJSYIOEOJL\", \"JVCERYCMOA\", \"JPARFIKTYL\", \"MPSFHTGKEF\", \"ZPWKFFVOCB\",  #>     \"OPNAGRHLZM\", \"ONTOHBVEQC\", \"AIJRHVVDKP\", \"SVBBYDPIOA\", \"QBPRAWZTBF\",  #>     \"WEDUDZADWG\", \"NJLMIFXDEK\", \"HCEHZFVRBV\", \"MHVRYUZJWL\", \"JVKZPZVIIU\",  #>     \"UJMNXDCYBB\", \"CUYVXLQJIV\", \"WKXIHCQQBN\", \"TWBOLWJGAR\", \"OPNAGRHLZM\",  #>     \"WNATHOQPJS\", \"OPNAGRHLZM\", \"QCCNNYIKTH\", \"RHALOWGMGJ\", \"BJUNWZLJYP\",  #>     \"TBZWQOHERE\", \"CMEKXFGTSR\", \"YROTAZMWFI\", \"JOPGMOKVOM\", \"CKNVKMZWDC\",  #>     \"CJQEUMATTB\", \"EAMRJPOWLU\", \"HYHAFAFYEA\", \"ACYJOPUKSD\", \"TLGDIASGEL\",  #>     \"ISWVRSKEUK\", \"YFDQMQIVBM\", \"TXFSIPGCID\", \"WEDUDZADWG\", \"LHDUBEZXXM\",  #>     \"JVCERYCMOA\", \"ZTCMALLRXB\", \"WNATHOQPJS\", \"GSNHQUBLXJ\", \"AIJRHVVDKP\",  #>     \"GXYQHIZVPD\", \"UJMNXDCYBB\", \"QBPRAWZTBF\", \"CJQEUMATTB\", \"UFXSCLPLER\",  #>     \"YDGABWKNRS\", \"NOTPDVRLPM\", \"ERVIHSPAYA\", \"UOFFHQQLIR\", \"CFXONOGTQH\",  #>     \"GKPLYRURBB\", \"VKEOEUOTDQ\", \"ELMZBUCGXP\", \"HCEHZFVRBV\", \"KTANGMAQMT\",  #>     \"AGJEXFMJAO\", \"GKPLYRURBB\", \"RNAOTFIWTN\", \"CMEKXFGTSR\", \"RSSXENWCQU\",  #>     \"CJQEUMATTB\", \"GSNHQUBLXJ\", \"EOJBYFQEOY\", \"WNATHOQPJS\", \"XCEJMFPVDX\",  #>     \"ONTOHBVEQC\", \"HYUIWKYPXU\", \"JOPGMOKVOM\", \"CMEKXFGTSR\", \"PKTRNWCHPR\",  #>     \"KTANGMAQMT\", \"GRCMVPYLDK\", \"NOTPDVRLPM\", \"FHCLEHLIXM\", \"BHOFOGKCJA\",  #>     \"GKPLYRURBB\", \"LEESGFRPHV\", \"HLWNYXNVYM\", \"XCEJMFPVDX\", \"GXQQOGSTOQ\",  #>     \"CONXBVIQSU\", \"HYHAFAFYEA\", \"GKPLYRURBB\", \"QQIQBNKASY\", \"IIKTKPNNPT\",  #>     \"ONTOHBVEQC\", \"ZTTKZEEJZP\", \"QMDWWKFVRU\", \"VBFGFOMUQJ\", \"MHVRYUZJWL\",  #>     \"TWBOLWJGAR\", \"PBLJMWGFTW\", \"RHALOWGMGJ\", \"EAMRJPOWLU\", \"LEESGFRPHV\",  #>     \"CFSINPQYCO\", \"TXFSIPGCID\", \"PKBCVRCMCS\", \"MQKHZKWIKA\", \"VKEOEUOTDQ\",  #>     \"LGWJJITBKZ\", \"ESYOZKOHCU\", \"HYUIWKYPXU\", \"KTANGMAQMT\", \"GSHWBCJXVZ\",  #>     \"FKXBYBMICY\", \"XDEAUVDMFQ\", \"EZLGDZHKHT\", \"GRCMVPYLDK\", \"CALRWQEBFZ\",  #>     \"KBYFYYONYU\", \"ICUEBKDOGB\", \"MMCWEZDZSL\", \"JVKZPZVIIU\", \"WMVGSBQYPB\",  #>     \"ISWVRSKEUK\", \"SVBBYDPIOA\", \"GKPLYRURBB\", \"GXQQOGSTOQ\", \"KTANGMAQMT\",  #>     \"ERVIHSPAYA\", \"SPBEZTBJFS\", \"HYHAFAFYEA\", \"CKNVKMZWDC\", \"NJLMIFXDEK\",  #>     \"LEESGFRPHV\", \"RFAKZMSZMB\", \"CKNVKMZWDC\", \"MQKHZKWIKA\", \"GKPLYRURBB\",  #>     \"YFDQMQIVBM\", \"QBPHMGOGFW\", \"RQDKTNHSYQ\", \"MPSFHTGKEF\", \"CUYVXLQJIV\",  #>     \"MGDZOPJAFG\", \"FIXJLQEKCP\", \"ISHHJNXLMR\", \"LJJSFTJKBP\", \"HGHMEUCTEX\",  #>     \"RHALOWGMGJ\", \"TKKAYBAFGV\", \"FHCLEHLIXM\", \"ZBXYPQEVLU\", \"QBPHMGOGFW\",  #>     \"TLGDIASGEL\", \"VOXRCHMDIT\", \"ISHHJNXLMR\", \"UNCDYWJXLO\", \"MMCWEZDZSL\",  #>     \"WMVGSBQYPB\", \"YROTAZMWFI\", \"JFHAGKINER\", \"ZTTKZEEJZP\", \"JWFPSYZNLW\",  #>     \"AGJEXFMJAO\", \"QCCNNYIKTH\", \"JOPGMOKVOM\", \"AFUTZUEXVM\", \"CJQEUMATTB\",  #>     \"OSNCJRVKET\", \"VKEOEUOTDQ\", \"XKSCGLSVUZ\", \"BZPWNEEBHR\", \"UZRCINDECG\",  #>     \"TWBOLWJGAR\", \"OSNCJRVKET\", \"ENXVDYZEEW\", \"JFHAGKINER\", \"PKBCVRCMCS\",  #>     \"KIJPLWHVGS\", \"WNATHOQPJS\", \"SPBEZTBJFS\", \"UOFFHQQLIR\", \"KTANGMAQMT\",  #>     \"BHOFOGKCJA\", \"MHVRYUZJWL\", \"WNATHOQPJS\", \"WLNMRBXMPC\", \"LEESGFRPHV\",  #>     \"ERVIHSPAYA\", \"CUYVXLQJIV\", \"RFAKZMSZMB\", \"ZTCMALLRXB\", \"CYQGGUSNEK\",  #>     \"PALVVUCJBF\", \"HLWNYXNVYM\", \"ZBXYPQEVLU\", \"GRCMVPYLDK\", \"WEDUDZADWG\",  #>     \"YFDQMQIVBM\", \"UFXSCLPLER\", \"ENXVDYZEEW\", \"VOXRCHMDIT\", \"HGHMEUCTEX\",  #>     \"SVBBYDPIOA\", \"GXYQHIZVPD\", \"YROTAZMWFI\", \"TWBOLWJGAR\", \"CALRWQEBFZ\",  #>     \"CONXBVIQSU\", \"URBJONTBBW\", \"RFAKZMSZMB\", \"ESYOZKOHCU\", \"MCBXZBXGJN\",  #>     \"ACYJOPUKSD\", \"CONXBVIQSU\", \"EJSYIOEOJL\", \"BZPWNEEBHR\", \"EZLGDZHKHT\",  #>     \"ISHHJNXLMR\", \"GRCMVPYLDK\", \"VOXRCHMDIT\", \"PKTRNWCHPR\", \"ZTCMALLRXB\",  #>     \"TLGDIASGEL\", \"ZBXYPQEVLU\", \"UZRCINDECG\", \"RHALOWGMGJ\", \"JOPGMOKVOM\",  #>     \"WMVGSBQYPB\", \"FIXJLQEKCP\", \"MQKHZKWIKA\", \"UNCDYWJXLO\", \"IYNWQZVCCI\",  #>     \"SVYPVLUGHE\", \"MCBXZBXGJN\", \"YFDQMQIVBM\", \"RBWJLMGEPF\", \"HYUIWKYPXU\",  #>     \"RQDKTNHSYQ\", \"HCEHZFVRBV\", \"BKYOKYIUGW\", \"JVKZPZVIIU\", \"DRQRVFYUCX\",  #>     \"JHVIRHYUEP\", \"QMDWWKFVRU\", \"MCBXZBXGJN\", \"HGHMEUCTEX\", \"ACYJOPUKSD\",  #>     \"TWBOLWJGAR\", \"ICUEBKDOGB\", \"CFXONOGTQH\", \"KTANGMAQMT\", \"BKYOKYIUGW\",  #>     \"RFAKZMSZMB\", \"AGJEXFMJAO\", \"AFUTZUEXVM\", \"VKEOEUOTDQ\", \"KBYFYYONYU\",  #>     \"MGDZOPJAFG\", \"ISHHJNXLMR\", \"QBPRAWZTBF\", \"BBONKKTFNG\", \"GKPLYRURBB\",  #>     \"XSHYKGMBPQ\", \"JVCERYCMOA\", \"HGHMEUCTEX\", \"TKKAYBAFGV\", \"YROTAZMWFI\",  #>     \"ASCJFWFUGV\", \"MGDZOPJAFG\", \"AIJRHVVDKP\", \"RFAKZMSZMB\", \"TWBOLWJGAR\",  #>     \"FKXBYBMICY\", \"ISWVRSKEUK\", \"JSGBOZVHXC\", \"NJLMIFXDEK\", \"GXYQHIZVPD\",  #>     \"XKSCGLSVUZ\", \"IYNWQZVCCI\", \"HGHMEUCTEX\", \"ACYJOPUKSD\", \"ISHHJNXLMR\",  #>     \"UOFFHQQLIR\", \"NOTPDVRLPM\", \"KTANGMAQMT\", \"GRCMVPYLDK\", \"WKXIHCQQBN\",  #>     \"EAMRJPOWLU\", \"PHIZOLWIBS\", \"XKSCGLSVUZ\", \"NCXWRVCMVY\", \"RSSXENWCQU\",  #>     \"UJMNXDCYBB\", \"VBFGFOMUQJ\", \"AFUTZUEXVM\", \"ZTTKZEEJZP\", \"VKEOEUOTDQ\",  #>     \"ONTOHBVEQC\", \"FKXBYBMICY\", \"WNATHOQPJS\", \"JRNMLJJSDP\", \"RHALOWGMGJ\",  #>     \"XKSCGLSVUZ\", \"AIJRHVVDKP\", \"MPSFHTGKEF\", \"VBFGFOMUQJ\", \"BZPWNEEBHR\",  #>     \"CFSINPQYCO\", \"WLNMRBXMPC\", \"WMVGSBQYPB\", \"RFAKZMSZMB\", \"KKKAFDRDCO\",  #>     \"CYQGGUSNEK\", \"GKPLYRURBB\", \"JVCERYCMOA\", \"CALRWQEBFZ\", \"XKSCGLSVUZ\",  #>     \"GXQQOGSTOQ\", \"CFXONOGTQH\", \"JOPGMOKVOM\", \"JWFPSYZNLW\", \"KBYFYYONYU\",  #>     \"SVYPVLUGHE\", \"RMEYEXVXVX\", \"UZRCINDECG\", \"ICUEBKDOGB\", \"JWFPSYZNLW\",  #>     \"QCCNNYIKTH\", \"VKEOEUOTDQ\", \"GKPLYRURBB\", \"JPARFIKTYL\", \"LEESGFRPHV\",  #>     \"YFDQMQIVBM\", \"ZTCMALLRXB\", \"JSGBOZVHXC\", \"GXQQOGSTOQ\", \"WNATHOQPJS\",  #>     \"EOJBYFQEOY\", \"HLWNYXNVYM\", \"QMDWWKFVRU\", \"GKPLYRURBB\", \"EOJBYFQEOY\",  #>     \"JFHAGKINER\", \"CFXONOGTQH\", \"KTANGMAQMT\", \"SPBEZTBJFS\", \"SVYPVLUGHE\",  #>     \"AIJRHVVDKP\", \"SPBEZTBJFS\", \"BKYOKYIUGW\", \"RQDKTNHSYQ\", \"ACYJOPUKSD\",  #>     \"MCBXZBXGJN\", \"HYUIWKYPXU\", \"JSGBOZVHXC\", \"VKEOEUOTDQ\", \"CFXONOGTQH\",  #>     \"JHXSYICTMS\", \"HCEHZFVRBV\", \"ESYOZKOHCU\", \"ACYJOPUKSD\", \"LJJSFTJKBP\",  #>     \"BJUNWZLJYP\", \"RHALOWGMGJ\", \"CMEKXFGTSR\", \"RSSXENWCQU\", \"MGDZOPJAFG\",  #>     \"JVCERYCMOA\", \"JPARFIKTYL\", \"GSNHQUBLXJ\", \"UOFFHQQLIR\", \"GRCMVPYLDK\",  #>     \"CKNVKMZWDC\", \"ESYOZKOHCU\", \"ENXVDYZEEW\", \"JWFPSYZNLW\", \"JWFPSYZNLW\",  #>     \"ESYOZKOHCU\", \"GSNHQUBLXJ\", \"QBPRAWZTBF\", \"ELMZBUCGXP\", \"SVYPVLUGHE\",  #>     \"JOPGMOKVOM\", \"JRNMLJJSDP\", \"BKYOKYIUGW\", \"HGHMEUCTEX\", \"GKPLYRURBB\",  #>     \"AGJEXFMJAO\", \"RSSXENWCQU\", \"JSGBOZVHXC\", \"UCYFOWDBOQ\", \"ZBXYPQEVLU\",  #>     \"PHIZOLWIBS\", \"AGJEXFMJAO\", \"UOFFHQQLIR\", \"WMVGSBQYPB\", \"JVCERYCMOA\",  #>     \"TXFSIPGCID\", \"CFSINPQYCO\", \"KBYFYYONYU\", \"CJQEUMATTB\", \"HGHMEUCTEX\",  #>     \"RMEYEXVXVX\", \"BZPWNEEBHR\", \"XKSCGLSVUZ\", \"WMVGSBQYPB\", \"JVCERYCMOA\",  #>     \"AIJRHVVDKP\", \"XDEAUVDMFQ\", \"MHVRYUZJWL\", \"UJMNXDCYBB\", \"WEDUDZADWG\",  #>     \"JHXSYICTMS\", \"EOJBYFQEOY\", \"UOFFHQQLIR\", \"VOXRCHMDIT\", \"MPSFHTGKEF\",  #>     \"ISHHJNXLMR\", \"GRCMVPYLDK\", \"HPKSIGVDRL\", \"ZTTKZEEJZP\", \"RMEYEXVXVX\",  #>     \"RMEYEXVXVX\", \"JWFPSYZNLW\", \"QMDWWKFVRU\", \"QQIQBNKASY\", \"JVKZPZVIIU\",  #>     \"FIXJLQEKCP\", \"ZTTKZEEJZP\", \"RQDKTNHSYQ\", \"JHXSYICTMS\", \"TKKAYBAFGV\",  #>     \"CYQGGUSNEK\", \"FHCLEHLIXM\", \"PKTRNWCHPR\", \"XSHYKGMBPQ\", \"LHDUBEZXXM\",  #>     \"TWBOLWJGAR\", \"GKPLYRURBB\", \"XKSCGLSVUZ\", \"QBPHMGOGFW\", \"KKKAFDRDCO\",  #>     \"KBYFYYONYU\", \"CKNVKMZWDC\", \"FKTIIHAGSF\", \"WEDUDZADWG\", \"QMDWWKFVRU\",  #>     \"IIKTKPNNPT\", \"KTANGMAQMT\", \"UJMNXDCYBB\", \"YFDQMQIVBM\", \"CUYVXLQJIV\",  #>     \"NJLMIFXDEK\", \"FKTIIHAGSF\", \"CFXONOGTQH\", \"ZPWKFFVOCB\", \"RNAOTFIWTN\",  #>     \"ZPWKFFVOCB\", \"RNAOTFIWTN\", \"JFHAGKINER\", \"PKBCVRCMCS\", \"ASCJFWFUGV\",  #>     \"LJJSFTJKBP\", \"HGHMEUCTEX\", \"WEDUDZADWG\", \"JOPGMOKVOM\", \"BZPWNEEBHR\",  #>     \"ERVIHSPAYA\", \"RMEYEXVXVX\", \"JSGBOZVHXC\", \"XDEAUVDMFQ\", \"VOXRCHMDIT\",  #>     \"MHVRYUZJWL\", \"JHXSYICTMS\", \"RNAOTFIWTN\", \"ENXVDYZEEW\", \"WNATHOQPJS\",  #>     \"XSHYKGMBPQ\", \"TKKAYBAFGV\", \"PALVVUCJBF\", \"EZLGDZHKHT\", \"LHDUBEZXXM\",  #>     \"XKSCGLSVUZ\", \"CALRWQEBFZ\", \"TLGDIASGEL\", \"CMEKXFGTSR\", \"TWBOLWJGAR\",  #>     \"IIKTKPNNPT\", \"XKSCGLSVUZ\", \"PHIZOLWIBS\", \"EZLGDZHKHT\", \"WEDUDZADWG\",  #>     \"CONXBVIQSU\", \"DRQRVFYUCX\", \"HGHMEUCTEX\", \"YDGABWKNRS\", \"PKBCVRCMCS\",  #>     \"AZVIVPYKND\", \"QBPHMGOGFW\", \"EKNGZSKPGF\", \"KTANGMAQMT\", \"TLGDIASGEL\",  #>     \"ERVIHSPAYA\", \"CMEKXFGTSR\", \"ELMZBUCGXP\", \"RFAKZMSZMB\", \"NCXWRVCMVY\",  #>     \"ISHHJNXLMR\", \"BZPWNEEBHR\", \"GSNHQUBLXJ\", \"VKEOEUOTDQ\", \"HYUIWKYPXU\",  #>     \"CFXONOGTQH\", \"JVKZPZVIIU\", \"VKEOEUOTDQ\", \"ZPWKFFVOCB\", \"JFHAGKINER\",  #>     \"QCCNNYIKTH\", \"FHCLEHLIXM\", \"JOPGMOKVOM\", \"LGWJJITBKZ\", \"BHOFOGKCJA\",  #>     \"BBONKKTFNG\", \"FIXJLQEKCP\", \"HPKSIGVDRL\", \"HCEHZFVRBV\", \"BZPWNEEBHR\",  #>     \"UZRCINDECG\", \"ESYOZKOHCU\", \"JOPGMOKVOM\", \"ZTTKZEEJZP\", \"ZTCMALLRXB\",  #>     \"CMEKXFGTSR\", \"VOXRCHMDIT\", \"YFDQMQIVBM\", \"JVKZPZVIIU\", \"TBZWQOHERE\",  #>     \"GSHWBCJXVZ\", \"MQKHZKWIKA\", \"XSHYKGMBPQ\", \"ZTCMALLRXB\", \"HYUIWKYPXU\",  #>     \"CONXBVIQSU\", \"FIXJLQEKCP\", \"RNAOTFIWTN\", \"YDGABWKNRS\", \"VKEOEUOTDQ\",  #>     \"HPKSIGVDRL\", \"KTANGMAQMT\", \"JSGBOZVHXC\", \"OPNAGRHLZM\", \"HCEHZFVRBV\",  #>     \"EJSYIOEOJL\", \"RHALOWGMGJ\", \"MCBXZBXGJN\", \"KTANGMAQMT\", \"ICUEBKDOGB\",  #>     \"PKBCVRCMCS\", \"UOFFHQQLIR\", \"ENXVDYZEEW\", \"RSSXENWCQU\", \"LJJSFTJKBP\",  #>     \"GSHWBCJXVZ\", \"AHOMYEGIBP\", \"UJMNXDCYBB\", \"WEDUDZADWG\", \"VKEOEUOTDQ\",  #>     \"CKNVKMZWDC\", \"JVKZPZVIIU\", \"EJSYIOEOJL\", \"UOFFHQQLIR\", \"AGJEXFMJAO\",  #>     \"LJJSFTJKBP\", \"WEDUDZADWG\", \"JVCERYCMOA\", \"YROTAZMWFI\", \"JHVIRHYUEP\",  #>     \"CMEKXFGTSR\", \"MMCWEZDZSL\", \"ONTOHBVEQC\", \"GKPLYRURBB\", \"MPSFHTGKEF\",  #>     \"JWFPSYZNLW\", \"AZVIVPYKND\", \"AOKHTNTQJC\", \"HCEHZFVRBV\", \"ACYJOPUKSD\",  #>     \"JVCERYCMOA\", \"BKYOKYIUGW\", \"QKSAXQEAIB\", \"LJJSFTJKBP\", \"PHIZOLWIBS\",  #>     \"MGDZOPJAFG\", \"ZTCMALLRXB\", \"JVKZPZVIIU\", \"FKXBYBMICY\", \"AGJEXFMJAO\",  #>     \"GXQQOGSTOQ\", \"JHVIRHYUEP\", \"EZLGDZHKHT\", \"ZBXYPQEVLU\", \"QBPRAWZTBF\",  #>     \"AFUTZUEXVM\", \"JVKZPZVIIU\", \"ZTCMALLRXB\", \"JVCERYCMOA\", \"CJQEUMATTB\",  #>     \"GKPLYRURBB\", \"XKSCGLSVUZ\", \"JFHAGKINER\", \"ZBXYPQEVLU\", \"SPBEZTBJFS\",  #>     \"AHOMYEGIBP\", \"RBWJLMGEPF\", \"IYNWQZVCCI\", \"TLGDIASGEL\", \"ONTOHBVEQC\",  #>     \"YDGABWKNRS\", \"KKKAFDRDCO\", \"KTANGMAQMT\", \"PKBCVRCMCS\", \"BBONKKTFNG\",  #>     \"FIXJLQEKCP\", \"XKSCGLSVUZ\", \"HPKSIGVDRL\", \"SVBBYDPIOA\", \"EAMRJPOWLU\",  #>     \"CMEKXFGTSR\", \"ASCJFWFUGV\", \"VKEOEUOTDQ\", \"WKXIHCQQBN\", \"JFHAGKINER\",  #>     \"CALRWQEBFZ\", \"WEDUDZADWG\", \"CFXONOGTQH\", \"KIJPLWHVGS\", \"AIJRHVVDKP\",  #>     \"QKSAXQEAIB\", \"ESYOZKOHCU\", \"GKPLYRURBB\", \"EAMRJPOWLU\", \"WNATHOQPJS\",  #>     \"AGJEXFMJAO\", \"PKBCVRCMCS\", \"RNAOTFIWTN\", \"WMVGSBQYPB\", \"CALRWQEBFZ\",  #>     \"TLGDIASGEL\", \"QBPRAWZTBF\", \"WLNMRBXMPC\", \"IYNWQZVCCI\", \"MHVRYUZJWL\",  #>     \"GRCMVPYLDK\", \"LGWJJITBKZ\", \"JWFPSYZNLW\", \"LHDUBEZXXM\", \"AFUTZUEXVM\",  #>     \"CJQEUMATTB\", \"AZVIVPYKND\", \"CUYVXLQJIV\", \"SPBEZTBJFS\", \"MCBXZBXGJN\",  #>     \"UFXSCLPLER\", \"ESYOZKOHCU\", \"ONTOHBVEQC\", \"QBPRAWZTBF\", \"CYQGGUSNEK\",  #>     \"OSNCJRVKET\", \"QBPRAWZTBF\", \"CUYVXLQJIV\", \"ERVIHSPAYA\", \"ZBXYPQEVLU\",  #>     \"ISWVRSKEUK\", \"UFXSCLPLER\", \"WEDUDZADWG\", \"YFDQMQIVBM\", \"BZPWNEEBHR\",  #>     \"RQDKTNHSYQ\", \"UFXSCLPLER\", \"TLGDIASGEL\", \"KBYFYYONYU\", \"YROTAZMWFI\",  #>     \"QCCNNYIKTH\", \"GXQQOGSTOQ\", \"YROTAZMWFI\", \"AGJEXFMJAO\", \"XKSCGLSVUZ\",  #>     \"GRCMVPYLDK\", \"SPBEZTBJFS\", \"RMEYEXVXVX\", \"ESYOZKOHCU\", \"EOJBYFQEOY\",  #>     \"GXYQHIZVPD\", \"ESYOZKOHCU\", \"FIXJLQEKCP\", \"WNATHOQPJS\", \"OPNAGRHLZM\",  #>     \"CJQEUMATTB\", \"RNAOTFIWTN\", \"JRNMLJJSDP\", \"FKTIIHAGSF\", \"CFSINPQYCO\",  #>     \"RMEYEXVXVX\", \"UOFFHQQLIR\", \"KIJPLWHVGS\", \"RFAKZMSZMB\", \"ICUEBKDOGB\",  #>     \"ISHHJNXLMR\", \"RBWJLMGEPF\", \"CMEKXFGTSR\", \"ISWVRSKEUK\", \"GSNHQUBLXJ\",  #>     \"KIJPLWHVGS\", \"GKPLYRURBB\", \"ISHHJNXLMR\", \"JWFPSYZNLW\", \"AHOMYEGIBP\",  #>     \"ONTOHBVEQC\", \"MPSFHTGKEF\", \"NTSOYECHZQ\", \"QBPRAWZTBF\", \"VKEOEUOTDQ\",  #>     \"XKSCGLSVUZ\", \"SVYPVLUGHE\", \"CFSINPQYCO\", \"CMEKXFGTSR\", \"UJMNXDCYBB\",  #>     \"KBYFYYONYU\", \"KTANGMAQMT\", \"LJJSFTJKBP\", \"GSNHQUBLXJ\", \"VOXRCHMDIT\",  #>     \"RQDKTNHSYQ\", \"QBPRAWZTBF\", \"JHXSYICTMS\", \"RNAOTFIWTN\", \"TBZWQOHERE\",  #>     \"URBJONTBBW\", \"UOFFHQQLIR\", \"KIJPLWHVGS\", \"LHDUBEZXXM\", \"CJQEUMATTB\",  #>     \"ESYOZKOHCU\", \"YDGABWKNRS\", \"JFHAGKINER\", \"XKSCGLSVUZ\", \"HGHMEUCTEX\",  #>     \"JOPGMOKVOM\", \"AGJEXFMJAO\", \"WNATHOQPJS\", \"YDGABWKNRS\", \"BHOFOGKCJA\",  #>     \"RMEYEXVXVX\", \"JOPGMOKVOM\", \"PKBCVRCMCS\", \"RBWJLMGEPF\", \"FIXJLQEKCP\",  #>     \"AOKHTNTQJC\", \"QMDWWKFVRU\", \"IYNWQZVCCI\", \"RNAOTFIWTN\", \"JVKZPZVIIU\",  #>     \"HYUIWKYPXU\", \"VKEOEUOTDQ\", \"CUYVXLQJIV\", \"WMVGSBQYPB\", \"CYQGGUSNEK\",  #>     \"BBONKKTFNG\", \"KBYFYYONYU\", \"RHALOWGMGJ\", \"BBONKKTFNG\", \"CUYVXLQJIV\",  #>     \"GSHWBCJXVZ\", \"GXQQOGSTOQ\", \"RHALOWGMGJ\", \"AFUTZUEXVM\", \"GSHWBCJXVZ\",  #>     \"JOPGMOKVOM\", \"CJQEUMATTB\", \"YFDQMQIVBM\", \"GRCMVPYLDK\", \"GSNHQUBLXJ\",  #>     \"AQEEZTRLKH\", \"MHVRYUZJWL\", \"AHOMYEGIBP\", \"BKYOKYIUGW\", \"CJQEUMATTB\",  #>     \"XCEJMFPVDX\", \"HLWNYXNVYM\", \"ESYOZKOHCU\", \"CFXONOGTQH\", \"RFAKZMSZMB\",  #>     \"EAMRJPOWLU\", \"CFXONOGTQH\", \"UZRCINDECG\", \"WMVGSBQYPB\", \"OSNCJRVKET\",  #>     \"AQEEZTRLKH\", \"UJMNXDCYBB\", \"VOXRCHMDIT\", \"ISHHJNXLMR\", \"ZTCMALLRXB\",  #>     \"NOTPDVRLPM\", \"ENXVDYZEEW\", \"MHVRYUZJWL\", \"ZBXYPQEVLU\", \"EZLGDZHKHT\",  #>     \"WEDUDZADWG\", \"CFSINPQYCO\", \"FIXJLQEKCP\", \"OPNAGRHLZM\", \"ACYJOPUKSD\",  #>     \"QBPHMGOGFW\", \"SPBEZTBJFS\", \"JVKZPZVIIU\", \"JPARFIKTYL\", \"WEDUDZADWG\",  #>     \"RBWJLMGEPF\", \"JPARFIKTYL\", \"UJMNXDCYBB\", \"URBJONTBBW\", \"QBPHMGOGFW\",  #>     \"XKSCGLSVUZ\", \"UZRCINDECG\", \"FHCLEHLIXM\", \"HLWNYXNVYM\", \"ISWVRSKEUK\",  #>     \"ZTCMALLRXB\", \"BJUNWZLJYP\", \"KBYFYYONYU\", \"FKTIIHAGSF\", \"BHOFOGKCJA\",  #>     \"AIJRHVVDKP\", \"ZTTKZEEJZP\", \"UJMNXDCYBB\", \"JSGBOZVHXC\", \"QQIQBNKASY\",  #>     \"CUYVXLQJIV\", \"MGDZOPJAFG\", \"XSHYKGMBPQ\", \"JSGBOZVHXC\", \"PKBCVRCMCS\",  #>     \"TKKAYBAFGV\", \"EOJBYFQEOY\", \"YROTAZMWFI\", \"NOTPDVRLPM\", \"IIKTKPNNPT\",  #>     \"UZRCINDECG\", \"ESYOZKOHCU\", \"BKYOKYIUGW\", \"NOTPDVRLPM\", \"IYNWQZVCCI\",  #>     \"ACYJOPUKSD\", \"GKPLYRURBB\", \"NOTPDVRLPM\", \"ONTOHBVEQC\", \"IIKTKPNNPT\",  #>     \"HPKSIGVDRL\", \"YFDQMQIVBM\", \"WMVGSBQYPB\", \"XDEAUVDMFQ\", \"ERVIHSPAYA\",  #>     \"ZPWKFFVOCB\", \"QMDWWKFVRU\", \"UJMNXDCYBB\", \"AOKHTNTQJC\", \"TWBOLWJGAR\",  #>     \"TLGDIASGEL\", \"JVCERYCMOA\", \"JPARFIKTYL\", \"CYQGGUSNEK\", \"TWBOLWJGAR\",  #>     \"GXYQHIZVPD\", \"HGHMEUCTEX\", \"WNATHOQPJS\", \"GKPLYRURBB\", \"CUYVXLQJIV\",  #>     \"XDEAUVDMFQ\", \"NOTPDVRLPM\", \"JHXSYICTMS\", \"NTSOYECHZQ\", \"MGDZOPJAFG\",  #>     \"SVBBYDPIOA\", \"QBPRAWZTBF\", \"MHVRYUZJWL\", \"NOTPDVRLPM\", \"XKSCGLSVUZ\",  #>     \"JFHAGKINER\", \"EKNGZSKPGF\", \"XKSCGLSVUZ\", \"UJMNXDCYBB\", \"YDGABWKNRS\",  #>     \"JHVIRHYUEP\", \"VKEOEUOTDQ\", \"MGDZOPJAFG\", \"HPKSIGVDRL\", \"EAMRJPOWLU\",  #>     \"UJMNXDCYBB\", \"JSGBOZVHXC\", \"AIJRHVVDKP\", \"NCXWRVCMVY\", \"OPNAGRHLZM\",  #>     \"GKPLYRURBB\", \"OSNCJRVKET\", \"AQEEZTRLKH\", \"JPARFIKTYL\", \"SVYPVLUGHE\",  #>     \"GKPLYRURBB\", \"ERVIHSPAYA\", \"HYHAFAFYEA\", \"BBONKKTFNG\", \"JVKZPZVIIU\",  #>     \"IIKTKPNNPT\", \"CUYVXLQJIV\", \"ZBXYPQEVLU\", \"JVCERYCMOA\", \"LEESGFRPHV\",  #>     \"EOJBYFQEOY\", \"WLNMRBXMPC\", \"MCBXZBXGJN\", \"MPSFHTGKEF\", \"CONXBVIQSU\",  #>     \"HCEHZFVRBV\", \"MPSFHTGKEF\", \"JOPGMOKVOM\", \"GSHWBCJXVZ\", \"ZTCMALLRXB\",  #>     \"RNAOTFIWTN\", \"QQIQBNKASY\", \"FKTIIHAGSF\", \"XKSCGLSVUZ\", \"QBPHMGOGFW\",  #>     \"XKSCGLSVUZ\", \"CFSINPQYCO\", \"CUYVXLQJIV\", \"KBYFYYONYU\", \"TLGDIASGEL\",  #>     \"ONTOHBVEQC\", \"WLNMRBXMPC\", \"CUYVXLQJIV\", \"TWBOLWJGAR\", \"JPARFIKTYL\",  #>     \"WEDUDZADWG\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\", \"PKBCVRCMCS\", \"OPNAGRHLZM\",  #>     \"PBLJMWGFTW\", \"HLWNYXNVYM\", \"WEDUDZADWG\", \"CFXONOGTQH\", \"JSGBOZVHXC\",  #>     \"KBYFYYONYU\", \"PKBCVRCMCS\", \"CALRWQEBFZ\", \"ERVIHSPAYA\", \"CJQEUMATTB\",  #>     \"ZTTKZEEJZP\", \"NOTPDVRLPM\", \"ISHHJNXLMR\", \"LGWJJITBKZ\", \"IIKTKPNNPT\",  #>     \"MMCWEZDZSL\", \"KKKAFDRDCO\", \"CALRWQEBFZ\", \"GSHWBCJXVZ\", \"CALRWQEBFZ\",  #>     \"CKNVKMZWDC\", \"TLGDIASGEL\", \"ONTOHBVEQC\", \"CFSINPQYCO\", \"CFSINPQYCO\",  #>     \"RBWJLMGEPF\", \"ONTOHBVEQC\", \"MQKHZKWIKA\", \"WEDUDZADWG\", \"YDGABWKNRS\",  #>     \"AZVIVPYKND\", \"JRNMLJJSDP\", \"UNCDYWJXLO\", \"ERVIHSPAYA\", \"AZVIVPYKND\",  #>     \"VKEOEUOTDQ\", \"EWTGOBRLKP\", \"GSNHQUBLXJ\", \"RQDKTNHSYQ\", \"QKSAXQEAIB\",  #>     \"RHALOWGMGJ\", \"LJJSFTJKBP\", \"XKSCGLSVUZ\", \"UJMNXDCYBB\", \"CYQGGUSNEK\",  #>     \"WKXIHCQQBN\", \"FHCLEHLIXM\", \"FIXJLQEKCP\", \"RMEYEXVXVX\", \"JRNMLJJSDP\",  #>     \"QCCNNYIKTH\", \"RFAKZMSZMB\", \"URBJONTBBW\", \"GSNHQUBLXJ\", \"UZRCINDECG\",  #>     \"ESYOZKOHCU\", \"ZPWKFFVOCB\", \"GRCMVPYLDK\", \"CFSINPQYCO\", \"GRCMVPYLDK\",  #>     \"TLGDIASGEL\", \"VKEOEUOTDQ\", \"ENXVDYZEEW\", \"ONTOHBVEQC\", \"JFHAGKINER\",  #>     \"TXFSIPGCID\", \"JSGBOZVHXC\", \"MHVRYUZJWL\", \"NTSOYECHZQ\", \"IIKTKPNNPT\",  #>     \"YFDQMQIVBM\", \"FHCLEHLIXM\", \"XDEAUVDMFQ\", \"RFAKZMSZMB\", \"WKXIHCQQBN\",  #>     \"RFAKZMSZMB\", \"MQKHZKWIKA\", \"FKXBYBMICY\", \"ZTCMALLRXB\", \"RHALOWGMGJ\",  #>     \"YFDQMQIVBM\", \"VOXRCHMDIT\", \"AIJRHVVDKP\", \"HYUIWKYPXU\", \"UZRCINDECG\",  #>     \"LHDUBEZXXM\", \"EOJBYFQEOY\", \"LEESGFRPHV\", \"TWBOLWJGAR\", \"JVKZPZVIIU\",  #>     \"CMEKXFGTSR\", \"ENXVDYZEEW\", \"ZBXYPQEVLU\", \"CFXONOGTQH\", \"YDGABWKNRS\",  #>     \"JOPGMOKVOM\", \"RFAKZMSZMB\", \"JWFPSYZNLW\", \"EZLGDZHKHT\", \"SVBBYDPIOA\",  #>     \"SPBEZTBJFS\", \"PKBCVRCMCS\", \"IYNWQZVCCI\", \"ICUEBKDOGB\", \"PHIZOLWIBS\",  #>     \"GSNHQUBLXJ\", \"JRNMLJJSDP\", \"RFAKZMSZMB\", \"GXQQOGSTOQ\", \"RHALOWGMGJ\",  #>     \"PKTRNWCHPR\", \"VBFGFOMUQJ\", \"ELMZBUCGXP\", \"CFXONOGTQH\", \"WLNMRBXMPC\",  #>     \"VKEOEUOTDQ\", \"MHVRYUZJWL\", \"QCCNNYIKTH\", \"FKTIIHAGSF\", \"ACYJOPUKSD\",  #>     \"ENXVDYZEEW\", \"JOPGMOKVOM\", \"JPARFIKTYL\", \"ASCJFWFUGV\", \"JPARFIKTYL\",  #>     \"XDEAUVDMFQ\", \"YFDQMQIVBM\", \"NJLMIFXDEK\", \"KBYFYYONYU\", \"WNATHOQPJS\",  #>     \"JSGBOZVHXC\", \"CMEKXFGTSR\", \"FKXBYBMICY\", \"RSSXENWCQU\", \"ENXVDYZEEW\",  #>     \"HCEHZFVRBV\", \"OSNCJRVKET\", \"FHCLEHLIXM\", \"ZTCMALLRXB\", \"FHCLEHLIXM\",  #>     \"ZTTKZEEJZP\", \"CALRWQEBFZ\", \"QMDWWKFVRU\", \"EOJBYFQEOY\", \"BBONKKTFNG\",  #>     \"KTANGMAQMT\", \"CALRWQEBFZ\", \"NCXWRVCMVY\", \"JHVIRHYUEP\", \"URBJONTBBW\",  #>     \"ESYOZKOHCU\", \"ESYOZKOHCU\", \"OPNAGRHLZM\", \"BBONKKTFNG\", \"UJMNXDCYBB\",  #>     \"RQDKTNHSYQ\", \"OPNAGRHLZM\", \"NOTPDVRLPM\", \"FIXJLQEKCP\", \"RQDKTNHSYQ\",  #>     \"QBPHMGOGFW\", \"LEESGFRPHV\", \"EZLGDZHKHT\", \"ACYJOPUKSD\", \"JVCERYCMOA\",  #>     \"SPBEZTBJFS\", \"HGHMEUCTEX\", \"RMEYEXVXVX\", \"XSHYKGMBPQ\", \"ESYOZKOHCU\",  #>     \"RSSXENWCQU\", \"CALRWQEBFZ\", \"RNAOTFIWTN\", \"EWTGOBRLKP\", \"KBYFYYONYU\",  #>     \"JVCERYCMOA\", \"BKYOKYIUGW\", \"CYQGGUSNEK\", \"CMEKXFGTSR\", \"JSGBOZVHXC\",  #>     \"CJQEUMATTB\", \"YROTAZMWFI\", \"JFHAGKINER\", \"HGHMEUCTEX\", \"FIXJLQEKCP\",  #>     \"AGJEXFMJAO\", \"CYQGGUSNEK\", \"CYQGGUSNEK\", \"QMDWWKFVRU\", \"AZVIVPYKND\",  #>     \"BBONKKTFNG\", \"URBJONTBBW\", \"VKEOEUOTDQ\", \"LJJSFTJKBP\", \"ONTOHBVEQC\",  #>     \"HLWNYXNVYM\", \"JHVIRHYUEP\", \"JPARFIKTYL\", \"EKNGZSKPGF\", \"QQIQBNKASY\",  #>     \"NTSOYECHZQ\", \"CJQEUMATTB\", \"NOTPDVRLPM\", \"EAMRJPOWLU\", \"QBPHMGOGFW\",  #>     \"UOFFHQQLIR\", \"MPSFHTGKEF\", \"TBZWQOHERE\", \"VKEOEUOTDQ\", \"QBPRAWZTBF\",  #>     \"WEDUDZADWG\", \"CKNVKMZWDC\", \"BHOFOGKCJA\", \"CFXONOGTQH\", \"LGWJJITBKZ\",  #>     \"RHALOWGMGJ\", \"ENXVDYZEEW\", \"AIJRHVVDKP\", \"FKTIIHAGSF\", \"ERVIHSPAYA\",  #>     \"AZVIVPYKND\", \"TBZWQOHERE\", \"FIXJLQEKCP\", \"NOTPDVRLPM\", \"UOFFHQQLIR\",  #>     \"OSNCJRVKET\", \"OPNAGRHLZM\", \"ELMZBUCGXP\", \"CALRWQEBFZ\", \"JWFPSYZNLW\",  #>     \"GKPLYRURBB\", \"HPKSIGVDRL\", \"RFAKZMSZMB\", \"GRCMVPYLDK\", \"XDEAUVDMFQ\",  #>     \"FHCLEHLIXM\", \"NTSOYECHZQ\", \"KTANGMAQMT\", \"HGHMEUCTEX\", \"QEAYJDRZQO\",  #>     \"ACYJOPUKSD\", \"NOTPDVRLPM\", \"TWBOLWJGAR\", \"ZBXYPQEVLU\", \"PKTRNWCHPR\",  #>     \"JWFPSYZNLW\", \"HGHMEUCTEX\", \"SPBEZTBJFS\", \"AFUTZUEXVM\", \"BHOFOGKCJA\",  #>     \"XSHYKGMBPQ\", \"MHVRYUZJWL\", \"EJSYIOEOJL\", \"QQIQBNKASY\", \"MPSFHTGKEF\",  #>     \"RQDKTNHSYQ\", \"TBZWQOHERE\", \"FIXJLQEKCP\", \"CALRWQEBFZ\", \"NOTPDVRLPM\",  #>     \"PKBCVRCMCS\", \"KTANGMAQMT\", \"AIJRHVVDKP\", \"JOPGMOKVOM\", \"MPSFHTGKEF\",  #>     \"YFDQMQIVBM\", \"QBPHMGOGFW\", \"LGWJJITBKZ\", \"OPNAGRHLZM\", \"ACYJOPUKSD\",  #>     \"ONTOHBVEQC\", \"JOPGMOKVOM\", \"FKXBYBMICY\", \"ELMZBUCGXP\", \"ZPWKFFVOCB\",  #>     \"FIXJLQEKCP\", \"CJQEUMATTB\", \"CFSINPQYCO\", \"JVKZPZVIIU\", \"QBPHMGOGFW\",  #>     \"CALRWQEBFZ\", \"EJSYIOEOJL\", \"ZBXYPQEVLU\", \"UCYFOWDBOQ\", \"JFHAGKINER\",  #>     \"KBYFYYONYU\", \"VOXRCHMDIT\", \"GXQQOGSTOQ\", \"JWFPSYZNLW\", \"XSHYKGMBPQ\",  #>     \"HYUIWKYPXU\", \"BZPWNEEBHR\", \"ICUEBKDOGB\", \"TWBOLWJGAR\", \"WNATHOQPJS\",  #>     \"QQIQBNKASY\", \"SVYPVLUGHE\", \"DRQRVFYUCX\", \"BJUNWZLJYP\", \"YFDQMQIVBM\",  #>     \"MGDZOPJAFG\", \"PHIZOLWIBS\", \"YROTAZMWFI\", \"GRCMVPYLDK\", \"CUYVXLQJIV\",  #>     \"GKPLYRURBB\", \"YROTAZMWFI\", \"EAMRJPOWLU\", \"BKYOKYIUGW\", \"UJMNXDCYBB\",  #>     \"ELMZBUCGXP\", \"JRNMLJJSDP\", \"MGDZOPJAFG\", \"BKYOKYIUGW\", \"QBPRAWZTBF\",  #>     \"MPSFHTGKEF\", \"NOTPDVRLPM\", \"HPKSIGVDRL\", \"WLNMRBXMPC\", \"PKTRNWCHPR\",  #>     \"HCEHZFVRBV\", \"GSNHQUBLXJ\", \"UJMNXDCYBB\", \"JPARFIKTYL\", \"WKXIHCQQBN\",  #>     \"HYUIWKYPXU\", \"WMVGSBQYPB\", \"HLWNYXNVYM\", \"KBYFYYONYU\", \"GSNHQUBLXJ\",  #>     \"PBLJMWGFTW\", \"EZLGDZHKHT\", \"EJSYIOEOJL\", \"KTANGMAQMT\", \"JPARFIKTYL\",  #>     \"FIXJLQEKCP\", \"RNAOTFIWTN\", \"RFAKZMSZMB\", \"UOFFHQQLIR\", \"EKNGZSKPGF\",  #>     \"UZRCINDECG\", \"GKPLYRURBB\", \"OSNCJRVKET\", \"QMDWWKFVRU\", \"ACYJOPUKSD\",  #>     \"CJQEUMATTB\", \"ISHHJNXLMR\", \"XSHYKGMBPQ\", \"XCEJMFPVDX\", \"UFXSCLPLER\",  #>     \"JOPGMOKVOM\", \"ONTOHBVEQC\", \"YFDQMQIVBM\", \"UOFFHQQLIR\", \"UNCDYWJXLO\",  #>     \"GXQQOGSTOQ\", \"NJLMIFXDEK\", \"RQDKTNHSYQ\", \"PALVVUCJBF\", \"JVKZPZVIIU\",  #>     \"JOPGMOKVOM\", \"WNATHOQPJS\", \"PKBCVRCMCS\", \"BHOFOGKCJA\", \"AZVIVPYKND\",  #>     \"YFDQMQIVBM\", \"EZLGDZHKHT\", \"EKNGZSKPGF\", \"PKBCVRCMCS\", \"RFAKZMSZMB\",  #>     \"GSHWBCJXVZ\", \"KBYFYYONYU\", \"HGHMEUCTEX\", \"CJQEUMATTB\", \"GSHWBCJXVZ\",  #>     \"LJJSFTJKBP\", \"KTANGMAQMT\", \"LEESGFRPHV\", \"JOPGMOKVOM\", \"QMDWWKFVRU\",  #>     \"ICUEBKDOGB\", \"BJUNWZLJYP\", \"EOJBYFQEOY\", \"EZLGDZHKHT\", \"ICUEBKDOGB\",  #>     \"YDGABWKNRS\", \"HYHAFAFYEA\", \"SVBBYDPIOA\", \"CUYVXLQJIV\", \"NJLMIFXDEK\",  #>     \"AHOMYEGIBP\", \"JSGBOZVHXC\", \"FKXBYBMICY\", \"ELMZBUCGXP\", \"HGHMEUCTEX\",  #>     \"HYUIWKYPXU\", \"ZTTKZEEJZP\", \"ASCJFWFUGV\", \"EJSYIOEOJL\", \"ISHHJNXLMR\",  #>     \"SVBBYDPIOA\", \"BZPWNEEBHR\", \"UNCDYWJXLO\", \"NCXWRVCMVY\", \"MMCWEZDZSL\",  #>     \"ZTTKZEEJZP\", \"JFHAGKINER\", \"CMEKXFGTSR\", \"CKNVKMZWDC\", \"RFAKZMSZMB\",  #>     \"WEDUDZADWG\", \"NTSOYECHZQ\", \"GSNHQUBLXJ\", \"GXYQHIZVPD\", \"OSNCJRVKET\",  #>     \"AGJEXFMJAO\", \"CUYVXLQJIV\", \"XKSCGLSVUZ\", \"JVKZPZVIIU\", \"EAMRJPOWLU\",  #>     \"RBWJLMGEPF\", \"TXFSIPGCID\", \"JFHAGKINER\", \"RMEYEXVXVX\", \"VOXRCHMDIT\",  #>     \"CFSINPQYCO\", \"HYUIWKYPXU\", \"QMDWWKFVRU\", \"ZTTKZEEJZP\", \"RBWJLMGEPF\",  #>     \"URBJONTBBW\", \"ELMZBUCGXP\", \"AZVIVPYKND\", \"MCBXZBXGJN\", \"FIXJLQEKCP\",  #>     \"QCCNNYIKTH\", \"GXYQHIZVPD\", \"CYQGGUSNEK\", \"BBONKKTFNG\", \"GKPLYRURBB\",  #>     \"UZRCINDECG\", \"JOPGMOKVOM\", \"BKYOKYIUGW\", \"KTANGMAQMT\", \"ZBXYPQEVLU\",  #>     \"XKSCGLSVUZ\", \"HGHMEUCTEX\", \"FKXBYBMICY\", \"JVCERYCMOA\", \"ZPWKFFVOCB\",  #>     \"AGJEXFMJAO\", \"NTSOYECHZQ\", \"CUYVXLQJIV\", \"CJQEUMATTB\", \"SVBBYDPIOA\",  #>     \"FKXBYBMICY\", \"WEDUDZADWG\", \"HGHMEUCTEX\", \"UOFFHQQLIR\", \"GXYQHIZVPD\",  #>     \"MPSFHTGKEF\", \"EOJBYFQEOY\", \"KIJPLWHVGS\", \"KTANGMAQMT\", \"OPNAGRHLZM\",  #>     \"ASCJFWFUGV\", \"PKTRNWCHPR\", \"PKBCVRCMCS\", \"QBPHMGOGFW\", \"WNATHOQPJS\",  #>     \"EOJBYFQEOY\", \"ERVIHSPAYA\", \"RBWJLMGEPF\", \"BKYOKYIUGW\", \"ZPWKFFVOCB\",  #>     \"UJMNXDCYBB\", \"AIJRHVVDKP\", \"OPNAGRHLZM\", \"AGJEXFMJAO\", \"UZRCINDECG\",  #>     \"KTANGMAQMT\", \"OSNCJRVKET\", \"CMEKXFGTSR\", \"GKPLYRURBB\", \"GRCMVPYLDK\",  #>     \"GRCMVPYLDK\", \"RNAOTFIWTN\", \"QMDWWKFVRU\", \"ONTOHBVEQC\", \"GXQQOGSTOQ\",  #>     \"PBLJMWGFTW\", \"CJQEUMATTB\", \"LJJSFTJKBP\", \"GRCMVPYLDK\", \"CYQGGUSNEK\",  #>     \"NCXWRVCMVY\", \"ESYOZKOHCU\", \"ZBXYPQEVLU\", \"GRCMVPYLDK\", \"JVKZPZVIIU\",  #>     \"MQKHZKWIKA\", \"JPARFIKTYL\", \"NTSOYECHZQ\", \"GXQQOGSTOQ\", \"JSGBOZVHXC\",  #>     \"AFUTZUEXVM\", \"CALRWQEBFZ\", \"ZBXYPQEVLU\", \"WNATHOQPJS\", \"YDGABWKNRS\",  #>     \"GXQQOGSTOQ\", \"ICUEBKDOGB\", \"KBYFYYONYU\", \"ONTOHBVEQC\", \"JVCERYCMOA\",  #>     \"WNATHOQPJS\", \"JPARFIKTYL\", \"WMVGSBQYPB\", \"ISHHJNXLMR\", \"XKSCGLSVUZ\",  #>     \"ENXVDYZEEW\", \"CALRWQEBFZ\", \"EAMRJPOWLU\", \"JPARFIKTYL\", \"URBJONTBBW\",  #>     \"WMVGSBQYPB\", \"CALRWQEBFZ\", \"IIKTKPNNPT\", \"WMVGSBQYPB\", \"FHCLEHLIXM\",  #>     \"CUYVXLQJIV\", \"TKKAYBAFGV\", \"SVYPVLUGHE\", \"QBPRAWZTBF\", \"XKSCGLSVUZ\",  #>     \"QQIQBNKASY\", \"KTANGMAQMT\", \"QKSAXQEAIB\", \"GXQQOGSTOQ\", \"FKXBYBMICY\",  #>     \"EZLGDZHKHT\", \"HYUIWKYPXU\", \"MGDZOPJAFG\", \"ASCJFWFUGV\", \"XKSCGLSVUZ\",  #>     \"SVYPVLUGHE\", \"ENXVDYZEEW\", \"CMEKXFGTSR\", \"HGHMEUCTEX\", \"JPARFIKTYL\",  #>     \"ZTTKZEEJZP\", \"TKKAYBAFGV\", \"CFSINPQYCO\", \"ONTOHBVEQC\", \"ZTCMALLRXB\",  #>     \"OPNAGRHLZM\", \"UOFFHQQLIR\", \"URBJONTBBW\", \"TBZWQOHERE\", \"UNCDYWJXLO\",  #>     \"JFHAGKINER\", \"VOXRCHMDIT\", \"HPKSIGVDRL\", \"SVYPVLUGHE\", \"BZPWNEEBHR\",  #>     \"MHVRYUZJWL\", \"EJSYIOEOJL\", \"EZLGDZHKHT\", \"ENXVDYZEEW\", \"ZBXYPQEVLU\",  #>     \"URBJONTBBW\", \"LEESGFRPHV\", \"ESYOZKOHCU\", \"AIJRHVVDKP\", \"KBYFYYONYU\",  #>     \"AGJEXFMJAO\", \"CFSINPQYCO\", \"XCEJMFPVDX\", \"ZPWKFFVOCB\", \"CONXBVIQSU\",  #>     \"DRQRVFYUCX\", \"HYUIWKYPXU\", \"QMDWWKFVRU\", \"KIJPLWHVGS\", \"WLNMRBXMPC\",  #>     \"RQDKTNHSYQ\", \"LJJSFTJKBP\", \"CYQGGUSNEK\", \"JFHAGKINER\", \"GSHWBCJXVZ\",  #>     \"XCEJMFPVDX\", \"ENXVDYZEEW\", \"CJQEUMATTB\", \"TLGDIASGEL\", \"ONTOHBVEQC\",  #>     \"JWFPSYZNLW\", \"QKSAXQEAIB\", \"LGWJJITBKZ\", \"FKXBYBMICY\", \"ZBXYPQEVLU\",  #>     \"BBONKKTFNG\", \"BZPWNEEBHR\", \"DRQRVFYUCX\", \"WKXIHCQQBN\", \"CONXBVIQSU\",  #>     \"JOPGMOKVOM\", \"CFSINPQYCO\", \"EAMRJPOWLU\", \"MCBXZBXGJN\", \"FHCLEHLIXM\",  #>     \"WMVGSBQYPB\", \"XSHYKGMBPQ\", \"CMEKXFGTSR\", \"AZVIVPYKND\", \"ACYJOPUKSD\",  #>     \"FKTIIHAGSF\", \"AIJRHVVDKP\", \"LJJSFTJKBP\", \"EZLGDZHKHT\", \"UFXSCLPLER\",  #>     \"EKNGZSKPGF\", \"LJJSFTJKBP\", \"BKYOKYIUGW\", \"AHOMYEGIBP\", \"AHOMYEGIBP\",  #>     \"IYNWQZVCCI\", \"PKTRNWCHPR\", \"OPNAGRHLZM\", \"FHCLEHLIXM\", \"QEAYJDRZQO\",  #>     \"TKKAYBAFGV\", \"QBPHMGOGFW\", \"ISWVRSKEUK\", \"ICUEBKDOGB\", \"VBFGFOMUQJ\",  #>     \"JFHAGKINER\", \"NJLMIFXDEK\", \"UZRCINDECG\", \"QMDWWKFVRU\", \"KTANGMAQMT\",  #>     \"ESYOZKOHCU\", \"DRQRVFYUCX\", \"JPARFIKTYL\", \"CKNVKMZWDC\", \"YDGABWKNRS\",  #>     \"NCXWRVCMVY\", \"ICUEBKDOGB\", \"JSGBOZVHXC\", \"MQKHZKWIKA\", \"WMVGSBQYPB\",  #>     \"JFHAGKINER\", \"MPSFHTGKEF\", \"ZBXYPQEVLU\", \"JFHAGKINER\", \"UJMNXDCYBB\",  #>     \"ESYOZKOHCU\", \"XKSCGLSVUZ\", \"ESYOZKOHCU\", \"HPKSIGVDRL\", \"RSSXENWCQU\",  #>     \"GKPLYRURBB\", \"KBYFYYONYU\", \"WMVGSBQYPB\", \"WMVGSBQYPB\", \"TBZWQOHERE\",  #>     \"TKKAYBAFGV\", \"QMDWWKFVRU\", \"CFXONOGTQH\", \"MHVRYUZJWL\", \"AZVIVPYKND\",  #>     \"ZBXYPQEVLU\", \"GRCMVPYLDK\", \"TKKAYBAFGV\", \"FHCLEHLIXM\", \"FIXJLQEKCP\",  #>     \"XCEJMFPVDX\", \"YROTAZMWFI\", \"TLGDIASGEL\", \"ZTCMALLRXB\", \"OPNAGRHLZM\",  #>     \"ZPWKFFVOCB\", \"URBJONTBBW\", \"PKTRNWCHPR\", \"LJJSFTJKBP\", \"WEDUDZADWG\",  #>     \"JWFPSYZNLW\", \"MGDZOPJAFG\", \"JVCERYCMOA\", \"NCXWRVCMVY\", \"TBZWQOHERE\",  #>     \"WNATHOQPJS\", \"RQDKTNHSYQ\", \"ASCJFWFUGV\", \"JOPGMOKVOM\", \"LGWJJITBKZ\",  #>     \"JVCERYCMOA\", \"KKKAFDRDCO\", \"CUYVXLQJIV\", \"KBYFYYONYU\", \"QCCNNYIKTH\",  #>     \"UJMNXDCYBB\", \"CMEKXFGTSR\", \"EAMRJPOWLU\", \"CKNVKMZWDC\", \"CMEKXFGTSR\",  #>     \"GSHWBCJXVZ\", \"AZVIVPYKND\", \"JWFPSYZNLW\", \"UNCDYWJXLO\", \"CALRWQEBFZ\",  #>     \"UOFFHQQLIR\", \"YDGABWKNRS\", \"GRCMVPYLDK\", \"JFHAGKINER\", \"JOPGMOKVOM\",  #>     \"ICUEBKDOGB\", \"ZTCMALLRXB\", \"WEDUDZADWG\", \"RHALOWGMGJ\", \"OSNCJRVKET\",  #>     \"LJJSFTJKBP\", \"AQEEZTRLKH\", \"WKXIHCQQBN\", \"ZTTKZEEJZP\", \"QQIQBNKASY\",  #>     \"OPNAGRHLZM\", \"MPSFHTGKEF\", \"AZVIVPYKND\", \"TLGDIASGEL\", \"AGJEXFMJAO\",  #>     \"ZPWKFFVOCB\", \"CKNVKMZWDC\", \"CMEKXFGTSR\", \"TXFSIPGCID\", \"BBONKKTFNG\",  #>     \"GKPLYRURBB\", \"BZPWNEEBHR\", \"JWFPSYZNLW\", \"EOJBYFQEOY\", \"TXFSIPGCID\",  #>     \"EOJBYFQEOY\", \"QQIQBNKASY\", \"HYUIWKYPXU\", \"XSHYKGMBPQ\", \"GRCMVPYLDK\",  #>     \"ENXVDYZEEW\", \"LJJSFTJKBP\", \"HYUIWKYPXU\", \"CMEKXFGTSR\", \"RNAOTFIWTN\",  #>     \"RFAKZMSZMB\", \"WNATHOQPJS\", \"RMEYEXVXVX\", \"RQDKTNHSYQ\", \"EWTGOBRLKP\",  #>     \"CFXONOGTQH\", \"WMVGSBQYPB\", \"EOJBYFQEOY\", \"PKBCVRCMCS\", \"PKBCVRCMCS\",  #>     \"QBPRAWZTBF\", \"ISHHJNXLMR\", \"CJQEUMATTB\", \"YFDQMQIVBM\", \"QBPHMGOGFW\",  #>     \"AFUTZUEXVM\", \"RNAOTFIWTN\", \"RQDKTNHSYQ\", \"JVCERYCMOA\", \"ONTOHBVEQC\",  #>     \"LGWJJITBKZ\", \"YFDQMQIVBM\", \"JPARFIKTYL\", \"RQDKTNHSYQ\", \"YFDQMQIVBM\",  #>     \"YDGABWKNRS\", \"NOTPDVRLPM\", \"AHOMYEGIBP\", \"TLGDIASGEL\", \"HCEHZFVRBV\",  #>     \"ACYJOPUKSD\", \"EJSYIOEOJL\", \"IIKTKPNNPT\", \"CJQEUMATTB\", \"EZLGDZHKHT\",  #>     \"FHCLEHLIXM\", \"HPKSIGVDRL\", \"AFUTZUEXVM\", \"XCEJMFPVDX\", \"UFXSCLPLER\",  #>     \"RQDKTNHSYQ\", \"JFHAGKINER\", \"UOFFHQQLIR\", \"TLGDIASGEL\", \"LJJSFTJKBP\",  #>     \"MHVRYUZJWL\", \"PKBCVRCMCS\", \"EZLGDZHKHT\", \"ZTCMALLRXB\", \"TLGDIASGEL\",  #>     \"JFHAGKINER\", \"CYQGGUSNEK\", \"AZVIVPYKND\", \"EWTGOBRLKP\", \"QKSAXQEAIB\",  #>     \"VOXRCHMDIT\", \"CKNVKMZWDC\", \"YROTAZMWFI\", \"JRNMLJJSDP\", \"GXYQHIZVPD\",  #>     \"HPKSIGVDRL\", \"TWBOLWJGAR\", \"TLGDIASGEL\", \"XDEAUVDMFQ\", \"RFAKZMSZMB\",  #>     \"RSSXENWCQU\", \"BZPWNEEBHR\", \"CJQEUMATTB\", \"UOFFHQQLIR\", \"QQIQBNKASY\",  #>     \"JHXSYICTMS\", \"PKBCVRCMCS\", \"JSGBOZVHXC\", \"VBFGFOMUQJ\", \"WEDUDZADWG\",  #>     \"KTANGMAQMT\", \"YROTAZMWFI\", \"BBONKKTFNG\", \"TBZWQOHERE\", \"JOPGMOKVOM\",  #>     \"QQIQBNKASY\", \"KBYFYYONYU\", \"RNAOTFIWTN\", \"CYQGGUSNEK\", \"XKSCGLSVUZ\",  #>     \"KBYFYYONYU\", \"VOXRCHMDIT\", \"GXYQHIZVPD\", \"QBPRAWZTBF\", \"LEESGFRPHV\",  #>     \"WNATHOQPJS\", \"GKPLYRURBB\", \"FIXJLQEKCP\", \"CYQGGUSNEK\", \"NOTPDVRLPM\",  #>     \"MPSFHTGKEF\", \"AQEEZTRLKH\", \"ZTTKZEEJZP\", \"YFDQMQIVBM\", \"AGJEXFMJAO\",  #>     \"EAMRJPOWLU\", \"CMEKXFGTSR\", \"BKYOKYIUGW\", \"KBYFYYONYU\", \"KKKAFDRDCO\",  #>     \"ZTCMALLRXB\", \"VKEOEUOTDQ\", \"PKTRNWCHPR\", \"EWTGOBRLKP\", \"RFAKZMSZMB\",  #>     \"AOKHTNTQJC\", \"UJMNXDCYBB\", \"BZPWNEEBHR\", \"AIJRHVVDKP\", \"HLWNYXNVYM\",  #>     \"RQDKTNHSYQ\", \"HPKSIGVDRL\", \"ZTTKZEEJZP\", \"TBZWQOHERE\", \"JPARFIKTYL\",  #>     \"WEDUDZADWG\", \"YDGABWKNRS\", \"PKBCVRCMCS\", \"HCEHZFVRBV\", \"AOKHTNTQJC\",  #>     \"VOXRCHMDIT\", \"YDGABWKNRS\", \"OPNAGRHLZM\", \"JPARFIKTYL\", \"ZTTKZEEJZP\",  #>     \"JPARFIKTYL\", \"PBLJMWGFTW\", \"RFAKZMSZMB\", \"ESYOZKOHCU\", \"OSNCJRVKET\",  #>     \"EOJBYFQEOY\", \"CFXONOGTQH\", \"ASCJFWFUGV\", \"FKXBYBMICY\", \"YDGABWKNRS\",  #>     \"WKXIHCQQBN\", \"PKTRNWCHPR\", \"GSHWBCJXVZ\", \"JVKZPZVIIU\", \"EWTGOBRLKP\",  #>     \"ZTTKZEEJZP\", \"ICUEBKDOGB\", \"NJLMIFXDEK\", \"TKKAYBAFGV\", \"WKXIHCQQBN\",  #>     \"UJMNXDCYBB\", \"QQIQBNKASY\", \"JVKZPZVIIU\", \"FHCLEHLIXM\", \"OPNAGRHLZM\",  #>     \"JHVIRHYUEP\", \"ENXVDYZEEW\", \"JFHAGKINER\", \"HGHMEUCTEX\", \"ASCJFWFUGV\",  #>     \"FKXBYBMICY\", \"KBYFYYONYU\", \"HGHMEUCTEX\", \"EOJBYFQEOY\", \"RBWJLMGEPF\",  #>     \"SPBEZTBJFS\", \"CFSINPQYCO\", \"HGHMEUCTEX\", \"HCEHZFVRBV\", \"TLGDIASGEL\",  #>     \"RHALOWGMGJ\", \"TWBOLWJGAR\", \"VOXRCHMDIT\", \"EAMRJPOWLU\", \"GKPLYRURBB\",  #>     \"IYNWQZVCCI\", \"YROTAZMWFI\", \"LEESGFRPHV\", \"ESYOZKOHCU\", \"VOXRCHMDIT\",  #>     \"FIXJLQEKCP\", \"YDGABWKNRS\", \"QQIQBNKASY\", \"CMEKXFGTSR\", \"YDGABWKNRS\",  #>     \"RHALOWGMGJ\", \"AQEEZTRLKH\", \"KKKAFDRDCO\", \"HYHAFAFYEA\", \"XSHYKGMBPQ\",  #>     \"FKXBYBMICY\", \"AOKHTNTQJC\", \"EOJBYFQEOY\", \"GKPLYRURBB\", \"LHDUBEZXXM\",  #>     \"DRQRVFYUCX\", \"HYHAFAFYEA\", \"JHVIRHYUEP\", \"HLWNYXNVYM\", \"PHIZOLWIBS\",  #>     \"TBZWQOHERE\", \"HGHMEUCTEX\", \"OSNCJRVKET\", \"JPARFIKTYL\", \"NJLMIFXDEK\",  #>     \"NJLMIFXDEK\", \"MHVRYUZJWL\", \"KTANGMAQMT\", \"BKYOKYIUGW\", \"VOXRCHMDIT\",  #>     \"ZPWKFFVOCB\", \"QQIQBNKASY\", \"ENXVDYZEEW\", \"VOXRCHMDIT\", \"EZLGDZHKHT\",  #>     \"ERVIHSPAYA\", \"QMDWWKFVRU\", \"SVYPVLUGHE\", \"AHOMYEGIBP\", \"ESYOZKOHCU\",  #>     \"JOPGMOKVOM\", \"JWFPSYZNLW\", \"GXYQHIZVPD\", \"UZRCINDECG\", \"FHCLEHLIXM\",  #>     \"MMCWEZDZSL\", \"JRNMLJJSDP\", \"JOPGMOKVOM\", \"NOTPDVRLPM\", \"URBJONTBBW\",  #>     \"BKYOKYIUGW\", \"ZTTKZEEJZP\", \"FHCLEHLIXM\", \"VKEOEUOTDQ\", \"AFUTZUEXVM\",  #>     \"GKPLYRURBB\", \"UNCDYWJXLO\", \"QBPHMGOGFW\", \"QMDWWKFVRU\", \"MMCWEZDZSL\",  #>     \"KIJPLWHVGS\", \"NTSOYECHZQ\", \"MQKHZKWIKA\", \"CFXONOGTQH\", \"UOFFHQQLIR\",  #>     \"ELMZBUCGXP\", \"CMEKXFGTSR\", \"QMDWWKFVRU\", \"ENXVDYZEEW\", \"UOFFHQQLIR\",  #>     \"GXQQOGSTOQ\", \"IIKTKPNNPT\", \"ISWVRSKEUK\", \"JOPGMOKVOM\", \"FHCLEHLIXM\",  #>     \"ZTCMALLRXB\", \"MGDZOPJAFG\", \"EAMRJPOWLU\", \"WNATHOQPJS\", \"VOXRCHMDIT\",  #>     \"XCEJMFPVDX\", \"EJSYIOEOJL\", \"RMEYEXVXVX\", \"JHXSYICTMS\", \"HPKSIGVDRL\",  #>     \"XCEJMFPVDX\", \"JPARFIKTYL\", \"CUYVXLQJIV\", \"UJMNXDCYBB\", \"EOJBYFQEOY\",  #>     \"LJJSFTJKBP\", \"SVBBYDPIOA\", \"XDEAUVDMFQ\", \"LEESGFRPHV\", \"UZRCINDECG\",  #>     \"XKSCGLSVUZ\", \"LEESGFRPHV\", \"KTANGMAQMT\", \"FKXBYBMICY\", \"ICUEBKDOGB\",  #>     \"GSNHQUBLXJ\", \"CMEKXFGTSR\", \"JFHAGKINER\", \"LJJSFTJKBP\", \"ZTTKZEEJZP\",  #>     \"QEAYJDRZQO\", \"RHALOWGMGJ\", \"SVYPVLUGHE\", \"QMDWWKFVRU\", \"NTSOYECHZQ\",  #>     \"PHIZOLWIBS\", \"TXFSIPGCID\", \"CJQEUMATTB\", \"SPBEZTBJFS\", \"EAMRJPOWLU\",  #>     \"FIXJLQEKCP\", \"ESYOZKOHCU\", \"TWBOLWJGAR\", \"PKTRNWCHPR\", \"WEDUDZADWG\",  #>     \"FHCLEHLIXM\", \"JVKZPZVIIU\", \"CFXONOGTQH\", \"VOXRCHMDIT\", \"JOPGMOKVOM\",  #>     \"GSHWBCJXVZ\", \"YROTAZMWFI\", \"QBPRAWZTBF\", \"HLWNYXNVYM\", \"CJQEUMATTB\",  #>     \"GRCMVPYLDK\", \"CMEKXFGTSR\", \"UZRCINDECG\", \"VBFGFOMUQJ\", \"QQIQBNKASY\",  #>     \"JVCERYCMOA\", \"TXFSIPGCID\", \"FHCLEHLIXM\", \"ACYJOPUKSD\", \"GSHWBCJXVZ\",  #>     \"CMEKXFGTSR\", \"JVCERYCMOA\", \"HLWNYXNVYM\", \"SVBBYDPIOA\", \"ICUEBKDOGB\",  #>     \"XCEJMFPVDX\", \"MPSFHTGKEF\", \"UZRCINDECG\", \"UNCDYWJXLO\", \"EOJBYFQEOY\",  #>     \"ZBXYPQEVLU\", \"AIJRHVVDKP\", \"QQIQBNKASY\", \"NTSOYECHZQ\", \"NTSOYECHZQ\",  #>     \"TBZWQOHERE\", \"ISHHJNXLMR\", \"GSNHQUBLXJ\", \"ASCJFWFUGV\", \"GXQQOGSTOQ\",  #>     \"CFSINPQYCO\", \"GSNHQUBLXJ\", \"EKNGZSKPGF\", \"MPSFHTGKEF\", \"DRQRVFYUCX\",  #>     \"LJJSFTJKBP\", \"QMDWWKFVRU\", \"JPARFIKTYL\", \"QCCNNYIKTH\", \"EWTGOBRLKP\",  #>     \"WKXIHCQQBN\", \"YDGABWKNRS\", \"GKPLYRURBB\", \"JWFPSYZNLW\", \"ESYOZKOHCU\",  #>     \"YFDQMQIVBM\", \"GSNHQUBLXJ\", \"LEESGFRPHV\", \"BZPWNEEBHR\", \"QCCNNYIKTH\",  #>     \"QMDWWKFVRU\", \"MQKHZKWIKA\", \"FHCLEHLIXM\", \"OPNAGRHLZM\", \"QQIQBNKASY\",  #>     \"RSSXENWCQU\", \"JOPGMOKVOM\", \"CKNVKMZWDC\", \"WKXIHCQQBN\", \"BHOFOGKCJA\",  #>     \"KIJPLWHVGS\", \"QMDWWKFVRU\", \"RSSXENWCQU\", \"WMVGSBQYPB\", \"FIXJLQEKCP\",  #>     \"KIJPLWHVGS\", \"JVKZPZVIIU\", \"LHDUBEZXXM\", \"AHOMYEGIBP\", \"GSNHQUBLXJ\",  #>     \"EAMRJPOWLU\", \"KBYFYYONYU\", \"FIXJLQEKCP\", \"NTSOYECHZQ\", \"WEDUDZADWG\",  #>     \"KKKAFDRDCO\", \"AHOMYEGIBP\", \"AIJRHVVDKP\", \"TKKAYBAFGV\", \"JPARFIKTYL\",  #>     \"ZBXYPQEVLU\", \"ISWVRSKEUK\", \"UZRCINDECG\", \"PKBCVRCMCS\", \"QBPRAWZTBF\",  #>     \"QQIQBNKASY\", \"JPARFIKTYL\", \"RFAKZMSZMB\", \"JOPGMOKVOM\", \"ASCJFWFUGV\",  #>     \"QCCNNYIKTH\", \"BJUNWZLJYP\", \"ZPWKFFVOCB\", \"KTANGMAQMT\", \"VKEOEUOTDQ\",  #>     \"JOPGMOKVOM\", \"SVYPVLUGHE\", \"EOJBYFQEOY\", \"NOTPDVRLPM\", \"IIKTKPNNPT\",  #>     \"MQKHZKWIKA\", \"ASCJFWFUGV\", \"XCEJMFPVDX\", \"XKSCGLSVUZ\", \"UJMNXDCYBB\",  #>     \"HGHMEUCTEX\", \"UJMNXDCYBB\", \"GXYQHIZVPD\", \"AFUTZUEXVM\", \"QKSAXQEAIB\",  #>     \"VKEOEUOTDQ\", \"TBZWQOHERE\", \"UFXSCLPLER\", \"RHALOWGMGJ\", \"WEDUDZADWG\",  #>     \"ZTTKZEEJZP\", \"QBPHMGOGFW\", \"JVKZPZVIIU\", \"XCEJMFPVDX\", \"ENXVDYZEEW\",  #>     \"GXYQHIZVPD\", \"SVBBYDPIOA\", \"YROTAZMWFI\", \"JHVIRHYUEP\", \"BJUNWZLJYP\",  #>     \"GRCMVPYLDK\", \"JVCERYCMOA\", \"LJJSFTJKBP\", \"XKSCGLSVUZ\", \"VOXRCHMDIT\",  #>     \"BHOFOGKCJA\", \"JVKZPZVIIU\", \"RSSXENWCQU\", \"WLNMRBXMPC\", \"AGJEXFMJAO\",  #>     \"WNATHOQPJS\", \"SPBEZTBJFS\", \"WEDUDZADWG\", \"ACYJOPUKSD\", \"CUYVXLQJIV\",  #>     \"SPBEZTBJFS\", \"JFHAGKINER\", \"HCEHZFVRBV\", \"ISWVRSKEUK\", \"RMEYEXVXVX\",  #>     \"TLGDIASGEL\", \"LJJSFTJKBP\", \"ACYJOPUKSD\", \"BZPWNEEBHR\", \"JFHAGKINER\",  #>     \"PBLJMWGFTW\", \"GKPLYRURBB\", \"BZPWNEEBHR\", \"KBYFYYONYU\", \"QKSAXQEAIB\",  #>     \"ZBXYPQEVLU\", \"QBPRAWZTBF\", \"KTANGMAQMT\", \"KBYFYYONYU\", \"PBLJMWGFTW\",  #>     \"CJQEUMATTB\", \"YROTAZMWFI\", \"JWFPSYZNLW\", \"KTANGMAQMT\", \"UJMNXDCYBB\",  #>     \"CJQEUMATTB\", \"YFDQMQIVBM\", \"TKKAYBAFGV\", \"GRCMVPYLDK\", \"BZPWNEEBHR\",  #>     \"BJUNWZLJYP\", \"ZTTKZEEJZP\", \"PALVVUCJBF\", \"ASCJFWFUGV\", \"CUYVXLQJIV\",  #>     \"ASCJFWFUGV\", \"RNAOTFIWTN\", \"BKYOKYIUGW\", \"HLWNYXNVYM\", \"ISHHJNXLMR\",  #>     \"RNAOTFIWTN\", \"ZBXYPQEVLU\", \"IYNWQZVCCI\", \"CKNVKMZWDC\", \"NCXWRVCMVY\",  #>     \"ACYJOPUKSD\", \"JPARFIKTYL\", \"XDEAUVDMFQ\", \"GXYQHIZVPD\", \"KTANGMAQMT\",  #>     \"SPBEZTBJFS\", \"TLGDIASGEL\", \"GXQQOGSTOQ\", \"GRCMVPYLDK\", \"EZLGDZHKHT\",  #>     \"ZPWKFFVOCB\", \"MGDZOPJAFG\", \"NCXWRVCMVY\", \"NOTPDVRLPM\", \"GRCMVPYLDK\",  #>     \"YDGABWKNRS\", \"ZTCMALLRXB\", \"CMEKXFGTSR\", \"QEAYJDRZQO\", \"ACYJOPUKSD\",  #>     \"PKTRNWCHPR\", \"URBJONTBBW\", \"WEDUDZADWG\", \"ACYJOPUKSD\", \"URBJONTBBW\",  #>     \"AFUTZUEXVM\", \"CUYVXLQJIV\", \"WKXIHCQQBN\", \"EZLGDZHKHT\", \"AFUTZUEXVM\",  #>     \"OPNAGRHLZM\", \"MCBXZBXGJN\", \"GKPLYRURBB\", \"UJMNXDCYBB\", \"RFAKZMSZMB\",  #>     \"QCCNNYIKTH\", \"RNAOTFIWTN\", \"YDGABWKNRS\", \"CMEKXFGTSR\", \"TBZWQOHERE\",  #>     \"TWBOLWJGAR\", \"EZLGDZHKHT\", \"WNATHOQPJS\", \"NOTPDVRLPM\", \"FKXBYBMICY\",  #>     \"KBYFYYONYU\", \"PHIZOLWIBS\", \"ENXVDYZEEW\", \"LHDUBEZXXM\", \"KKKAFDRDCO\",  #>     \"TXFSIPGCID\", \"CFSINPQYCO\", \"SVBBYDPIOA\", \"SVYPVLUGHE\", \"CFXONOGTQH\",  #>     \"MGDZOPJAFG\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\", \"BJUNWZLJYP\", \"GXQQOGSTOQ\",  #>     \"CJQEUMATTB\", \"QKSAXQEAIB\", \"EWTGOBRLKP\", \"WMVGSBQYPB\", \"ELMZBUCGXP\",  #>     \"JFHAGKINER\", \"AOKHTNTQJC\", \"HYUIWKYPXU\", \"RQDKTNHSYQ\", \"VBFGFOMUQJ\",  #>     \"XDEAUVDMFQ\", \"GSNHQUBLXJ\", \"LJJSFTJKBP\", \"ASCJFWFUGV\", \"UJMNXDCYBB\",  #>     \"MGDZOPJAFG\", \"FHCLEHLIXM\", \"RHALOWGMGJ\", \"JVCERYCMOA\", \"VBFGFOMUQJ\",  #>     \"HLWNYXNVYM\", \"XCEJMFPVDX\", \"FIXJLQEKCP\", \"UCYFOWDBOQ\", \"CJQEUMATTB\",  #>     \"CFSINPQYCO\", \"MGDZOPJAFG\", \"QBPHMGOGFW\", \"AGJEXFMJAO\", \"WKXIHCQQBN\",  #>     \"HCEHZFVRBV\", \"RHALOWGMGJ\", \"NJLMIFXDEK\", \"ENXVDYZEEW\", \"NOTPDVRLPM\",  #>     \"JPARFIKTYL\", \"CUYVXLQJIV\", \"JHXSYICTMS\", \"YDGABWKNRS\", \"JVKZPZVIIU\",  #>     \"EOJBYFQEOY\", \"UOFFHQQLIR\", \"AOKHTNTQJC\", \"CYQGGUSNEK\", \"KIJPLWHVGS\",  #>     \"QMDWWKFVRU\", \"QKSAXQEAIB\", \"WMVGSBQYPB\", \"AGJEXFMJAO\", \"JOPGMOKVOM\",  #>     \"UZRCINDECG\", \"BJUNWZLJYP\", \"TWBOLWJGAR\", \"ISHHJNXLMR\", \"KTANGMAQMT\",  #>     \"ASCJFWFUGV\", \"AOKHTNTQJC\", \"JFHAGKINER\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\",  #>     \"JRNMLJJSDP\", \"FKTIIHAGSF\", \"HGHMEUCTEX\", \"PKBCVRCMCS\", \"XKSCGLSVUZ\",  #>     \"WLNMRBXMPC\", \"MPSFHTGKEF\", \"ZBXYPQEVLU\", \"ZTTKZEEJZP\", \"CUYVXLQJIV\",  #>     \"ASCJFWFUGV\", \"QKSAXQEAIB\", \"ERVIHSPAYA\", \"CJQEUMATTB\", \"AGJEXFMJAO\",  #>     \"YDGABWKNRS\", \"BHOFOGKCJA\", \"JOPGMOKVOM\", \"PHIZOLWIBS\", \"KKKAFDRDCO\",  #>     \"UOFFHQQLIR\", \"QQIQBNKASY\", \"PBLJMWGFTW\", \"CUYVXLQJIV\", \"BJUNWZLJYP\",  #>     \"WLNMRBXMPC\", \"LJJSFTJKBP\", \"HYUIWKYPXU\", \"UZRCINDECG\", \"VBFGFOMUQJ\",  #>     \"EJSYIOEOJL\", \"JRNMLJJSDP\", \"JFHAGKINER\", \"PHIZOLWIBS\", \"ZPWKFFVOCB\",  #>     \"ZTCMALLRXB\", \"CFXONOGTQH\", \"KIJPLWHVGS\", \"IYNWQZVCCI\", \"FHCLEHLIXM\",  #>     \"NJLMIFXDEK\", \"GSHWBCJXVZ\", \"JSGBOZVHXC\", \"CJQEUMATTB\", \"AGJEXFMJAO\",  #>     \"AIJRHVVDKP\", \"VKEOEUOTDQ\", \"UNCDYWJXLO\", \"AIJRHVVDKP\", \"CJQEUMATTB\",  #>     \"ZTCMALLRXB\", \"JPARFIKTYL\", \"HLWNYXNVYM\", \"UJMNXDCYBB\", \"AIJRHVVDKP\",  #>     \"ESYOZKOHCU\", \"LEESGFRPHV\", \"TBZWQOHERE\", \"YDGABWKNRS\", \"YFDQMQIVBM\",  #>     \"GRCMVPYLDK\", \"XKSCGLSVUZ\", \"TXFSIPGCID\", \"QQIQBNKASY\", \"XKSCGLSVUZ\",  #>     \"WMVGSBQYPB\", \"NCXWRVCMVY\", \"SPBEZTBJFS\", \"OPNAGRHLZM\", \"VOXRCHMDIT\",  #>     \"XKSCGLSVUZ\", \"CONXBVIQSU\", \"WMVGSBQYPB\", \"BHOFOGKCJA\", \"JFHAGKINER\",  #>     \"QQIQBNKASY\", \"PKTRNWCHPR\", \"ELMZBUCGXP\", \"CUYVXLQJIV\", \"QBPRAWZTBF\",  #>     \"JVCERYCMOA\", \"ACYJOPUKSD\", \"MMCWEZDZSL\", \"EAMRJPOWLU\", \"FKXBYBMICY\",  #>     \"AGJEXFMJAO\", \"KIJPLWHVGS\", \"YFDQMQIVBM\", \"CYQGGUSNEK\", \"GXYQHIZVPD\",  #>     \"AOKHTNTQJC\", \"GXQQOGSTOQ\", \"EAMRJPOWLU\", \"UZRCINDECG\", \"ENXVDYZEEW\",  #>     \"KIJPLWHVGS\", \"XKSCGLSVUZ\", \"ISWVRSKEUK\", \"PKBCVRCMCS\", \"JOPGMOKVOM\",  #>     \"HPKSIGVDRL\", \"MGDZOPJAFG\", \"TWBOLWJGAR\", \"EAMRJPOWLU\", \"YROTAZMWFI\",  #>     \"ZPWKFFVOCB\", \"CFSINPQYCO\", \"FIXJLQEKCP\", \"XCEJMFPVDX\", \"UOFFHQQLIR\",  #>     \"TLGDIASGEL\", \"URBJONTBBW\", \"FIXJLQEKCP\", \"QBPRAWZTBF\", \"ERVIHSPAYA\",  #>     \"UJMNXDCYBB\", \"WLNMRBXMPC\", \"RMEYEXVXVX\", \"YDGABWKNRS\", \"HYUIWKYPXU\",  #>     \"EZLGDZHKHT\", \"CJQEUMATTB\", \"ERVIHSPAYA\", \"CYQGGUSNEK\", \"KTANGMAQMT\",  #>     \"ONTOHBVEQC\", \"KTANGMAQMT\", \"ENXVDYZEEW\", \"KIJPLWHVGS\", \"BBONKKTFNG\",  #>     \"QQIQBNKASY\", \"HGHMEUCTEX\", \"XKSCGLSVUZ\", \"QCCNNYIKTH\", \"QQIQBNKASY\",  #>     \"IIKTKPNNPT\", \"FHCLEHLIXM\", \"QQIQBNKASY\", \"GSHWBCJXVZ\", \"JHVIRHYUEP\",  #>     \"RBWJLMGEPF\", \"KTANGMAQMT\", \"TWBOLWJGAR\", \"KKKAFDRDCO\", \"OSNCJRVKET\",  #>     \"RHALOWGMGJ\", \"ZBXYPQEVLU\", \"ELMZBUCGXP\", \"CALRWQEBFZ\", \"NJLMIFXDEK\",  #>     \"JFHAGKINER\", \"CYQGGUSNEK\", \"JHVIRHYUEP\", \"ISHHJNXLMR\", \"AZVIVPYKND\",  #>     \"NJLMIFXDEK\", \"FIXJLQEKCP\", \"AGJEXFMJAO\", \"EOJBYFQEOY\", \"CJQEUMATTB\",  #>     \"CFXONOGTQH\", \"UFXSCLPLER\", \"GSNHQUBLXJ\", \"HPKSIGVDRL\", \"YFDQMQIVBM\",  #>     \"OPNAGRHLZM\", \"YROTAZMWFI\", \"SPBEZTBJFS\", \"UOFFHQQLIR\", \"AGJEXFMJAO\",  #>     \"CFXONOGTQH\", \"EJSYIOEOJL\", \"CYQGGUSNEK\", \"ZTCMALLRXB\", \"FIXJLQEKCP\",  #>     \"VBFGFOMUQJ\", \"AZVIVPYKND\", \"UCYFOWDBOQ\", \"MGDZOPJAFG\", \"RFAKZMSZMB\",  #>     \"YFDQMQIVBM\", \"JWFPSYZNLW\", \"AQEEZTRLKH\", \"ZTCMALLRXB\", \"CKNVKMZWDC\",  #>     \"NTSOYECHZQ\", \"VKEOEUOTDQ\", \"JWFPSYZNLW\", \"JOPGMOKVOM\", \"NOTPDVRLPM\",  #>     \"NOTPDVRLPM\", \"VKEOEUOTDQ\", \"RNAOTFIWTN\", \"OPNAGRHLZM\", \"MGDZOPJAFG\",  #>     \"NJLMIFXDEK\", \"HGHMEUCTEX\", \"CALRWQEBFZ\", \"LEESGFRPHV\", \"EOJBYFQEOY\",  #>     \"RMEYEXVXVX\", \"ESYOZKOHCU\", \"KTANGMAQMT\", \"LJJSFTJKBP\", \"BBONKKTFNG\",  #>     \"TWBOLWJGAR\", \"CALRWQEBFZ\", \"GKPLYRURBB\", \"YFDQMQIVBM\", \"HCEHZFVRBV\",  #>     \"AOKHTNTQJC\", \"JVCERYCMOA\", \"VOXRCHMDIT\", \"AOKHTNTQJC\", \"GKPLYRURBB\",  #>     \"HYHAFAFYEA\", \"NTSOYECHZQ\", \"QMDWWKFVRU\", \"RHALOWGMGJ\", \"MCBXZBXGJN\",  #>     \"DRQRVFYUCX\", \"WMVGSBQYPB\", \"UOFFHQQLIR\", \"RNAOTFIWTN\", \"AQEEZTRLKH\",  #>     \"KBYFYYONYU\", \"CFXONOGTQH\", \"CUYVXLQJIV\", \"GSHWBCJXVZ\", \"EOJBYFQEOY\",  #>     \"ZTCMALLRXB\", \"PHIZOLWIBS\", \"AQEEZTRLKH\", \"BHOFOGKCJA\", \"BJUNWZLJYP\",  #>     \"JSGBOZVHXC\", \"YDGABWKNRS\", \"HCEHZFVRBV\", \"BZPWNEEBHR\", \"RNAOTFIWTN\",  #>     \"BZPWNEEBHR\", \"WMVGSBQYPB\", \"CJQEUMATTB\", \"MQKHZKWIKA\", \"MGDZOPJAFG\",  #>     \"ZBXYPQEVLU\", \"OSNCJRVKET\", \"OPNAGRHLZM\", \"CMEKXFGTSR\", \"BZPWNEEBHR\",  #>     \"ENXVDYZEEW\", \"FIXJLQEKCP\", \"EZLGDZHKHT\", \"HGHMEUCTEX\", \"PKBCVRCMCS\",  #>     \"GSNHQUBLXJ\", \"CFXONOGTQH\", \"ASCJFWFUGV\", \"QMDWWKFVRU\", \"WMVGSBQYPB\",  #>     \"UNCDYWJXLO\", \"BKYOKYIUGW\", \"UCYFOWDBOQ\", \"ISHHJNXLMR\", \"KBYFYYONYU\",  #>     \"WEDUDZADWG\", \"NTSOYECHZQ\", \"AOKHTNTQJC\", \"QBPHMGOGFW\", \"RFAKZMSZMB\",  #>     \"ZTCMALLRXB\", \"TBZWQOHERE\", \"RSSXENWCQU\", \"XKSCGLSVUZ\", \"ZTTKZEEJZP\",  #>     \"SVYPVLUGHE\", \"QQIQBNKASY\", \"SPBEZTBJFS\", \"WNATHOQPJS\", \"GSNHQUBLXJ\",  #>     \"URBJONTBBW\", \"AHOMYEGIBP\", \"URBJONTBBW\", \"XKSCGLSVUZ\", \"GXYQHIZVPD\",  #>     \"KBYFYYONYU\", \"NJLMIFXDEK\", \"SVYPVLUGHE\", \"LGWJJITBKZ\", \"EKNGZSKPGF\",  #>     \"WEDUDZADWG\", \"ZTTKZEEJZP\", \"PKBCVRCMCS\", \"EAMRJPOWLU\", \"JVCERYCMOA\",  #>     \"CMEKXFGTSR\", \"NJLMIFXDEK\", \"ASCJFWFUGV\", \"TWBOLWJGAR\", \"AHOMYEGIBP\",  #>     \"CUYVXLQJIV\", \"CMEKXFGTSR\", \"CFSINPQYCO\", \"RFAKZMSZMB\", \"QBPRAWZTBF\",  #>     \"URBJONTBBW\", \"YFDQMQIVBM\", \"CKNVKMZWDC\", \"FKTIIHAGSF\", \"VOXRCHMDIT\",  #>     \"SVYPVLUGHE\", \"RQDKTNHSYQ\", \"RBWJLMGEPF\", \"FIXJLQEKCP\", \"XSHYKGMBPQ\",  #>     \"UCYFOWDBOQ\", \"YDGABWKNRS\", \"CFXONOGTQH\", \"AGJEXFMJAO\", \"CUYVXLQJIV\",  #>     \"ZTTKZEEJZP\", \"AOKHTNTQJC\", \"TXFSIPGCID\", \"ZPWKFFVOCB\", \"MQKHZKWIKA\",  #>     \"MCBXZBXGJN\", \"FHCLEHLIXM\", \"QQIQBNKASY\", \"XDEAUVDMFQ\", \"GSNHQUBLXJ\",  #>     \"YDGABWKNRS\", \"LHDUBEZXXM\", \"AIJRHVVDKP\", \"ISHHJNXLMR\", \"JFHAGKINER\",  #>     \"OPNAGRHLZM\", \"ENXVDYZEEW\", \"QKSAXQEAIB\", \"QBPHMGOGFW\", \"HYUIWKYPXU\",  #>     \"BZPWNEEBHR\", \"TWBOLWJGAR\", \"BJUNWZLJYP\", \"UCYFOWDBOQ\", \"WKXIHCQQBN\",  #>     \"TWBOLWJGAR\", \"FKXBYBMICY\", \"MHVRYUZJWL\", \"JWFPSYZNLW\", \"XDEAUVDMFQ\",  #>     \"QBPRAWZTBF\", \"JRNMLJJSDP\", \"XCEJMFPVDX\", \"NJLMIFXDEK\", \"GXYQHIZVPD\",  #>     \"ACYJOPUKSD\", \"LHDUBEZXXM\", \"EAMRJPOWLU\", \"YDGABWKNRS\", \"RQDKTNHSYQ\",  #>     \"CFXONOGTQH\", \"ACYJOPUKSD\", \"JVCERYCMOA\", \"UJMNXDCYBB\", \"WNATHOQPJS\",  #>     \"MHVRYUZJWL\", \"AOKHTNTQJC\", \"EAMRJPOWLU\", \"VBFGFOMUQJ\", \"HYHAFAFYEA\",  #>     \"DRQRVFYUCX\", \"ISHHJNXLMR\", \"ESYOZKOHCU\", \"QEAYJDRZQO\", \"ZBXYPQEVLU\",  #>     \"XDEAUVDMFQ\", \"WKXIHCQQBN\", \"EKNGZSKPGF\", \"XSHYKGMBPQ\", \"ENXVDYZEEW\",  #>     \"YROTAZMWFI\", \"KTANGMAQMT\", \"QCCNNYIKTH\", \"EJSYIOEOJL\", \"EWTGOBRLKP\",  #>     \"ISWVRSKEUK\", \"WLNMRBXMPC\", \"YDGABWKNRS\", \"GSNHQUBLXJ\", \"ISHHJNXLMR\",  #>     \"KIJPLWHVGS\", \"KBYFYYONYU\", \"FKXBYBMICY\", \"RMEYEXVXVX\", \"MMCWEZDZSL\",  #>     \"ZTTKZEEJZP\", \"CJQEUMATTB\", \"OPNAGRHLZM\", \"ESYOZKOHCU\", \"TLGDIASGEL\",  #>     \"XDEAUVDMFQ\", \"VBFGFOMUQJ\", \"CFXONOGTQH\", \"RQDKTNHSYQ\", \"ERVIHSPAYA\",  #>     \"ISHHJNXLMR\", \"CFXONOGTQH\", \"ISWVRSKEUK\", \"QBPHMGOGFW\", \"TKKAYBAFGV\",  #>     \"XDEAUVDMFQ\", \"HPKSIGVDRL\", \"QBPRAWZTBF\", \"TXFSIPGCID\", \"GSHWBCJXVZ\",  #>     \"WKXIHCQQBN\", \"FHCLEHLIXM\", \"MPSFHTGKEF\", \"ESYOZKOHCU\", \"CFSINPQYCO\",  #>     \"RNAOTFIWTN\", \"CALRWQEBFZ\", \"ACYJOPUKSD\", \"TWBOLWJGAR\", \"RNAOTFIWTN\",  #>     \"HCEHZFVRBV\", \"MMCWEZDZSL\", \"AFUTZUEXVM\", \"OPNAGRHLZM\", \"ZBXYPQEVLU\",  #>     \"OPNAGRHLZM\", \"TWBOLWJGAR\", \"CUYVXLQJIV\", \"AZVIVPYKND\", \"CFSINPQYCO\",  #>     \"JVCERYCMOA\", \"CJQEUMATTB\", \"AGJEXFMJAO\", \"MMCWEZDZSL\", \"OPNAGRHLZM\",  #>     \"HYHAFAFYEA\", \"RNAOTFIWTN\", \"CFSINPQYCO\", \"MGDZOPJAFG\", \"ISWVRSKEUK\",  #>     \"GSNHQUBLXJ\", \"FIXJLQEKCP\", \"LHDUBEZXXM\", \"GXYQHIZVPD\", \"ELMZBUCGXP\",  #>     \"GXYQHIZVPD\", \"ZPWKFFVOCB\", \"CKNVKMZWDC\", \"CKNVKMZWDC\", \"ZTCMALLRXB\",  #>     \"RNAOTFIWTN\", \"CMEKXFGTSR\", \"ISHHJNXLMR\", \"CKNVKMZWDC\", \"TLGDIASGEL\",  #>     \"GXYQHIZVPD\", \"KTANGMAQMT\", \"YDGABWKNRS\", \"CFXONOGTQH\", \"GSHWBCJXVZ\",  #>     \"UJMNXDCYBB\", \"ZBXYPQEVLU\", \"RFAKZMSZMB\", \"MHVRYUZJWL\", \"JPARFIKTYL\",  #>     \"XDEAUVDMFQ\", \"RQDKTNHSYQ\", \"UFXSCLPLER\", \"AOKHTNTQJC\", \"NTSOYECHZQ\",  #>     \"PKTRNWCHPR\", \"GXYQHIZVPD\", \"VOXRCHMDIT\", \"UJMNXDCYBB\", \"CYQGGUSNEK\",  #>     \"UOFFHQQLIR\", \"QCCNNYIKTH\", \"RFAKZMSZMB\", \"ERVIHSPAYA\", \"DRQRVFYUCX\",  #>     \"RBWJLMGEPF\", \"LEESGFRPHV\", \"KTANGMAQMT\", \"AFUTZUEXVM\", \"JVCERYCMOA\",  #>     \"QBPRAWZTBF\", \"IIKTKPNNPT\", \"ZTCMALLRXB\", \"GSNHQUBLXJ\", \"AQEEZTRLKH\",  #>     \"QCCNNYIKTH\", \"BKYOKYIUGW\", \"TLGDIASGEL\", \"LJJSFTJKBP\", \"NCXWRVCMVY\",  #>     \"JWFPSYZNLW\", \"ZTTKZEEJZP\", \"EAMRJPOWLU\", \"MGDZOPJAFG\", \"CFXONOGTQH\",  #>     \"MGDZOPJAFG\", \"RNAOTFIWTN\", \"ZBXYPQEVLU\", \"FHCLEHLIXM\", \"KIJPLWHVGS\",  #>     \"NJLMIFXDEK\", \"WNATHOQPJS\", \"JPARFIKTYL\", \"EAMRJPOWLU\", \"ESYOZKOHCU\",  #>     \"ZBXYPQEVLU\", \"UZRCINDECG\", \"EJSYIOEOJL\", \"HCEHZFVRBV\", \"TLGDIASGEL\",  #>     \"FHCLEHLIXM\", \"EOJBYFQEOY\", \"FHCLEHLIXM\", \"EZLGDZHKHT\", \"AGJEXFMJAO\",  #>     \"ICUEBKDOGB\", \"ASCJFWFUGV\", \"JVCERYCMOA\", \"PHIZOLWIBS\", \"URBJONTBBW\",  #>     \"QCCNNYIKTH\", \"KTANGMAQMT\", \"CMEKXFGTSR\", \"JFHAGKINER\", \"JVKZPZVIIU\",  #>     \"GRCMVPYLDK\", \"QCCNNYIKTH\", \"LGWJJITBKZ\", \"EKNGZSKPGF\", \"AQEEZTRLKH\",  #>     \"JVKZPZVIIU\", \"AGJEXFMJAO\", \"EJSYIOEOJL\", \"GSHWBCJXVZ\", \"TBZWQOHERE\",  #>     \"CUYVXLQJIV\", \"OSNCJRVKET\", \"MQKHZKWIKA\", \"HCEHZFVRBV\", \"MCBXZBXGJN\",  #>     \"OSNCJRVKET\", \"RHALOWGMGJ\", \"RHALOWGMGJ\", \"QMDWWKFVRU\", \"JVCERYCMOA\",  #>     \"NTSOYECHZQ\", \"JPARFIKTYL\", \"ENXVDYZEEW\", \"BZPWNEEBHR\", \"AOKHTNTQJC\",  #>     \"AFUTZUEXVM\", \"FIXJLQEKCP\", \"ERVIHSPAYA\", \"MGDZOPJAFG\", \"PKTRNWCHPR\",  #>     \"VKEOEUOTDQ\", \"UCYFOWDBOQ\", \"ESYOZKOHCU\", \"QCCNNYIKTH\", \"JOPGMOKVOM\",  #>     \"ACYJOPUKSD\", \"CJQEUMATTB\", \"ERVIHSPAYA\", \"FHCLEHLIXM\", \"KBYFYYONYU\",  #>     \"JHVIRHYUEP\", \"JFHAGKINER\", \"JRNMLJJSDP\", \"XKSCGLSVUZ\", \"EOJBYFQEOY\",  #>     \"ERVIHSPAYA\", \"JHVIRHYUEP\", \"RFAKZMSZMB\", \"KIJPLWHVGS\", \"CMEKXFGTSR\",  #>     \"AIJRHVVDKP\", \"CYQGGUSNEK\", \"AFUTZUEXVM\", \"RQDKTNHSYQ\", \"PALVVUCJBF\",  #>     \"JVKZPZVIIU\", \"JFHAGKINER\", \"UOFFHQQLIR\", \"HYUIWKYPXU\", \"BZPWNEEBHR\",  #>     \"XDEAUVDMFQ\", \"ACYJOPUKSD\", \"UJMNXDCYBB\", \"PKTRNWCHPR\", \"GXYQHIZVPD\",  #>     \"JSGBOZVHXC\", \"CJQEUMATTB\", \"YDGABWKNRS\", \"HGHMEUCTEX\", \"TXFSIPGCID\",  #>     \"UZRCINDECG\", \"XDEAUVDMFQ\", \"HPKSIGVDRL\", \"PHIZOLWIBS\", \"OPNAGRHLZM\",  #>     \"TXFSIPGCID\", \"MPSFHTGKEF\", \"AIJRHVVDKP\", \"ENXVDYZEEW\", \"CONXBVIQSU\",  #>     \"ACYJOPUKSD\", \"KIJPLWHVGS\", \"GKPLYRURBB\", \"QCCNNYIKTH\", \"GSNHQUBLXJ\",  #>     \"CFSINPQYCO\", \"TBZWQOHERE\", \"GXYQHIZVPD\", \"CFSINPQYCO\", \"RQDKTNHSYQ\",  #>     \"RHALOWGMGJ\", \"TWBOLWJGAR\", \"EOJBYFQEOY\", \"KIJPLWHVGS\", \"BKYOKYIUGW\",  #>     \"ZBXYPQEVLU\", \"MPSFHTGKEF\", \"RFAKZMSZMB\", \"GXYQHIZVPD\", \"ISHHJNXLMR\",  #>     \"PHIZOLWIBS\", \"LGWJJITBKZ\", \"BZPWNEEBHR\", \"LJJSFTJKBP\", \"PKBCVRCMCS\",  #>     \"KBYFYYONYU\", \"RFAKZMSZMB\", \"KBYFYYONYU\", \"AHOMYEGIBP\", \"RNAOTFIWTN\",  #>     \"CYQGGUSNEK\", \"BKYOKYIUGW\", \"KKKAFDRDCO\", \"RMEYEXVXVX\", \"MQKHZKWIKA\",  #>     \"RFAKZMSZMB\", \"KKKAFDRDCO\", \"EAMRJPOWLU\", \"CUYVXLQJIV\", \"EAMRJPOWLU\",  #>     \"PALVVUCJBF\", \"OSNCJRVKET\", \"CONXBVIQSU\", \"DRQRVFYUCX\", \"XKSCGLSVUZ\",  #>     \"HPKSIGVDRL\", \"NTSOYECHZQ\", \"TWBOLWJGAR\", \"GKPLYRURBB\", \"XCEJMFPVDX\",  #>     \"JFHAGKINER\", \"CKNVKMZWDC\", \"CFSINPQYCO\", \"HCEHZFVRBV\", \"ZTCMALLRXB\",  #>     \"JWFPSYZNLW\", \"TXFSIPGCID\", \"NCXWRVCMVY\", \"BHOFOGKCJA\", \"ACYJOPUKSD\",  #>     \"XDEAUVDMFQ\", \"QKSAXQEAIB\", \"HGHMEUCTEX\", \"DRQRVFYUCX\", \"ESYOZKOHCU\",  #>     \"RHALOWGMGJ\", \"HPKSIGVDRL\", \"PALVVUCJBF\", \"BZPWNEEBHR\", \"YROTAZMWFI\",  #>     \"EOJBYFQEOY\", \"PKBCVRCMCS\", \"JWFPSYZNLW\", \"XKSCGLSVUZ\", \"FHCLEHLIXM\",  #>     \"IYNWQZVCCI\", \"FKXBYBMICY\", \"RHALOWGMGJ\", \"HYHAFAFYEA\", \"ISWVRSKEUK\",  #>     \"JSGBOZVHXC\", \"JVKZPZVIIU\", \"GSHWBCJXVZ\", \"ISHHJNXLMR\", \"PKTRNWCHPR\",  #>     \"RQDKTNHSYQ\", \"UZRCINDECG\", \"TKKAYBAFGV\", \"QMDWWKFVRU\", \"GSHWBCJXVZ\",  #>     \"QCCNNYIKTH\", \"LGWJJITBKZ\", \"CKNVKMZWDC\", \"URBJONTBBW\", \"PKBCVRCMCS\",  #>     \"JWFPSYZNLW\", \"TKKAYBAFGV\", \"FKXBYBMICY\", \"ZTCMALLRXB\", \"ZTTKZEEJZP\",  #>     \"PKBCVRCMCS\", \"UJMNXDCYBB\", \"JFHAGKINER\", \"GSHWBCJXVZ\", \"WEDUDZADWG\",  #>     \"TWBOLWJGAR\", \"VBFGFOMUQJ\", \"QCCNNYIKTH\", \"RNAOTFIWTN\", \"QEAYJDRZQO\",  #>     \"RNAOTFIWTN\", \"JHXSYICTMS\", \"KTANGMAQMT\", \"MPSFHTGKEF\", \"VOXRCHMDIT\",  #>     \"CFSINPQYCO\", \"JWFPSYZNLW\", \"JVCERYCMOA\", \"CUYVXLQJIV\", \"GKPLYRURBB\",  #>     \"NTSOYECHZQ\", \"NOTPDVRLPM\", \"TBZWQOHERE\", \"LGWJJITBKZ\", \"EAMRJPOWLU\",  #>     \"UZRCINDECG\", \"UNCDYWJXLO\", \"HYUIWKYPXU\", \"JSGBOZVHXC\", \"GSHWBCJXVZ\",  #>     \"PKBCVRCMCS\", \"RQDKTNHSYQ\", \"QEAYJDRZQO\", \"ASCJFWFUGV\", \"DRQRVFYUCX\",  #>     \"MHVRYUZJWL\", \"ZPWKFFVOCB\", \"QMDWWKFVRU\", \"NOTPDVRLPM\", \"GXYQHIZVPD\",  #>     \"LGWJJITBKZ\", \"SVYPVLUGHE\", \"GXQQOGSTOQ\", \"CFSINPQYCO\", \"JPARFIKTYL\",  #>     \"CYQGGUSNEK\", \"RNAOTFIWTN\", \"XSHYKGMBPQ\", \"GXYQHIZVPD\", \"RBWJLMGEPF\",  #>     \"YDGABWKNRS\", \"ASCJFWFUGV\", \"GSHWBCJXVZ\", \"ZTTKZEEJZP\", \"CONXBVIQSU\",  #>     \"YFDQMQIVBM\", \"EOJBYFQEOY\", \"RFAKZMSZMB\", \"URBJONTBBW\", \"EOJBYFQEOY\",  #>     \"ASCJFWFUGV\", \"EOJBYFQEOY\", \"TWBOLWJGAR\", \"AZVIVPYKND\", \"GRCMVPYLDK\",  #>     \"JOPGMOKVOM\", \"OSNCJRVKET\", \"RFAKZMSZMB\", \"JVKZPZVIIU\", \"RHALOWGMGJ\",  #>     \"ZTCMALLRXB\", \"VBFGFOMUQJ\", \"BZPWNEEBHR\", \"CFXONOGTQH\", \"KBYFYYONYU\",  #>     \"CFXONOGTQH\", \"GSHWBCJXVZ\", \"YROTAZMWFI\", \"BBONKKTFNG\", \"YDGABWKNRS\",  #>     \"EWTGOBRLKP\", \"JRNMLJJSDP\", \"RFAKZMSZMB\", \"BZPWNEEBHR\", \"AOKHTNTQJC\",  #>     \"CMEKXFGTSR\", \"FIXJLQEKCP\", \"MCBXZBXGJN\", \"RMEYEXVXVX\", \"GKPLYRURBB\",  #>     \"JOPGMOKVOM\", \"BKYOKYIUGW\", \"UOFFHQQLIR\", \"BZPWNEEBHR\", \"WMVGSBQYPB\",  #>     \"FHCLEHLIXM\", \"TXFSIPGCID\", \"MHVRYUZJWL\", \"EOJBYFQEOY\", \"GXYQHIZVPD\",  #>     \"TWBOLWJGAR\", \"UCYFOWDBOQ\", \"XKSCGLSVUZ\", \"ENXVDYZEEW\", \"ZPWKFFVOCB\",  #>     \"AQEEZTRLKH\", \"URBJONTBBW\", \"ISWVRSKEUK\", \"UZRCINDECG\", \"KKKAFDRDCO\",  #>     \"EAMRJPOWLU\", \"JSGBOZVHXC\", \"QBPHMGOGFW\", \"YFDQMQIVBM\", \"CKNVKMZWDC\",  #>     \"ZTTKZEEJZP\", \"MMCWEZDZSL\", \"EOJBYFQEOY\", \"CFXONOGTQH\", \"TWBOLWJGAR\",  #>     \"TXFSIPGCID\", \"KBYFYYONYU\", \"OPNAGRHLZM\", \"SPBEZTBJFS\", \"KKKAFDRDCO\",  #>     \"LJJSFTJKBP\", \"GRCMVPYLDK\", \"HLWNYXNVYM\", \"QBPRAWZTBF\", \"HPKSIGVDRL\",  #>     \"CJQEUMATTB\", \"XKSCGLSVUZ\", \"JPARFIKTYL\", \"EZLGDZHKHT\", \"MHVRYUZJWL\",  #>     \"JHVIRHYUEP\", \"XDEAUVDMFQ\", \"UJMNXDCYBB\", \"RHALOWGMGJ\", \"DRQRVFYUCX\",  #>     \"JSGBOZVHXC\", \"AQEEZTRLKH\", \"QBPHMGOGFW\", \"GKPLYRURBB\", \"OPNAGRHLZM\",  #>     \"YROTAZMWFI\", \"MHVRYUZJWL\", \"MHVRYUZJWL\", \"CKNVKMZWDC\", \"HPKSIGVDRL\",  #>     \"AHOMYEGIBP\", \"CJQEUMATTB\", \"AIJRHVVDKP\", \"HLWNYXNVYM\", \"FKXBYBMICY\",  #>     \"AIJRHVVDKP\", \"KKKAFDRDCO\", \"QMDWWKFVRU\", \"SPBEZTBJFS\", \"BHOFOGKCJA\",  #>     \"LEESGFRPHV\", \"KTANGMAQMT\", \"PALVVUCJBF\", \"LJJSFTJKBP\", \"CFSINPQYCO\",  #>     \"GKPLYRURBB\", \"CJQEUMATTB\", \"BZPWNEEBHR\", \"WEDUDZADWG\", \"TWBOLWJGAR\",  #>     \"QQIQBNKASY\", \"JVCERYCMOA\", \"RMEYEXVXVX\", \"AZVIVPYKND\", \"RSSXENWCQU\",  #>     \"QQIQBNKASY\", \"JRNMLJJSDP\", \"XKSCGLSVUZ\", \"QMDWWKFVRU\", \"NOTPDVRLPM\",  #>     \"UZRCINDECG\", \"MGDZOPJAFG\", \"YFDQMQIVBM\", \"ESYOZKOHCU\", \"XSHYKGMBPQ\",  #>     \"RHALOWGMGJ\", \"LGWJJITBKZ\", \"QQIQBNKASY\", \"VBFGFOMUQJ\", \"CJQEUMATTB\",  #>     \"FIXJLQEKCP\", \"XKSCGLSVUZ\", \"CALRWQEBFZ\", \"YDGABWKNRS\", \"AGJEXFMJAO\",  #>     \"RQDKTNHSYQ\", \"RNAOTFIWTN\", \"XSHYKGMBPQ\", \"PKBCVRCMCS\", \"ELMZBUCGXP\",  #>     \"NOTPDVRLPM\", \"CONXBVIQSU\", \"CMEKXFGTSR\", \"TXFSIPGCID\", \"TKKAYBAFGV\",  #>     \"BJUNWZLJYP\", \"RFAKZMSZMB\", \"LJJSFTJKBP\", \"MQKHZKWIKA\", \"XCEJMFPVDX\",  #>     \"PKTRNWCHPR\", \"XDEAUVDMFQ\", \"EAMRJPOWLU\", \"ASCJFWFUGV\", \"ONTOHBVEQC\",  #>     \"LGWJJITBKZ\", \"NOTPDVRLPM\", \"CUYVXLQJIV\", \"AQEEZTRLKH\", \"QQIQBNKASY\",  #>     \"XKSCGLSVUZ\", \"QMDWWKFVRU\", \"ESYOZKOHCU\", \"NOTPDVRLPM\", \"TBZWQOHERE\",  #>     \"JOPGMOKVOM\", \"CALRWQEBFZ\", \"ZPWKFFVOCB\", \"SVYPVLUGHE\", \"HPKSIGVDRL\",  #>     \"YDGABWKNRS\", \"GXQQOGSTOQ\", \"UFXSCLPLER\", \"HPKSIGVDRL\", \"CALRWQEBFZ\",  #>     \"XDEAUVDMFQ\", \"PHIZOLWIBS\", \"GKPLYRURBB\", \"PHIZOLWIBS\", \"AZVIVPYKND\",  #>     \"WKXIHCQQBN\", \"DRQRVFYUCX\", \"KTANGMAQMT\", \"ZBXYPQEVLU\", \"HYUIWKYPXU\",  #>     \"PBLJMWGFTW\", \"PKBCVRCMCS\", \"QCCNNYIKTH\", \"KTANGMAQMT\", \"LJJSFTJKBP\",  #>     \"ISHHJNXLMR\", \"JVKZPZVIIU\", \"ISHHJNXLMR\", \"ZTTKZEEJZP\", \"JOPGMOKVOM\",  #>     \"HGHMEUCTEX\", \"AZVIVPYKND\", \"CALRWQEBFZ\", \"URBJONTBBW\", \"HYUIWKYPXU\",  #>     \"UJMNXDCYBB\", \"EOJBYFQEOY\", \"JHVIRHYUEP\", \"FKXBYBMICY\", \"HPKSIGVDRL\",  #>     \"XCEJMFPVDX\", \"XKSCGLSVUZ\", \"HLWNYXNVYM\", \"JPARFIKTYL\", \"QEAYJDRZQO\",  #>     \"RFAKZMSZMB\", \"AIJRHVVDKP\", \"MCBXZBXGJN\", \"ZPWKFFVOCB\", \"CFXONOGTQH\",  #>     \"RFAKZMSZMB\", \"RSSXENWCQU\", \"WNATHOQPJS\", \"VKEOEUOTDQ\", \"KTANGMAQMT\",  #>     \"BZPWNEEBHR\", \"GKPLYRURBB\", \"PKBCVRCMCS\", \"AGJEXFMJAO\", \"JFHAGKINER\",  #>     \"YDGABWKNRS\", \"CJQEUMATTB\", \"KBYFYYONYU\", \"AQEEZTRLKH\", \"FKXBYBMICY\",  #>     \"DRQRVFYUCX\", \"NCXWRVCMVY\", \"EKNGZSKPGF\", \"XDEAUVDMFQ\", \"VKEOEUOTDQ\",  #>     \"TBZWQOHERE\", \"ZTTKZEEJZP\", \"AQEEZTRLKH\", \"KBYFYYONYU\", \"WNATHOQPJS\",  #>     \"RQDKTNHSYQ\", \"JOPGMOKVOM\", \"VOXRCHMDIT\", \"YDGABWKNRS\", \"AFUTZUEXVM\",  #>     \"YFDQMQIVBM\", \"RBWJLMGEPF\", \"CFXONOGTQH\", \"LJJSFTJKBP\", \"RBWJLMGEPF\",  #>     \"KIJPLWHVGS\", \"PALVVUCJBF\", \"PALVVUCJBF\", \"RNAOTFIWTN\", \"CJQEUMATTB\",  #>     \"SPBEZTBJFS\", \"HPKSIGVDRL\", \"JFHAGKINER\", \"MMCWEZDZSL\", \"MPSFHTGKEF\",  #>     \"KKKAFDRDCO\", \"DRQRVFYUCX\", \"ICUEBKDOGB\", \"CALRWQEBFZ\", \"CJQEUMATTB\",  #>     \"UOFFHQQLIR\", \"HYUIWKYPXU\", \"SVBBYDPIOA\", \"ZPWKFFVOCB\", \"GKPLYRURBB\",  #>     \"IYNWQZVCCI\", \"NCXWRVCMVY\", \"NJLMIFXDEK\", \"XKSCGLSVUZ\", \"JOPGMOKVOM\",  #>     \"ASCJFWFUGV\", \"ZTTKZEEJZP\", \"AHOMYEGIBP\", \"BZPWNEEBHR\", \"GSNHQUBLXJ\",  #>     \"CYQGGUSNEK\", \"TWBOLWJGAR\", \"CFXONOGTQH\", \"NCXWRVCMVY\", \"TWBOLWJGAR\",  #>     \"BJUNWZLJYP\", \"CKNVKMZWDC\", \"JSGBOZVHXC\", \"EOJBYFQEOY\", \"CUYVXLQJIV\",  #>     \"EOJBYFQEOY\", \"PALVVUCJBF\", \"AGJEXFMJAO\", \"HPKSIGVDRL\", \"HYHAFAFYEA\",  #>     \"JOPGMOKVOM\", \"ZPWKFFVOCB\", \"RNAOTFIWTN\", \"BZPWNEEBHR\", \"EOJBYFQEOY\",  #>     \"FIXJLQEKCP\", \"QCCNNYIKTH\", \"BZPWNEEBHR\", \"NTSOYECHZQ\", \"ZTTKZEEJZP\",  #>     \"EWTGOBRLKP\", \"WMVGSBQYPB\", \"QBPRAWZTBF\", \"XCEJMFPVDX\", \"ESYOZKOHCU\",  #>     \"QEAYJDRZQO\", \"ZPWKFFVOCB\", \"BJUNWZLJYP\", \"URBJONTBBW\", \"CUYVXLQJIV\",  #>     \"CUYVXLQJIV\", \"CKNVKMZWDC\", \"TLGDIASGEL\", \"ZTTKZEEJZP\", \"WLNMRBXMPC\",  #>     \"ONTOHBVEQC\", \"AFUTZUEXVM\", \"GKPLYRURBB\", \"AZVIVPYKND\", \"CKNVKMZWDC\",  #>     \"BKYOKYIUGW\", \"ASCJFWFUGV\", \"CFSINPQYCO\", \"EOJBYFQEOY\", \"XKSCGLSVUZ\",  #>     \"AHOMYEGIBP\", \"QEAYJDRZQO\", \"FIXJLQEKCP\", \"EZLGDZHKHT\", \"ICUEBKDOGB\",  #>     \"BZPWNEEBHR\", \"ZTCMALLRXB\", \"YFDQMQIVBM\", \"OPNAGRHLZM\", \"ESYOZKOHCU\",  #>     \"GKPLYRURBB\", \"VBFGFOMUQJ\", \"JWFPSYZNLW\", \"PKBCVRCMCS\", \"RNAOTFIWTN\",  #>     \"CYQGGUSNEK\", \"MHVRYUZJWL\", \"NCXWRVCMVY\", \"JRNMLJJSDP\", \"ZTTKZEEJZP\",  #>     \"PALVVUCJBF\", \"WMVGSBQYPB\", \"ZTCMALLRXB\", \"UJMNXDCYBB\", \"GKPLYRURBB\",  #>     \"WNATHOQPJS\", \"LJJSFTJKBP\", \"ZBXYPQEVLU\", \"QKSAXQEAIB\", \"MQKHZKWIKA\",  #>     \"LGWJJITBKZ\", \"TWBOLWJGAR\", \"VOXRCHMDIT\", \"NCXWRVCMVY\", \"FKXBYBMICY\",  #>     \"ACYJOPUKSD\", \"CALRWQEBFZ\", \"HGHMEUCTEX\", \"ENXVDYZEEW\", \"YDGABWKNRS\",  #>     \"SPBEZTBJFS\", \"UNCDYWJXLO\", \"JVKZPZVIIU\", \"LJJSFTJKBP\", \"GSNHQUBLXJ\",  #>     \"ESYOZKOHCU\", \"CALRWQEBFZ\", \"ESYOZKOHCU\", \"RHALOWGMGJ\", \"CYQGGUSNEK\",  #>     \"YFDQMQIVBM\", \"MQKHZKWIKA\", \"UZRCINDECG\", \"PBLJMWGFTW\", \"URBJONTBBW\",  #>     \"FHCLEHLIXM\", \"KKKAFDRDCO\", \"UOFFHQQLIR\", \"TLGDIASGEL\", \"AHOMYEGIBP\",  #>     \"OPNAGRHLZM\", \"UZRCINDECG\", \"TXFSIPGCID\", \"HGHMEUCTEX\", \"MPSFHTGKEF\",  #>     \"CUYVXLQJIV\", \"JHXSYICTMS\", \"MHVRYUZJWL\", \"FIXJLQEKCP\", \"QQIQBNKASY\",  #>     \"AZVIVPYKND\", \"ZTTKZEEJZP\", \"QBPRAWZTBF\", \"JVCERYCMOA\", \"UZRCINDECG\",  #>     \"QMDWWKFVRU\", \"XCEJMFPVDX\", \"RHALOWGMGJ\", \"ZTCMALLRXB\", \"AIJRHVVDKP\",  #>     \"JWFPSYZNLW\", \"EAMRJPOWLU\", \"ENXVDYZEEW\", \"FKXBYBMICY\", \"YDGABWKNRS\",  #>     \"ZBXYPQEVLU\", \"BKYOKYIUGW\", \"BBONKKTFNG\", \"URBJONTBBW\", \"VOXRCHMDIT\",  #>     \"AQEEZTRLKH\", \"NOTPDVRLPM\", \"HLWNYXNVYM\", \"CMEKXFGTSR\", \"JOPGMOKVOM\",  #>     \"YDGABWKNRS\", \"HPKSIGVDRL\", \"FHCLEHLIXM\", \"GXYQHIZVPD\", \"TLGDIASGEL\",  #>     \"GKPLYRURBB\", \"CUYVXLQJIV\", \"BZPWNEEBHR\", \"TWBOLWJGAR\", \"EWTGOBRLKP\",  #>     \"JWFPSYZNLW\", \"ZTCMALLRXB\", \"EJSYIOEOJL\", \"FHCLEHLIXM\", \"YDGABWKNRS\",  #>     \"BZPWNEEBHR\", \"YDGABWKNRS\", \"TLGDIASGEL\", \"OPNAGRHLZM\", \"HYUIWKYPXU\",  #>     \"ESYOZKOHCU\", \"EOJBYFQEOY\", \"TWBOLWJGAR\", \"ISWVRSKEUK\", \"RMEYEXVXVX\",  #>     \"RHALOWGMGJ\", \"CMEKXFGTSR\", \"CFSINPQYCO\", \"WEDUDZADWG\", \"IIKTKPNNPT\",  #>     \"MMCWEZDZSL\", \"FKXBYBMICY\", \"VOXRCHMDIT\", \"GXQQOGSTOQ\", \"ZTTKZEEJZP\",  #>     \"RMEYEXVXVX\", \"WLNMRBXMPC\", \"JFHAGKINER\", \"GXYQHIZVPD\", \"CJQEUMATTB\",  #>     \"YROTAZMWFI\", \"TWBOLWJGAR\", \"RHALOWGMGJ\", \"YDGABWKNRS\", \"JFHAGKINER\",  #>     \"VOXRCHMDIT\", \"JPARFIKTYL\", \"CUYVXLQJIV\", \"YFDQMQIVBM\", \"LEESGFRPHV\",  #>     \"ZTCMALLRXB\", \"HYHAFAFYEA\", \"UOFFHQQLIR\", \"GSNHQUBLXJ\", \"CMEKXFGTSR\",  #>     \"UZRCINDECG\", \"RMEYEXVXVX\", \"ZTCMALLRXB\", \"ESYOZKOHCU\", \"LEESGFRPHV\",  #>     \"CKNVKMZWDC\", \"JVKZPZVIIU\", \"TXFSIPGCID\", \"RNAOTFIWTN\", \"RMEYEXVXVX\",  #>     \"VKEOEUOTDQ\", \"JWFPSYZNLW\", \"UJMNXDCYBB\", \"QQIQBNKASY\", \"GKPLYRURBB\",  #>     \"ASCJFWFUGV\", \"FKXBYBMICY\", \"VKEOEUOTDQ\", \"GRCMVPYLDK\", \"ASCJFWFUGV\",  #>     \"AZVIVPYKND\", \"BZPWNEEBHR\", \"VKEOEUOTDQ\", \"RQDKTNHSYQ\", \"ASCJFWFUGV\",  #>     \"KIJPLWHVGS\", \"EAMRJPOWLU\", \"KIJPLWHVGS\", \"YROTAZMWFI\", \"ESYOZKOHCU\",  #>     \"BKYOKYIUGW\", \"WMVGSBQYPB\", \"QMDWWKFVRU\", \"TWBOLWJGAR\", \"PALVVUCJBF\",  #>     \"JPARFIKTYL\", \"JOPGMOKVOM\", \"JVCERYCMOA\", \"CUYVXLQJIV\", \"GSNHQUBLXJ\",  #>     \"NTSOYECHZQ\", \"JOPGMOKVOM\", \"QBPHMGOGFW\", \"YDGABWKNRS\", \"EAMRJPOWLU\",  #>     \"EAMRJPOWLU\", \"KKKAFDRDCO\", \"UZRCINDECG\", \"JSGBOZVHXC\", \"GXYQHIZVPD\",  #>     \"PKBCVRCMCS\", \"WEDUDZADWG\", \"CKNVKMZWDC\", \"KBYFYYONYU\", \"AQEEZTRLKH\",  #>     \"ONTOHBVEQC\", \"EAMRJPOWLU\", \"WMVGSBQYPB\", \"CYQGGUSNEK\", \"SPBEZTBJFS\",  #>     \"JHVIRHYUEP\", \"WEDUDZADWG\", \"ERVIHSPAYA\", \"ZBXYPQEVLU\", \"CKNVKMZWDC\",  #>     \"ZPWKFFVOCB\", \"YFDQMQIVBM\", \"LEESGFRPHV\", \"OSNCJRVKET\", \"NCXWRVCMVY\",  #>     \"MMCWEZDZSL\", \"NCXWRVCMVY\", \"GRCMVPYLDK\", \"TWBOLWJGAR\", \"ASCJFWFUGV\",  #>     \"ZTCMALLRXB\", \"EKNGZSKPGF\", \"UOFFHQQLIR\", \"KTANGMAQMT\", \"ESYOZKOHCU\",  #>     \"OPNAGRHLZM\", \"YROTAZMWFI\", \"FIXJLQEKCP\", \"YDGABWKNRS\", \"AQEEZTRLKH\",  #>     \"NTSOYECHZQ\", \"URBJONTBBW\", \"CKNVKMZWDC\", \"TLGDIASGEL\", \"JRNMLJJSDP\",  #>     \"ZTCMALLRXB\", \"HGHMEUCTEX\", \"FIXJLQEKCP\", \"NJLMIFXDEK\", \"CMEKXFGTSR\",  #>     \"VKEOEUOTDQ\", \"NJLMIFXDEK\", \"GXQQOGSTOQ\", \"CJQEUMATTB\", \"PHIZOLWIBS\",  #>     \"GXQQOGSTOQ\", \"HCEHZFVRBV\", \"HCEHZFVRBV\", \"ISHHJNXLMR\", \"LJJSFTJKBP\",  #>     \"HGHMEUCTEX\", \"XDEAUVDMFQ\", \"PKBCVRCMCS\", \"KBYFYYONYU\", \"ICUEBKDOGB\",  #>     \"CKNVKMZWDC\", \"FHCLEHLIXM\", \"LGWJJITBKZ\", \"KTANGMAQMT\", \"QMDWWKFVRU\",  #>     \"XKSCGLSVUZ\", \"KTANGMAQMT\", \"EAMRJPOWLU\", \"MHVRYUZJWL\", \"VKEOEUOTDQ\",  #>     \"CYQGGUSNEK\", \"ASCJFWFUGV\", \"GXYQHIZVPD\", \"ENXVDYZEEW\", \"ZTCMALLRXB\",  #>     \"RQDKTNHSYQ\", \"QEAYJDRZQO\", \"CKNVKMZWDC\", \"AGJEXFMJAO\", \"WEDUDZADWG\",  #>     \"UZRCINDECG\", \"YROTAZMWFI\", \"VKEOEUOTDQ\", \"ZTCMALLRXB\", \"XDEAUVDMFQ\",  #>     \"CFSINPQYCO\", \"MPSFHTGKEF\", \"WLNMRBXMPC\", \"IIKTKPNNPT\", \"ZTTKZEEJZP\",  #>     \"ESYOZKOHCU\", \"OPNAGRHLZM\", \"ONTOHBVEQC\", \"QQIQBNKASY\", \"IYNWQZVCCI\",  #>     \"QKSAXQEAIB\", \"BJUNWZLJYP\", \"AIJRHVVDKP\", \"WLNMRBXMPC\", \"AHOMYEGIBP\",  #>     \"FHCLEHLIXM\", \"GKPLYRURBB\", \"CJQEUMATTB\", \"JVCERYCMOA\", \"AIJRHVVDKP\",  #>     \"ACYJOPUKSD\", \"TLGDIASGEL\", \"ZBXYPQEVLU\", \"EOJBYFQEOY\", \"HPKSIGVDRL\",  #>     \"RFAKZMSZMB\", \"ZTTKZEEJZP\", \"BJUNWZLJYP\", \"FKXBYBMICY\", \"JSGBOZVHXC\",  #>     \"ZBXYPQEVLU\", \"AQEEZTRLKH\", \"CYQGGUSNEK\", \"ISWVRSKEUK\", \"NOTPDVRLPM\",  #>     \"ZPWKFFVOCB\", \"AHOMYEGIBP\", \"ONTOHBVEQC\", \"BZPWNEEBHR\", \"FKXBYBMICY\",  #>     \"GKPLYRURBB\", \"TBZWQOHERE\", \"FKTIIHAGSF\", \"RMEYEXVXVX\", \"JPARFIKTYL\",  #>     \"NCXWRVCMVY\", \"UFXSCLPLER\", \"ONTOHBVEQC\", \"VOXRCHMDIT\", \"RHALOWGMGJ\",  #>     \"QMDWWKFVRU\", \"WEDUDZADWG\", \"AQEEZTRLKH\", \"YDGABWKNRS\", \"RQDKTNHSYQ\",  #>     \"EOJBYFQEOY\", \"ZTCMALLRXB\", \"WNATHOQPJS\", \"UNCDYWJXLO\", \"FIXJLQEKCP\",  #>     \"NOTPDVRLPM\", \"URBJONTBBW\", \"PALVVUCJBF\", \"ZTCMALLRXB\", \"JVCERYCMOA\",  #>     \"JRNMLJJSDP\", \"CFSINPQYCO\", \"JPARFIKTYL\", \"KTANGMAQMT\", \"HCEHZFVRBV\",  #>     \"AFUTZUEXVM\", \"YDGABWKNRS\", \"TKKAYBAFGV\", \"EOJBYFQEOY\", \"ACYJOPUKSD\",  #>     \"AHOMYEGIBP\", \"MGDZOPJAFG\", \"RSSXENWCQU\", \"AZVIVPYKND\", \"JFHAGKINER\",  #>     \"YDGABWKNRS\", \"ESYOZKOHCU\", \"HYUIWKYPXU\", \"QCCNNYIKTH\", \"WNATHOQPJS\",  #>     \"XSHYKGMBPQ\", \"JPARFIKTYL\", \"GRCMVPYLDK\", \"HYUIWKYPXU\", \"RBWJLMGEPF\",  #>     \"ESYOZKOHCU\", \"BZPWNEEBHR\", \"CALRWQEBFZ\", \"YROTAZMWFI\", \"YFDQMQIVBM\",  #>     \"HCEHZFVRBV\", \"UOFFHQQLIR\", \"BZPWNEEBHR\", \"FHCLEHLIXM\", \"URBJONTBBW\",  #>     \"GXYQHIZVPD\", \"AZVIVPYKND\", \"LHDUBEZXXM\", \"LJJSFTJKBP\", \"ONTOHBVEQC\",  #>     \"AHOMYEGIBP\", \"CFXONOGTQH\", \"CJQEUMATTB\", \"KBYFYYONYU\", \"EJSYIOEOJL\",  #>     \"JPARFIKTYL\", \"ISWVRSKEUK\", \"AHOMYEGIBP\", \"CFSINPQYCO\", \"QMDWWKFVRU\",  #>     \"TLGDIASGEL\", \"RQDKTNHSYQ\", \"CJQEUMATTB\", \"JWFPSYZNLW\", \"FKXBYBMICY\",  #>     \"XSHYKGMBPQ\", \"CUYVXLQJIV\", \"JRNMLJJSDP\", \"JPARFIKTYL\", \"BKYOKYIUGW\",  #>     \"RNAOTFIWTN\", \"GSNHQUBLXJ\", \"QBPHMGOGFW\", \"GXYQHIZVPD\", \"BZPWNEEBHR\",  #>     \"BKYOKYIUGW\", \"GSHWBCJXVZ\", \"CFSINPQYCO\", \"EAMRJPOWLU\", \"WEDUDZADWG\",  #>     \"FHCLEHLIXM\", \"XSHYKGMBPQ\", \"EKNGZSKPGF\", \"CFSINPQYCO\", \"CJQEUMATTB\",  #>     \"CFXONOGTQH\", \"AGJEXFMJAO\", \"ISHHJNXLMR\", \"HYHAFAFYEA\", \"RFAKZMSZMB\",  #>     \"XCEJMFPVDX\", \"QBPHMGOGFW\", \"JOPGMOKVOM\", \"KTANGMAQMT\", \"PKTRNWCHPR\",  #>     \"ENXVDYZEEW\", \"ISWVRSKEUK\", \"AQEEZTRLKH\", \"QMDWWKFVRU\", \"SVYPVLUGHE\",  #>     \"EKNGZSKPGF\", \"KTANGMAQMT\", \"JVCERYCMOA\", \"XKSCGLSVUZ\", \"QKSAXQEAIB\",  #>     \"EKNGZSKPGF\", \"ZTCMALLRXB\", \"AGJEXFMJAO\", \"WEDUDZADWG\", \"AGJEXFMJAO\",  #>     \"UOFFHQQLIR\", \"KBYFYYONYU\", \"FIXJLQEKCP\", \"ZPWKFFVOCB\", \"NJLMIFXDEK\",  #>     \"GKPLYRURBB\", \"RQDKTNHSYQ\", \"EAMRJPOWLU\", \"AGJEXFMJAO\", \"YFDQMQIVBM\",  #>     \"RQDKTNHSYQ\", \"GRCMVPYLDK\", \"WKXIHCQQBN\", \"LHDUBEZXXM\", \"UOFFHQQLIR\",  #>     \"GXQQOGSTOQ\", \"AFUTZUEXVM\", \"QBPHMGOGFW\", \"ESYOZKOHCU\", \"ENXVDYZEEW\",  #>     \"OSNCJRVKET\", \"GSNHQUBLXJ\", \"GXQQOGSTOQ\", \"AQEEZTRLKH\", \"AZVIVPYKND\",  #>     \"GXYQHIZVPD\", \"AQEEZTRLKH\", \"KKKAFDRDCO\", \"TLGDIASGEL\", \"PHIZOLWIBS\",  #>     \"ZBXYPQEVLU\", \"JVKZPZVIIU\", \"HCEHZFVRBV\", \"FHCLEHLIXM\", \"AOKHTNTQJC\",  #>     \"SVBBYDPIOA\", \"BJUNWZLJYP\", \"JRNMLJJSDP\", \"GRCMVPYLDK\", \"ZTCMALLRXB\",  #>     \"TBZWQOHERE\", \"SPBEZTBJFS\", \"CUYVXLQJIV\", \"WEDUDZADWG\", \"JWFPSYZNLW\",  #>     \"MMCWEZDZSL\", \"JRNMLJJSDP\", \"EOJBYFQEOY\", \"RMEYEXVXVX\", \"IIKTKPNNPT\",  #>     \"ICUEBKDOGB\", \"PALVVUCJBF\", \"HPKSIGVDRL\", \"QBPHMGOGFW\", \"VKEOEUOTDQ\",  #>     \"WMVGSBQYPB\", \"FHCLEHLIXM\", \"KBYFYYONYU\", \"XSHYKGMBPQ\", \"VKEOEUOTDQ\",  #>     \"FKXBYBMICY\", \"HGHMEUCTEX\", \"CKNVKMZWDC\", \"QMDWWKFVRU\", \"ZTTKZEEJZP\",  #>     \"RFAKZMSZMB\", \"VKEOEUOTDQ\", \"JVCERYCMOA\", \"URBJONTBBW\", \"JVKZPZVIIU\",  #>     \"TWBOLWJGAR\", \"KBYFYYONYU\", \"ACYJOPUKSD\", \"AFUTZUEXVM\", \"AOKHTNTQJC\",  #>     \"NJLMIFXDEK\", \"VKEOEUOTDQ\", \"SPBEZTBJFS\", \"OSNCJRVKET\", \"GXYQHIZVPD\",  #>     \"FHCLEHLIXM\", \"JOPGMOKVOM\", \"XCEJMFPVDX\", \"JFHAGKINER\", \"ZTTKZEEJZP\",  #>     \"EKNGZSKPGF\", \"ZBXYPQEVLU\", \"YROTAZMWFI\", \"ASCJFWFUGV\", \"PKBCVRCMCS\",  #>     \"ISWVRSKEUK\", \"CYQGGUSNEK\", \"KTANGMAQMT\", \"LJJSFTJKBP\", \"JOPGMOKVOM\",  #>     \"ZBXYPQEVLU\", \"VOXRCHMDIT\", \"UFXSCLPLER\", \"CUYVXLQJIV\", \"GSNHQUBLXJ\",  #>     \"JHVIRHYUEP\", \"HLWNYXNVYM\", \"GRCMVPYLDK\", \"CJQEUMATTB\", \"FKTIIHAGSF\",  #>     \"UNCDYWJXLO\", \"XDEAUVDMFQ\", \"GXYQHIZVPD\", \"GRCMVPYLDK\", \"LHDUBEZXXM\",  #>     \"LJJSFTJKBP\", \"JPARFIKTYL\", \"JOPGMOKVOM\", \"JFHAGKINER\", \"QMDWWKFVRU\",  #>     \"CFSINPQYCO\", \"YROTAZMWFI\", \"CALRWQEBFZ\", \"AGJEXFMJAO\", \"RQDKTNHSYQ\",  #>     \"CMEKXFGTSR\", \"ICUEBKDOGB\", \"JVKZPZVIIU\", \"UCYFOWDBOQ\", \"BKYOKYIUGW\",  #>     \"QEAYJDRZQO\", \"JOPGMOKVOM\", \"ERVIHSPAYA\", \"QMDWWKFVRU\", \"JOPGMOKVOM\",  #>     \"PKBCVRCMCS\", \"RFAKZMSZMB\", \"IIKTKPNNPT\", \"WNATHOQPJS\", \"FIXJLQEKCP\",  #>     \"ISWVRSKEUK\", \"QKSAXQEAIB\", \"QKSAXQEAIB\", \"UNCDYWJXLO\", \"ZPWKFFVOCB\",  #>     \"LGWJJITBKZ\", \"AIJRHVVDKP\", \"PKBCVRCMCS\", \"CALRWQEBFZ\", \"LGWJJITBKZ\",  #>     \"TWBOLWJGAR\", \"SVBBYDPIOA\", \"RSSXENWCQU\", \"LEESGFRPHV\", \"GRCMVPYLDK\",  #>     \"JFHAGKINER\", \"FHCLEHLIXM\", \"YFDQMQIVBM\", \"NOTPDVRLPM\", \"UOFFHQQLIR\",  #>     \"FHCLEHLIXM\", \"CFXONOGTQH\", \"AGJEXFMJAO\", \"BZPWNEEBHR\", \"NCXWRVCMVY\",  #>     \"UZRCINDECG\", \"NOTPDVRLPM\", \"WNATHOQPJS\", \"CFSINPQYCO\", \"MGDZOPJAFG\",  #>     \"GSNHQUBLXJ\", \"LEESGFRPHV\", \"GSNHQUBLXJ\", \"LJJSFTJKBP\", \"WEDUDZADWG\",  #>     \"GSHWBCJXVZ\", \"IIKTKPNNPT\", \"LGWJJITBKZ\", \"HYUIWKYPXU\", \"YFDQMQIVBM\",  #>     \"HPKSIGVDRL\", \"JOPGMOKVOM\", \"FIXJLQEKCP\", \"CFSINPQYCO\", \"ESYOZKOHCU\",  #>     \"KBYFYYONYU\", \"QMDWWKFVRU\", \"EOJBYFQEOY\", \"RBWJLMGEPF\", \"BBONKKTFNG\",  #>     \"CKNVKMZWDC\", \"GXYQHIZVPD\", \"ONTOHBVEQC\", \"PKBCVRCMCS\", \"CKNVKMZWDC\",  #>     \"VOXRCHMDIT\", \"CKNVKMZWDC\", \"YFDQMQIVBM\", \"AFUTZUEXVM\", \"EOJBYFQEOY\",  #>     \"YROTAZMWFI\", \"VOXRCHMDIT\", \"LEESGFRPHV\", \"JWFPSYZNLW\", \"YROTAZMWFI\",  #>     \"QKSAXQEAIB\", \"ZBXYPQEVLU\", \"HGHMEUCTEX\", \"VKEOEUOTDQ\", \"KBYFYYONYU\",  #>     \"NCXWRVCMVY\", \"ICUEBKDOGB\", \"HYHAFAFYEA\", \"ZTTKZEEJZP\", \"FHCLEHLIXM\",  #>     \"ESYOZKOHCU\", \"LJJSFTJKBP\", \"LHDUBEZXXM\", \"YROTAZMWFI\", \"QBPRAWZTBF\",  #>     \"JSGBOZVHXC\", \"VKEOEUOTDQ\", \"JVCERYCMOA\", \"ISHHJNXLMR\", \"WEDUDZADWG\",  #>     \"VOXRCHMDIT\", \"SPBEZTBJFS\", \"ELMZBUCGXP\", \"JPARFIKTYL\", \"WEDUDZADWG\",  #>     \"AHOMYEGIBP\", \"LHDUBEZXXM\", \"YROTAZMWFI\", \"HYUIWKYPXU\", \"GSHWBCJXVZ\",  #>     \"BBONKKTFNG\", \"SPBEZTBJFS\", \"RBWJLMGEPF\", \"OPNAGRHLZM\", \"CALRWQEBFZ\",  #>     \"KBYFYYONYU\", \"HGHMEUCTEX\", \"TBZWQOHERE\", \"HYHAFAFYEA\", \"QBPRAWZTBF\",  #>     \"KBYFYYONYU\", \"UZRCINDECG\", \"LJJSFTJKBP\", \"KTANGMAQMT\", \"LJJSFTJKBP\",  #>     \"ZBXYPQEVLU\", \"HCEHZFVRBV\", \"MGDZOPJAFG\", \"JFHAGKINER\", \"GRCMVPYLDK\",  #>     \"RQDKTNHSYQ\", \"WEDUDZADWG\", \"JPARFIKTYL\", \"CFSINPQYCO\", \"GXQQOGSTOQ\",  #>     \"OPNAGRHLZM\", \"JOPGMOKVOM\", \"GXQQOGSTOQ\", \"NCXWRVCMVY\", \"JFHAGKINER\",  #>     \"SPBEZTBJFS\", \"AIJRHVVDKP\", \"HCEHZFVRBV\", \"ISHHJNXLMR\", \"SVBBYDPIOA\",  #>     \"RNAOTFIWTN\", \"ACYJOPUKSD\", \"HCEHZFVRBV\", \"WKXIHCQQBN\", \"QKSAXQEAIB\",  #>     \"HYUIWKYPXU\", \"TXFSIPGCID\", \"VKEOEUOTDQ\", \"XSHYKGMBPQ\", \"CKNVKMZWDC\",  #>     \"WEDUDZADWG\", \"EOJBYFQEOY\", \"KBYFYYONYU\", \"QCCNNYIKTH\", \"AOKHTNTQJC\",  #>     \"JPARFIKTYL\", \"TBZWQOHERE\", \"BZPWNEEBHR\", \"YROTAZMWFI\", \"SVBBYDPIOA\",  #>     \"ESYOZKOHCU\", \"LEESGFRPHV\", \"KTANGMAQMT\", \"TWBOLWJGAR\", \"RFAKZMSZMB\",  #>     \"PKTRNWCHPR\", \"KBYFYYONYU\", \"ZBXYPQEVLU\", \"NJLMIFXDEK\", \"QMDWWKFVRU\",  #>     \"OPNAGRHLZM\", \"BJUNWZLJYP\", \"ERVIHSPAYA\", \"GSHWBCJXVZ\", \"GSNHQUBLXJ\",  #>     \"ZTTKZEEJZP\", \"YFDQMQIVBM\", \"CYQGGUSNEK\", \"RSSXENWCQU\", \"EZLGDZHKHT\",  #>     \"FHCLEHLIXM\", \"UCYFOWDBOQ\", \"TLGDIASGEL\", \"LEESGFRPHV\", \"IIKTKPNNPT\",  #>     \"QKSAXQEAIB\", \"JPARFIKTYL\", \"ZTTKZEEJZP\", \"BBONKKTFNG\", \"WNATHOQPJS\",  #>     \"ONTOHBVEQC\", \"VKEOEUOTDQ\", \"GKPLYRURBB\", \"SVYPVLUGHE\", \"RFAKZMSZMB\",  #>     \"EZLGDZHKHT\", \"ISWVRSKEUK\", \"RFAKZMSZMB\", \"WEDUDZADWG\", \"UCYFOWDBOQ\",  #>     \"QBPRAWZTBF\", \"HPKSIGVDRL\", \"XSHYKGMBPQ\", \"JVCERYCMOA\", \"GSHWBCJXVZ\",  #>     \"GKPLYRURBB\", \"JVKZPZVIIU\", \"ZTTKZEEJZP\", \"FKTIIHAGSF\", \"HPKSIGVDRL\",  #>     \"LHDUBEZXXM\", \"ESYOZKOHCU\", \"ESYOZKOHCU\", \"JOPGMOKVOM\", \"KIJPLWHVGS\",  #>     \"UZRCINDECG\", \"MPSFHTGKEF\", \"RNAOTFIWTN\", \"MCBXZBXGJN\", \"ZBXYPQEVLU\",  #>     \"ERVIHSPAYA\", \"CUYVXLQJIV\", \"GRCMVPYLDK\", \"ACYJOPUKSD\", \"ZTTKZEEJZP\",  #>     \"JFHAGKINER\", \"RHALOWGMGJ\", \"RFAKZMSZMB\", \"ZPWKFFVOCB\", \"WLNMRBXMPC\",  #>     \"EZLGDZHKHT\", \"RQDKTNHSYQ\", \"LEESGFRPHV\", \"PKTRNWCHPR\", \"RSSXENWCQU\",  #>     \"RNAOTFIWTN\", \"NOTPDVRLPM\", \"WEDUDZADWG\", \"ZTTKZEEJZP\", \"HPKSIGVDRL\",  #>     \"KTANGMAQMT\", \"TKKAYBAFGV\", \"CMEKXFGTSR\", \"YDGABWKNRS\", \"KTANGMAQMT\",  #>     \"BBONKKTFNG\", \"JVKZPZVIIU\", \"QQIQBNKASY\", \"ZTTKZEEJZP\", \"RFAKZMSZMB\",  #>     \"CMEKXFGTSR\", \"ASCJFWFUGV\", \"WEDUDZADWG\", \"NOTPDVRLPM\", \"FIXJLQEKCP\",  #>     \"JFHAGKINER\", \"ONTOHBVEQC\", \"JVCERYCMOA\", \"MGDZOPJAFG\", \"BZPWNEEBHR\",  #>     \"UZRCINDECG\", \"JFHAGKINER\", \"ISHHJNXLMR\", \"UNCDYWJXLO\", \"SPBEZTBJFS\",  #>     \"LJJSFTJKBP\", \"URBJONTBBW\", \"EZLGDZHKHT\", \"ISWVRSKEUK\", \"URBJONTBBW\",  #>     \"CALRWQEBFZ\", \"PBLJMWGFTW\", \"GSHWBCJXVZ\", \"FHCLEHLIXM\", \"WNATHOQPJS\",  #>     \"MHVRYUZJWL\", \"KIJPLWHVGS\", \"QBPRAWZTBF\", \"EZLGDZHKHT\", \"SVYPVLUGHE\",  #>     \"IIKTKPNNPT\", \"OSNCJRVKET\", \"KBYFYYONYU\", \"TBZWQOHERE\", \"ZBXYPQEVLU\",  #>     \"CFSINPQYCO\", \"XDEAUVDMFQ\", \"KIJPLWHVGS\", \"QQIQBNKASY\", \"YDGABWKNRS\",  #>     \"PKTRNWCHPR\", \"YDGABWKNRS\", \"NTSOYECHZQ\", \"NOTPDVRLPM\", \"ACYJOPUKSD\",  #>     \"FIXJLQEKCP\", \"CFSINPQYCO\", \"FIXJLQEKCP\", \"NCXWRVCMVY\", \"LHDUBEZXXM\",  #>     \"ONTOHBVEQC\", \"NCXWRVCMVY\", \"RMEYEXVXVX\", \"YFDQMQIVBM\", \"UOFFHQQLIR\",  #>     \"YROTAZMWFI\", \"CYQGGUSNEK\", \"CFXONOGTQH\", \"GSNHQUBLXJ\", \"RFAKZMSZMB\",  #>     \"KKKAFDRDCO\", \"KKKAFDRDCO\", \"JSGBOZVHXC\", \"LJJSFTJKBP\", \"OPNAGRHLZM\",  #>     \"RNAOTFIWTN\", \"JRNMLJJSDP\", \"LEESGFRPHV\", \"JVKZPZVIIU\", \"JOPGMOKVOM\",  #>     \"OPNAGRHLZM\", \"JWFPSYZNLW\", \"FHCLEHLIXM\", \"MGDZOPJAFG\", \"MPSFHTGKEF\",  #>     \"WLNMRBXMPC\", \"GXYQHIZVPD\", \"CONXBVIQSU\", \"PHIZOLWIBS\", \"LHDUBEZXXM\",  #>     \"KKKAFDRDCO\", \"RMEYEXVXVX\", \"JVKZPZVIIU\", \"CUYVXLQJIV\", \"CMEKXFGTSR\",  #>     \"PHIZOLWIBS\", \"FKTIIHAGSF\", \"KTANGMAQMT\", \"YDGABWKNRS\", \"CUYVXLQJIV\",  #>     \"KIJPLWHVGS\", \"BBONKKTFNG\", \"YROTAZMWFI\", \"WKXIHCQQBN\", \"WEDUDZADWG\",  #>     \"EZLGDZHKHT\", \"MCBXZBXGJN\", \"JFHAGKINER\", \"PHIZOLWIBS\", \"QMDWWKFVRU\",  #>     \"NJLMIFXDEK\", \"QMDWWKFVRU\", \"ZBXYPQEVLU\", \"LJJSFTJKBP\", \"CMEKXFGTSR\",  #>     \"CJQEUMATTB\", \"QBPRAWZTBF\", \"CYQGGUSNEK\", \"CFXONOGTQH\", \"FIXJLQEKCP\",  #>     \"GRCMVPYLDK\", \"CALRWQEBFZ\", \"JWFPSYZNLW\", \"GSNHQUBLXJ\", \"ASCJFWFUGV\",  #>     \"WKXIHCQQBN\", \"FHCLEHLIXM\", \"YFDQMQIVBM\", \"CFXONOGTQH\", \"IYNWQZVCCI\",  #>     \"GSNHQUBLXJ\", \"WEDUDZADWG\", \"ACYJOPUKSD\", \"ASCJFWFUGV\", \"IYNWQZVCCI\",  #>     \"VKEOEUOTDQ\", \"AHOMYEGIBP\", \"JWFPSYZNLW\", \"KTANGMAQMT\", \"ZTCMALLRXB\",  #>     \"CJQEUMATTB\", \"QQIQBNKASY\", \"UOFFHQQLIR\", \"ZTTKZEEJZP\", \"RSSXENWCQU\",  #>     \"TBZWQOHERE\", \"RFAKZMSZMB\", \"HCEHZFVRBV\", \"JRNMLJJSDP\", \"WEDUDZADWG\",  #>     \"ZTTKZEEJZP\", \"EJSYIOEOJL\", \"AIJRHVVDKP\", \"SVYPVLUGHE\", \"RHALOWGMGJ\",  #>     \"QCCNNYIKTH\", \"EZLGDZHKHT\", \"RQDKTNHSYQ\", \"FHCLEHLIXM\", \"XCEJMFPVDX\",  #>     \"AGJEXFMJAO\", \"TKKAYBAFGV\", \"GSHWBCJXVZ\", \"RNAOTFIWTN\", \"LEESGFRPHV\",  #>     \"KTANGMAQMT\", \"CYQGGUSNEK\", \"ELMZBUCGXP\", \"XKSCGLSVUZ\", \"XKSCGLSVUZ\",  #>     \"QCCNNYIKTH\", \"ENXVDYZEEW\", \"UJMNXDCYBB\", \"UOFFHQQLIR\", \"JFHAGKINER\",  #>     \"JVCERYCMOA\", \"ZTTKZEEJZP\", \"KTANGMAQMT\", \"BHOFOGKCJA\", \"YFDQMQIVBM\",  #>     \"SPBEZTBJFS\", \"ONTOHBVEQC\", \"GRCMVPYLDK\", \"RMEYEXVXVX\", \"JFHAGKINER\",  #>     \"QBPHMGOGFW\", \"RSSXENWCQU\", \"BZPWNEEBHR\", \"WKXIHCQQBN\", \"QCCNNYIKTH\",  #>     \"NCXWRVCMVY\", \"GRCMVPYLDK\", \"MPSFHTGKEF\", \"NTSOYECHZQ\", \"LJJSFTJKBP\",  #>     \"MHVRYUZJWL\", \"JVCERYCMOA\", \"LGWJJITBKZ\", \"RQDKTNHSYQ\", \"ESYOZKOHCU\",  #>     \"FKTIIHAGSF\", \"WMVGSBQYPB\", \"JRNMLJJSDP\", \"ASCJFWFUGV\", \"ENXVDYZEEW\",  #>     \"WMVGSBQYPB\", \"BKYOKYIUGW\", \"FIXJLQEKCP\", \"GSHWBCJXVZ\", \"MPSFHTGKEF\",  #>     \"RQDKTNHSYQ\", \"RQDKTNHSYQ\", \"HLWNYXNVYM\", \"RFAKZMSZMB\", \"NJLMIFXDEK\",  #>     \"YFDQMQIVBM\", \"ZTTKZEEJZP\", \"UZRCINDECG\", \"ICUEBKDOGB\", \"JFHAGKINER\",  #>     \"PKTRNWCHPR\", \"MCBXZBXGJN\", \"QQIQBNKASY\", \"UZRCINDECG\", \"HYUIWKYPXU\",  #>     \"RQDKTNHSYQ\", \"QBPRAWZTBF\", \"GSNHQUBLXJ\", \"HYHAFAFYEA\", \"TWBOLWJGAR\",  #>     \"FHCLEHLIXM\", \"VBFGFOMUQJ\", \"ZTCMALLRXB\", \"EJSYIOEOJL\", \"ZTCMALLRXB\",  #>     \"FIXJLQEKCP\", \"KIJPLWHVGS\", \"KTANGMAQMT\", \"PALVVUCJBF\", \"MMCWEZDZSL\",  #>     \"KBYFYYONYU\", \"HCEHZFVRBV\", \"CUYVXLQJIV\", \"GKPLYRURBB\", \"VOXRCHMDIT\",  #>     \"GXYQHIZVPD\", \"JVKZPZVIIU\", \"CYQGGUSNEK\", \"QKSAXQEAIB\", \"TKKAYBAFGV\",  #>     \"YROTAZMWFI\", \"EJSYIOEOJL\", \"AGJEXFMJAO\", \"EZLGDZHKHT\", \"PHIZOLWIBS\",  #>     \"QBPRAWZTBF\", \"EOJBYFQEOY\", \"JVCERYCMOA\", \"RNAOTFIWTN\", \"UOFFHQQLIR\",  #>     \"LJJSFTJKBP\", \"SVBBYDPIOA\", \"UOFFHQQLIR\", \"DRQRVFYUCX\", \"UJMNXDCYBB\",  #>     \"CYQGGUSNEK\", \"MGDZOPJAFG\", \"NCXWRVCMVY\", \"JPARFIKTYL\", \"AGJEXFMJAO\",  #>     \"ZTTKZEEJZP\", \"WMVGSBQYPB\", \"AGJEXFMJAO\", \"KBYFYYONYU\", \"UJMNXDCYBB\",  #>     \"FHCLEHLIXM\", \"AGJEXFMJAO\", \"BHOFOGKCJA\", \"CUYVXLQJIV\", \"URBJONTBBW\",  #>     \"VKEOEUOTDQ\", \"ONTOHBVEQC\", \"ONTOHBVEQC\", \"KIJPLWHVGS\", \"RFAKZMSZMB\",  #>     \"EWTGOBRLKP\", \"XCEJMFPVDX\", \"RSSXENWCQU\", \"TBZWQOHERE\", \"ISHHJNXLMR\",  #>     \"JWFPSYZNLW\", \"JWFPSYZNLW\", \"CFSINPQYCO\", \"YFDQMQIVBM\", \"BHOFOGKCJA\",  #>     \"ZPWKFFVOCB\", \"TKKAYBAFGV\", \"RFAKZMSZMB\", \"JPARFIKTYL\", \"JPARFIKTYL\",  #>     \"TKKAYBAFGV\", \"MCBXZBXGJN\", \"QQIQBNKASY\", \"RQDKTNHSYQ\", \"XCEJMFPVDX\",  #>     \"LGWJJITBKZ\", \"BZPWNEEBHR\", \"ISWVRSKEUK\", \"GXYQHIZVPD\", \"TXFSIPGCID\",  #>     \"CJQEUMATTB\", \"MGDZOPJAFG\", \"YDGABWKNRS\", \"PKBCVRCMCS\", \"ELMZBUCGXP\",  #>     \"QQIQBNKASY\", \"XDEAUVDMFQ\", \"UOFFHQQLIR\", \"EJSYIOEOJL\", \"ZTTKZEEJZP\",  #>     \"RFAKZMSZMB\", \"PALVVUCJBF\", \"ZTCMALLRXB\", \"GKPLYRURBB\", \"KTANGMAQMT\",  #>     \"BBONKKTFNG\", \"AHOMYEGIBP\", \"UOFFHQQLIR\", \"VOXRCHMDIT\", \"ZTCMALLRXB\",  #>     \"AHOMYEGIBP\", \"NOTPDVRLPM\", \"EZLGDZHKHT\", \"PKBCVRCMCS\", \"KTANGMAQMT\",  #>     \"TXFSIPGCID\", \"QMDWWKFVRU\", \"IIKTKPNNPT\", \"MQKHZKWIKA\", \"CJQEUMATTB\",  #>     \"FIXJLQEKCP\", \"KTANGMAQMT\", \"PHIZOLWIBS\", \"XDEAUVDMFQ\", \"CUYVXLQJIV\",  #>     \"RHALOWGMGJ\", \"TLGDIASGEL\", \"HYHAFAFYEA\", \"GXQQOGSTOQ\", \"AGJEXFMJAO\",  #>     \"UZRCINDECG\", \"ZTCMALLRXB\", \"QMDWWKFVRU\", \"NJLMIFXDEK\", \"LGWJJITBKZ\",  #>     \"ESYOZKOHCU\", \"RSSXENWCQU\", \"YDGABWKNRS\", \"JPARFIKTYL\", \"ESYOZKOHCU\",  #>     \"EOJBYFQEOY\", \"CMEKXFGTSR\", \"CFSINPQYCO\", \"SVYPVLUGHE\", \"FKXBYBMICY\",  #>     \"CFXONOGTQH\", \"JVCERYCMOA\", \"HGHMEUCTEX\", \"QEAYJDRZQO\", \"OSNCJRVKET\",  #>     \"LEESGFRPHV\", \"PALVVUCJBF\", \"GXQQOGSTOQ\", \"GXQQOGSTOQ\", \"GXQQOGSTOQ\",  #>     \"XCEJMFPVDX\", \"LGWJJITBKZ\", \"PALVVUCJBF\", \"EOJBYFQEOY\", \"QQIQBNKASY\",  #>     \"BZPWNEEBHR\", \"AIJRHVVDKP\", \"GRCMVPYLDK\", \"LHDUBEZXXM\", \"AQEEZTRLKH\",  #>     \"MCBXZBXGJN\", \"IYNWQZVCCI\", \"CYQGGUSNEK\", \"HCEHZFVRBV\", \"HLWNYXNVYM\",  #>     \"CMEKXFGTSR\", \"WEDUDZADWG\", \"KIJPLWHVGS\", \"AGJEXFMJAO\", \"FIXJLQEKCP\",  #>     \"HCEHZFVRBV\", \"JVCERYCMOA\", \"HCEHZFVRBV\", \"QMDWWKFVRU\", \"JPARFIKTYL\",  #>     \"UOFFHQQLIR\", \"CUYVXLQJIV\", \"ZBXYPQEVLU\", \"UOFFHQQLIR\", \"QKSAXQEAIB\",  #>     \"ONTOHBVEQC\", \"XSHYKGMBPQ\", \"JFHAGKINER\", \"ESYOZKOHCU\", \"VOXRCHMDIT\",  #>     \"CALRWQEBFZ\", \"KBYFYYONYU\", \"JOPGMOKVOM\", \"FHCLEHLIXM\", \"FHCLEHLIXM\",  #>     \"FHCLEHLIXM\", \"AZVIVPYKND\", \"TWBOLWJGAR\", \"LEESGFRPHV\", \"ZTCMALLRXB\",  #>     \"CFXONOGTQH\", \"QCCNNYIKTH\", \"LJJSFTJKBP\", \"MHVRYUZJWL\", \"VBFGFOMUQJ\",  #>     \"ZTTKZEEJZP\", \"GXYQHIZVPD\", \"JFHAGKINER\", \"BZPWNEEBHR\", \"KBYFYYONYU\",  #>     \"CYQGGUSNEK\", \"JOPGMOKVOM\", \"URBJONTBBW\", \"KIJPLWHVGS\", \"CFXONOGTQH\",  #>     \"UJMNXDCYBB\", \"UOFFHQQLIR\", \"GRCMVPYLDK\", \"TLGDIASGEL\", \"QCCNNYIKTH\",  #>     \"NTSOYECHZQ\", \"ESYOZKOHCU\", \"HPKSIGVDRL\", \"TWBOLWJGAR\", \"UOFFHQQLIR\",  #>     \"MGDZOPJAFG\", \"FIXJLQEKCP\", \"KTANGMAQMT\", \"WKXIHCQQBN\", \"EOJBYFQEOY\",  #>     \"TXFSIPGCID\", \"QBPRAWZTBF\", \"URBJONTBBW\", \"LGWJJITBKZ\", \"XCEJMFPVDX\",  #>     \"DRQRVFYUCX\", \"CFXONOGTQH\", \"ELMZBUCGXP\", \"TLGDIASGEL\", \"XSHYKGMBPQ\",  #>     \"ZTCMALLRXB\", \"BBONKKTFNG\", \"ZTTKZEEJZP\", \"DRQRVFYUCX\", \"QMDWWKFVRU\",  #>     \"SVBBYDPIOA\", \"ESYOZKOHCU\", \"IIKTKPNNPT\", \"QCCNNYIKTH\", \"MGDZOPJAFG\",  #>     \"YFDQMQIVBM\", \"JWFPSYZNLW\", \"FKXBYBMICY\", \"VKEOEUOTDQ\", \"TKKAYBAFGV\",  #>     \"PHIZOLWIBS\", \"ENXVDYZEEW\", \"AIJRHVVDKP\", \"CJQEUMATTB\", \"JOPGMOKVOM\",  #>     \"HLWNYXNVYM\", \"QQIQBNKASY\", \"IYNWQZVCCI\", \"EZLGDZHKHT\", \"XSHYKGMBPQ\",  #>     \"UNCDYWJXLO\", \"MGDZOPJAFG\", \"RQDKTNHSYQ\", \"FKXBYBMICY\", \"TLGDIASGEL\",  #>     \"EZLGDZHKHT\", \"GRCMVPYLDK\", \"MPSFHTGKEF\", \"EWTGOBRLKP\", \"BBONKKTFNG\",  #>     \"ASCJFWFUGV\", \"AIJRHVVDKP\", \"CJQEUMATTB\", \"VBFGFOMUQJ\", \"RQDKTNHSYQ\",  #>     \"KTANGMAQMT\", \"RSSXENWCQU\", \"GSNHQUBLXJ\", \"AFUTZUEXVM\", \"NCXWRVCMVY\",  #>     \"CMEKXFGTSR\", \"WMVGSBQYPB\", \"RBWJLMGEPF\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\",  #>     \"FKTIIHAGSF\", \"CMEKXFGTSR\", \"JVCERYCMOA\", \"VKEOEUOTDQ\", \"ICUEBKDOGB\",  #>     \"TWBOLWJGAR\", \"QQIQBNKASY\", \"ZTTKZEEJZP\", \"ONTOHBVEQC\", \"TLGDIASGEL\",  #>     \"GXQQOGSTOQ\", \"ISWVRSKEUK\", \"YFDQMQIVBM\", \"WEDUDZADWG\", \"CFXONOGTQH\",  #>     \"AHOMYEGIBP\", \"GKPLYRURBB\", \"RHALOWGMGJ\", \"VKEOEUOTDQ\", \"PKBCVRCMCS\",  #>     \"GXYQHIZVPD\", \"PALVVUCJBF\", \"CFXONOGTQH\", \"QBPHMGOGFW\", \"KBYFYYONYU\",  #>     \"LGWJJITBKZ\", \"WNATHOQPJS\", \"KBYFYYONYU\", \"ZTCMALLRXB\", \"MCBXZBXGJN\",  #>     \"PKTRNWCHPR\", \"EKNGZSKPGF\", \"BKYOKYIUGW\", \"HGHMEUCTEX\", \"JVCERYCMOA\",  #>     \"PKBCVRCMCS\", \"FIXJLQEKCP\", \"NTSOYECHZQ\", \"RQDKTNHSYQ\", \"UJMNXDCYBB\",  #>     \"CALRWQEBFZ\", \"QBPRAWZTBF\", \"RHALOWGMGJ\", \"UZRCINDECG\", \"DRQRVFYUCX\",  #>     \"BKYOKYIUGW\", \"WKXIHCQQBN\", \"ISHHJNXLMR\", \"PALVVUCJBF\", \"RHALOWGMGJ\",  #>     \"JPARFIKTYL\", \"BBONKKTFNG\", \"DRQRVFYUCX\", \"KBYFYYONYU\", \"QKSAXQEAIB\",  #>     \"CJQEUMATTB\", \"BZPWNEEBHR\", \"RFAKZMSZMB\", \"MGDZOPJAFG\", \"LJJSFTJKBP\",  #>     \"FKXBYBMICY\", \"RMEYEXVXVX\", \"NOTPDVRLPM\", \"ZTCMALLRXB\", \"ZTTKZEEJZP\",  #>     \"HPKSIGVDRL\", \"IIKTKPNNPT\", \"UJMNXDCYBB\", \"MQKHZKWIKA\", \"AZVIVPYKND\",  #>     \"AGJEXFMJAO\", \"VKEOEUOTDQ\", \"QQIQBNKASY\", \"XSHYKGMBPQ\", \"CJQEUMATTB\",  #>     \"BHOFOGKCJA\", \"TLGDIASGEL\", \"RFAKZMSZMB\", \"EZLGDZHKHT\", \"ZTCMALLRXB\",  #>     \"WLNMRBXMPC\", \"LEESGFRPHV\", \"RSSXENWCQU\", \"WEDUDZADWG\", \"XCEJMFPVDX\",  #>     \"WEDUDZADWG\", \"QCCNNYIKTH\", \"GSNHQUBLXJ\", \"HGHMEUCTEX\", \"JVKZPZVIIU\",  #>     \"EWTGOBRLKP\", \"HPKSIGVDRL\", \"SVYPVLUGHE\", \"LHDUBEZXXM\", \"YFDQMQIVBM\",  #>     \"AOKHTNTQJC\", \"MPSFHTGKEF\", \"QBPHMGOGFW\", \"HYHAFAFYEA\", \"CFSINPQYCO\",  #>     \"MHVRYUZJWL\", \"JWFPSYZNLW\", \"AGJEXFMJAO\", \"EAMRJPOWLU\", \"WEDUDZADWG\",  #>     \"DRQRVFYUCX\", \"QKSAXQEAIB\", \"AQEEZTRLKH\", \"QMDWWKFVRU\", \"UCYFOWDBOQ\",  #>     \"TXFSIPGCID\", \"YROTAZMWFI\", \"PHIZOLWIBS\", \"FKXBYBMICY\", \"XSHYKGMBPQ\",  #>     \"EAMRJPOWLU\", \"BBONKKTFNG\", \"JVKZPZVIIU\", \"CJQEUMATTB\", \"OSNCJRVKET\",  #>     \"UOFFHQQLIR\", \"ACYJOPUKSD\", \"FKXBYBMICY\", \"ZTCMALLRXB\", \"JPARFIKTYL\",  #>     \"QMDWWKFVRU\", \"WMVGSBQYPB\", \"ZBXYPQEVLU\", \"MHVRYUZJWL\", \"VOXRCHMDIT\",  #>     \"KTANGMAQMT\", \"RFAKZMSZMB\", \"JPARFIKTYL\", \"EAMRJPOWLU\", \"YDGABWKNRS\",  #>     \"CONXBVIQSU\", \"QBPRAWZTBF\", \"GRCMVPYLDK\", \"JFHAGKINER\", \"MCBXZBXGJN\",  #>     \"VOXRCHMDIT\", \"PALVVUCJBF\", \"EJSYIOEOJL\", \"GKPLYRURBB\", \"RHALOWGMGJ\",  #>     \"KIJPLWHVGS\", \"WKXIHCQQBN\", \"XDEAUVDMFQ\", \"QMDWWKFVRU\", \"CJQEUMATTB\",  #>     \"FHCLEHLIXM\", \"JPARFIKTYL\", \"ASCJFWFUGV\", \"JVCERYCMOA\", \"JOPGMOKVOM\",  #>     \"AOKHTNTQJC\", \"VBFGFOMUQJ\", \"YDGABWKNRS\", \"YROTAZMWFI\", \"HGHMEUCTEX\",  #>     \"EJSYIOEOJL\", \"YDGABWKNRS\", \"HGHMEUCTEX\", \"NTSOYECHZQ\", \"NOTPDVRLPM\",  #>     \"FIXJLQEKCP\", \"CUYVXLQJIV\", \"MQKHZKWIKA\", \"GXQQOGSTOQ\", \"NOTPDVRLPM\",  #>     \"YROTAZMWFI\", \"RQDKTNHSYQ\", \"YFDQMQIVBM\", \"UJMNXDCYBB\", \"EZLGDZHKHT\",  #>     \"ASCJFWFUGV\", \"AZVIVPYKND\", \"KTANGMAQMT\", \"XSHYKGMBPQ\", \"AFUTZUEXVM\",  #>     \"RMEYEXVXVX\", \"JWFPSYZNLW\", \"UOFFHQQLIR\", \"SPBEZTBJFS\", \"MGDZOPJAFG\",  #>     \"JWFPSYZNLW\", \"CKNVKMZWDC\", \"CKNVKMZWDC\", \"TBZWQOHERE\", \"GRCMVPYLDK\",  #>     \"JFHAGKINER\", \"XKSCGLSVUZ\", \"YFDQMQIVBM\", \"GRCMVPYLDK\", \"UJMNXDCYBB\",  #>     \"AHOMYEGIBP\", \"HCEHZFVRBV\", \"CKNVKMZWDC\", \"UOFFHQQLIR\", \"CKNVKMZWDC\",  #>     \"PKBCVRCMCS\", \"RQDKTNHSYQ\", \"UZRCINDECG\", \"ONTOHBVEQC\", \"GXQQOGSTOQ\",  #>     \"MHVRYUZJWL\", \"KKKAFDRDCO\", \"JOPGMOKVOM\", \"CALRWQEBFZ\", \"WMVGSBQYPB\",  #>     \"CFXONOGTQH\", \"QQIQBNKASY\", \"ZBXYPQEVLU\", \"LHDUBEZXXM\", \"CYQGGUSNEK\",  #>     \"RNAOTFIWTN\", \"RNAOTFIWTN\", \"GRCMVPYLDK\", \"CJQEUMATTB\", \"TKKAYBAFGV\",  #>     \"CJQEUMATTB\", \"ASCJFWFUGV\", \"EOJBYFQEOY\", \"HYUIWKYPXU\", \"NOTPDVRLPM\",  #>     \"ACYJOPUKSD\", \"AFUTZUEXVM\", \"NOTPDVRLPM\", \"FHCLEHLIXM\", \"NCXWRVCMVY\",  #>     \"ESYOZKOHCU\", \"SVYPVLUGHE\", \"TLGDIASGEL\", \"MPSFHTGKEF\", \"QQIQBNKASY\",  #>     \"QKSAXQEAIB\", \"QMDWWKFVRU\", \"RMEYEXVXVX\", \"TXFSIPGCID\", \"WMVGSBQYPB\",  #>     \"HYHAFAFYEA\", \"XKSCGLSVUZ\", \"BBONKKTFNG\", \"HPKSIGVDRL\", \"RFAKZMSZMB\",  #>     \"NJLMIFXDEK\", \"LJJSFTJKBP\", \"ZBXYPQEVLU\", \"WMVGSBQYPB\", \"NTSOYECHZQ\",  #>     \"SVBBYDPIOA\", \"OSNCJRVKET\", \"TWBOLWJGAR\", \"QBPRAWZTBF\", \"LGWJJITBKZ\",  #>     \"JSGBOZVHXC\", \"TLGDIASGEL\", \"ESYOZKOHCU\", \"CMEKXFGTSR\", \"KBYFYYONYU\",  #>     \"JWFPSYZNLW\", \"PKBCVRCMCS\", \"OPNAGRHLZM\", \"ERVIHSPAYA\", \"AFUTZUEXVM\",  #>     \"AOKHTNTQJC\", \"CKNVKMZWDC\", \"RSSXENWCQU\", \"CFSINPQYCO\", \"RFAKZMSZMB\",  #>     \"JPARFIKTYL\", \"WMVGSBQYPB\", \"JWFPSYZNLW\", \"PHIZOLWIBS\", \"FHCLEHLIXM\",  #>     \"RFAKZMSZMB\", \"RHALOWGMGJ\", \"XDEAUVDMFQ\", \"CUYVXLQJIV\", \"YFDQMQIVBM\",  #>     \"ASCJFWFUGV\", \"AGJEXFMJAO\", \"ISHHJNXLMR\", \"CFXONOGTQH\", \"GSNHQUBLXJ\",  #>     \"TLGDIASGEL\", \"CFSINPQYCO\", \"JWFPSYZNLW\", \"UJMNXDCYBB\", \"GKPLYRURBB\",  #>     \"SVYPVLUGHE\", \"EZLGDZHKHT\", \"XKSCGLSVUZ\", \"EJSYIOEOJL\", \"RMEYEXVXVX\",  #>     \"AGJEXFMJAO\", \"TLGDIASGEL\", \"CKNVKMZWDC\", \"TBZWQOHERE\", \"KIJPLWHVGS\",  #>     \"AFUTZUEXVM\", \"EJSYIOEOJL\", \"MCBXZBXGJN\", \"IYNWQZVCCI\", \"UOFFHQQLIR\",  #>     \"PKTRNWCHPR\", \"ICUEBKDOGB\", \"LEESGFRPHV\", \"ESYOZKOHCU\", \"CYQGGUSNEK\",  #>     \"EWTGOBRLKP\", \"GSNHQUBLXJ\", \"GSHWBCJXVZ\", \"GKPLYRURBB\", \"RNAOTFIWTN\",  #>     \"JVCERYCMOA\", \"KKKAFDRDCO\", \"NOTPDVRLPM\", \"UJMNXDCYBB\", \"CFSINPQYCO\",  #>     \"KIJPLWHVGS\", \"GXYQHIZVPD\", \"ZTCMALLRXB\", \"ZTTKZEEJZP\", \"ESYOZKOHCU\",  #>     \"JPARFIKTYL\", \"RFAKZMSZMB\", \"JPARFIKTYL\", \"ZBXYPQEVLU\", \"KBYFYYONYU\",  #>     \"CYQGGUSNEK\", \"VOXRCHMDIT\", \"JRNMLJJSDP\", \"FKXBYBMICY\", \"JOPGMOKVOM\",  #>     \"LJJSFTJKBP\", \"EOJBYFQEOY\", \"EAMRJPOWLU\", \"ERVIHSPAYA\", \"GRCMVPYLDK\",  #>     \"YFDQMQIVBM\", \"RFAKZMSZMB\", \"CALRWQEBFZ\", \"UOFFHQQLIR\", \"AHOMYEGIBP\",  #>     \"RSSXENWCQU\", \"NTSOYECHZQ\", \"RMEYEXVXVX\", \"CMEKXFGTSR\", \"PKBCVRCMCS\",  #>     \"YDGABWKNRS\", \"VOXRCHMDIT\", \"KTANGMAQMT\", \"GXYQHIZVPD\", \"QBPHMGOGFW\",  #>     \"RNAOTFIWTN\", \"IIKTKPNNPT\", \"JHXSYICTMS\", \"RNAOTFIWTN\", \"TLGDIASGEL\",  #>     \"ZBXYPQEVLU\", \"ICUEBKDOGB\", \"ZPWKFFVOCB\", \"TKKAYBAFGV\", \"UZRCINDECG\",  #>     \"AFUTZUEXVM\", \"GKPLYRURBB\", \"QMDWWKFVRU\", \"CJQEUMATTB\", \"JSGBOZVHXC\",  #>     \"AHOMYEGIBP\", \"FIXJLQEKCP\", \"AFUTZUEXVM\", \"VOXRCHMDIT\", \"UNCDYWJXLO\",  #>     \"UJMNXDCYBB\", \"ESYOZKOHCU\", \"BJUNWZLJYP\", \"YROTAZMWFI\", \"JPARFIKTYL\",  #>     \"NCXWRVCMVY\", \"EOJBYFQEOY\", \"KKKAFDRDCO\", \"LGWJJITBKZ\", \"CFSINPQYCO\",  #>     \"QBPHMGOGFW\", \"JOPGMOKVOM\", \"RHALOWGMGJ\", \"FIXJLQEKCP\", \"GSNHQUBLXJ\",  #>     \"OPNAGRHLZM\", \"HYUIWKYPXU\", \"ELMZBUCGXP\", \"JVKZPZVIIU\", \"YFDQMQIVBM\",  #>     \"YFDQMQIVBM\", \"ZBXYPQEVLU\", \"PHIZOLWIBS\", \"WEDUDZADWG\", \"JVCERYCMOA\",  #>     \"SPBEZTBJFS\", \"AQEEZTRLKH\", \"NJLMIFXDEK\", \"VKEOEUOTDQ\", \"ENXVDYZEEW\",  #>     \"TXFSIPGCID\", \"FKXBYBMICY\", \"EJSYIOEOJL\", \"CJQEUMATTB\", \"ONTOHBVEQC\",  #>     \"GSHWBCJXVZ\", \"GSNHQUBLXJ\", \"TKKAYBAFGV\", \"OSNCJRVKET\", \"RHALOWGMGJ\",  #>     \"XKSCGLSVUZ\", \"TBZWQOHERE\", \"EAMRJPOWLU\", \"RMEYEXVXVX\", \"UZRCINDECG\",  #>     \"JVCERYCMOA\", \"RMEYEXVXVX\", \"EZLGDZHKHT\", \"RMEYEXVXVX\", \"LEESGFRPHV\",  #>     \"ZTTKZEEJZP\", \"SPBEZTBJFS\", \"VKEOEUOTDQ\", \"EZLGDZHKHT\", \"ELMZBUCGXP\",  #>     \"ZTCMALLRXB\", \"SVYPVLUGHE\", \"ZTTKZEEJZP\", \"HYUIWKYPXU\", \"RMEYEXVXVX\",  #>     \"AFUTZUEXVM\", \"JWFPSYZNLW\", \"WEDUDZADWG\", \"AIJRHVVDKP\", \"BJUNWZLJYP\",  #>     \"HCEHZFVRBV\", \"HGHMEUCTEX\", \"PKBCVRCMCS\", \"EKNGZSKPGF\", \"CMEKXFGTSR\",  #>     \"PHIZOLWIBS\", \"ASCJFWFUGV\", \"ASCJFWFUGV\", \"LGWJJITBKZ\", \"UOFFHQQLIR\",  #>     \"XKSCGLSVUZ\", \"GSNHQUBLXJ\", \"XKSCGLSVUZ\", \"ACYJOPUKSD\", \"NTSOYECHZQ\",  #>     \"JOPGMOKVOM\", \"CALRWQEBFZ\", \"HLWNYXNVYM\", \"UOFFHQQLIR\", \"BJUNWZLJYP\",  #>     \"CYQGGUSNEK\", \"RMEYEXVXVX\", \"CALRWQEBFZ\", \"BZPWNEEBHR\", \"BBONKKTFNG\",  #>     \"GKPLYRURBB\", \"ISHHJNXLMR\", \"AOKHTNTQJC\", \"GSNHQUBLXJ\", \"ONTOHBVEQC\",  #>     \"YROTAZMWFI\", \"UJMNXDCYBB\", \"GXYQHIZVPD\", \"GXYQHIZVPD\", \"QMDWWKFVRU\",  #>     \"EWTGOBRLKP\", \"TBZWQOHERE\", \"HYUIWKYPXU\", \"TXFSIPGCID\", \"TWBOLWJGAR\",  #>     \"TBZWQOHERE\", \"JFHAGKINER\", \"CFSINPQYCO\", \"ESYOZKOHCU\", \"GSHWBCJXVZ\",  #>     \"AHOMYEGIBP\", \"JRNMLJJSDP\", \"WEDUDZADWG\", \"RNAOTFIWTN\", \"BZPWNEEBHR\",  #>     \"KTANGMAQMT\", \"CYQGGUSNEK\", \"RMEYEXVXVX\", \"AFUTZUEXVM\", \"TWBOLWJGAR\",  #>     \"KTANGMAQMT\", \"UJMNXDCYBB\", \"NTSOYECHZQ\", \"TKKAYBAFGV\", \"EKNGZSKPGF\",  #>     \"ISHHJNXLMR\", \"ONTOHBVEQC\", \"GKPLYRURBB\", \"EOJBYFQEOY\", \"JPARFIKTYL\",  #>     \"ERVIHSPAYA\", \"ZTCMALLRXB\", \"NTSOYECHZQ\", \"QKSAXQEAIB\", \"QMDWWKFVRU\",  #>     \"WEDUDZADWG\", \"ERVIHSPAYA\", \"CFXONOGTQH\", \"GXQQOGSTOQ\", \"AHOMYEGIBP\",  #>     \"JOPGMOKVOM\", \"ISHHJNXLMR\", \"HLWNYXNVYM\", \"MGDZOPJAFG\", \"GKPLYRURBB\",  #>     \"EOJBYFQEOY\", \"NOTPDVRLPM\", \"LGWJJITBKZ\", \"HYHAFAFYEA\", \"AZVIVPYKND\",  #>     \"VKEOEUOTDQ\", \"EAMRJPOWLU\", \"JHXSYICTMS\", \"KBYFYYONYU\", \"CFSINPQYCO\",  #>     \"VKEOEUOTDQ\", \"EOJBYFQEOY\", \"KIJPLWHVGS\", \"TKKAYBAFGV\", \"RFAKZMSZMB\",  #>     \"MPSFHTGKEF\", \"MHVRYUZJWL\", \"AZVIVPYKND\", \"ISHHJNXLMR\", \"AOKHTNTQJC\",  #>     \"TLGDIASGEL\", \"ZTCMALLRXB\", \"LEESGFRPHV\", \"UZRCINDECG\", \"PHIZOLWIBS\",  #>     \"BZPWNEEBHR\", \"JSGBOZVHXC\", \"CYQGGUSNEK\", \"BBONKKTFNG\", \"TWBOLWJGAR\",  #>     \"XKSCGLSVUZ\", \"ONTOHBVEQC\", \"MQKHZKWIKA\", \"UOFFHQQLIR\", \"ONTOHBVEQC\",  #>     \"OPNAGRHLZM\", \"ZTTKZEEJZP\", \"VOXRCHMDIT\", \"ZPWKFFVOCB\", \"QEAYJDRZQO\",  #>     \"XSHYKGMBPQ\", \"HLWNYXNVYM\", \"ZBXYPQEVLU\", \"BKYOKYIUGW\", \"EKNGZSKPGF\",  #>     \"IIKTKPNNPT\", \"EOJBYFQEOY\", \"QBPHMGOGFW\", \"YFDQMQIVBM\", \"JFHAGKINER\",  #>     \"NOTPDVRLPM\", \"UJMNXDCYBB\", \"ELMZBUCGXP\", \"YFDQMQIVBM\", \"XCEJMFPVDX\",  #>     \"DRQRVFYUCX\", \"ACYJOPUKSD\", \"QCCNNYIKTH\", \"YFDQMQIVBM\", \"RFAKZMSZMB\",  #>     \"UJMNXDCYBB\", \"FKXBYBMICY\", \"QQIQBNKASY\", \"URBJONTBBW\", \"CMEKXFGTSR\",  #>     \"ESYOZKOHCU\", \"JVCERYCMOA\", \"HGHMEUCTEX\", \"CJQEUMATTB\", \"AGJEXFMJAO\",  #>     \"FIXJLQEKCP\", \"YDGABWKNRS\", \"CFXONOGTQH\", \"GXQQOGSTOQ\", \"CYQGGUSNEK\",  #>     \"ESYOZKOHCU\", \"AGJEXFMJAO\", \"UNCDYWJXLO\", \"AZVIVPYKND\", \"PKBCVRCMCS\",  #>     \"YDGABWKNRS\", \"QMDWWKFVRU\", \"UOFFHQQLIR\", \"FHCLEHLIXM\", \"GKPLYRURBB\",  #>     \"ISHHJNXLMR\", \"KBYFYYONYU\", \"HLWNYXNVYM\", \"JVKZPZVIIU\", \"BBONKKTFNG\",  #>     \"BZPWNEEBHR\", \"PBLJMWGFTW\", \"MGDZOPJAFG\", \"ZTTKZEEJZP\", \"EOJBYFQEOY\",  #>     \"HYUIWKYPXU\", \"MHVRYUZJWL\", \"CUYVXLQJIV\", \"JFHAGKINER\", \"ZBXYPQEVLU\",  #>     \"GSHWBCJXVZ\", \"CYQGGUSNEK\", \"WEDUDZADWG\", \"HYUIWKYPXU\", \"QCCNNYIKTH\",  #>     \"RBWJLMGEPF\", \"RHALOWGMGJ\", \"YROTAZMWFI\", \"WNATHOQPJS\", \"QCCNNYIKTH\",  #>     \"MCBXZBXGJN\", \"CJQEUMATTB\", \"YFDQMQIVBM\", \"CMEKXFGTSR\", \"ESYOZKOHCU\",  #>     \"RQDKTNHSYQ\", \"GSNHQUBLXJ\", \"CUYVXLQJIV\", \"MCBXZBXGJN\", \"CYQGGUSNEK\",  #>     \"CUYVXLQJIV\", \"CMEKXFGTSR\", \"CMEKXFGTSR\", \"RBWJLMGEPF\", \"FIXJLQEKCP\",  #>     \"YROTAZMWFI\", \"GXQQOGSTOQ\", \"RNAOTFIWTN\", \"AIJRHVVDKP\", \"FKTIIHAGSF\",  #>     \"GRCMVPYLDK\", \"NJLMIFXDEK\", \"BHOFOGKCJA\", \"JHVIRHYUEP\", \"BBONKKTFNG\",  #>     \"XDEAUVDMFQ\", \"ZPWKFFVOCB\", \"UFXSCLPLER\", \"JPARFIKTYL\", \"PKBCVRCMCS\",  #>     \"UOFFHQQLIR\", \"CFXONOGTQH\", \"CALRWQEBFZ\", \"MCBXZBXGJN\", \"AIJRHVVDKP\",  #>     \"JVCERYCMOA\", \"JRNMLJJSDP\", \"GSHWBCJXVZ\", \"JSGBOZVHXC\", \"FKXBYBMICY\",  #>     \"QQIQBNKASY\", \"JPARFIKTYL\", \"CFXONOGTQH\", \"JOPGMOKVOM\", \"WNATHOQPJS\",  #>     \"HGHMEUCTEX\", \"PHIZOLWIBS\", \"PKTRNWCHPR\", \"HPKSIGVDRL\", \"JWFPSYZNLW\",  #>     \"JPARFIKTYL\", \"CFSINPQYCO\", \"NTSOYECHZQ\", \"OPNAGRHLZM\", \"ISHHJNXLMR\",  #>     \"PKBCVRCMCS\", \"GRCMVPYLDK\", \"ASCJFWFUGV\", \"ACYJOPUKSD\", \"ZTTKZEEJZP\",  #>     \"LJJSFTJKBP\", \"CALRWQEBFZ\", \"NOTPDVRLPM\", \"QMDWWKFVRU\", \"EKNGZSKPGF\",  #>     \"ESYOZKOHCU\", \"NCXWRVCMVY\", \"JVCERYCMOA\", \"GKPLYRURBB\", \"MGDZOPJAFG\",  #>     \"QQIQBNKASY\", \"EAMRJPOWLU\", \"JPARFIKTYL\", \"LGWJJITBKZ\", \"JVKZPZVIIU\",  #>     \"RQDKTNHSYQ\", \"WEDUDZADWG\", \"VKEOEUOTDQ\", \"WMVGSBQYPB\", \"HPKSIGVDRL\",  #>     \"QBPRAWZTBF\", \"UOFFHQQLIR\", \"KKKAFDRDCO\", \"IIKTKPNNPT\", \"CYQGGUSNEK\",  #>     \"QCCNNYIKTH\", \"RQDKTNHSYQ\", \"DRQRVFYUCX\", \"HPKSIGVDRL\", \"YDGABWKNRS\",  #>     \"QEAYJDRZQO\", \"VKEOEUOTDQ\", \"AOKHTNTQJC\", \"TXFSIPGCID\", \"KKKAFDRDCO\",  #>     \"GXQQOGSTOQ\", \"XSHYKGMBPQ\", \"FIXJLQEKCP\", \"SVYPVLUGHE\", \"XSHYKGMBPQ\",  #>     \"JSGBOZVHXC\", \"RHALOWGMGJ\", \"QBPRAWZTBF\", \"ZTCMALLRXB\", \"VKEOEUOTDQ\",  #>     \"ZPWKFFVOCB\", \"TWBOLWJGAR\", \"UJMNXDCYBB\", \"RHALOWGMGJ\", \"HPKSIGVDRL\",  #>     \"JPARFIKTYL\", \"WKXIHCQQBN\", \"ZTCMALLRXB\", \"KTANGMAQMT\", \"ONTOHBVEQC\",  #>     \"MGDZOPJAFG\", \"ZTCMALLRXB\", \"SVYPVLUGHE\", \"VKEOEUOTDQ\", \"UJMNXDCYBB\",  #>     \"HLWNYXNVYM\", \"WEDUDZADWG\", \"UJMNXDCYBB\", \"RMEYEXVXVX\", \"AFUTZUEXVM\",  #>     \"RMEYEXVXVX\", \"HYUIWKYPXU\", \"SPBEZTBJFS\", \"FHCLEHLIXM\", \"CFXONOGTQH\",  #>     \"MMCWEZDZSL\", \"PKBCVRCMCS\", \"MHVRYUZJWL\", \"URBJONTBBW\", \"NOTPDVRLPM\",  #>     \"SPBEZTBJFS\", \"UNCDYWJXLO\", \"CYQGGUSNEK\", \"ZBXYPQEVLU\", \"JOPGMOKVOM\",  #>     \"RHALOWGMGJ\", \"OPNAGRHLZM\", \"YROTAZMWFI\", \"BBONKKTFNG\", \"EAMRJPOWLU\",  #>     \"RFAKZMSZMB\", \"PALVVUCJBF\", \"RNAOTFIWTN\", \"MGDZOPJAFG\", \"MCBXZBXGJN\",  #>     \"QQIQBNKASY\", \"MQKHZKWIKA\", \"UJMNXDCYBB\", \"UZRCINDECG\", \"BBONKKTFNG\",  #>     \"WLNMRBXMPC\", \"MPSFHTGKEF\", \"EOJBYFQEOY\", \"FHCLEHLIXM\", \"XKSCGLSVUZ\",  #>     \"GSNHQUBLXJ\", \"QKSAXQEAIB\", \"QBPRAWZTBF\", \"EOJBYFQEOY\", \"GKPLYRURBB\",  #>     \"RQDKTNHSYQ\", \"BBONKKTFNG\", \"AFUTZUEXVM\", \"ONTOHBVEQC\", \"SVBBYDPIOA\",  #>     \"YROTAZMWFI\", \"ERVIHSPAYA\", \"TBZWQOHERE\", \"TWBOLWJGAR\", \"QQIQBNKASY\",  #>     \"ACYJOPUKSD\", \"FHCLEHLIXM\", \"GSHWBCJXVZ\", \"BZPWNEEBHR\", \"JHVIRHYUEP\",  #>     \"GRCMVPYLDK\", \"UCYFOWDBOQ\", \"CYQGGUSNEK\", \"VKEOEUOTDQ\", \"EAMRJPOWLU\",  #>     \"URBJONTBBW\", \"URBJONTBBW\", \"CKNVKMZWDC\", \"NJLMIFXDEK\", \"RSSXENWCQU\",  #>     \"GSHWBCJXVZ\", \"AGJEXFMJAO\", \"JWFPSYZNLW\", \"ZTCMALLRXB\", \"EJSYIOEOJL\",  #>     \"BBONKKTFNG\", \"WMVGSBQYPB\", \"TKKAYBAFGV\", \"GSHWBCJXVZ\", \"BZPWNEEBHR\",  #>     \"MPSFHTGKEF\", \"WNATHOQPJS\", \"EOJBYFQEOY\", \"VKEOEUOTDQ\", \"BJUNWZLJYP\",  #>     \"AGJEXFMJAO\", \"PHIZOLWIBS\", \"JOPGMOKVOM\", \"RMEYEXVXVX\", \"LEESGFRPHV\",  #>     \"HPKSIGVDRL\", \"YROTAZMWFI\", \"WMVGSBQYPB\", \"TXFSIPGCID\", \"JRNMLJJSDP\",  #>     \"XCEJMFPVDX\", \"ZBXYPQEVLU\", \"CFXONOGTQH\", \"FIXJLQEKCP\", \"WLNMRBXMPC\",  #>     \"CMEKXFGTSR\", \"SVYPVLUGHE\", \"PHIZOLWIBS\", \"KTANGMAQMT\", \"CMEKXFGTSR\",  #>     \"NTSOYECHZQ\", \"CFSINPQYCO\", \"RNAOTFIWTN\", \"ZTCMALLRXB\", \"VKEOEUOTDQ\",  #>     \"FHCLEHLIXM\", \"YFDQMQIVBM\", \"GRCMVPYLDK\", \"QQIQBNKASY\", \"ZTCMALLRXB\",  #>     \"PALVVUCJBF\", \"JSGBOZVHXC\", \"JFHAGKINER\", \"QKSAXQEAIB\", \"CFSINPQYCO\",  #>     \"JFHAGKINER\", \"BHOFOGKCJA\", \"MPSFHTGKEF\", \"NJLMIFXDEK\", \"CKNVKMZWDC\",  #>     \"WKXIHCQQBN\", \"ZTCMALLRXB\", \"YROTAZMWFI\", \"WLNMRBXMPC\", \"AFUTZUEXVM\",  #>     \"ZTTKZEEJZP\", \"MGDZOPJAFG\", \"PKBCVRCMCS\", \"ONTOHBVEQC\", \"CJQEUMATTB\",  #>     \"ZTTKZEEJZP\", \"URBJONTBBW\", \"ZPWKFFVOCB\", \"BHOFOGKCJA\", \"JSGBOZVHXC\",  #>     \"ACYJOPUKSD\", \"RFAKZMSZMB\", \"EZLGDZHKHT\", \"WMVGSBQYPB\", \"EKNGZSKPGF\",  #>     \"BZPWNEEBHR\", \"ZTTKZEEJZP\", \"RSSXENWCQU\", \"OPNAGRHLZM\", \"EOJBYFQEOY\",  #>     \"CFSINPQYCO\", \"GSHWBCJXVZ\", \"WEDUDZADWG\", \"WLNMRBXMPC\", \"YFDQMQIVBM\",  #>     \"CMEKXFGTSR\", \"WLNMRBXMPC\", \"UJMNXDCYBB\", \"KBYFYYONYU\", \"VKEOEUOTDQ\",  #>     \"EJSYIOEOJL\", \"TLGDIASGEL\", \"ZTTKZEEJZP\", \"RQDKTNHSYQ\", \"CYQGGUSNEK\",  #>     \"XSHYKGMBPQ\", \"GKPLYRURBB\", \"MPSFHTGKEF\", \"UOFFHQQLIR\", \"TKKAYBAFGV\",  #>     \"OSNCJRVKET\", \"TWBOLWJGAR\", \"ZBXYPQEVLU\", \"MQKHZKWIKA\", \"VKEOEUOTDQ\",  #>     \"WEDUDZADWG\", \"BZPWNEEBHR\", \"RQDKTNHSYQ\", \"FKTIIHAGSF\", \"JRNMLJJSDP\",  #>     \"FHCLEHLIXM\", \"GRCMVPYLDK\", \"AQEEZTRLKH\", \"RHALOWGMGJ\", \"CYQGGUSNEK\",  #>     \"AZVIVPYKND\", \"ERVIHSPAYA\", \"JWFPSYZNLW\", \"KIJPLWHVGS\", \"RNAOTFIWTN\",  #>     \"JHVIRHYUEP\", \"KIJPLWHVGS\", \"TXFSIPGCID\", \"NCXWRVCMVY\", \"VBFGFOMUQJ\",  #>     \"NJLMIFXDEK\", \"KKKAFDRDCO\", \"CFSINPQYCO\", \"FKXBYBMICY\", \"AHOMYEGIBP\",  #>     \"MGDZOPJAFG\", \"UOFFHQQLIR\", \"KIJPLWHVGS\", \"SVBBYDPIOA\", \"QCCNNYIKTH\",  #>     \"KTANGMAQMT\", \"ACYJOPUKSD\", \"FKXBYBMICY\", \"KTANGMAQMT\", \"WEDUDZADWG\",  #>     \"PHIZOLWIBS\", \"CYQGGUSNEK\", \"FKTIIHAGSF\", \"JFHAGKINER\", \"VBFGFOMUQJ\",  #>     \"TLGDIASGEL\", \"GXYQHIZVPD\", \"HCEHZFVRBV\", \"ENXVDYZEEW\", \"RHALOWGMGJ\",  #>     \"XDEAUVDMFQ\", \"KBYFYYONYU\", \"CMEKXFGTSR\", \"OSNCJRVKET\", \"TXFSIPGCID\",  #>     \"NTSOYECHZQ\", \"ELMZBUCGXP\", \"CFXONOGTQH\", \"XKSCGLSVUZ\", \"RSSXENWCQU\",  #>     \"GSNHQUBLXJ\", \"ZPWKFFVOCB\", \"JVCERYCMOA\", \"MCBXZBXGJN\", \"UZRCINDECG\",  #>     \"TWBOLWJGAR\", \"JFHAGKINER\", \"OSNCJRVKET\", \"EAMRJPOWLU\", \"URBJONTBBW\",  #>     \"YDGABWKNRS\", \"KTANGMAQMT\", \"QQIQBNKASY\", \"ZTCMALLRXB\", \"RHALOWGMGJ\",  #>     \"HYUIWKYPXU\", \"GRCMVPYLDK\", \"YFDQMQIVBM\", \"LEESGFRPHV\", \"ZTTKZEEJZP\",  #>     \"ISWVRSKEUK\", \"LGWJJITBKZ\", \"URBJONTBBW\", \"QQIQBNKASY\", \"JRNMLJJSDP\",  #>     \"BKYOKYIUGW\", \"XKSCGLSVUZ\", \"IIKTKPNNPT\", \"WEDUDZADWG\", \"RMEYEXVXVX\",  #>     \"RNAOTFIWTN\", \"ICUEBKDOGB\", \"ASCJFWFUGV\", \"GSHWBCJXVZ\", \"QKSAXQEAIB\",  #>     \"JWFPSYZNLW\", \"JSGBOZVHXC\", \"WMVGSBQYPB\", \"TXFSIPGCID\", \"QCCNNYIKTH\",  #>     \"CUYVXLQJIV\", \"ENXVDYZEEW\", \"FIXJLQEKCP\", \"CKNVKMZWDC\", \"NJLMIFXDEK\",  #>     \"FHCLEHLIXM\", \"JFHAGKINER\", \"CMEKXFGTSR\", \"XKSCGLSVUZ\", \"IIKTKPNNPT\",  #>     \"OSNCJRVKET\", \"FIXJLQEKCP\", \"KIJPLWHVGS\", \"AOKHTNTQJC\", \"EKNGZSKPGF\",  #>     \"GSHWBCJXVZ\", \"ZTCMALLRXB\", \"FKXBYBMICY\", \"SPBEZTBJFS\", \"ZBXYPQEVLU\",  #>     \"CONXBVIQSU\", \"RSSXENWCQU\", \"RQDKTNHSYQ\", \"URBJONTBBW\", \"GXYQHIZVPD\",  #>     \"PKBCVRCMCS\", \"WEDUDZADWG\", \"MHVRYUZJWL\", \"CMEKXFGTSR\", \"RMEYEXVXVX\",  #>     \"JVKZPZVIIU\", \"ONTOHBVEQC\", \"UZRCINDECG\", \"RSSXENWCQU\", \"CJQEUMATTB\",  #>     \"SPBEZTBJFS\", \"GSHWBCJXVZ\", \"JVCERYCMOA\", \"CUYVXLQJIV\", \"VKEOEUOTDQ\",  #>     \"WKXIHCQQBN\", \"FIXJLQEKCP\", \"PBLJMWGFTW\", \"RNAOTFIWTN\", \"HGHMEUCTEX\",  #>     \"UNCDYWJXLO\", \"UOFFHQQLIR\", \"KTANGMAQMT\", \"QQIQBNKASY\", \"GSNHQUBLXJ\",  #>     \"ELMZBUCGXP\", \"AIJRHVVDKP\", \"WEDUDZADWG\", \"XKSCGLSVUZ\", \"GXYQHIZVPD\",  #>     \"HYHAFAFYEA\", \"MHVRYUZJWL\", \"CFSINPQYCO\", \"ACYJOPUKSD\", \"RNAOTFIWTN\",  #>     \"CJQEUMATTB\", \"RHALOWGMGJ\", \"PKBCVRCMCS\", \"BZPWNEEBHR\", \"ZPWKFFVOCB\",  #>     \"NJLMIFXDEK\", \"ZTTKZEEJZP\", \"QCCNNYIKTH\", \"WEDUDZADWG\", \"KBYFYYONYU\",  #>     \"XDEAUVDMFQ\", \"YROTAZMWFI\", \"WEDUDZADWG\", \"NOTPDVRLPM\", \"RNAOTFIWTN\",  #>     \"BZPWNEEBHR\", \"QMDWWKFVRU\", \"WEDUDZADWG\", \"AGJEXFMJAO\", \"PKBCVRCMCS\",  #>     \"RHALOWGMGJ\", \"AFUTZUEXVM\", \"CYQGGUSNEK\", \"QKSAXQEAIB\", \"WMVGSBQYPB\",  #>     \"FKXBYBMICY\", \"RQDKTNHSYQ\", \"VOXRCHMDIT\", \"EZLGDZHKHT\", \"UJMNXDCYBB\",  #>     \"GXYQHIZVPD\", \"NJLMIFXDEK\", \"ISHHJNXLMR\", \"RNAOTFIWTN\", \"OPNAGRHLZM\",  #>     \"SVYPVLUGHE\", \"ZPWKFFVOCB\", \"JFHAGKINER\", \"JWFPSYZNLW\", \"BKYOKYIUGW\",  #>     \"CYQGGUSNEK\", \"HGHMEUCTEX\", \"QKSAXQEAIB\", \"GRCMVPYLDK\", \"HYUIWKYPXU\",  #>     \"JOPGMOKVOM\", \"ZPWKFFVOCB\", \"LHDUBEZXXM\", \"GXQQOGSTOQ\", \"ACYJOPUKSD\",  #>     \"AHOMYEGIBP\", \"GRCMVPYLDK\", \"MPSFHTGKEF\", \"NCXWRVCMVY\", \"OPNAGRHLZM\",  #>     \"FHCLEHLIXM\", \"GSHWBCJXVZ\", \"ZTCMALLRXB\", \"LHDUBEZXXM\", \"MPSFHTGKEF\",  #>     \"YFDQMQIVBM\", \"YROTAZMWFI\", \"CALRWQEBFZ\", \"UZRCINDECG\", \"YFDQMQIVBM\",  #>     \"TKKAYBAFGV\", \"CFXONOGTQH\", \"ASCJFWFUGV\", \"QBPHMGOGFW\", \"YDGABWKNRS\",  #>     \"ASCJFWFUGV\", \"PHIZOLWIBS\", \"HYUIWKYPXU\", \"YDGABWKNRS\", \"JPARFIKTYL\",  #>     \"GSNHQUBLXJ\", \"ISHHJNXLMR\", \"GKPLYRURBB\", \"SPBEZTBJFS\", \"VBFGFOMUQJ\",  #>     \"ZTTKZEEJZP\", \"ACYJOPUKSD\", \"JWFPSYZNLW\", \"MPSFHTGKEF\", \"WMVGSBQYPB\",  #>     \"CKNVKMZWDC\", \"CJQEUMATTB\", \"GXQQOGSTOQ\", \"JVCERYCMOA\", \"TWBOLWJGAR\",  #>     \"CMEKXFGTSR\", \"KBYFYYONYU\", \"NJLMIFXDEK\", \"YDGABWKNRS\", \"GXQQOGSTOQ\",  #>     \"GRCMVPYLDK\", \"ASCJFWFUGV\", \"MGDZOPJAFG\", \"MHVRYUZJWL\", \"VBFGFOMUQJ\",  #>     \"ASCJFWFUGV\", \"NOTPDVRLPM\", \"JHXSYICTMS\", \"DRQRVFYUCX\", \"AFUTZUEXVM\",  #>     \"ICUEBKDOGB\", \"CFSINPQYCO\", \"VOXRCHMDIT\", \"JHVIRHYUEP\", \"RFAKZMSZMB\",  #>     \"HPKSIGVDRL\", \"MHVRYUZJWL\", \"JPARFIKTYL\", \"FIXJLQEKCP\", \"HCEHZFVRBV\",  #>     \"CUYVXLQJIV\", \"UCYFOWDBOQ\", \"JHVIRHYUEP\", \"EOJBYFQEOY\", \"ACYJOPUKSD\",  #>     \"YDGABWKNRS\", \"ISHHJNXLMR\", \"RHALOWGMGJ\", \"NCXWRVCMVY\", \"UNCDYWJXLO\",  #>     \"CMEKXFGTSR\", \"BZPWNEEBHR\", \"URBJONTBBW\", \"XKSCGLSVUZ\", \"FKTIIHAGSF\",  #>     \"ESYOZKOHCU\", \"XDEAUVDMFQ\", \"DRQRVFYUCX\", \"BZPWNEEBHR\", \"UFXSCLPLER\",  #>     \"JSGBOZVHXC\", \"AQEEZTRLKH\", \"FHCLEHLIXM\", \"YFDQMQIVBM\", \"GXYQHIZVPD\",  #>     \"QMDWWKFVRU\", \"RFAKZMSZMB\", \"QMDWWKFVRU\", \"ERVIHSPAYA\", \"FKXBYBMICY\",  #>     \"RMEYEXVXVX\", \"UZRCINDECG\", \"BJUNWZLJYP\", \"WNATHOQPJS\", \"BKYOKYIUGW\",  #>     \"ZTTKZEEJZP\", \"VKEOEUOTDQ\", \"NJLMIFXDEK\", \"FIXJLQEKCP\", \"ASCJFWFUGV\",  #>     \"ESYOZKOHCU\", \"IIKTKPNNPT\", \"PALVVUCJBF\", \"HGHMEUCTEX\", \"PKBCVRCMCS\",  #>     \"LJJSFTJKBP\", \"LGWJJITBKZ\", \"HGHMEUCTEX\", \"WNATHOQPJS\", \"JFHAGKINER\",  #>     \"NOTPDVRLPM\", \"NCXWRVCMVY\", \"XDEAUVDMFQ\", \"HGHMEUCTEX\", \"LEESGFRPHV\",  #>     \"WMVGSBQYPB\", \"CFSINPQYCO\", \"JVCERYCMOA\", \"HCEHZFVRBV\", \"DRQRVFYUCX\",  #>     \"PKTRNWCHPR\", \"TBZWQOHERE\", \"BHOFOGKCJA\", \"CJQEUMATTB\", \"ASCJFWFUGV\",  #>     \"CFSINPQYCO\", \"RQDKTNHSYQ\", \"JVCERYCMOA\", \"OSNCJRVKET\", \"MHVRYUZJWL\",  #>     \"KTANGMAQMT\", \"KIJPLWHVGS\", \"WLNMRBXMPC\", \"WNATHOQPJS\", \"ISHHJNXLMR\",  #>     \"CUYVXLQJIV\", \"GRCMVPYLDK\", \"QQIQBNKASY\", \"YFDQMQIVBM\", \"JPARFIKTYL\",  #>     \"CALRWQEBFZ\", \"QBPHMGOGFW\", \"GXYQHIZVPD\", \"WMVGSBQYPB\", \"RNAOTFIWTN\",  #>     \"RMEYEXVXVX\", \"QMDWWKFVRU\", \"MMCWEZDZSL\", \"HLWNYXNVYM\", \"EAMRJPOWLU\",  #>     \"RQDKTNHSYQ\", \"UZRCINDECG\", \"XCEJMFPVDX\", \"RNAOTFIWTN\", \"XDEAUVDMFQ\",  #>     \"DRQRVFYUCX\", \"BKYOKYIUGW\", \"SVBBYDPIOA\", \"YFDQMQIVBM\", \"CFXONOGTQH\",  #>     \"ESYOZKOHCU\", \"WMVGSBQYPB\", \"XDEAUVDMFQ\", \"VKEOEUOTDQ\", \"AGJEXFMJAO\",  #>     \"XKSCGLSVUZ\", \"VKEOEUOTDQ\", \"GRCMVPYLDK\", \"IYNWQZVCCI\", \"XDEAUVDMFQ\",  #>     \"CMEKXFGTSR\", \"WNATHOQPJS\", \"ZBXYPQEVLU\", \"RQDKTNHSYQ\", \"JPARFIKTYL\",  #>     \"BZPWNEEBHR\", \"RFAKZMSZMB\", \"KTANGMAQMT\", \"RNAOTFIWTN\", \"NCXWRVCMVY\",  #>     \"TLGDIASGEL\", \"ESYOZKOHCU\", \"GRCMVPYLDK\", \"JPARFIKTYL\", \"AHOMYEGIBP\",  #>     \"QMDWWKFVRU\", \"WLNMRBXMPC\", \"XDEAUVDMFQ\", \"JPARFIKTYL\", \"EOJBYFQEOY\",  #>     \"WEDUDZADWG\", \"SPBEZTBJFS\", \"AHOMYEGIBP\", \"LGWJJITBKZ\", \"CFXONOGTQH\",  #>     \"PALVVUCJBF\", \"GKPLYRURBB\", \"UJMNXDCYBB\", \"ESYOZKOHCU\", \"TLGDIASGEL\",  #>     \"AOKHTNTQJC\", \"LHDUBEZXXM\", \"MHVRYUZJWL\", \"HCEHZFVRBV\", \"QBPHMGOGFW\",  #>     \"JVKZPZVIIU\", \"QMDWWKFVRU\", \"EZLGDZHKHT\", \"URBJONTBBW\", \"JVCERYCMOA\",  #>     \"GXYQHIZVPD\", \"SPBEZTBJFS\", \"CJQEUMATTB\", \"BHOFOGKCJA\", \"WNATHOQPJS\",  #>     \"ENXVDYZEEW\", \"ESYOZKOHCU\", \"XKSCGLSVUZ\", \"JHVIRHYUEP\", \"ERVIHSPAYA\",  #>     \"CKNVKMZWDC\", \"QBPRAWZTBF\", \"CUYVXLQJIV\", \"ZBXYPQEVLU\", \"CFSINPQYCO\",  #>     \"XKSCGLSVUZ\", \"PKBCVRCMCS\", \"TWBOLWJGAR\", \"PKBCVRCMCS\", \"RSSXENWCQU\",  #>     \"LEESGFRPHV\", \"CUYVXLQJIV\", \"EOJBYFQEOY\", \"FHCLEHLIXM\", \"NJLMIFXDEK\",  #>     \"ASCJFWFUGV\", \"JVKZPZVIIU\", \"JSGBOZVHXC\", \"JRNMLJJSDP\", \"JRNMLJJSDP\",  #>     \"WEDUDZADWG\", \"KIJPLWHVGS\", \"GSHWBCJXVZ\", \"TLGDIASGEL\", \"JOPGMOKVOM\",  #>     \"EZLGDZHKHT\", \"RMEYEXVXVX\", \"JWFPSYZNLW\", \"WMVGSBQYPB\", \"PKTRNWCHPR\",  #>     \"LGWJJITBKZ\", \"SPBEZTBJFS\", \"GSNHQUBLXJ\", \"LEESGFRPHV\", \"EZLGDZHKHT\",  #>     \"YFDQMQIVBM\", \"PALVVUCJBF\", \"JRNMLJJSDP\", \"JOPGMOKVOM\", \"MHVRYUZJWL\",  #>     \"JFHAGKINER\", \"ZTTKZEEJZP\", \"AFUTZUEXVM\", \"ESYOZKOHCU\", \"JFHAGKINER\",  #>     \"UJMNXDCYBB\", \"BBONKKTFNG\", \"PKBCVRCMCS\", \"TXFSIPGCID\", \"ENXVDYZEEW\",  #>     \"QMDWWKFVRU\", \"BHOFOGKCJA\", \"NCXWRVCMVY\", \"QCCNNYIKTH\", \"ACYJOPUKSD\",  #>     \"JFHAGKINER\", \"JHVIRHYUEP\", \"ACYJOPUKSD\", \"UJMNXDCYBB\", \"ESYOZKOHCU\",  #>     \"ENXVDYZEEW\", \"YROTAZMWFI\", \"BZPWNEEBHR\", \"EOJBYFQEOY\", \"EOJBYFQEOY\",  #>     \"KKKAFDRDCO\", \"JRNMLJJSDP\", \"SVBBYDPIOA\", \"NTSOYECHZQ\", \"YFDQMQIVBM\",  #>     \"RMEYEXVXVX\", \"CUYVXLQJIV\", \"UZRCINDECG\", \"KBYFYYONYU\", \"FIXJLQEKCP\",  #>     \"GSNHQUBLXJ\", \"ASCJFWFUGV\", \"LGWJJITBKZ\", \"RMEYEXVXVX\", \"ZBXYPQEVLU\",  #>     \"YFDQMQIVBM\", \"KBYFYYONYU\", \"KIJPLWHVGS\", \"AZVIVPYKND\", \"MPSFHTGKEF\",  #>     \"WLNMRBXMPC\", \"WEDUDZADWG\", \"FKXBYBMICY\", \"JVKZPZVIIU\", \"MQKHZKWIKA\",  #>     \"ASCJFWFUGV\", \"AIJRHVVDKP\", \"CUYVXLQJIV\", \"XDEAUVDMFQ\", \"AGJEXFMJAO\",  #>     \"JHVIRHYUEP\", \"CALRWQEBFZ\", \"BBONKKTFNG\", \"QBPRAWZTBF\", \"UJMNXDCYBB\",  #>     \"ZPWKFFVOCB\", \"CJQEUMATTB\", \"CFSINPQYCO\", \"CFSINPQYCO\", \"ISWVRSKEUK\",  #>     \"URBJONTBBW\", \"XDEAUVDMFQ\", \"JPARFIKTYL\", \"PALVVUCJBF\", \"WMVGSBQYPB\",  #>     \"KBYFYYONYU\", \"JVCERYCMOA\", \"JVKZPZVIIU\", \"XDEAUVDMFQ\", \"WEDUDZADWG\",  #>     \"PKTRNWCHPR\", \"KBYFYYONYU\", \"AHOMYEGIBP\", \"RBWJLMGEPF\", \"BZPWNEEBHR\",  #>     \"HYUIWKYPXU\", \"RMEYEXVXVX\", \"ASCJFWFUGV\", \"AFUTZUEXVM\", \"RFAKZMSZMB\",  #>     \"GRCMVPYLDK\", \"CALRWQEBFZ\", \"BHOFOGKCJA\", \"QMDWWKFVRU\", \"CONXBVIQSU\",  #>     \"JWFPSYZNLW\", \"VBFGFOMUQJ\", \"BBONKKTFNG\", \"PBLJMWGFTW\", \"PALVVUCJBF\",  #>     \"GKPLYRURBB\", \"GRCMVPYLDK\", \"CUYVXLQJIV\", \"LEESGFRPHV\", \"ESYOZKOHCU\",  #>     \"CUYVXLQJIV\", \"EAMRJPOWLU\", \"LEESGFRPHV\", \"HPKSIGVDRL\", \"CMEKXFGTSR\",  #>     \"ASCJFWFUGV\", \"RHALOWGMGJ\", \"LEESGFRPHV\", \"ACYJOPUKSD\", \"LJJSFTJKBP\",  #>     \"FIXJLQEKCP\", \"UNCDYWJXLO\", \"RHALOWGMGJ\", \"FIXJLQEKCP\", \"ASCJFWFUGV\",  #>     \"OSNCJRVKET\", \"GSNHQUBLXJ\", \"CALRWQEBFZ\", \"ONTOHBVEQC\", \"UNCDYWJXLO\",  #>     \"CALRWQEBFZ\", \"JHVIRHYUEP\", \"UJMNXDCYBB\", \"PALVVUCJBF\", \"FHCLEHLIXM\",  #>     \"FIXJLQEKCP\", \"AQEEZTRLKH\", \"MPSFHTGKEF\", \"CFSINPQYCO\", \"QBPHMGOGFW\",  #>     \"WEDUDZADWG\", \"EJSYIOEOJL\", \"JWFPSYZNLW\", \"TBZWQOHERE\", \"MPSFHTGKEF\",  #>     \"QQIQBNKASY\", \"BZPWNEEBHR\", \"RNAOTFIWTN\", \"JVCERYCMOA\", \"CJQEUMATTB\",  #>     \"LJJSFTJKBP\", \"MGDZOPJAFG\", \"WMVGSBQYPB\", \"NJLMIFXDEK\", \"WMVGSBQYPB\",  #>     \"VBFGFOMUQJ\", \"RQDKTNHSYQ\", \"NJLMIFXDEK\", \"XDEAUVDMFQ\", \"HGHMEUCTEX\",  #>     \"HYHAFAFYEA\", \"JFHAGKINER\", \"XKSCGLSVUZ\", \"HYUIWKYPXU\", \"DRQRVFYUCX\",  #>     \"ZBXYPQEVLU\", \"PHIZOLWIBS\", \"ESYOZKOHCU\", \"FHCLEHLIXM\", \"VKEOEUOTDQ\",  #>     \"PKBCVRCMCS\", \"AZVIVPYKND\", \"EAMRJPOWLU\", \"GXYQHIZVPD\", \"LEESGFRPHV\",  #>     \"FKTIIHAGSF\", \"SVBBYDPIOA\", \"RFAKZMSZMB\", \"PALVVUCJBF\", \"CUYVXLQJIV\",  #>     \"RFAKZMSZMB\", \"CMEKXFGTSR\", \"RMEYEXVXVX\", \"XKSCGLSVUZ\", \"CUYVXLQJIV\",  #>     \"NCXWRVCMVY\", \"FKXBYBMICY\", \"BBONKKTFNG\", \"GRCMVPYLDK\", \"RMEYEXVXVX\",  #>     \"HYHAFAFYEA\", \"BKYOKYIUGW\", \"TXFSIPGCID\", \"AIJRHVVDKP\", \"QMDWWKFVRU\",  #>     \"CKNVKMZWDC\", \"RNAOTFIWTN\", \"AQEEZTRLKH\", \"TKKAYBAFGV\", \"VOXRCHMDIT\",  #>     \"GXYQHIZVPD\", \"AQEEZTRLKH\", \"KTANGMAQMT\", \"ASCJFWFUGV\", \"AIJRHVVDKP\",  #>     \"XKSCGLSVUZ\", \"ASCJFWFUGV\", \"BZPWNEEBHR\", \"JPARFIKTYL\", \"JFHAGKINER\",  #>     \"JHXSYICTMS\", \"VBFGFOMUQJ\", \"MCBXZBXGJN\", \"SVYPVLUGHE\", \"GXYQHIZVPD\",  #>     \"UFXSCLPLER\", \"URBJONTBBW\", \"JSGBOZVHXC\", \"MHVRYUZJWL\", \"KKKAFDRDCO\",  #>     \"ONTOHBVEQC\", \"VOXRCHMDIT\", \"AFUTZUEXVM\", \"JPARFIKTYL\", \"TXFSIPGCID\",  #>     \"VOXRCHMDIT\", \"ERVIHSPAYA\", \"ACYJOPUKSD\", \"RSSXENWCQU\", \"PKBCVRCMCS\",  #>     \"DRQRVFYUCX\", \"UOFFHQQLIR\", \"TBZWQOHERE\", \"TWBOLWJGAR\", \"MCBXZBXGJN\",  #>     \"QBPHMGOGFW\", \"ZTCMALLRXB\", \"RBWJLMGEPF\", \"JRNMLJJSDP\", \"JVKZPZVIIU\",  #>     \"HCEHZFVRBV\", \"UOFFHQQLIR\", \"UOFFHQQLIR\", \"GXQQOGSTOQ\", \"KKKAFDRDCO\",  #>     \"LHDUBEZXXM\", \"VKEOEUOTDQ\", \"RHALOWGMGJ\", \"BHOFOGKCJA\", \"LHDUBEZXXM\",  #>     \"CUYVXLQJIV\", \"YROTAZMWFI\", \"PKTRNWCHPR\", \"ZBXYPQEVLU\", \"UFXSCLPLER\",  #>     \"TXFSIPGCID\", \"ASCJFWFUGV\", \"UFXSCLPLER\", \"MPSFHTGKEF\", \"EJSYIOEOJL\",  #>     \"GSNHQUBLXJ\", \"XKSCGLSVUZ\", \"ZPWKFFVOCB\", \"FHCLEHLIXM\", \"CUYVXLQJIV\",  #>     \"ZTTKZEEJZP\", \"RMEYEXVXVX\", \"YDGABWKNRS\", \"JVKZPZVIIU\", \"VKEOEUOTDQ\",  #>     \"CMEKXFGTSR\", \"FKXBYBMICY\", \"ZTTKZEEJZP\", \"FKXBYBMICY\", \"EAMRJPOWLU\",  #>     \"GRCMVPYLDK\", \"EJSYIOEOJL\", \"RHALOWGMGJ\", \"JVKZPZVIIU\", \"SVBBYDPIOA\",  #>     \"QQIQBNKASY\", \"ZPWKFFVOCB\", \"VOXRCHMDIT\", \"TBZWQOHERE\", \"YFDQMQIVBM\",  #>     \"CFXONOGTQH\", \"QCCNNYIKTH\", \"TWBOLWJGAR\", \"CALRWQEBFZ\", \"NOTPDVRLPM\",  #>     \"QQIQBNKASY\", \"SPBEZTBJFS\", \"AIJRHVVDKP\", \"FIXJLQEKCP\", \"ISHHJNXLMR\",  #>     \"QMDWWKFVRU\", \"RFAKZMSZMB\", \"QMDWWKFVRU\", \"AFUTZUEXVM\", \"JWFPSYZNLW\",  #>     \"DRQRVFYUCX\", \"JPARFIKTYL\", \"HCEHZFVRBV\", \"NCXWRVCMVY\", \"RHALOWGMGJ\",  #>     \"WNATHOQPJS\", \"HPKSIGVDRL\", \"WEDUDZADWG\", \"HGHMEUCTEX\", \"YDGABWKNRS\",  #>     \"UFXSCLPLER\", \"JPARFIKTYL\", \"MPSFHTGKEF\", \"AFUTZUEXVM\", \"ESYOZKOHCU\",  #>     \"EKNGZSKPGF\", \"XKSCGLSVUZ\", \"UCYFOWDBOQ\", \"WEDUDZADWG\", \"VOXRCHMDIT\",  #>     \"RFAKZMSZMB\", \"LHDUBEZXXM\", \"CUYVXLQJIV\", \"LHDUBEZXXM\", \"VBFGFOMUQJ\",  #>     \"URBJONTBBW\", \"ONTOHBVEQC\", \"MGDZOPJAFG\", \"LHDUBEZXXM\", \"YDGABWKNRS\",  #>     \"AHOMYEGIBP\", \"GXYQHIZVPD\", \"XSHYKGMBPQ\", \"QBPRAWZTBF\", \"QBPRAWZTBF\",  #>     \"GKPLYRURBB\", \"JFHAGKINER\", \"ZTTKZEEJZP\", \"RNAOTFIWTN\", \"GXYQHIZVPD\",  #>     \"SVYPVLUGHE\", \"XKSCGLSVUZ\", \"TBZWQOHERE\", \"CYQGGUSNEK\", \"AOKHTNTQJC\",  #>     \"UFXSCLPLER\", \"XKSCGLSVUZ\", \"ASCJFWFUGV\", \"BBONKKTFNG\", \"CONXBVIQSU\",  #>     \"GSHWBCJXVZ\", \"UOFFHQQLIR\", \"JRNMLJJSDP\", \"CALRWQEBFZ\", \"YDGABWKNRS\",  #>     \"WNATHOQPJS\", \"AZVIVPYKND\", \"MCBXZBXGJN\", \"KIJPLWHVGS\", \"QCCNNYIKTH\",  #>     \"CFXONOGTQH\", \"LEESGFRPHV\", \"HLWNYXNVYM\", \"RQDKTNHSYQ\", \"SVBBYDPIOA\",  #>     \"VBFGFOMUQJ\", \"ICUEBKDOGB\", \"KIJPLWHVGS\", \"SPBEZTBJFS\", \"FKTIIHAGSF\",  #>     \"ESYOZKOHCU\", \"WEDUDZADWG\", \"ASCJFWFUGV\", \"ELMZBUCGXP\", \"QKSAXQEAIB\",  #>     \"BBONKKTFNG\", \"GXQQOGSTOQ\", \"UOFFHQQLIR\", \"MGDZOPJAFG\", \"EOJBYFQEOY\",  #>     \"KBYFYYONYU\", \"JHXSYICTMS\", \"RMEYEXVXVX\", \"ISHHJNXLMR\", \"SVYPVLUGHE\",  #>     \"ESYOZKOHCU\", \"IIKTKPNNPT\", \"KTANGMAQMT\", \"YFDQMQIVBM\", \"GSNHQUBLXJ\",  #>     \"NJLMIFXDEK\", \"PKBCVRCMCS\", \"BKYOKYIUGW\", \"RHALOWGMGJ\", \"SVYPVLUGHE\",  #>     \"RFAKZMSZMB\", \"EJSYIOEOJL\", \"AIJRHVVDKP\", \"QCCNNYIKTH\", \"AOKHTNTQJC\",  #>     \"ONTOHBVEQC\", \"NJLMIFXDEK\", \"CUYVXLQJIV\", \"JOPGMOKVOM\", \"FKXBYBMICY\",  #>     \"CUYVXLQJIV\", \"QCCNNYIKTH\", \"PBLJMWGFTW\", \"MHVRYUZJWL\", \"CFSINPQYCO\",  #>     \"HPKSIGVDRL\", \"XKSCGLSVUZ\", \"EWTGOBRLKP\", \"FHCLEHLIXM\", \"QQIQBNKASY\",  #>     \"RHALOWGMGJ\", \"CFSINPQYCO\", \"HGHMEUCTEX\", \"QEAYJDRZQO\", \"LEESGFRPHV\",  #>     \"MHVRYUZJWL\", \"QMDWWKFVRU\", \"EOJBYFQEOY\", \"BHOFOGKCJA\", \"YROTAZMWFI\",  #>     \"ISHHJNXLMR\", \"LEESGFRPHV\", \"CUYVXLQJIV\", \"GKPLYRURBB\", \"RSSXENWCQU\",  #>     \"VOXRCHMDIT\", \"NOTPDVRLPM\", \"YROTAZMWFI\", \"JPARFIKTYL\", \"WEDUDZADWG\",  #>     \"JVKZPZVIIU\", \"UZRCINDECG\", \"HLWNYXNVYM\", \"CJQEUMATTB\", \"ESYOZKOHCU\",  #>     \"NCXWRVCMVY\", \"AIJRHVVDKP\", \"VKEOEUOTDQ\", \"CYQGGUSNEK\", \"FKXBYBMICY\",  #>     \"GXQQOGSTOQ\", \"HCEHZFVRBV\", \"MPSFHTGKEF\", \"URBJONTBBW\", \"CJQEUMATTB\",  #>     \"OPNAGRHLZM\", \"PBLJMWGFTW\", \"EJSYIOEOJL\", \"ZPWKFFVOCB\", \"VKEOEUOTDQ\",  #>     \"ASCJFWFUGV\", \"EZLGDZHKHT\", \"ERVIHSPAYA\", \"ZTCMALLRXB\", \"ONTOHBVEQC\",  #>     \"ZPWKFFVOCB\", \"CJQEUMATTB\", \"EAMRJPOWLU\", \"VKEOEUOTDQ\", \"HYUIWKYPXU\",  #>     \"PKBCVRCMCS\", \"CKNVKMZWDC\", \"AIJRHVVDKP\", \"CFXONOGTQH\", \"YDGABWKNRS\",  #>     \"LJJSFTJKBP\", \"AOKHTNTQJC\", \"HCEHZFVRBV\", \"OPNAGRHLZM\", \"EZLGDZHKHT\",  #>     \"AOKHTNTQJC\", \"JVCERYCMOA\", \"KBYFYYONYU\", \"ELMZBUCGXP\", \"FHCLEHLIXM\",  #>     \"JFHAGKINER\", \"JWFPSYZNLW\", \"GRCMVPYLDK\", \"PKBCVRCMCS\", \"VBFGFOMUQJ\",  #>     \"WMVGSBQYPB\", \"RFAKZMSZMB\", \"CMEKXFGTSR\", \"ZBXYPQEVLU\", \"QBPRAWZTBF\",  #>     \"KBYFYYONYU\", \"QBPRAWZTBF\", \"LGWJJITBKZ\", \"MQKHZKWIKA\", \"SPBEZTBJFS\",  #>     \"ASCJFWFUGV\", \"CMEKXFGTSR\", \"HPKSIGVDRL\", \"UJMNXDCYBB\", \"KBYFYYONYU\",  #>     \"UFXSCLPLER\", \"RNAOTFIWTN\", \"LJJSFTJKBP\", \"UJMNXDCYBB\", \"PKBCVRCMCS\",  #>     \"NJLMIFXDEK\", \"QQIQBNKASY\", \"LEESGFRPHV\", \"WEDUDZADWG\", \"DRQRVFYUCX\",  #>     \"NCXWRVCMVY\", \"CFSINPQYCO\", \"AGJEXFMJAO\", \"WEDUDZADWG\", \"NJLMIFXDEK\",  #>     \"RMEYEXVXVX\", \"YROTAZMWFI\", \"DRQRVFYUCX\", \"GSHWBCJXVZ\", \"TLGDIASGEL\",  #>     \"PALVVUCJBF\", \"UFXSCLPLER\", \"URBJONTBBW\", \"XKSCGLSVUZ\", \"ISHHJNXLMR\",  #>     \"EOJBYFQEOY\", \"KBYFYYONYU\", \"CFXONOGTQH\", \"RSSXENWCQU\", \"AZVIVPYKND\",  #>     \"LEESGFRPHV\", \"HGHMEUCTEX\", \"JSGBOZVHXC\", \"LEESGFRPHV\", \"RSSXENWCQU\",  #>     \"CFXONOGTQH\", \"MHVRYUZJWL\", \"JVKZPZVIIU\", \"BZPWNEEBHR\", \"NOTPDVRLPM\",  #>     \"CMEKXFGTSR\", \"GXQQOGSTOQ\", \"RMEYEXVXVX\", \"XDEAUVDMFQ\", \"NOTPDVRLPM\",  #>     \"RHALOWGMGJ\", \"HGHMEUCTEX\", \"FKXBYBMICY\", \"TXFSIPGCID\", \"RNAOTFIWTN\",  #>     \"CUYVXLQJIV\", \"QCCNNYIKTH\", \"URBJONTBBW\", \"XDEAUVDMFQ\", \"PKTRNWCHPR\",  #>     \"JOPGMOKVOM\", \"UFXSCLPLER\", \"KTANGMAQMT\", \"VKEOEUOTDQ\", \"WLNMRBXMPC\",  #>     \"ACYJOPUKSD\", \"HGHMEUCTEX\", \"CJQEUMATTB\", \"BBONKKTFNG\", \"ESYOZKOHCU\",  #>     \"PHIZOLWIBS\", \"CMEKXFGTSR\", \"EJSYIOEOJL\", \"PKBCVRCMCS\", \"MHVRYUZJWL\",  #>     \"WMVGSBQYPB\", \"ZPWKFFVOCB\", \"FKTIIHAGSF\", \"GKPLYRURBB\", \"AFUTZUEXVM\",  #>     \"VBFGFOMUQJ\", \"UFXSCLPLER\", \"YDGABWKNRS\", \"RSSXENWCQU\", \"JHXSYICTMS\",  #>     \"RFAKZMSZMB\", \"TBZWQOHERE\", \"UZRCINDECG\", \"KTANGMAQMT\", \"ISHHJNXLMR\",  #>     \"CFXONOGTQH\", \"TWBOLWJGAR\", \"OPNAGRHLZM\", \"EAMRJPOWLU\", \"BKYOKYIUGW\",  #>     \"YDGABWKNRS\", \"JVCERYCMOA\", \"VKEOEUOTDQ\", \"RBWJLMGEPF\", \"UJMNXDCYBB\",  #>     \"IIKTKPNNPT\", \"ZTCMALLRXB\", \"NCXWRVCMVY\", \"ACYJOPUKSD\", \"AGJEXFMJAO\",  #>     \"AHOMYEGIBP\", \"EOJBYFQEOY\", \"ENXVDYZEEW\", \"VKEOEUOTDQ\", \"CMEKXFGTSR\",  #>     \"GKPLYRURBB\", \"HYUIWKYPXU\", \"ZBXYPQEVLU\", \"VOXRCHMDIT\", \"TWBOLWJGAR\",  #>     \"OPNAGRHLZM\", \"BKYOKYIUGW\", \"GRCMVPYLDK\", \"UFXSCLPLER\", \"IYNWQZVCCI\",  #>     \"CMEKXFGTSR\", \"WMVGSBQYPB\", \"RHALOWGMGJ\", \"CMEKXFGTSR\", \"CFXONOGTQH\",  #>     \"TXFSIPGCID\", \"AGJEXFMJAO\", \"RQDKTNHSYQ\", \"QMDWWKFVRU\", \"JSGBOZVHXC\",  #>     \"CKNVKMZWDC\", \"ISHHJNXLMR\", \"AOKHTNTQJC\", \"MHVRYUZJWL\", \"FIXJLQEKCP\",  #>     \"XDEAUVDMFQ\", \"JFHAGKINER\", \"WLNMRBXMPC\", \"GKPLYRURBB\", \"UOFFHQQLIR\",  #>     \"KTANGMAQMT\", \"CALRWQEBFZ\", \"EOJBYFQEOY\", \"WEDUDZADWG\", \"MGDZOPJAFG\",  #>     \"YROTAZMWFI\", \"UZRCINDECG\", \"HGHMEUCTEX\", \"UOFFHQQLIR\", \"UNCDYWJXLO\",  #>     \"ZPWKFFVOCB\", \"CFXONOGTQH\", \"WEDUDZADWG\", \"FIXJLQEKCP\", \"ZBXYPQEVLU\",  #>     \"CFSINPQYCO\", \"MGDZOPJAFG\", \"EZLGDZHKHT\", \"ELMZBUCGXP\", \"JSGBOZVHXC\",  #>     \"GKPLYRURBB\", \"MPSFHTGKEF\", \"UOFFHQQLIR\", \"TBZWQOHERE\", \"YROTAZMWFI\",  #>     \"TLGDIASGEL\", \"UJMNXDCYBB\", \"UOFFHQQLIR\", \"YROTAZMWFI\", \"XKSCGLSVUZ\",  #>     \"HYHAFAFYEA\", \"JWFPSYZNLW\", \"AHOMYEGIBP\", \"ASCJFWFUGV\", \"ESYOZKOHCU\",  #>     \"MPSFHTGKEF\", \"NCXWRVCMVY\", \"FIXJLQEKCP\", \"AOKHTNTQJC\", \"SPBEZTBJFS\",  #>     \"QMDWWKFVRU\", \"GSNHQUBLXJ\", \"GSHWBCJXVZ\", \"BHOFOGKCJA\", \"ASCJFWFUGV\",  #>     \"JOPGMOKVOM\", \"ASCJFWFUGV\", \"PKTRNWCHPR\", \"MPSFHTGKEF\", \"JVCERYCMOA\",  #>     \"JFHAGKINER\", \"KIJPLWHVGS\", \"YROTAZMWFI\", \"GRCMVPYLDK\", \"EOJBYFQEOY\",  #>     \"RQDKTNHSYQ\", \"PALVVUCJBF\", \"RFAKZMSZMB\", \"ISHHJNXLMR\", \"FIXJLQEKCP\",  #>     \"GXYQHIZVPD\", \"IIKTKPNNPT\", \"JPARFIKTYL\", \"EJSYIOEOJL\", \"AHOMYEGIBP\",  #>     \"YFDQMQIVBM\", \"WMVGSBQYPB\", \"HPKSIGVDRL\", \"CYQGGUSNEK\", \"TBZWQOHERE\",  #>     \"GSHWBCJXVZ\", \"PKBCVRCMCS\", \"JRNMLJJSDP\", \"QQIQBNKASY\", \"CJQEUMATTB\",  #>     \"QBPHMGOGFW\", \"LEESGFRPHV\", \"TLGDIASGEL\", \"RSSXENWCQU\", \"OSNCJRVKET\",  #>     \"QKSAXQEAIB\", \"BHOFOGKCJA\", \"MGDZOPJAFG\", \"QCCNNYIKTH\", \"AZVIVPYKND\",  #>     \"JRNMLJJSDP\", \"WNATHOQPJS\", \"FKXBYBMICY\", \"AGJEXFMJAO\", \"CJQEUMATTB\",  #>     \"PALVVUCJBF\", \"JWFPSYZNLW\", \"GXQQOGSTOQ\", \"RBWJLMGEPF\", \"AFUTZUEXVM\",  #>     \"TLGDIASGEL\", \"TWBOLWJGAR\", \"WEDUDZADWG\", \"ICUEBKDOGB\", \"PHIZOLWIBS\",  #>     \"TKKAYBAFGV\", \"FKTIIHAGSF\", \"UZRCINDECG\", \"CUYVXLQJIV\", \"CALRWQEBFZ\",  #>     \"IYNWQZVCCI\", \"WNATHOQPJS\", \"JPARFIKTYL\", \"XKSCGLSVUZ\", \"QBPHMGOGFW\",  #>     \"MGDZOPJAFG\", \"NTSOYECHZQ\", \"UNCDYWJXLO\", \"BBONKKTFNG\", \"ONTOHBVEQC\",  #>     \"JVCERYCMOA\", \"ESYOZKOHCU\", \"VKEOEUOTDQ\", \"NTSOYECHZQ\", \"UZRCINDECG\",  #>     \"XKSCGLSVUZ\", \"JVCERYCMOA\", \"MPSFHTGKEF\", \"RQDKTNHSYQ\", \"YDGABWKNRS\",  #>     \"RQDKTNHSYQ\", \"TKKAYBAFGV\", \"BKYOKYIUGW\", \"ASCJFWFUGV\", \"RNAOTFIWTN\",  #>     \"GXQQOGSTOQ\", \"RMEYEXVXVX\", \"YROTAZMWFI\", \"HPKSIGVDRL\", \"IIKTKPNNPT\",  #>     \"CFSINPQYCO\", \"MGDZOPJAFG\", \"ASCJFWFUGV\", \"CYQGGUSNEK\", \"QEAYJDRZQO\",  #>     \"HPKSIGVDRL\", \"RHALOWGMGJ\", \"EOJBYFQEOY\", \"ACYJOPUKSD\", \"CJQEUMATTB\",  #>     \"JFHAGKINER\", \"UJMNXDCYBB\", \"JRNMLJJSDP\", \"VOXRCHMDIT\", \"GKPLYRURBB\",  #>     \"JOPGMOKVOM\", \"ISWVRSKEUK\", \"RHALOWGMGJ\", \"JFHAGKINER\", \"HGHMEUCTEX\",  #>     \"GRCMVPYLDK\", \"CMEKXFGTSR\", \"JFHAGKINER\", \"GKPLYRURBB\", \"UJMNXDCYBB\",  #>     \"GKPLYRURBB\", \"UCYFOWDBOQ\", \"UOFFHQQLIR\", \"FKTIIHAGSF\", \"ESYOZKOHCU\",  #>     \"RHALOWGMGJ\", \"CJQEUMATTB\", \"CALRWQEBFZ\", \"GKPLYRURBB\", \"RQDKTNHSYQ\",  #>     \"GXQQOGSTOQ\", \"VBFGFOMUQJ\", \"NOTPDVRLPM\", \"HYUIWKYPXU\", \"BKYOKYIUGW\",  #>     \"TBZWQOHERE\", \"ELMZBUCGXP\", \"YFDQMQIVBM\", \"VOXRCHMDIT\", \"XDEAUVDMFQ\",  #>     \"GSHWBCJXVZ\", \"PKBCVRCMCS\", \"UZRCINDECG\", \"FHCLEHLIXM\", \"UZRCINDECG\",  #>     \"KBYFYYONYU\", \"BKYOKYIUGW\", \"BZPWNEEBHR\", \"NTSOYECHZQ\", \"ZTTKZEEJZP\",  #>     \"ZTCMALLRXB\", \"FKXBYBMICY\", \"RHALOWGMGJ\", \"RNAOTFIWTN\", \"KBYFYYONYU\",  #>     \"SVBBYDPIOA\", \"NJLMIFXDEK\", \"AFUTZUEXVM\", \"JFHAGKINER\", \"ONTOHBVEQC\",  #>     \"CUYVXLQJIV\", \"NJLMIFXDEK\", \"NCXWRVCMVY\", \"CMEKXFGTSR\", \"PHIZOLWIBS\",  #>     \"AFUTZUEXVM\", \"ZBXYPQEVLU\", \"RQDKTNHSYQ\", \"CKNVKMZWDC\", \"CUYVXLQJIV\",  #>     \"ELMZBUCGXP\", \"XCEJMFPVDX\", \"CUYVXLQJIV\", \"ISHHJNXLMR\", \"ISWVRSKEUK\",  #>     \"TBZWQOHERE\", \"GXYQHIZVPD\", \"LJJSFTJKBP\", \"BJUNWZLJYP\", \"EZLGDZHKHT\",  #>     \"JOPGMOKVOM\", \"HYHAFAFYEA\", \"KBYFYYONYU\", \"JSGBOZVHXC\", \"GXYQHIZVPD\",  #>     \"ENXVDYZEEW\", \"CONXBVIQSU\", \"FKXBYBMICY\", \"ELMZBUCGXP\", \"BBONKKTFNG\",  #>     \"LEESGFRPHV\", \"WEDUDZADWG\", \"CONXBVIQSU\", \"ISHHJNXLMR\", \"ENXVDYZEEW\",  #>     \"QMDWWKFVRU\", \"MPSFHTGKEF\", \"TLGDIASGEL\", \"JHXSYICTMS\", \"TWBOLWJGAR\",  #>     \"ZPWKFFVOCB\", \"RNAOTFIWTN\", \"ACYJOPUKSD\", \"RHALOWGMGJ\", \"QMDWWKFVRU\",  #>     \"TLGDIASGEL\", \"JVKZPZVIIU\", \"UOFFHQQLIR\", \"BHOFOGKCJA\", \"CMEKXFGTSR\",  #>     \"RMEYEXVXVX\", \"WKXIHCQQBN\", \"ZTTKZEEJZP\", \"RFAKZMSZMB\", \"MGDZOPJAFG\",  #>     \"BZPWNEEBHR\", \"JSGBOZVHXC\", \"QBPRAWZTBF\", \"ASCJFWFUGV\", \"CFXONOGTQH\",  #>     \"WNATHOQPJS\", \"MHVRYUZJWL\", \"ZTTKZEEJZP\", \"KTANGMAQMT\", \"TXFSIPGCID\",  #>     \"UNCDYWJXLO\", \"ZPWKFFVOCB\", \"YFDQMQIVBM\", \"CFXONOGTQH\", \"JPARFIKTYL\",  #>     \"HCEHZFVRBV\", \"YFDQMQIVBM\", \"GKPLYRURBB\", \"BBONKKTFNG\", \"TBZWQOHERE\",  #>     \"WNATHOQPJS\", \"PHIZOLWIBS\", \"AOKHTNTQJC\", \"TXFSIPGCID\", \"UNCDYWJXLO\",  #>     \"RMEYEXVXVX\", \"MQKHZKWIKA\", \"HCEHZFVRBV\", \"JVCERYCMOA\", \"YROTAZMWFI\",  #>     \"CUYVXLQJIV\", \"PKBCVRCMCS\", \"GSNHQUBLXJ\", \"CFXONOGTQH\", \"RFAKZMSZMB\",  #>     \"UZRCINDECG\", \"CJQEUMATTB\", \"CUYVXLQJIV\", \"XDEAUVDMFQ\", \"CYQGGUSNEK\",  #>     \"UOFFHQQLIR\", \"CKNVKMZWDC\", \"KTANGMAQMT\", \"JVKZPZVIIU\", \"MHVRYUZJWL\",  #>     \"UOFFHQQLIR\", \"JOPGMOKVOM\", \"UCYFOWDBOQ\", \"RQDKTNHSYQ\", \"SVYPVLUGHE\",  #>     \"ASCJFWFUGV\", \"RQDKTNHSYQ\", \"NJLMIFXDEK\", \"PKTRNWCHPR\", \"KIJPLWHVGS\",  #>     \"LEESGFRPHV\", \"GXQQOGSTOQ\", \"BZPWNEEBHR\", \"JRNMLJJSDP\", \"CMEKXFGTSR\",  #>     \"ZBXYPQEVLU\", \"TLGDIASGEL\", \"QMDWWKFVRU\", \"LGWJJITBKZ\", \"FKXBYBMICY\",  #>     \"GKPLYRURBB\", \"ZTCMALLRXB\", \"UOFFHQQLIR\", \"TWBOLWJGAR\", \"BZPWNEEBHR\",  #>     \"QQIQBNKASY\", \"QBPHMGOGFW\", \"AQEEZTRLKH\", \"TWBOLWJGAR\", \"CFXONOGTQH\",  #>     \"NOTPDVRLPM\", \"EWTGOBRLKP\", \"WLNMRBXMPC\", \"BKYOKYIUGW\", \"CFSINPQYCO\",  #>     \"XDEAUVDMFQ\", \"JOPGMOKVOM\", \"ESYOZKOHCU\", \"JVCERYCMOA\", \"YROTAZMWFI\",  #>     \"TLGDIASGEL\", \"QCCNNYIKTH\", \"SPBEZTBJFS\", \"UNCDYWJXLO\", \"JPARFIKTYL\",  #>     \"UJMNXDCYBB\", \"YFDQMQIVBM\", \"MPSFHTGKEF\", \"GSNHQUBLXJ\", \"PKTRNWCHPR\",  #>     \"ENXVDYZEEW\", \"QBPHMGOGFW\", \"RMEYEXVXVX\", \"ASCJFWFUGV\", \"ESYOZKOHCU\",  #>     \"UZRCINDECG\", \"BBONKKTFNG\", \"PKBCVRCMCS\", \"PHIZOLWIBS\", \"VKEOEUOTDQ\",  #>     \"GSNHQUBLXJ\", \"TKKAYBAFGV\", \"LJJSFTJKBP\", \"ASCJFWFUGV\", \"SVYPVLUGHE\",  #>     \"JSGBOZVHXC\", \"TLGDIASGEL\", \"KBYFYYONYU\", \"GXQQOGSTOQ\", \"FKXBYBMICY\",  #>     \"VOXRCHMDIT\", \"ICUEBKDOGB\", \"CFXONOGTQH\", \"LGWJJITBKZ\", \"WEDUDZADWG\",  #>     \"QQIQBNKASY\", \"YROTAZMWFI\", \"AGJEXFMJAO\", \"AZVIVPYKND\", \"DRQRVFYUCX\",  #>     \"TKKAYBAFGV\", \"ENXVDYZEEW\", \"EZLGDZHKHT\", \"VKEOEUOTDQ\", \"HYUIWKYPXU\",  #>     \"QMDWWKFVRU\", \"PALVVUCJBF\", \"BJUNWZLJYP\", \"KKKAFDRDCO\", \"XSHYKGMBPQ\",  #>     \"LGWJJITBKZ\", \"WNATHOQPJS\", \"GKPLYRURBB\", \"TWBOLWJGAR\", \"URBJONTBBW\",  #>     \"JPARFIKTYL\", \"RMEYEXVXVX\", \"JSGBOZVHXC\", \"GKPLYRURBB\", \"BZPWNEEBHR\",  #>     \"EKNGZSKPGF\", \"RFAKZMSZMB\", \"VKEOEUOTDQ\", \"FKXBYBMICY\", \"CFSINPQYCO\",  #>     \"PKBCVRCMCS\", \"AIJRHVVDKP\", \"ZBXYPQEVLU\", \"EAMRJPOWLU\", \"JWFPSYZNLW\",  #>     \"MHVRYUZJWL\", \"CFSINPQYCO\", \"ZTCMALLRXB\", \"CYQGGUSNEK\", \"BZPWNEEBHR\",  #>     \"JVKZPZVIIU\", \"WKXIHCQQBN\", \"VKEOEUOTDQ\", \"NCXWRVCMVY\", \"HCEHZFVRBV\",  #>     \"HPKSIGVDRL\", \"URBJONTBBW\", \"JFHAGKINER\", \"QQIQBNKASY\", \"DRQRVFYUCX\",  #>     \"ACYJOPUKSD\", \"ICUEBKDOGB\", \"HPKSIGVDRL\", \"UNCDYWJXLO\", \"QCCNNYIKTH\",  #>     \"ZTCMALLRXB\", \"HYUIWKYPXU\", \"UJMNXDCYBB\", \"ZBXYPQEVLU\", \"EKNGZSKPGF\",  #>     \"YDGABWKNRS\", \"FIXJLQEKCP\", \"UFXSCLPLER\", \"CONXBVIQSU\", \"NOTPDVRLPM\",  #>     \"NOTPDVRLPM\", \"XDEAUVDMFQ\", \"YFDQMQIVBM\", \"EWTGOBRLKP\", \"WEDUDZADWG\",  #>     \"WMVGSBQYPB\", \"AFUTZUEXVM\", \"ASCJFWFUGV\", \"VKEOEUOTDQ\", \"ONTOHBVEQC\",  #>     \"ESYOZKOHCU\", \"FIXJLQEKCP\", \"TLGDIASGEL\", \"ENXVDYZEEW\", \"XDEAUVDMFQ\",  #>     \"HGHMEUCTEX\", \"TWBOLWJGAR\", \"ZBXYPQEVLU\", \"QMDWWKFVRU\", \"QBPHMGOGFW\",  #>     \"CFSINPQYCO\", \"AZVIVPYKND\", \"JVCERYCMOA\", \"XDEAUVDMFQ\", \"EOJBYFQEOY\",  #>     \"CALRWQEBFZ\", \"XDEAUVDMFQ\", \"FHCLEHLIXM\", \"UFXSCLPLER\", \"KTANGMAQMT\",  #>     \"IYNWQZVCCI\", \"PKBCVRCMCS\", \"BZPWNEEBHR\", \"MQKHZKWIKA\", \"TLGDIASGEL\",  #>     \"KBYFYYONYU\", \"DRQRVFYUCX\", \"YFDQMQIVBM\", \"QKSAXQEAIB\", \"RQDKTNHSYQ\",  #>     \"BKYOKYIUGW\", \"ISWVRSKEUK\", \"HPKSIGVDRL\", \"KBYFYYONYU\", \"MMCWEZDZSL\",  #>     \"WMVGSBQYPB\", \"KKKAFDRDCO\", \"CUYVXLQJIV\", \"YFDQMQIVBM\", \"GKPLYRURBB\",  #>     \"JFHAGKINER\", \"CUYVXLQJIV\", \"WKXIHCQQBN\", \"XDEAUVDMFQ\", \"LGWJJITBKZ\",  #>     \"CJQEUMATTB\", \"QCCNNYIKTH\", \"RMEYEXVXVX\", \"CUYVXLQJIV\", \"EZLGDZHKHT\",  #>     \"ISWVRSKEUK\", \"TXFSIPGCID\", \"JFHAGKINER\", \"YROTAZMWFI\", \"YDGABWKNRS\",  #>     \"CJQEUMATTB\", \"BZPWNEEBHR\", \"ZTCMALLRXB\", \"MHVRYUZJWL\", \"RHALOWGMGJ\",  #>     \"VKEOEUOTDQ\", \"HYUIWKYPXU\", \"ZTCMALLRXB\", \"KIJPLWHVGS\", \"FKXBYBMICY\",  #>     \"QBPRAWZTBF\", \"FHCLEHLIXM\", \"XSHYKGMBPQ\", \"KTANGMAQMT\", \"GRCMVPYLDK\",  #>     \"RMEYEXVXVX\", \"SVBBYDPIOA\", \"QEAYJDRZQO\", \"ENXVDYZEEW\", \"FKXBYBMICY\",  #>     \"NJLMIFXDEK\", \"UZRCINDECG\", \"MPSFHTGKEF\", \"EOJBYFQEOY\", \"JFHAGKINER\",  #>     \"EZLGDZHKHT\", \"RMEYEXVXVX\", \"JWFPSYZNLW\", \"QCCNNYIKTH\", \"LEESGFRPHV\",  #>     \"KTANGMAQMT\", \"GXQQOGSTOQ\", \"SVYPVLUGHE\", \"ZTCMALLRXB\", \"ZTCMALLRXB\",  #>     \"UZRCINDECG\", \"MMCWEZDZSL\", \"JFHAGKINER\", \"ZTTKZEEJZP\", \"PBLJMWGFTW\",  #>     \"EJSYIOEOJL\", \"JVCERYCMOA\", \"TKKAYBAFGV\", \"MHVRYUZJWL\", \"AGJEXFMJAO\",  #>     \"WMVGSBQYPB\", \"AOKHTNTQJC\", \"HCEHZFVRBV\", \"NTSOYECHZQ\", \"NCXWRVCMVY\",  #>     \"QQIQBNKASY\", \"QEAYJDRZQO\", \"OSNCJRVKET\", \"ZPWKFFVOCB\", \"JHXSYICTMS\",  #>     \"ESYOZKOHCU\", \"ZTCMALLRXB\", \"GSNHQUBLXJ\", \"YFDQMQIVBM\", \"CFXONOGTQH\",  #>     \"URBJONTBBW\", \"JFHAGKINER\", \"KTANGMAQMT\", \"PALVVUCJBF\", \"QBPRAWZTBF\",  #>     \"RNAOTFIWTN\", \"YFDQMQIVBM\", \"RMEYEXVXVX\", \"AFUTZUEXVM\", \"WEDUDZADWG\",  #>     \"LGWJJITBKZ\", \"UOFFHQQLIR\", \"RHALOWGMGJ\", \"ASCJFWFUGV\", \"QEAYJDRZQO\",  #>     \"OSNCJRVKET\", \"ONTOHBVEQC\", \"FKTIIHAGSF\", \"CONXBVIQSU\", \"JHVIRHYUEP\",  #>     \"JRNMLJJSDP\", \"GRCMVPYLDK\", \"CONXBVIQSU\", \"CONXBVIQSU\", \"TLGDIASGEL\",  #>     \"NCXWRVCMVY\", \"HPKSIGVDRL\", \"FKXBYBMICY\", \"LEESGFRPHV\", \"ZTTKZEEJZP\",  #>     \"ERVIHSPAYA\", \"ACYJOPUKSD\", \"MQKHZKWIKA\", \"BJUNWZLJYP\", \"FKXBYBMICY\",  #>     \"TLGDIASGEL\", \"MMCWEZDZSL\", \"ZTCMALLRXB\", \"ONTOHBVEQC\", \"PKBCVRCMCS\",  #>     \"ONTOHBVEQC\", \"QBPRAWZTBF\", \"LEESGFRPHV\", \"JFHAGKINER\", \"CALRWQEBFZ\",  #>     \"LGWJJITBKZ\", \"JHXSYICTMS\", \"GSHWBCJXVZ\", \"EKNGZSKPGF\", \"JPARFIKTYL\",  #>     \"QCCNNYIKTH\", \"IIKTKPNNPT\", \"WKXIHCQQBN\", \"ZTCMALLRXB\", \"ZBXYPQEVLU\",  #>     \"NCXWRVCMVY\", \"KBYFYYONYU\", \"WNATHOQPJS\", \"RFAKZMSZMB\", \"ASCJFWFUGV\",  #>     \"MHVRYUZJWL\", \"LJJSFTJKBP\", \"EAMRJPOWLU\", \"UJMNXDCYBB\", \"CUYVXLQJIV\",  #>     \"UCYFOWDBOQ\", \"OPNAGRHLZM\", \"JVKZPZVIIU\", \"EZLGDZHKHT\", \"RNAOTFIWTN\",  #>     \"JWFPSYZNLW\", \"FIXJLQEKCP\", \"EAMRJPOWLU\", \"FIXJLQEKCP\", \"ASCJFWFUGV\",  #>     \"GSHWBCJXVZ\", \"JOPGMOKVOM\", \"AGJEXFMJAO\", \"VKEOEUOTDQ\", \"LGWJJITBKZ\",  #>     \"GSNHQUBLXJ\", \"AHOMYEGIBP\", \"ESYOZKOHCU\", \"FKXBYBMICY\", \"YROTAZMWFI\",  #>     \"NCXWRVCMVY\", \"UJMNXDCYBB\", \"JHXSYICTMS\", \"VKEOEUOTDQ\", \"CMEKXFGTSR\",  #>     \"AOKHTNTQJC\", \"GXYQHIZVPD\", \"UZRCINDECG\", \"UOFFHQQLIR\", \"RFAKZMSZMB\",  #>     \"UOFFHQQLIR\", \"CYQGGUSNEK\", \"JFHAGKINER\", \"DRQRVFYUCX\", \"HYUIWKYPXU\",  #>     \"EOJBYFQEOY\", \"HCEHZFVRBV\", \"WKXIHCQQBN\", \"FKXBYBMICY\", \"RNAOTFIWTN\",  #>     \"NJLMIFXDEK\", \"YROTAZMWFI\", \"HCEHZFVRBV\", \"KTANGMAQMT\", \"UOFFHQQLIR\",  #>     \"CMEKXFGTSR\", \"ISHHJNXLMR\", \"GSNHQUBLXJ\", \"EKNGZSKPGF\", \"GRCMVPYLDK\",  #>     \"AGJEXFMJAO\", \"CKNVKMZWDC\", \"MHVRYUZJWL\", \"YDGABWKNRS\", \"OPNAGRHLZM\",  #>     \"TBZWQOHERE\", \"AGJEXFMJAO\", \"EJSYIOEOJL\", \"MMCWEZDZSL\", \"PKTRNWCHPR\",  #>     \"VOXRCHMDIT\", \"LJJSFTJKBP\", \"GKPLYRURBB\", \"MQKHZKWIKA\", \"LGWJJITBKZ\",  #>     \"RNAOTFIWTN\", \"HPKSIGVDRL\", \"JHXSYICTMS\", \"RFAKZMSZMB\", \"YFDQMQIVBM\",  #>     \"FKXBYBMICY\", \"SVBBYDPIOA\", \"ISWVRSKEUK\", \"JVCERYCMOA\", \"JRNMLJJSDP\",  #>     \"YROTAZMWFI\", \"HPKSIGVDRL\", \"VOXRCHMDIT\", \"TXFSIPGCID\", \"TKKAYBAFGV\",  #>     \"CFXONOGTQH\", \"XSHYKGMBPQ\", \"KBYFYYONYU\", \"QMDWWKFVRU\", \"ISWVRSKEUK\",  #>     \"TWBOLWJGAR\", \"ICUEBKDOGB\", \"RMEYEXVXVX\", \"RHALOWGMGJ\", \"ZTCMALLRXB\",  #>     \"CJQEUMATTB\", \"RNAOTFIWTN\", \"ESYOZKOHCU\", \"RSSXENWCQU\", \"PBLJMWGFTW\",  #>     \"CONXBVIQSU\", \"GSHWBCJXVZ\", \"BHOFOGKCJA\", \"NCXWRVCMVY\", \"NCXWRVCMVY\",  #>     \"NJLMIFXDEK\", \"KBYFYYONYU\", \"ZPWKFFVOCB\", \"NCXWRVCMVY\", \"WNATHOQPJS\",  #>     \"CUYVXLQJIV\", \"XKSCGLSVUZ\", \"CKNVKMZWDC\", \"SVYPVLUGHE\", \"VKEOEUOTDQ\",  #>     \"FHCLEHLIXM\", \"SVYPVLUGHE\", \"QQIQBNKASY\", \"TXFSIPGCID\", \"WNATHOQPJS\",  #>     \"CJQEUMATTB\", \"NOTPDVRLPM\", \"ACYJOPUKSD\", \"GRCMVPYLDK\", \"RFAKZMSZMB\",  #>     \"XDEAUVDMFQ\", \"AGJEXFMJAO\", \"CALRWQEBFZ\", \"BBONKKTFNG\", \"EWTGOBRLKP\",  #>     \"JVKZPZVIIU\", \"RFAKZMSZMB\", \"RNAOTFIWTN\", \"MHVRYUZJWL\", \"CFXONOGTQH\",  #>     \"OSNCJRVKET\", \"JSGBOZVHXC\", \"EWTGOBRLKP\", \"JWFPSYZNLW\", \"JRNMLJJSDP\",  #>     \"QKSAXQEAIB\", \"AHOMYEGIBP\", \"BZPWNEEBHR\", \"CYQGGUSNEK\", \"NJLMIFXDEK\",  #>     \"CYQGGUSNEK\", \"CONXBVIQSU\", \"ONTOHBVEQC\", \"GRCMVPYLDK\", \"UZRCINDECG\",  #>     \"WEDUDZADWG\", \"WLNMRBXMPC\", \"CFSINPQYCO\", \"PBLJMWGFTW\", \"AIJRHVVDKP\",  #>     \"ASCJFWFUGV\", \"ESYOZKOHCU\", \"ISHHJNXLMR\", \"KKKAFDRDCO\", \"QKSAXQEAIB\",  #>     \"HCEHZFVRBV\", \"JPARFIKTYL\", \"UZRCINDECG\", \"NJLMIFXDEK\", \"OPNAGRHLZM\",  #>     \"ENXVDYZEEW\", \"TBZWQOHERE\", \"MMCWEZDZSL\", \"XKSCGLSVUZ\", \"UCYFOWDBOQ\",  #>     \"HYUIWKYPXU\", \"RFAKZMSZMB\", \"SVBBYDPIOA\", \"PALVVUCJBF\", \"LJJSFTJKBP\",  #>     \"XKSCGLSVUZ\", \"TBZWQOHERE\", \"ESYOZKOHCU\", \"HYUIWKYPXU\", \"QBPHMGOGFW\",  #>     \"OPNAGRHLZM\", \"UOFFHQQLIR\", \"WLNMRBXMPC\", \"VOXRCHMDIT\", \"FHCLEHLIXM\",  #>     \"ONTOHBVEQC\", \"BKYOKYIUGW\", \"LJJSFTJKBP\", \"RSSXENWCQU\", \"ZTCMALLRXB\",  #>     \"WKXIHCQQBN\", \"KBYFYYONYU\", \"TBZWQOHERE\", \"ASCJFWFUGV\", \"YROTAZMWFI\",  #>     \"CYQGGUSNEK\", \"YDGABWKNRS\", \"ASCJFWFUGV\", \"ISWVRSKEUK\", \"QMDWWKFVRU\",  #>     \"VKEOEUOTDQ\", \"UOFFHQQLIR\", \"EZLGDZHKHT\", \"MPSFHTGKEF\", \"JWFPSYZNLW\",  #>     \"AGJEXFMJAO\", \"UOFFHQQLIR\", \"JFHAGKINER\", \"TKKAYBAFGV\", \"FKTIIHAGSF\",  #>     \"ZBXYPQEVLU\", \"CONXBVIQSU\", \"BBONKKTFNG\", \"QBPRAWZTBF\", \"YDGABWKNRS\",  #>     \"WLNMRBXMPC\", \"RNAOTFIWTN\", \"ENXVDYZEEW\", \"QBPRAWZTBF\", \"ISHHJNXLMR\",  #>     \"GSHWBCJXVZ\", \"AZVIVPYKND\", \"QMDWWKFVRU\", \"CUYVXLQJIV\", \"URBJONTBBW\",  #>     \"TWBOLWJGAR\", \"ESYOZKOHCU\", \"VKEOEUOTDQ\", \"KTANGMAQMT\", \"YROTAZMWFI\",  #>     \"WEDUDZADWG\", \"EOJBYFQEOY\", \"ISWVRSKEUK\", \"JSGBOZVHXC\", \"ASCJFWFUGV\",  #>     \"PALVVUCJBF\", \"PKBCVRCMCS\", \"CKNVKMZWDC\", \"HYUIWKYPXU\", \"YDGABWKNRS\",  #>     \"YDGABWKNRS\", \"JVCERYCMOA\", \"SPBEZTBJFS\", \"CJQEUMATTB\", \"LGWJJITBKZ\",  #>     \"URBJONTBBW\", \"FKXBYBMICY\", \"KIJPLWHVGS\", \"PKBCVRCMCS\", \"ZPWKFFVOCB\",  #>     \"OSNCJRVKET\", \"JWFPSYZNLW\", \"PALVVUCJBF\", \"UFXSCLPLER\", \"XCEJMFPVDX\",  #>     \"ESYOZKOHCU\", \"HLWNYXNVYM\", \"LJJSFTJKBP\", \"CFSINPQYCO\", \"ZBXYPQEVLU\",  #>     \"ZTTKZEEJZP\", \"CUYVXLQJIV\", \"ENXVDYZEEW\", \"ELMZBUCGXP\", \"ZTTKZEEJZP\",  #>     \"EKNGZSKPGF\", \"JVKZPZVIIU\", \"NTSOYECHZQ\", \"EAMRJPOWLU\", \"WMVGSBQYPB\",  #>     \"QQIQBNKASY\", \"LGWJJITBKZ\", \"UCYFOWDBOQ\", \"JWFPSYZNLW\", \"JWFPSYZNLW\",  #>     \"QCCNNYIKTH\", \"MGDZOPJAFG\", \"ASCJFWFUGV\", \"FHCLEHLIXM\", \"VKEOEUOTDQ\",  #>     \"JOPGMOKVOM\", \"CUYVXLQJIV\", \"PKTRNWCHPR\", \"RHALOWGMGJ\", \"AIJRHVVDKP\",  #>     \"ZBXYPQEVLU\", \"GKPLYRURBB\", \"BBONKKTFNG\", \"AIJRHVVDKP\", \"MPSFHTGKEF\",  #>     \"GXYQHIZVPD\", \"CKNVKMZWDC\", \"EKNGZSKPGF\", \"KIJPLWHVGS\", \"RFAKZMSZMB\",  #>     \"QKSAXQEAIB\", \"MPSFHTGKEF\", \"PKBCVRCMCS\", \"KBYFYYONYU\", \"HLWNYXNVYM\",  #>     \"VOXRCHMDIT\", \"UNCDYWJXLO\", \"QMDWWKFVRU\", \"AZVIVPYKND\", \"MPSFHTGKEF\",  #>     \"GKPLYRURBB\", \"KIJPLWHVGS\", \"RFAKZMSZMB\", \"GSHWBCJXVZ\", \"ASCJFWFUGV\",  #>     \"FKXBYBMICY\", \"PKBCVRCMCS\", \"OPNAGRHLZM\", \"QBPRAWZTBF\", \"JHXSYICTMS\",  #>     \"XDEAUVDMFQ\", \"GRCMVPYLDK\", \"AFUTZUEXVM\", \"WLNMRBXMPC\", \"ASCJFWFUGV\",  #>     \"BHOFOGKCJA\", \"DRQRVFYUCX\", \"QKSAXQEAIB\", \"OSNCJRVKET\", \"MPSFHTGKEF\",  #>     \"JPARFIKTYL\", \"XCEJMFPVDX\", \"NCXWRVCMVY\", \"BKYOKYIUGW\", \"AQEEZTRLKH\",  #>     \"TKKAYBAFGV\", \"SPBEZTBJFS\", \"TKKAYBAFGV\", \"RFAKZMSZMB\", \"RQDKTNHSYQ\",  #>     \"EJSYIOEOJL\", \"UOFFHQQLIR\", \"XKSCGLSVUZ\", \"EZLGDZHKHT\", \"NOTPDVRLPM\",  #>     \"CFSINPQYCO\", \"CALRWQEBFZ\", \"MQKHZKWIKA\", \"HYUIWKYPXU\", \"WEDUDZADWG\",  #>     \"TXFSIPGCID\", \"MGDZOPJAFG\", \"QQIQBNKASY\", \"CFXONOGTQH\", \"MPSFHTGKEF\",  #>     \"JVKZPZVIIU\", \"CJQEUMATTB\", \"PKBCVRCMCS\", \"NTSOYECHZQ\", \"RSSXENWCQU\",  #>     \"YROTAZMWFI\", \"ACYJOPUKSD\", \"OSNCJRVKET\", \"XKSCGLSVUZ\", \"LHDUBEZXXM\",  #>     \"NOTPDVRLPM\", \"OPNAGRHLZM\", \"ZTCMALLRXB\", \"CKNVKMZWDC\", \"NJLMIFXDEK\",  #>     \"WNATHOQPJS\", \"JHXSYICTMS\", \"SVYPVLUGHE\", \"CFSINPQYCO\", \"RFAKZMSZMB\",  #>     \"LHDUBEZXXM\", \"RFAKZMSZMB\", \"GXYQHIZVPD\", \"RFAKZMSZMB\", \"QQIQBNKASY\",  #>     \"HPKSIGVDRL\", \"WKXIHCQQBN\", \"ZTTKZEEJZP\", \"EZLGDZHKHT\", \"TLGDIASGEL\",  #>     \"JSGBOZVHXC\", \"PKBCVRCMCS\", \"NTSOYECHZQ\", \"GKPLYRURBB\", \"UZRCINDECG\",  #>     \"HLWNYXNVYM\", \"QCCNNYIKTH\", \"FHCLEHLIXM\", \"RQDKTNHSYQ\", \"OPNAGRHLZM\",  #>     \"WMVGSBQYPB\", \"HYUIWKYPXU\", \"GKPLYRURBB\", \"ENXVDYZEEW\", \"CYQGGUSNEK\",  #>     \"MHVRYUZJWL\", \"ZTTKZEEJZP\", \"OSNCJRVKET\", \"CMEKXFGTSR\", \"ESYOZKOHCU\",  #>     \"UZRCINDECG\", \"GKPLYRURBB\", \"TXFSIPGCID\", \"UZRCINDECG\", \"BHOFOGKCJA\",  #>     \"YROTAZMWFI\", \"KTANGMAQMT\", \"MQKHZKWIKA\", \"WNATHOQPJS\", \"QBPRAWZTBF\",  #>     \"EOJBYFQEOY\", \"HPKSIGVDRL\", \"AIJRHVVDKP\", \"RFAKZMSZMB\", \"GKPLYRURBB\",  #>     \"HYUIWKYPXU\", \"QBPHMGOGFW\", \"WLNMRBXMPC\", \"UOFFHQQLIR\", \"WKXIHCQQBN\",  #>     \"JWFPSYZNLW\", \"RMEYEXVXVX\", \"RMEYEXVXVX\", \"TWBOLWJGAR\", \"TLGDIASGEL\",  #>     \"CYQGGUSNEK\", \"VBFGFOMUQJ\", \"URBJONTBBW\", \"MQKHZKWIKA\", \"YROTAZMWFI\",  #>     \"JWFPSYZNLW\", \"JPARFIKTYL\", \"XKSCGLSVUZ\", \"LGWJJITBKZ\", \"CKNVKMZWDC\",  #>     \"GSHWBCJXVZ\", \"MGDZOPJAFG\", \"CFSINPQYCO\", \"QBPRAWZTBF\", \"ZTTKZEEJZP\",  #>     \"CUYVXLQJIV\", \"ZBXYPQEVLU\", \"JOPGMOKVOM\", \"EZLGDZHKHT\", \"NJLMIFXDEK\",  #>     \"UZRCINDECG\", \"QQIQBNKASY\", \"GXYQHIZVPD\", \"ERVIHSPAYA\", \"MHVRYUZJWL\",  #>     \"GSHWBCJXVZ\", \"OSNCJRVKET\", \"HYUIWKYPXU\", \"TWBOLWJGAR\", \"ACYJOPUKSD\",  #>     \"VBFGFOMUQJ\", \"MCBXZBXGJN\", \"YDGABWKNRS\", \"WNATHOQPJS\", \"RFAKZMSZMB\",  #>     \"MPSFHTGKEF\", \"BZPWNEEBHR\", \"GKPLYRURBB\", \"KBYFYYONYU\", \"ERVIHSPAYA\",  #>     \"OPNAGRHLZM\", \"ZBXYPQEVLU\", \"HPKSIGVDRL\", \"MPSFHTGKEF\", \"NTSOYECHZQ\",  #>     \"TWBOLWJGAR\", \"UNCDYWJXLO\", \"EJSYIOEOJL\", \"JRNMLJJSDP\", \"XKSCGLSVUZ\",  #>     \"CYQGGUSNEK\", \"NJLMIFXDEK\", \"ELMZBUCGXP\", \"WNATHOQPJS\", \"KBYFYYONYU\",  #>     \"CJQEUMATTB\", \"RQDKTNHSYQ\", \"QEAYJDRZQO\", \"WNATHOQPJS\", \"VOXRCHMDIT\",  #>     \"ACYJOPUKSD\", \"SVBBYDPIOA\", \"JWFPSYZNLW\", \"CALRWQEBFZ\", \"QKSAXQEAIB\",  #>     \"GXYQHIZVPD\", \"JVKZPZVIIU\", \"YDGABWKNRS\", \"ACYJOPUKSD\", \"FIXJLQEKCP\",  #>     \"PKBCVRCMCS\", \"EJSYIOEOJL\", \"WNATHOQPJS\", \"PKBCVRCMCS\", \"JFHAGKINER\",  #>     \"RFAKZMSZMB\", \"GXYQHIZVPD\", \"TLGDIASGEL\", \"VKEOEUOTDQ\", \"XDEAUVDMFQ\",  #>     \"WMVGSBQYPB\", \"XDEAUVDMFQ\", \"TLGDIASGEL\", \"CONXBVIQSU\", \"EKNGZSKPGF\",  #>     \"ICUEBKDOGB\", \"CYQGGUSNEK\", \"JHXSYICTMS\", \"ASCJFWFUGV\", \"UJMNXDCYBB\",  #>     \"KKKAFDRDCO\", \"GKPLYRURBB\", \"ZBXYPQEVLU\", \"AGJEXFMJAO\", \"UZRCINDECG\",  #>     \"UJMNXDCYBB\", \"ZPWKFFVOCB\", \"ISHHJNXLMR\", \"NCXWRVCMVY\", \"JHVIRHYUEP\",  #>     \"GXQQOGSTOQ\", \"ENXVDYZEEW\", \"MCBXZBXGJN\", \"HGHMEUCTEX\", \"CFXONOGTQH\",  #>     \"ZTTKZEEJZP\", \"JOPGMOKVOM\", \"ZBXYPQEVLU\", \"YFDQMQIVBM\", \"JOPGMOKVOM\",  #>     \"CJQEUMATTB\", \"LJJSFTJKBP\", \"RQDKTNHSYQ\", \"JRNMLJJSDP\", \"ZTTKZEEJZP\",  #>     \"KKKAFDRDCO\", \"ESYOZKOHCU\", \"WEDUDZADWG\", \"RFAKZMSZMB\", \"GKPLYRURBB\",  #>     \"AHOMYEGIBP\", \"ICUEBKDOGB\", \"GKPLYRURBB\", \"NOTPDVRLPM\", \"ZPWKFFVOCB\",  #>     \"JPARFIKTYL\", \"QMDWWKFVRU\", \"JOPGMOKVOM\", \"UZRCINDECG\", \"UZRCINDECG\",  #>     \"RNAOTFIWTN\", \"NJLMIFXDEK\", \"RMEYEXVXVX\", \"GSHWBCJXVZ\", \"URBJONTBBW\",  #>     \"GKPLYRURBB\", \"CFSINPQYCO\", \"TXFSIPGCID\", \"LHDUBEZXXM\", \"ERVIHSPAYA\",  #>     \"AFUTZUEXVM\", \"EOJBYFQEOY\", \"JVCERYCMOA\", \"AIJRHVVDKP\", \"CMEKXFGTSR\",  #>     \"SVYPVLUGHE\", \"FHCLEHLIXM\", \"RNAOTFIWTN\", \"PKBCVRCMCS\", \"JRNMLJJSDP\",  #>     \"OPNAGRHLZM\", \"WNATHOQPJS\", \"GXQQOGSTOQ\", \"CALRWQEBFZ\", \"ZTCMALLRXB\",  #>     \"XSHYKGMBPQ\", \"GKPLYRURBB\", \"HLWNYXNVYM\", \"AFUTZUEXVM\", \"QCCNNYIKTH\",  #>     \"QBPRAWZTBF\", \"ZTCMALLRXB\", \"AHOMYEGIBP\", \"OPNAGRHLZM\", \"FKXBYBMICY\",  #>     \"FIXJLQEKCP\", \"SVYPVLUGHE\", \"ELMZBUCGXP\", \"JFHAGKINER\", \"EAMRJPOWLU\",  #>     \"QCCNNYIKTH\", \"PKTRNWCHPR\", \"SPBEZTBJFS\", \"KTANGMAQMT\", \"UJMNXDCYBB\",  #>     \"AHOMYEGIBP\", \"GSHWBCJXVZ\", \"LGWJJITBKZ\", \"NTSOYECHZQ\", \"RNAOTFIWTN\",  #>     \"CMEKXFGTSR\", \"XDEAUVDMFQ\", \"WEDUDZADWG\", \"VKEOEUOTDQ\", \"OPNAGRHLZM\",  #>     \"WLNMRBXMPC\", \"LJJSFTJKBP\", \"RMEYEXVXVX\", \"CMEKXFGTSR\", \"EOJBYFQEOY\",  #>     \"VKEOEUOTDQ\", \"GSNHQUBLXJ\", \"HGHMEUCTEX\", \"PHIZOLWIBS\", \"CYQGGUSNEK\",  #>     \"JOPGMOKVOM\", \"AIJRHVVDKP\", \"ENXVDYZEEW\", \"RFAKZMSZMB\", \"BZPWNEEBHR\",  #>     \"IIKTKPNNPT\", \"CMEKXFGTSR\", \"JVKZPZVIIU\", \"AGJEXFMJAO\", \"LEESGFRPHV\",  #>     \"AQEEZTRLKH\", \"URBJONTBBW\", \"TLGDIASGEL\", \"MGDZOPJAFG\", \"PKBCVRCMCS\",  #>     \"GXYQHIZVPD\", \"PKBCVRCMCS\", \"QBPRAWZTBF\", \"SVBBYDPIOA\", \"ASCJFWFUGV\",  #>     \"UJMNXDCYBB\", \"XCEJMFPVDX\", \"JPARFIKTYL\", \"YDGABWKNRS\", \"URBJONTBBW\",  #>     \"LHDUBEZXXM\", \"GSHWBCJXVZ\", \"EWTGOBRLKP\", \"RHALOWGMGJ\", \"ERVIHSPAYA\",  #>     \"CUYVXLQJIV\", \"OSNCJRVKET\", \"UJMNXDCYBB\", \"HPKSIGVDRL\", \"SVBBYDPIOA\",  #>     \"ONTOHBVEQC\", \"AGJEXFMJAO\", \"XKSCGLSVUZ\", \"QKSAXQEAIB\", \"CJQEUMATTB\",  #>     \"EZLGDZHKHT\", \"AGJEXFMJAO\", \"PHIZOLWIBS\", \"QMDWWKFVRU\", \"CONXBVIQSU\",  #>     \"EZLGDZHKHT\", \"RHALOWGMGJ\", \"CFXONOGTQH\", \"CFXONOGTQH\", \"YROTAZMWFI\",  #>     \"NCXWRVCMVY\", \"FHCLEHLIXM\", \"RHALOWGMGJ\", \"RNAOTFIWTN\", \"EKNGZSKPGF\",  #>     \"HYHAFAFYEA\", \"ZPWKFFVOCB\", \"MPSFHTGKEF\", \"QKSAXQEAIB\", \"XSHYKGMBPQ\",  #>     \"FHCLEHLIXM\", \"MPSFHTGKEF\", \"XCEJMFPVDX\", \"TKKAYBAFGV\", \"RFAKZMSZMB\",  #>     \"LGWJJITBKZ\", \"JWFPSYZNLW\", \"ASCJFWFUGV\", \"QEAYJDRZQO\", \"VBFGFOMUQJ\",  #>     \"VOXRCHMDIT\", \"BZPWNEEBHR\", \"JVCERYCMOA\", \"CYQGGUSNEK\", \"AHOMYEGIBP\",  #>     \"OPNAGRHLZM\", \"AOKHTNTQJC\", \"BKYOKYIUGW\", \"RMEYEXVXVX\", \"EZLGDZHKHT\",  #>     \"MPSFHTGKEF\", \"EAMRJPOWLU\", \"BKYOKYIUGW\", \"CALRWQEBFZ\", \"ESYOZKOHCU\",  #>     \"OPNAGRHLZM\", \"EOJBYFQEOY\", \"RFAKZMSZMB\", \"ESYOZKOHCU\", \"ZPWKFFVOCB\",  #>     \"XDEAUVDMFQ\", \"XDEAUVDMFQ\", \"EOJBYFQEOY\", \"OPNAGRHLZM\", \"GXYQHIZVPD\",  #>     \"YDGABWKNRS\", \"CKNVKMZWDC\", \"JOPGMOKVOM\", \"NJLMIFXDEK\"),  #>     grade = c(4L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 5L, 5L,  #>     3L, 3L, 4L, 5L, 4L, 3L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 4L, 3L,  #>     5L, 4L, 5L, 5L, 5L, 3L, 5L, 4L, 4L, 4L, 5L, 4L, 5L, 3L, 3L,  #>     5L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 5L,  #>     4L, 3L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 5L, 5L, 3L,  #>     4L, 3L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 3L, 5L,  #>     3L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 4L, 4L, 5L,  #>     4L, 5L, 4L, 4L, 4L, 5L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 3L, 4L,  #>     4L, 4L, 3L, 4L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 3L, 4L, 5L,  #>     4L, 3L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 3L,  #>     3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 3L, 3L, 4L, 4L,  #>     5L, 3L, 4L, 5L, 3L, 3L, 3L, 3L, 5L, 3L, 4L, 3L, 5L, 3L, 3L,  #>     5L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 4L, 3L, 5L, 3L, 5L, 5L, 3L,  #>     4L, 3L, 4L, 5L, 5L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 5L, 5L, 5L,  #>     4L, 4L, 5L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 3L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 3L, 5L, 3L, 4L, 3L, 5L, 5L, 3L, 4L, 5L,  #>     4L, 5L, 5L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 4L, 4L, 4L, 3L,  #>     5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 4L, 4L, 5L, 4L,  #>     4L, 5L, 4L, 3L, 3L, 4L, 5L, 3L, 4L, 4L, 4L, 4L, 3L, 4L, 5L,  #>     4L, 4L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 5L, 4L, 4L, 3L, 5L,  #>     3L, 5L, 3L, 5L, 4L, 5L, 3L, 5L, 4L, 3L, 5L, 3L, 4L, 5L, 3L,  #>     3L, 4L, 4L, 4L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 5L,  #>     4L, 4L, 4L, 3L, 3L, 5L, 5L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 4L,  #>     5L, 4L, 5L, 4L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 4L, 4L, 3L,  #>     3L, 5L, 5L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 5L, 5L, 5L, 4L, 4L,  #>     5L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 3L, 5L, 3L, 5L, 4L,  #>     4L, 3L, 3L, 3L, 5L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 3L, 3L, 4L,  #>     5L, 3L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 3L, 5L, 3L, 4L,  #>     5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 3L, 4L, 3L, 4L,  #>     4L, 4L, 5L, 3L, 3L, 3L, 3L, 4L, 3L, 4L, 4L, 5L, 5L, 5L, 3L,  #>     5L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 3L, 4L, 4L, 4L, 5L, 3L, 4L,  #>     3L, 5L, 5L, 3L, 5L, 5L, 3L, 3L, 5L, 4L, 3L, 5L, 5L, 4L, 3L,  #>     4L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 4L, 5L,  #>     3L, 5L, 5L, 5L, 4L, 5L, 3L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 3L,  #>     4L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 3L, 5L, 3L, 4L, 3L, 3L,  #>     5L, 5L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 3L, 4L, 3L,  #>     4L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 5L, 4L, 4L, 4L,  #>     3L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 3L, 3L, 5L, 3L, 5L, 4L, 3L,  #>     4L, 5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 4L, 4L, 5L, 5L, 3L,  #>     3L, 4L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 5L, 4L, 3L,  #>     3L, 3L, 5L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 4L, 4L, 3L, 3L, 4L,  #>     3L, 3L, 5L, 5L, 5L, 3L, 5L, 3L, 3L, 3L, 5L, 3L, 4L, 3L, 4L,  #>     3L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 5L,  #>     4L, 3L, 3L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 3L, 3L,  #>     4L, 3L, 3L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 3L, 3L,  #>     3L, 3L, 4L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 5L, 3L, 5L, 4L,  #>     3L, 4L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 5L, 5L, 5L, 5L,  #>     5L, 3L, 4L, 5L, 3L, 3L, 3L, 5L, 3L, 5L, 5L, 4L, 4L, 5L, 4L,  #>     4L, 3L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 3L, 4L, 3L, 5L, 5L,  #>     4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 4L, 5L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 4L, 3L, 4L, 4L, 3L, 4L, 3L, 3L, 3L, 5L,  #>     5L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 4L, 3L, 4L, 3L, 3L,  #>     4L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 4L, 3L, 4L,  #>     5L, 5L, 3L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 5L, 5L, 3L, 4L, 5L,  #>     4L, 3L, 4L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 5L, 3L, 3L, 4L, 4L,  #>     4L, 5L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 4L, 4L, 3L,  #>     4L, 5L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     4L, 4L, 3L, 5L, 3L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 3L, 3L,  #>     4L, 5L, 4L, 5L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 3L,  #>     3L, 4L, 4L, 3L, 5L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     5L, 3L, 3L, 4L, 3L, 4L, 5L, 4L, 4L, 4L, 4L, 5L, 3L, 3L, 4L,  #>     5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 5L, 5L, 4L, 4L,  #>     5L, 3L, 3L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 5L, 3L, 5L, 3L,  #>     5L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L, 4L, 5L, 5L, 5L, 3L,  #>     4L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L, 4L, 3L, 3L, 4L, 5L, 4L,  #>     5L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 5L, 3L, 3L, 4L,  #>     5L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 3L, 4L,  #>     5L, 3L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 4L, 4L, 4L, 5L, 3L, 5L,  #>     3L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 4L, 3L, 5L,  #>     5L, 5L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 4L,  #>     3L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 5L, 3L, 4L, 3L, 3L, 5L, 5L,  #>     4L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 3L, 3L, 5L, 3L, 5L, 3L, 3L,  #>     5L, 5L, 5L, 5L, 4L, 3L, 3L, 4L, 3L, 4L, 5L, 3L, 5L, 5L, 4L,  #>     5L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 5L, 4L, 4L, 3L, 3L,  #>     5L, 3L, 5L, 3L, 5L, 3L, 4L, 3L, 3L, 5L, 4L, 4L, 5L, 3L, 3L,  #>     5L, 5L, 4L, 4L, 3L, 5L, 5L, 5L, 4L, 4L, 4L, 3L, 3L, 5L, 3L,  #>     3L, 3L, 4L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 5L, 4L, 5L, 5L, 3L,  #>     4L, 3L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 4L, 5L,  #>     5L, 5L, 3L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 5L, 3L, 5L, 5L, 5L,  #>     4L, 3L, 4L, 3L, 5L, 5L, 3L, 4L, 4L, 5L, 4L, 5L, 3L, 3L, 3L,  #>     5L, 5L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 5L, 4L, 3L, 3L, 5L,  #>     5L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 4L, 4L, 5L, 3L, 3L, 3L, 3L,  #>     5L, 5L, 5L, 5L, 5L, 3L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 3L,  #>     5L, 5L, 3L, 4L, 5L, 4L, 4L, 3L, 4L, 4L, 5L, 3L, 3L, 3L, 5L,  #>     4L, 5L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 4L, 3L, 3L, 5L, 5L, 5L,  #>     5L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 4L, 5L,  #>     4L, 5L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L,  #>     4L, 5L, 4L, 3L, 5L, 5L, 5L, 4L, 4L, 5L, 4L, 3L, 4L, 4L, 4L,  #>     5L, 3L, 5L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 5L,  #>     5L, 4L, 5L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 3L, 3L, 5L, 3L, 3L,  #>     4L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 3L, 5L, 4L, 3L, 5L, 4L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 4L, 5L, 4L, 5L, 4L, 5L,  #>     4L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 5L, 4L,  #>     3L, 4L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 4L, 3L, 3L, 5L,  #>     3L, 5L, 5L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 3L, 4L, 3L,  #>     5L, 3L, 3L, 4L, 4L, 3L, 5L, 3L, 4L, 3L, 5L, 5L, 5L, 4L, 4L,  #>     4L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 5L, 4L, 4L, 5L, 5L, 3L, 3L,  #>     4L, 3L, 5L, 4L, 5L, 3L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L,  #>     4L, 4L, 5L, 4L, 3L, 5L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 4L, 5L,  #>     3L, 4L, 4L, 4L, 3L, 3L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 4L,  #>     3L, 4L, 5L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 4L, 5L, 5L, 4L, 5L,  #>     5L, 4L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 4L,  #>     4L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 4L, 4L, 5L, 4L, 4L, 3L,  #>     3L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, 4L, 3L, 4L,  #>     5L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 3L, 4L, 3L, 3L,  #>     5L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 4L, 5L, 3L, 5L, 3L,  #>     4L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L, 3L, 5L, 4L, 3L,  #>     3L, 5L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 4L,  #>     3L, 5L, 3L, 5L, 4L, 3L, 5L, 5L, 3L, 3L, 4L, 3L, 4L, 5L, 4L,  #>     5L, 3L, 5L, 5L, 4L, 4L, 3L, 4L, 4L, 3L, 4L, 4L, 4L, 4L, 4L,  #>     4L, 3L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 4L, 4L, 3L,  #>     4L, 4L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 5L,  #>     5L, 5L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 3L, 3L, 5L, 4L, 3L, 3L,  #>     4L, 4L, 3L, 3L, 5L, 4L, 5L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 4L,  #>     4L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 5L, 5L, 5L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 3L,  #>     3L, 3L, 3L, 4L, 5L, 4L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 5L,  #>     3L, 3L, 5L, 3L, 5L, 4L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 3L, 3L,  #>     3L, 5L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 3L,  #>     5L, 5L, 4L, 3L, 5L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 3L, 5L,  #>     5L, 4L, 5L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 3L,  #>     4L, 4L, 3L, 5L, 5L, 4L, 5L, 4L, 5L, 3L, 5L, 5L, 5L, 4L, 4L,  #>     5L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 3L, 4L,  #>     3L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 3L, 3L,  #>     3L, 4L, 5L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 4L, 4L, 5L, 4L, 3L,  #>     4L, 5L, 5L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 4L, 3L, 5L,  #>     3L, 5L, 3L, 4L, 4L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 3L, 3L,  #>     3L, 4L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 4L, 5L, 3L, 4L,  #>     3L, 5L, 3L, 3L, 3L, 3L, 4L, 4L, 5L, 5L, 5L, 3L, 4L, 3L, 4L,  #>     4L, 5L, 5L, 4L, 3L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 3L, 4L, 5L,  #>     3L, 3L, 3L, 4L, 4L, 5L, 3L, 5L, 5L, 4L, 4L, 4L, 5L, 4L, 3L,  #>     4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 3L, 5L, 3L, 3L, 3L, 4L, 3L,  #>     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 3L, 3L, 4L, 3L, 3L,  #>     4L, 5L, 5L, 4L, 5L, 5L, 3L, 4L, 4L, 3L, 3L, 3L, 4L, 3L, 4L,  #>     5L, 4L, 4L, 3L, 3L, 3L, 4L, 4L, 5L, 5L, 4L, 3L, 5L, 5L, 3L,  #>     5L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 3L, 3L,  #>     4L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L, 3L, 3L, 3L, 5L, 5L,  #>     5L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 3L, 5L, 5L, 4L, 5L, 5L,  #>     3L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 4L, 4L, 5L, 4L, 4L,  #>     4L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 5L, 4L, 4L, 4L, 5L, 3L,  #>     4L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 4L, 5L, 5L, 5L, 4L,  #>     5L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 3L,  #>     5L, 5L, 3L, 4L, 5L, 5L, 4L, 3L, 5L, 5L, 3L, 3L, 3L, 4L, 4L,  #>     4L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 4L, 5L, 4L,  #>     3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 3L, 3L,  #>     4L, 4L, 5L, 5L, 4L, 5L, 5L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 4L,  #>     3L, 5L, 3L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 5L, 4L, 5L, 5L, 3L,  #>     4L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 4L, 3L, 4L, 5L, 4L, 3L,  #>     4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 4L,  #>     4L, 3L, 4L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 5L,  #>     4L, 4L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 3L, 3L, 4L, 4L, 5L,  #>     5L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 5L, 4L,  #>     3L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 4L, 4L, 4L,  #>     5L, 5L, 5L, 4L, 4L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 5L,  #>     5L, 5L, 5L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 4L, 5L, 5L, 4L, 4L,  #>     4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 4L, 5L, 5L, 3L,  #>     3L, 5L, 3L, 4L, 3L, 5L, 3L, 3L, 3L, 5L, 4L, 5L, 3L, 4L, 4L,  #>     3L, 5L, 4L, 4L, 5L, 4L, 3L, 5L, 3L, 4L, 4L, 3L, 4L, 4L, 3L,  #>     3L, 3L, 5L, 4L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 3L,  #>     3L, 4L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 3L,  #>     5L, 4L, 3L, 5L, 5L, 5L, 4L, 4L, 5L, 4L, 3L, 4L, 3L, 5L, 3L,  #>     4L, 3L, 5L, 3L, 3L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 3L, 3L, 3L,  #>     4L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 4L, 5L, 3L, 4L,  #>     4L, 4L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 3L, 4L, 3L, 5L,  #>     4L, 4L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 4L,  #>     5L, 5L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 3L,  #>     4L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 3L, 5L, 4L, 3L, 3L, 5L,  #>     4L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 3L, 3L, 3L,  #>     3L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 3L, 5L, 4L, 4L, 4L, 4L,  #>     3L, 4L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 5L, 5L, 3L, 5L, 4L, 5L,  #>     5L, 4L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L,  #>     5L, 5L, 4L, 3L, 4L, 3L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 5L,  #>     5L, 4L, 5L, 5L, 5L, 4L, 5L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 4L,  #>     5L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 4L, 5L, 5L,  #>     4L, 5L, 5L, 4L, 5L, 4L, 3L, 4L, 4L, 5L, 4L, 5L, 3L, 4L, 4L,  #>     5L, 5L, 5L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 5L, 5L,  #>     3L, 4L, 5L, 4L, 5L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 5L, 3L,  #>     4L, 5L, 5L, 5L, 3L, 5L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 4L, 5L,  #>     5L, 3L, 4L, 4L, 4L, 4L, 3L, 3L, 5L, 4L, 3L, 5L, 3L, 4L, 5L,  #>     3L, 4L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 5L,  #>     3L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 4L,  #>     4L, 5L, 3L, 5L, 5L, 4L, 3L, 5L, 4L, 5L, 3L, 4L, 5L, 5L, 5L,  #>     4L, 3L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L,  #>     4L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 5L, 5L, 5L, 3L, 5L,  #>     3L, 5L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 4L, 4L, 5L,  #>     5L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 4L, 5L, 4L, 4L, 4L,  #>     4L, 4L, 4L, 3L, 3L, 5L, 4L, 4L, 4L, 5L, 4L, 3L, 3L, 4L, 3L,  #>     4L, 4L, 4L, 3L, 5L, 4L, 4L, 3L, 4L, 4L, 3L, 3L, 3L, 3L, 4L,  #>     4L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 4L, 3L, 5L, 5L, 3L,  #>     4L, 3L, 4L, 3L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 3L, 5L, 4L, 5L,  #>     5L, 4L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 3L, 3L, 4L, 4L, 5L, 5L,  #>     3L, 5L, 3L, 3L, 5L, 5L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 5L, 3L,  #>     5L, 5L, 4L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 4L,  #>     5L, 4L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 5L, 4L, 3L, 5L, 5L,  #>     4L, 4L, 5L, 4L, 5L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 4L, 3L, 3L,  #>     3L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 5L,  #>     3L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 4L, 3L, 5L, 4L, 4L, 5L, 4L, 5L, 3L, 4L, 4L, 4L,  #>     4L, 4L, 3L, 5L, 4L, 3L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 5L,  #>     3L, 3L, 3L, 5L, 5L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 3L, 4L,  #>     5L, 3L, 5L, 3L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 5L, 5L,  #>     3L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 4L, 4L, 4L, 5L, 4L, 3L, 4L,  #>     5L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 5L, 4L, 3L,  #>     5L, 3L, 3L, 5L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 5L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 5L,  #>     4L, 3L, 5L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 3L, 4L, 4L, 4L, 4L,  #>     5L, 5L, 3L, 5L, 5L, 4L, 5L, 4L, 3L, 4L, 5L, 4L, 5L, 5L, 4L,  #>     3L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 3L, 5L, 4L,  #>     5L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 5L,  #>     4L, 3L, 3L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 4L, 4L,  #>     3L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 4L, 4L, 5L,  #>     5L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 4L, 3L, 3L, 4L, 5L, 5L, 4L,  #>     3L, 4L, 5L, 5L, 4L, 4L, 3L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 3L,  #>     4L, 4L, 4L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 5L, 4L, 5L, 3L, 3L,  #>     3L, 5L, 3L, 3L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 4L, 4L, 5L, 5L,  #>     3L, 5L, 3L, 4L, 3L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 4L, 4L, 3L,  #>     4L, 3L, 4L, 5L, 3L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 5L, 5L, 5L,  #>     3L, 5L, 3L, 3L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 3L, 4L,  #>     5L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 4L,  #>     3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     3L, 3L, 5L, 4L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 4L, 4L, 4L, 3L,  #>     3L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 5L,  #>     4L, 4L, 4L, 4L, 3L, 4L, 3L, 4L, 5L, 5L, 3L, 5L, 5L, 3L, 3L,  #>     4L, 3L, 3L, 3L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 5L, 3L, 5L, 4L,  #>     4L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 4L, 4L, 4L, 3L, 5L, 5L,  #>     5L, 5L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 5L, 3L, 3L, 4L, 5L,  #>     4L, 5L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 3L, 4L, 4L, 5L,  #>     4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 5L, 3L, 5L, 4L, 5L, 5L,  #>     5L, 5L, 4L, 3L, 3L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 3L,  #>     4L, 5L, 5L, 4L, 4L, 4L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 3L, 3L,  #>     5L, 3L, 5L, 3L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 5L,  #>     5L, 3L, 4L, 5L, 5L, 3L, 4L, 3L, 5L, 5L, 4L, 4L, 4L, 4L, 3L,  #>     3L, 4L, 3L, 5L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 4L,  #>     3L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 5L,  #>     5L, 4L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 4L,  #>     5L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 5L, 5L, 5L, 3L, 3L, 4L, 5L,  #>     3L, 5L, 3L, 3L, 3L, 5L, 3L, 4L, 3L, 4L, 5L, 5L, 4L, 4L, 4L,  #>     4L, 5L, 3L, 5L, 4L, 3L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 3L, 5L,  #>     5L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 5L, 5L, 3L, 4L, 4L, 3L,  #>     3L, 4L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 5L, 3L, 4L, 4L, 5L, 3L,  #>     5L, 5L, 4L, 4L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 3L,  #>     3L, 3L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 5L, 5L,  #>     5L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 5L, 5L, 5L,  #>     3L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 4L,  #>     5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 3L, 4L, 3L, 3L,  #>     5L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 4L, 3L, 5L, 5L, 3L, 4L, 4L,  #>     5L, 4L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 4L, 3L, 4L, 5L, 4L,  #>     5L, 4L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 5L,  #>     5L, 3L, 5L, 5L, 3L, 5L, 3L, 3L, 4L, 5L, 5L, 5L, 4L, 5L, 4L,  #>     3L, 4L, 4L, 5L, 4L, 5L, 5L, 4L, 3L, 3L, 4L, 5L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 4L,  #>     3L, 5L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 5L, 4L, 3L,  #>     5L, 5L, 4L, 5L, 5L, 3L, 5L, 3L, 4L, 5L, 3L, 5L, 3L, 4L, 3L,  #>     5L, 5L, 4L, 5L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 3L, 4L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 4L, 3L, 4L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 5L,  #>     5L, 5L, 5L, 4L, 3L, 4L, 3L, 4L, 4L, 3L, 5L, 5L, 3L, 5L, 5L,  #>     3L, 3L, 5L, 5L, 5L, 3L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 4L, 5L,  #>     5L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 3L, 3L, 5L, 3L,  #>     3L, 5L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 5L,  #>     3L, 3L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 5L, 4L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 3L, 5L, 3L, 4L, 4L, 3L, 3L, 5L, 4L, 4L, 4L, 5L,  #>     3L, 4L, 4L, 5L, 3L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 3L, 5L,  #>     5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 3L, 3L, 5L, 3L, 4L, 4L, 3L,  #>     4L, 3L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 5L, 4L,  #>     3L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 3L, 3L, 3L, 3L, 5L,  #>     3L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 4L, 3L, 4L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 4L, 5L, 5L, 4L, 5L, 4L,  #>     4L, 3L, 3L, 4L, 4L, 5L, 3L, 4L, 5L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     3L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 4L, 3L, 5L, 3L,  #>     5L, 5L, 5L, 3L, 3L, 5L, 5L, 5L, 3L, 5L, 3L, 5L, 4L, 4L, 5L,  #>     4L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 4L, 3L, 4L, 5L, 4L, 3L, 4L,  #>     5L, 4L, 5L, 3L, 3L, 3L, 3L, 4L, 3L, 3L, 5L, 4L, 3L, 4L, 3L,  #>     5L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 5L, 5L, 4L, 3L, 5L,  #>     5L, 5L, 5L, 3L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 5L, 3L, 4L, 5L,  #>     3L, 4L, 4L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 3L, 4L, 3L, 3L, 5L,  #>     4L, 3L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 4L,  #>     3L, 3L, 5L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 4L, 3L, 5L, 3L,  #>     5L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 5L, 5L, 5L, 3L, 3L, 4L, 3L,  #>     4L, 4L, 3L, 5L, 4L, 4L, 4L, 3L, 4L, 3L, 5L, 5L, 5L, 3L, 4L,  #>     3L, 3L, 3L, 3L, 5L, 5L, 5L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 5L,  #>     3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 4L,  #>     5L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 3L, 5L, 3L, 3L, 3L, 4L,  #>     3L, 3L, 4L, 5L, 5L, 5L, 5L, 5L, 3L, 4L, 3L, 5L, 4L, 3L, 5L,  #>     4L, 4L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 5L, 3L,  #>     4L, 4L, 4L, 4L, 5L, 3L, 5L, 5L, 3L, 5L, 3L, 4L, 5L, 5L, 4L,  #>     4L, 5L, 5L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 3L, 5L, 4L, 3L, 4L,  #>     3L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 3L,  #>     4L, 3L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 4L, 4L, 3L,  #>     5L, 4L, 4L, 3L, 5L, 5L, 4L, 4L, 4L, 5L, 5L, 3L, 5L, 5L, 4L,  #>     5L, 3L, 4L, 3L, 5L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 5L, 4L, 4L,  #>     3L, 4L, 4L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 3L, 3L, 3L, 4L, 3L,  #>     5L, 5L, 5L, 3L, 5L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 3L,  #>     5L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 3L, 3L, 3L, 4L, 3L, 4L,  #>     3L, 4L, 5L, 5L, 4L, 4L, 3L, 5L, 3L, 3L, 5L, 4L, 5L, 5L, 5L,  #>     3L, 4L, 4L, 5L, 5L, 3L, 4L, 5L, 5L, 5L, 3L, 3L, 4L, 5L, 4L,  #>     4L, 5L, 5L, 4L, 3L, 4L, 5L, 5L, 3L, 3L, 3L, 4L, 3L, 5L, 4L,  #>     5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 4L, 5L, 4L, 5L, 3L, 4L,  #>     3L, 3L, 3L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 4L,  #>     4L, 5L, 3L, 5L, 5L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 5L, 3L, 5L,  #>     5L, 4L, 5L, 3L, 5L, 4L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 3L,  #>     3L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 4L, 4L, 3L, 4L, 4L,  #>     4L, 3L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 3L, 4L,  #>     5L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 4L, 4L,  #>     3L, 4L, 5L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 5L, 4L,  #>     4L, 5L, 4L, 4L, 4L, 4L, 5L, 3L, 5L, 3L, 4L, 5L, 4L, 3L, 5L,  #>     5L, 5L, 4L, 5L, 5L, 4L, 5L, 3L, 5L, 3L, 4L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 5L, 4L, 3L, 3L, 3L, 3L,  #>     3L, 4L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 4L,  #>     5L, 4L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 5L, 3L, 5L, 4L,  #>     3L, 5L, 4L, 4L, 3L, 3L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 5L, 3L,  #>     3L, 3L, 3L, 3L, 3L, 4L, 5L, 4L, 4L, 3L, 4L, 4L, 3L, 3L, 5L,  #>     3L, 3L, 4L, 3L, 3L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 3L, 4L,  #>     3L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 3L, 5L, 4L,  #>     4L, 5L, 4L, 5L, 4L, 3L, 4L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 3L,  #>     4L, 3L, 4L, 4L, 4L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 3L, 5L, 3L,  #>     3L, 4L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 4L, 5L, 5L,  #>     4L, 4L, 4L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 5L, 3L, 4L, 5L, 4L,  #>     3L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 5L, 3L,  #>     4L, 4L, 5L, 3L, 5L, 5L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 5L,  #>     4L, 4L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 5L, 5L, 3L, 5L, 3L, 3L,  #>     4L, 5L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 3L, 3L, 4L, 5L, 5L, 3L,  #>     3L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 4L, 5L, 3L, 4L, 5L, 5L,  #>     5L, 3L, 4L, 4L, 3L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 4L, 4L,  #>     3L, 3L, 4L, 5L, 3L, 5L, 3L, 3L, 3L, 3L, 3L, 4L, 3L, 5L, 3L,  #>     3L, 3L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 3L, 3L, 5L, 4L, 3L, 3L,  #>     4L, 4L, 3L, 4L, 3L, 5L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 5L,  #>     3L, 3L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 3L, 5L, 4L, 5L, 4L, 5L,  #>     3L, 5L, 5L, 4L, 4L, 5L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 5L, 5L,  #>     4L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 5L, 5L, 3L, 3L, 3L,  #>     5L, 5L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 3L, 4L, 3L,  #>     5L, 4L, 5L, 4L, 5L, 3L, 3L, 5L, 3L, 3L, 3L, 5L, 4L, 3L, 3L,  #>     5L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 5L, 4L, 3L,  #>     5L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 4L, 4L, 4L,  #>     4L, 3L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 5L,  #>     5L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 4L, 3L, 5L, 4L, 4L, 3L, 5L,  #>     5L, 3L, 5L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 5L, 3L, 3L,  #>     3L, 4L, 5L, 4L, 5L, 3L, 5L, 3L, 4L, 3L, 3L, 3L, 5L, 4L, 4L,  #>     3L, 5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 3L, 5L,  #>     3L, 5L, 5L, 5L, 3L, 4L, 3L, 5L, 4L, 5L, 4L, 4L, 4L, 4L, 5L,  #>     3L, 3L, 4L, 4L, 3L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 4L, 3L, 3L,  #>     3L, 3L, 5L, 3L, 5L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 4L, 4L,  #>     5L, 4L, 4L, 3L, 5L, 5L, 3L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 4L,  #>     3L, 3L, 3L, 4L, 3L, 4L, 3L, 5L, 3L, 3L, 4L, 5L, 3L, 3L, 4L,  #>     5L, 3L, 5L, 4L, 5L, 3L, 3L, 4L, 4L, 5L, 4L, 4L, 5L, 5L, 5L,  #>     4L, 4L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 5L, 4L,  #>     3L, 3L, 5L, 5L, 5L, 4L, 5L, 4L, 4L, 4L, 4L, 3L, 5L, 4L, 3L,  #>     5L, 4L, 5L, 3L, 3L, 4L, 3L, 4L, 3L, 4L, 4L, 5L, 3L, 3L, 3L,  #>     3L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 3L, 4L, 5L, 3L,  #>     4L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 4L, 4L, 3L, 5L, 4L, 3L, 3L,  #>     4L, 3L, 5L, 4L, 4L, 3L, 5L, 5L, 3L, 3L, 3L, 4L, 4L, 3L, 4L,  #>     3L, 4L, 5L, 3L, 4L, 3L, 3L, 3L, 5L, 4L, 3L, 5L, 4L, 3L, 5L,  #>     4L, 4L, 4L, 4L, 4L, 3L, 5L, 5L, 3L, 4L, 4L, 5L, 3L, 3L, 3L,  #>     4L, 3L, 5L, 3L, 3L, 4L, 5L, 4L, 3L, 5L, 5L, 5L, 4L, 3L, 4L,  #>     5L, 5L, 4L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 5L, 5L,  #>     5L, 4L, 4L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 5L, 3L,  #>     3L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 3L,  #>     3L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 4L,  #>     4L, 3L, 4L, 4L, 3L, 5L, 4L, 5L, 4L, 4L, 4L, 4L, 3L, 3L, 4L,  #>     3L, 3L, 3L, 4L, 5L, 5L, 3L, 5L, 4L, 5L, 5L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 3L, 3L, 3L, 5L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 3L, 4L,  #>     3L, 4L, 3L, 4L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 4L,  #>     3L, 4L, 4L, 5L, 4L, 5L, 5L, 3L, 3L, 4L, 5L, 4L, 5L, 3L, 3L,  #>     5L, 3L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 5L, 4L, 4L, 5L, 5L, 3L,  #>     5L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 4L, 5L, 3L, 3L,  #>     4L, 5L, 4L, 3L, 3L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 5L,  #>     4L, 4L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 5L, 5L,  #>     5L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 4L, 3L, 5L, 3L, 3L,  #>     5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 4L, 3L, 5L, 5L,  #>     4L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 5L, 3L,  #>     3L, 4L, 5L, 4L, 4L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 5L, 4L,  #>     4L, 4L, 3L, 4L, 3L, 5L, 4L, 5L, 3L, 3L, 3L, 5L, 4L, 4L, 5L,  #>     4L, 3L, 3L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 4L, 5L, 3L, 3L,  #>     5L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 5L, 5L, 3L, 5L, 4L, 5L, 3L,  #>     4L, 3L, 5L, 3L, 5L, 4L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 5L, 4L,  #>     4L, 4L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 5L,  #>     4L, 5L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 4L, 4L, 4L, 4L, 3L, 3L,  #>     5L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 5L, 3L, 5L, 3L, 4L, 5L,  #>     3L, 3L, 4L, 5L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 5L,  #>     4L, 5L, 5L, 3L, 4L, 5L, 5L, 3L, 3L, 4L, 5L, 3L, 5L, 4L, 5L,  #>     3L, 3L, 3L, 5L, 5L, 3L, 5L, 5L, 3L, 5L, 5L, 4L, 5L, 3L, 5L,  #>     3L, 4L, 5L, 3L, 4L, 3L, 3L, 4L, 4L, 3L, 4L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 4L, 3L, 4L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 4L, 3L,  #>     3L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 4L, 5L, 4L,  #>     3L, 5L, 3L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 4L, 5L, 3L,  #>     5L, 4L, 5L, 4L, 5L, 5L, 3L, 4L, 3L, 4L, 3L, 4L, 5L, 5L, 3L,  #>     5L, 5L, 3L, 4L, 5L, 3L, 4L, 4L, 4L, 5L, 4L, 4L, 3L, 3L, 4L,  #>     5L, 5L, 5L, 3L, 3L, 3L, 4L, 5L, 5L, 5L, 4L, 3L, 4L, 4L, 4L,  #>     5L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 4L, 5L,  #>     4L, 4L, 5L, 4L, 4L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 3L,  #>     5L, 5L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 4L, 5L, 3L, 3L,  #>     4L, 4L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 3L, 4L, 3L, 5L, 4L,  #>     5L, 5L, 3L, 4L, 5L, 5L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 5L, 3L,  #>     3L, 5L, 5L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 5L, 3L,  #>     3L, 4L, 3L, 4L, 5L, 5L, 5L, 3L, 5L, 3L, 4L, 3L, 5L, 4L, 5L,  #>     5L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 3L, 3L, 5L,  #>     5L, 4L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 5L, 5L, 4L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 5L, 3L,  #>     4L, 5L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 3L, 4L, 5L, 3L,  #>     4L, 5L, 3L, 4L, 3L, 5L, 3L, 4L, 3L, 3L, 5L, 3L, 3L, 4L, 5L,  #>     3L, 3L, 4L, 3L, 3L, 3L, 3L, 3L, 5L, 3L, 5L, 4L, 3L, 3L, 3L,  #>     4L, 4L, 5L, 5L, 3L, 3L, 3L, 4L, 3L, 3L, 3L, 3L, 5L, 5L, 3L,  #>     4L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 5L, 3L, 4L, 5L, 3L, 4L, 4L,  #>     4L, 3L, 4L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 5L, 3L, 3L, 4L, 5L,  #>     4L, 4L, 5L, 3L, 4L, 4L, 4L, 3L, 5L, 4L, 3L, 4L, 5L, 3L, 5L,  #>     4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L, 3L, 4L, 5L, 4L, 3L, 4L,  #>     4L, 4L, 5L, 5L, 5L, 4L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 3L, 5L,  #>     3L, 4L, 5L, 3L, 4L, 3L, 4L, 4L, 5L, 3L, 3L, 5L, 5L, 5L, 4L,  #>     5L, 5L, 5L, 5L, 5L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 5L, 5L, 4L,  #>     4L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 3L, 4L, 3L, 3L, 3L, 4L, 3L,  #>     5L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 4L, 3L,  #>     5L, 4L, 4L, 3L, 4L, 4L, 5L, 4L, 3L, 5L, 5L, 4L, 3L, 5L, 4L,  #>     5L, 5L, 5L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 5L, 5L, 5L,  #>     3L, 5L, 3L, 5L, 3L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 5L, 4L, 5L,  #>     3L, 5L, 5L, 3L, 4L, 4L, 5L, 3L, 4L, 4L, 4L, 4L, 5L, 3L, 5L,  #>     4L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 3L, 4L, 4L,  #>     4L, 4L, 5L, 5L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 5L, 3L,  #>     5L, 5L, 4L, 3L, 4L, 4L, 3L, 3L, 3L, 3L, 3L, 4L, 3L, 3L, 4L,  #>     5L, 3L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 5L, 3L, 5L, 4L, 5L,  #>     5L, 3L, 5L, 3L, 3L, 5L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 5L, 5L,  #>     4L, 5L, 3L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 3L, 5L, 3L, 4L, 4L,  #>     5L, 4L, 3L, 4L, 5L, 3L, 5L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 4L,  #>     5L, 4L, 4L, 4L, 5L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 3L, 4L,  #>     3L, 4L, 3L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 3L, 3L, 3L, 3L,  #>     3L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 3L, 5L, 3L, 5L, 5L, 3L, 5L,  #>     4L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 4L, 5L, 4L, 4L, 5L,  #>     4L, 5L, 4L, 5L, 4L, 4L, 3L, 3L, 3L, 4L, 5L, 4L, 3L, 3L, 4L,  #>     3L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 5L, 5L, 4L, 5L, 3L,  #>     3L, 3L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 4L, 5L, 4L, 5L, 4L,  #>     5L, 4L, 5L, 3L, 4L, 5L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 3L, 3L,  #>     3L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 4L, 3L, 3L, 5L, 3L, 5L, 4L,  #>     3L, 4L, 4L, 3L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 5L, 4L, 5L,  #>     4L, 4L, 4L, 3L, 4L, 5L, 4L, 4L, 5L, 5L, 3L, 5L, 4L, 3L, 4L,  #>     4L, 4L, 4L, 3L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 3L, 4L, 3L,  #>     4L, 3L, 5L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 3L, 4L,  #>     5L, 3L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 5L,  #>     4L, 4L, 3L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 3L, 4L, 5L, 3L, 5L,  #>     5L, 4L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 5L,  #>     5L, 5L, 5L, 4L, 4L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 3L, 4L, 3L,  #>     4L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 4L, 4L, 3L,  #>     4L, 4L, 3L, 5L, 3L, 3L, 3L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 3L,  #>     4L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 4L,  #>     3L, 3L, 3L, 4L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 4L, 4L, 4L, 5L,  #>     3L, 3L, 5L, 4L, 5L, 4L, 4L, 3L, 4L, 5L, 5L, 3L, 4L, 4L, 3L,  #>     3L, 4L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 5L, 4L, 4L, 3L,  #>     5L, 3L, 4L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 4L, 4L, 5L, 5L,  #>     4L, 3L, 4L, 5L, 3L, 3L, 5L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 3L,  #>     5L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 5L, 3L, 4L, 3L, 3L, 5L,  #>     4L, 5L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 3L, 3L, 4L, 5L, 5L,  #>     5L, 4L, 5L, 5L, 3L, 5L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 4L, 5L,  #>     5L, 3L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 4L, 4L, 4L, 4L, 5L, 3L,  #>     4L, 5L, 4L, 3L, 4L, 5L, 3L, 3L, 4L, 4L, 5L, 3L, 4L, 3L, 5L,  #>     5L, 3L, 3L, 5L, 3L, 5L, 4L, 3L, 3L, 3L, 4L, 3L, 5L, 5L, 5L,  #>     3L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 3L, 5L, 5L, 5L, 4L, 3L,  #>     5L, 4L, 3L, 5L, 4L, 4L, 3L, 3L, 4L, 5L, 4L, 3L, 5L, 3L, 3L,  #>     5L, 3L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 4L, 3L, 4L, 4L, 3L, 4L,  #>     5L, 4L, 3L, 4L, 5L, 4L, 3L, 5L, 3L, 4L, 3L, 4L, 5L, 3L, 3L,  #>     3L, 4L, 4L, 5L, 5L, 3L, 4L, 4L, 3L, 3L, 3L, 3L, 4L, 5L, 3L,  #>     4L, 3L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 5L, 3L, 4L, 3L, 4L,  #>     3L, 5L, 3L, 3L, 5L, 4L, 5L, 4L, 5L, 4L, 3L, 4L, 4L, 3L, 4L,  #>     4L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 5L,  #>     4L, 4L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, 5L,  #>     5L, 3L, 4L, 3L, 5L, 5L, 3L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 5L,  #>     3L, 3L, 5L, 5L, 4L, 3L, 4L, 5L, 4L, 3L, 5L, 5L, 3L, 5L, 4L,  #>     3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 5L, 4L, 5L, 3L, 4L, 4L, 3L,  #>     4L, 3L, 3L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 5L, 3L, 5L, 5L, 5L,  #>     3L, 3L, 3L, 4L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 4L,  #>     5L, 4L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 3L, 4L, 5L, 5L, 3L,  #>     5L, 5L, 3L, 3L, 5L, 3L, 5L, 4L, 5L, 4L, 3L, 3L, 4L, 5L, 3L,  #>     5L, 5L, 4L, 5L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 5L, 5L, 4L, 4L,  #>     4L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 4L, 5L, 3L, 4L, 5L, 5L, 4L,  #>     4L, 3L, 5L, 5L, 3L, 5L, 3L, 5L, 4L, 5L, 5L, 5L, 5L, 5L, 3L,  #>     3L, 5L, 3L, 3L, 4L, 3L, 4L, 5L, 4L, 5L, 4L, 3L, 5L, 4L, 3L,  #>     4L, 3L, 5L, 3L, 5L, 4L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 3L,  #>     4L, 5L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 5L, 4L,  #>     5L, 3L, 3L, 5L, 5L, 3L, 3L, 4L, 5L, 3L, 3L, 4L, 4L, 5L, 3L,  #>     3L, 4L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 3L, 3L, 5L, 5L,  #>     3L, 5L, 3L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 5L, 3L, 3L, 4L, 5L,  #>     3L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 3L, 4L,  #>     3L, 3L, 5L, 3L, 3L, 4L, 4L, 4L, 3L, 3L, 3L, 5L, 3L, 3L, 5L,  #>     4L, 5L, 4L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 5L, 3L,  #>     4L, 5L, 4L, 3L, 3L, 5L, 5L, 4L, 4L, 3L, 5L, 5L, 4L, 4L, 3L,  #>     4L, 5L, 4L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 4L, 5L, 4L, 5L, 5L,  #>     3L, 3L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 4L, 3L, 4L, 3L,  #>     3L, 5L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 3L, 4L, 4L, 3L,  #>     4L, 5L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 5L, 4L, 4L, 3L, 4L,  #>     4L, 5L, 3L, 3L, 4L, 3L, 5L, 5L, 5L, 5L, 5L, 4L, 4L, 3L, 3L,  #>     4L, 4L, 5L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L,  #>     5L, 4L, 3L, 3L, 4L, 3L, 3L, 4L, 3L, 4L, 4L, 5L, 5L, 4L, 5L,  #>     3L, 3L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 5L,  #>     5L, 5L, 4L, 3L, 3L, 4L, 5L, 3L, 3L, 3L, 5L, 5L, 4L, 3L, 5L,  #>     5L, 5L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 3L, 4L,  #>     5L, 4L, 5L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 4L,  #>     5L, 3L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 3L, 3L, 4L, 5L, 3L, 3L,  #>     4L, 5L, 5L, 3L, 5L, 4L, 4L, 5L, 4L, 5L, 3L, 5L, 3L, 5L, 3L,  #>     5L, 5L, 5L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 5L, 3L, 5L,  #>     5L, 3L, 4L, 5L, 5L, 4L, 3L, 3L, 5L, 5L, 3L, 4L, 3L, 3L, 5L,  #>     4L, 5L, 4L, 3L, 4L, 4L, 5L, 5L, 5L, 4L, 4L, 4L, 3L, 4L, 4L,  #>     5L, 3L, 4L, 3L, 3L, 5L, 5L, 4L, 3L, 3L, 5L, 4L, 5L, 3L, 5L,  #>     5L, 4L, 5L, 3L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 5L, 5L, 3L, 3L,  #>     3L, 4L, 5L, 3L, 4L, 5L, 3L, 3L, 3L, 4L, 5L, 3L, 4L, 4L, 3L,  #>     4L, 5L, 5L, 4L, 5L, 3L, 3L, 5L, 4L, 3L, 4L, 3L, 4L, 4L, 3L,  #>     5L, 4L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 4L, 4L, 4L,  #>     5L, 5L, 4L, 4L, 4L, 3L, 4L, 5L, 5L, 3L, 5L, 3L, 4L, 5L, 5L,  #>     4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 3L, 4L, 3L, 5L, 5L, 3L, 5L,  #>     4L, 4L, 3L, 3L, 3L, 3L, 5L, 5L, 3L, 5L, 4L, 3L, 4L, 3L, 5L,  #>     3L, 5L, 5L, 5L, 5L, 5L, 3L, 3L, 5L, 5L, 4L, 3L, 4L, 3L, 3L,  #>     3L, 4L, 3L, 3L, 4L, 5L, 3L, 3L, 3L, 3L, 4L, 3L, 4L, 4L, 4L,  #>     3L, 3L, 4L, 4L, 5L, 5L, 3L, 4L, 3L, 3L, 5L, 4L, 5L, 3L, 3L,  #>     3L, 3L, 4L, 5L, 5L, 4L, 5L, 4L, 5L, 4L, 5L, 3L, 4L, 4L, 5L,  #>     3L, 5L, 4L, 3L, 3L, 3L, 4L, 5L, 3L, 5L, 5L, 5L, 3L, 5L, 3L,  #>     3L, 5L, 3L, 4L, 5L, 4L, 4L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 4L,  #>     3L, 4L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 4L, 3L, 4L, 4L, 5L, 5L,  #>     5L, 5L, 4L, 4L, 5L, 5L, 3L, 5L, 4L, 4L, 4L, 5L, 5L, 4L, 4L,  #>     4L, 3L, 4L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 4L,  #>     4L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 3L, 4L, 4L, 4L, 3L, 4L,  #>     3L, 5L, 4L, 4L, 3L, 5L, 4L, 3L, 5L, 5L, 5L, 4L, 3L, 5L, 4L,  #>     5L, 3L, 3L, 3L, 3L, 3L, 5L, 4L, 5L, 5L, 5L, 5L, 4L, 3L, 4L,  #>     4L, 3L, 3L, 4L, 3L, 5L, 4L, 3L, 3L, 4L, 5L, 4L, 3L, 4L, 4L,  #>     4L, 5L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 4L, 3L, 3L, 5L, 5L,  #>     3L, 3L, 3L, 5L, 5L, 4L, 3L, 5L, 5L, 4L, 5L, 5L, 4L, 5L, 4L,  #>     4L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 5L, 3L, 3L, 5L,  #>     3L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 4L, 3L, 3L, 4L, 5L, 4L, 5L,  #>     5L, 3L, 4L, 3L, 3L, 5L, 4L, 4L, 5L, 5L, 4L, 4L, 5L, 3L, 3L,  #>     3L, 4L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 3L, 4L, 5L, 5L, 4L, 3L,  #>     4L, 5L, 5L, 5L, 5L, 5L, 5L, 3L, 5L, 4L, 4L, 5L, 3L, 5L, 3L,  #>     5L, 4L, 4L, 4L, 3L, 5L, 5L, 5L, 3L, 3L, 3L, 3L, 5L, 4L, 3L,  #>     3L, 5L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 5L, 3L,  #>     5L, 3L, 5L, 4L, 3L, 4L, 5L, 5L, 5L, 4L, 4L, 3L, 4L, 4L, 4L,  #>     5L, 4L, 4L, 3L, 5L, 3L, 3L, 4L, 4L, 5L, 4L, 3L, 3L, 3L, 4L,  #>     4L, 5L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 4L, 5L, 5L, 5L, 4L, 5L,  #>     4L, 3L, 5L, 5L, 3L, 5L, 4L, 4L, 3L, 4L, 5L, 5L, 4L, 5L, 5L,  #>     5L, 3L, 3L, 4L, 5L, 3L, 3L, 5L, 4L, 4L, 5L, 5L, 5L, 4L, 4L,  #>     5L, 3L, 3L, 3L, 3L, 3L, 4L, 3L, 3L, 5L, 3L, 4L, 4L, 3L, 5L,  #>     3L, 4L, 4L, 4L, 4L, 3L, 4L, 5L, 3L, 5L, 3L, 5L, 3L, 4L, 3L,  #>     4L, 3L, 4L, 3L, 5L, 3L, 4L, 4L, 5L, 3L, 5L, 4L, 3L, 4L, 4L,  #>     5L, 5L, 3L, 3L, 4L, 4L, 5L, 3L, 3L, 5L, 3L, 5L, 5L, 3L, 5L,  #>     5L, 3L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L, 4L, 3L, 4L, 4L,  #>     4L, 3L, 5L, 4L, 4L, 3L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 5L, 4L,  #>     5L, 3L, 3L, 4L, 3L, 4L, 3L, 3L, 5L, 5L, 3L, 5L, 5L, 5L, 5L,  #>     4L, 4L, 4L, 4L, 5L, 3L, 5L, 4L, 5L, 5L, 4L, 5L, 5L, 5L, 3L,  #>     5L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 5L, 3L, 4L, 3L, 4L, 3L, 4L,  #>     4L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 5L, 5L, 5L, 3L, 4L, 4L, 3L,  #>     3L, 3L, 5L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 4L,  #>     4L, 3L, 4L, 3L, 3L, 4L, 3L, 5L, 4L, 4L, 4L, 5L, 4L, 5L, 4L,  #>     5L, 3L, 5L, 4L, 3L, 5L, 4L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 3L,  #>     5L, 5L, 3L, 3L, 4L, 3L, 5L, 3L, 3L, 3L, 3L, 5L, 5L, 3L, 3L,  #>     4L, 4L, 5L, 3L, 3L, 4L, 3L, 3L, 4L, 4L, 5L, 3L, 5L, 5L, 4L,  #>     3L, 4L, 4L, 3L, 4L, 3L, 5L, 3L, 4L, 5L, 3L, 5L, 5L, 5L, 5L,  #>     5L, 5L, 4L, 5L, 5L, 4L, 3L, 5L, 4L, 3L, 4L, 5L, 3L, 5L, 4L,  #>     3L, 3L, 5L, 4L, 5L, 5L, 4L, 4L, 5L, 5L, 5L, 4L, 3L, 4L, 5L,  #>     3L, 3L, 3L, 4L, 3L, 5L, 3L, 5L, 3L, 3L, 5L, 5L, 4L, 5L, 5L,  #>     3L, 5L, 3L, 4L, 5L, 4L, 3L, 4L, 5L, 3L, 4L, 3L, 5L, 5L, 5L,  #>     3L, 4L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 4L, 4L, 4L, 5L, 5L,  #>     3L, 4L, 3L, 4L, 3L, 3L, 5L, 3L, 3L, 3L, 3L, 4L, 5L, 3L, 4L,  #>     3L, 3L, 4L, 5L, 5L, 5L, 5L, 3L, 4L, 4L, 3L, 5L, 4L, 4L, 4L,  #>     3L, 4L, 4L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 5L, 4L, 4L, 4L, 4L,  #>     5L, 3L, 4L, 4L, 5L, 5L, 5L, 5L, 4L, 4L, 4L, 5L, 5L, 4L, 4L,  #>     4L, 5L, 5L, 3L, 3L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 3L, 3L,  #>     4L, 5L, 5L, 3L, 4L, 5L, 4L, 3L, 3L, 4L, 5L, 5L, 4L, 4L, 3L,  #>     4L, 3L, 3L, 4L, 3L, 5L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 5L,  #>     5L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 3L, 5L, 4L, 4L, 4L, 3L, 5L,  #>     5L, 3L, 3L, 3L, 5L, 5L, 3L, 4L, 5L, 4L, 5L, 3L, 5L, 3L, 4L,  #>     3L, 3L, 5L, 3L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 3L, 4L, 3L,  #>     5L, 5L, 3L, 5L, 3L, 3L, 4L, 5L, 3L, 5L, 5L, 4L, 3L, 3L, 4L,  #>     3L, 3L, 3L, 3L, 5L, 3L, 3L, 5L, 5L, 5L, 5L, 4L, 3L, 4L, 3L,  #>     4L, 3L, 3L, 5L, 4L, 3L, 3L, 3L, 4L, 3L, 4L, 5L, 5L, 5L, 4L,  #>     4L, 3L, 4L, 5L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 4L, 4L, 4L, 4L,  #>     4L, 3L, 3L, 3L, 5L, 3L, 4L, 5L, 3L, 3L, 4L, 3L, 5L, 4L, 3L,  #>     3L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 5L, 4L, 4L,  #>     4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 3L, 3L, 5L,  #>     4L, 4L, 5L, 4L, 4L, 5L, 4L, 4L, 5L, 4L, 3L, 5L, 5L, 4L, 4L,  #>     3L, 3L, 4L, 4L, 3L, 3L, 4L, 3L, 3L, 3L, 5L, 3L, 5L, 3L, 3L,  #>     4L, 4L, 5L, 5L, 4L, 5L, 3L, 4L, 3L, 5L, 4L, 4L, 5L, 3L, 3L,  #>     3L, 5L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 4L, 3L, 3L, 4L, 5L, 5L,  #>     3L, 4L, 5L, 5L, 3L, 3L, 3L, 5L, 5L, 5L, 4L, 3L, 3L, 5L, 5L,  #>     3L, 3L, 5L, 5L, 4L, 5L, 4L, 5L, 5L, 3L, 5L, 3L, 3L, 3L, 3L,  #>     3L, 3L, 5L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 4L, 4L, 5L, 3L, 5L,  #>     3L), gpa = c(3.2, 1.6, 3.4, 3.9, 2.1, 2.6, 1.4, 2.4, 2.3,  #>     2.3, 2.6, 3, 2.3, 3.3, 3.7, 2.8, 2.8, 2.8, 2.2, 3, 3.1, 3,  #>     3.8, 3.1, 1.3, 3.3, 3.2, 2.6, 3.4, 3, 3.6, 3.1, 1.7, 3.6,  #>     3.6, 3.6, 3.7, 2, 3.3, 3.5, 2.7, 1.2, 3.7, 3.9, 2.1, 3.1,  #>     1.3, 2.4, 3.6, 3.3, 3.6, 3.9, 2.6, 3.1, 2.8, 2.8, 3.3, 2.4,  #>     3.3, 1, 2.9, 3.9, 1.2, 3.8, 3.2, 2.8, 2.3, 3, 3.2, 2.3, 3.7,  #>     3.9, 2.9, 3.4, 2.9, 2.5, 3.6, 3.5, 2.7, 3.5, 2.5, 2.5, 2.1,  #>     2.8, 1.8, 2.8, 3.7, 3.1, 3.1, 3.1, 3.6, 2.8, 2.5, 1.9, 3.3,  #>     3.3, 3.6, 2.3, 3.1, 3.3, 2.4, 3.1, 2.9, 3.2, 3.6, 3.8, 3.4,  #>     2.6, 2.9, 3.6, 3.6, 2.2, 2.7, 3.2, 3.2, 3.3, 2.4, 3, 2.9,  #>     2.2, 3.5, 3.7, 2, 3.5, 3.1, 2.7, 3.3, 2.6, 2.8, 3, 3, 2.6,  #>     2.6, 3.1, 2.6, 2.9, 1.4, 3.6, 2.6, 2.8, 2.9, 2.8, 3.1, 3.9,  #>     1.4, 3.5, 2.5, 2.7, 3.1, 2.3, 3.3, 3.4, 3.5, 2.5, 3, 3.3,  #>     3.3, 3.4, 2.3, 3, 3.1, 2.3, 2.3, 2.9, 3.1, 2.5, 3.6, 2.5,  #>     1.9, 3, 2.8, 2.4, 3, 3.4, 3.5, 2.9, 2.8, 3.4, 2.1, 3.7, 2.8,  #>     3.6, 3.6, 3.2, 2.4, 2.3, 2.9, 3.3, 2.9, 3.5, 2.5, 2.4, 3.3,  #>     3, 2.6, 2.7, 2.5, 3.5, 3, 2.7, 2.5, 3.4, 3.2, 3.1, 2.3, 3.1,  #>     3.2, 2, 3.1, 3, 3.7, 2.6, 3.3, 2.9, 1.9, 2.6, 3.4, 3.3, 2.3,  #>     3.1, 2.3, 1.6, 2.2, 3.1, 3.6, 3, 3.7, 3.2, 3.1, 1.8, 2.5,  #>     3.2, 3.4, 2.8, 2.9, 2.1, 1.5, 3, 2, 3.7, 2.6, 2.3, 3.8, 3.4,  #>     2.5, 2.6, 3.7, 3, 2.1, 1.8, 3.3, 3.5, 2.2, 2.7, 3, 3.6, 3.7,  #>     2.1, 2.6, 3.1, 2.4, 2.7, 3.2, 1.5, 1.6, 3.5, 2, 2.3, 3.7,  #>     2.4, 1.6, 2, 3.3, 3.8, 2.2, 3.1, 2.4, 3.9, 2.5, 2.6, 1.3,  #>     3.5, 2.7, 3.3, 1.8, 3, 2, 2.2, 3.2, 2.1, 2.5, 1, 2.2, 3.1,  #>     2, 3.7, 2.8, 2.6, 3.1, 3.9, 2.5, 2.7, 3.9, 2.7, 1.4, 1.7,  #>     3.4, 3.7, 3.3, 1.9, 2.1, 3, 3.3, 2.3, 3.3, 3.5, 3.6, 3.2,  #>     2.9, 1.7, 2.5, 3.7, 2.6, 3.7, 1.8, 1, 3.7, 3.2, 2.5, 1.6,  #>     2.1, 2.7, 3.7, 3.7, 3.3, 1.8, 3.6, 3.8, 3.5, 3, 3.5, 3.4,  #>     2.9, 2.3, 2.5, 2.2, 1.9, 3.6, 2.5, 3.3, 3.5, 2.4, 3.4, 3.3,  #>     2.4, 3.5, 3.2, 2.4, 3.7, 2.6, 1.2, 1.8, 2.2, 3.3, 3.7, 3.6,  #>     3.8, 2.8, 2.9, 2.6, 3.6, 3, 2.6, 3.3, 3.2, 3.8, 3.2, 3, 2.5,  #>     2.7, 3, 2.4, 3.6, 2.8, 3.5, 3.3, 2.7, 3.2, 2.9, 2.8, 3.7,  #>     3.1, 2.6, 2.8, 2.1, 3.9, 2.5, 1.9, 3.1, 3.4, 3.6, 1.5, 3.3,  #>     2.4, 2.8, 3.1, 3.8, 3.7, 3.9, 3.4, 3.5, 2.8, 2.5, 3.3, 1.8,  #>     3.6, 2.9, 1.7, 3.3, 3.2, 3.4, 2.9, 3.8, 3.2, 2.5, 1.8, 3.4,  #>     3.1, 2.4, 3.6, 3.7, 3.3, 2.7, 1.5, 1.8, 3.3, 2.1, 3.4, 3,  #>     2.1, 2.5, 3.2, 3.2, 1.9, 2.9, 2.8, 3, 3.1, 3.2, 2.8, 3.4,  #>     1.5, 3.4, 3.5, 3.9, 2.6, 3.5, 3.5, 3.4, 3.4, 3, 3.4, 3.4,  #>     3.1, 2.5, 1.8, 3.1, 2.9, 3.8, 3.5, 2.5, 2.2, 2.5, 2, 3.3,  #>     2.4, 3.4, 3.7, 2.1, 1.7, 3.8, 3.2, 2.1, 2.9, 3.6, 3.2, 2.8,  #>     3.4, 2.4, 3.6, 3.8, 2.2, 2.7, 2.9, 1.2, 1.5, 3, 3.4, 3.4,  #>     2.4, 3.6, 3.4, 2.7, 3.1, 3, 3.6, 2.2, 2.4, 3.4, 3.3, 3.2,  #>     3.1, 1.4, 1.7, 3.4, 2.1, 2.4, 3.3, 3, 2, 3.5, 3.2, 3.3, 3,  #>     3.6, 2.8, 3.6, 1.9, 2.6, 3.8, 3.1, 2.6, 3.3, 3.1, 3, 2.7,  #>     1.6, 3.6, 2.7, 1.7, 2.9, 3.5, 3.2, 3.2, 3.3, 1.9, 2.3, 3.4,  #>     2, 3, 2.5, 3.1, 3.5, 2.5, 3.2, 3.1, 2.7, 2.7, 2.2, 2.3, 2.8,  #>     3.3, 3.8, 3.4, 2.9, 3, 2.7, 3.4, 2.9, 3.8, 3.6, 3.1, 2.4,  #>     3.1, 3.4, 3.5, 3.6, 2, 2.6, 3.9, 2.4, 2.1, 2.9, 3.5, 3, 2.1,  #>     3.4, 2.1, 3, 2.8, 1.9, 2.2, 2, 1.4, 3.4, 3.3, 2.9, 2.7, 2.8,  #>     2.4, 3.6, 3.6, 2.4, 3.5, 3.1, 2.7, 3.1, 3.1, 1.5, 2.7, 2.4,  #>     3, 3, 3.5, 3.2, 3.3, 2.4, 3.3, 2.1, 2.9, 2.3, 3.6, 3, 3,  #>     1.2, 3.7, 1.7, 1.3, 2.8, 2.7, 3.4, 3.6, 3.4, 2.6, 2.7, 1.6,  #>     2.6, 0.9, 3.4, 3.2, 1.7, 3.2, 3.9, 3.6, 3.2, 2.3, 2, 3.3,  #>     3.1, 3.6, 2.5, 3.4, 2.8, 3.6, 3.5, 2.4, 2.6, 3.5, 3.4, 2.8,  #>     1.4, 2.7, 2.7, 3.4, 2.9, 3.1, 2.1, 1.4, 2.4, 3.4, 2.8, 2.8,  #>     3.1, 2.3, 3.2, 3.7, 3.2, 3.2, 3.3, 3.5, 3.3, 3.1, 3.5, 3.7,  #>     2.3, 3, 3.5, 3.6, 3.1, 2.4, 3, 3.7, 3.1, 3.4, 3.2, 1.8, 3.5,  #>     4, 2.6, 2.9, 3.5, 3.7, 3.9, 3.6, 2.2, 3.3, 3.3, 3.9, 2.8,  #>     3.5, 2.7, 2, 2.5, 2.7, 3.4, 1.8, 3.3, 3.7, 3.9, 3.4, 2.9,  #>     2.3, 2.7, 3.2, 2.8, 2.8, 3.4, 3, 3.1, 2.9, 2.4, 3.3, 3.7,  #>     3.2, 3.7, 2.5, 2.8, 3.1, 3.4, 1.9, 2.8, 2.2, 1.5, 2, 3.6,  #>     2.7, 3.1, 3, 2.6, 2.1, 3.3, 2.9, 3.3, 3.3, 2.7, 3.1, 3.3,  #>     2.2, 2.4, 3.6, 2.9, 3.4, 3.4, 3.4, 2.8, 2.9, 2.6, 3.1, 3.2,  #>     3.3, 2.5, 3.4, 2.9, 2.3, 1.7, 3.9, 1.7, 3.8, 2.3, 2.2, 2.7,  #>     2.8, 2.7, 3.3, 2.6, 1.9, 3.6, 3, 2.6, 1.3, 2.4, 3, 2.6, 2.8,  #>     3, 3.4, 3.8, 3.4, 2.9, 2.5, 3.4, 3.4, 2.5, 3.4, 3, 2.2, 3.6,  #>     2.5, 2.1, 2.4, 2.9, 2.3, 2.7, 2.5, 3.6, 2.7, 3.9, 2.7, 1.6,  #>     3.9, 3.6, 2.8, 1.8, 2.2, 2.4, 1.2, 2.3, 3.2, 3.7, 2.7, 2.9,  #>     2, 2.9, 3, 2.6, 3.1, 3.1, 2.1, 3.6, 3.4, 3.8, 3.7, 1.8, 1.8,  #>     2.7, 3.2, 3.5, 3.6, 2.6, 3.2, 3.9, 3.1, 3.8, 3.5, 1.8, 2.8,  #>     3.1, 3.1, 2.2, 1.8, 3.4, 3.3, 2.9, 3.7, 2.3, 3.3, 3.6, 2,  #>     3.4, 2.7, 2.8, 3.2, 2.9, 2.9, 1.8, 3.2, 1.1, 1.9, 3.6, 2.9,  #>     3.2, 3.8, 1.6, 2.6, 3.3, 2.2, 3.1, 2.6, 2.6, 2.7, 1.3, 0.6,  #>     3.2, 2.2, 2.5, 3.3, 3.6, 3.5, 2.5, 3.4, 3.7, 2.8, 3.7, 3.7,  #>     1.8, 1.9, 3.7, 2.8, 2.8, 2.5, 3.8, 3.7, 3.6, 1.3, 4, 3.5,  #>     2.3, 1.8, 2.7, 2.9, 2.6, 2.1, 2.8, 3, 2.4, 2.6, 2.7, 2, 3.5,  #>     2.4, 2.3, 2.3, 3.5, 2.9, 3.2, 3.1, 2.3, 2.2, 3.5, 2.9, 2.6,  #>     3.2, 1.5, 3.7, 2.5, 3, 3.2, 3.3, 3.1, 3.1, 2.7, 3.9, 1.1,  #>     2.4, 3.7, 3.3, 3.6, 3.4, 2.1, 2, 2.6, 2.6, 3, 3.5, 1.3, 3.5,  #>     3.8, 3.4, 2.2, 2.2, 3.4, 2.9, 1.5, 3, 3.7, 3.1, 3.3, 3.5,  #>     3, 2.7, 3.2, 3.9, 2.8, 2.1, 3.6, 3.4, 2.8, 3.7, 2.1, 2.7,  #>     3.7, 3.1, 2.7, 1.5, 2.5, 2.6, 1.8, 3.4, 3.5, 3, 3, 3.8, 2.4,  #>     3.2, 3, 2.9, 3.3, 0.9, 2.7, 3.8, 2.7, 1.3, 3.4, 3, 2.2, 3.1,  #>     3.1, 2.6, 3, 2.6, 2.5, 1.7, 2.7, 2.4, 0.8, 2.5, 3.9, 3.2,  #>     2.1, 3.5, 2.6, 2.9, 3.5, 2.5, 3.4, 3.5, 3.5, 2.9, 2.5, 3.4,  #>     3.9, 3.4, 3.9, 3.8, 1.9, 2, 3.3, 3.2, 3.2, 2.9, 1.5, 1.9,  #>     2.6, 2.3, 3.6, 3.1, 3.8, 2.7, 3.7, 1.8, 3, 3, 3.8, 1.9, 3.7,  #>     3.4, 1.6, 1.1, 2.8, 1.1, 3, 3.5, 3, 3, 3.4, 2.2, 2.3, 2.5,  #>     3.5, 3, 2.9, 2.3, 3.2, 1.9, 3.6, 3.2, 3.1, 3, 3.1, 2.9, 3.7,  #>     1.8, 3.5, 3.4, 3.7, 2.8, 3.1, 2.6, 3.3, 2.4, 3.3, 3.3, 3.5,  #>     2.1, 3.5, 3.2, 2.5, 3.3, 2.5, 2.5, 1.7, 2.3, 3.3, 2.9, 2.2,  #>     1.4, 2.1, 3.6, 2.4, 2.6, 3.3, 3.6, 2.8, 1.3, 1.9, 3.2, 2.8,  #>     2.5, 3.4, 2, 3.3, 2.4, 3.7, 2.4, 3.2, 2.9, 2, 2.7, 3.8, 2.3,  #>     3.3, 3.8, 2.3, 3.7, 3, 3.5, 2.5, 2.1, 1.9, 1.8, 3.4, 3.8,  #>     3.5, 3, 3.3, 2.9, 2.6, 1.8, 2.5, 3.1, 3.3, 3.7, 2.2, 3.1,  #>     2.4, 2.3, 3.3, 3.7, 3.8, 3.5, 3.5, 3.1, 3.6, 2.3, 2.2, 2.6,  #>     2.5, 3.2, 3, 3.3, 2.9, 3.5, 2.9, 3.3, 2.7, 2.5, 2.6, 2.6,  #>     2.4, 3.9, 1.8, 3.4, 3.6, 3.4, 2.9, 1.9, 3.1, 3.5, 4, 3.6,  #>     1.7, 2.3, 3, 2.7, 3.2, 2.5, 3.1, 3.5, 2.7, 3.9, 3.1, 2.1,  #>     3.1, 3.2, 2, 3, 3.1, 2.9, 3.8, 2.6, 3.7, 3.9, 3.5, 2.1, 3.1,  #>     3.7, 3.7, 2.5, 2.7, 2.3, 1.8, 3.6, 1.4, 3.6, 2.2, 2.4, 3.5,  #>     2.7, 2.7, 3.6, 3.1, 3.8, 3.4, 3, 3.2, 1.9, 2.3, 3.3, 3.5,  #>     3.4, 3.1, 2.7, 3.8, 1.9, 3.8, 3.6, 2.4, 1.5, 3.5, 3, 1.9,  #>     2.9, 2.4, 2.7, 3.3, 3.4, 2.9, 3.5, 3, 3.2, 3.9, 2.4, 2.4,  #>     3.2, 2.8, 3.3, 3.7, 1.9, 2.3, 3.3, 3.4, 3.6, 2.4, 3.7, 2.5,  #>     3.3, 1.7, 2.9, 2.8, 3.4, 1, 2.8, 2.9, 3.3, 2.7, 3.8, 3.3,  #>     2.3, 2.2, 3.5, 1.8, 2.9, 3.2, 3.1, 3.7, 3.3, 2.8, 1.9, 3.7,  #>     3, 3.1, 2.4, 1.6, 2, 3.6, 3, 2.9, 3.2, 3.3, 2.5, 2.5, 3.1,  #>     2.7, 2.4, 2.9, 3.2, 2.7, 3.7, 3.3, 3.6, 2.5, 1.4, 2.3, 3.1,  #>     3.4, 3.7, 3.3, 3.4, 3.2, 2.9, 3.5, 3.5, 3.1, 3.3, 3.6, 3,  #>     2.6, 3.5, 3.7, 3.5, 3, 2.9, 2.9, 2.2, 2.8, 3, 3, 3.2, 3,  #>     3, 2.6, 3.5, 2.8, 2.4, 2.2, 2.5, 3.7, 3.7, 3.7, 3.9, 3.8,  #>     3, 3, 3.2, 2.1, 3.8, 3.2, 3.2, 2.5, 3.1, 2.9, 2.5, 3.2, 1.3,  #>     2.9, 3, 1, 2.6, 3.3, 2.4, 1.8, 2.9, 3.8, 3.4, 1.6, 2.2, 3.5,  #>     3.6, 3.2, 1.3, 3.3, 1.2, 3.6, 2.8, 3.3, 3.1, 1.6, 1.7, 3.3,  #>     3.8, 2.6, 3.5, 3.6, 2.1, 2.7, 2.9, 2.1, 3.4, 3.4, 3, 3.1,  #>     2.4, 3, 2.8, 2, 1.9, 2.1, 2.4, 2.4, 3.3, 2.1, 1.4, 2.2, 3.1,  #>     2, 3.2, 3, 3.3, 3.1, 2.6, 3.6, 3.2, 2.2, 3.6, 2.8, 2.8, 2.6,  #>     3.2, 3.4, 2.8, 3.2, 2.4, 1.7, 3.3, 3.7, 3.1, 3, 2.1, 2.9,  #>     3.7, 3.8, 2.2, 2.3, 2.7, 2.1, 2.7, 3.4, 2.4, 3, 3.1, 3.2,  #>     3, 2.7, 3.7, 3.2, 3.6, 3.3, 3.2, 3.1, 3.3, 2.3, 3.7, 3.1,  #>     2.8, 3, 3.2, 3.2, 3.3, 3, 3.3, 3.2, 1.6, 2.9, 3.7, 3.7, 3.2,  #>     2.7, 2.7, 3.8, 2.4, 2.6, 3.3, 3.5, 3.2, 2.9, 2.5, 2.9, 3.3,  #>     2.1, 3.4, 3.4, 3.2, 3.8, 2.3, 2.9, 3.5, 3, 2.5, 3.4, 2.4,  #>     2.1, 3.3, 1.9, 3, 3.1, 3.3, 2.8, 3.8, 1.7, 3, 3, 3, 2.1,  #>     3.3, 3.1, 3, 2.8, 3.6, 2, 2.7, 2, 2.9, 0.9, 3.3, 3.5, 1.2,  #>     3, 2.5, 1.1, 3, 2.4, 3, 3.2, 3.5, 1.2, 2.4, 3.4, 2.6, 2.9,  #>     2.2, 2.4, 2.5, 3.3, 3.1, 2.9, 2.8, 3.3, 2.3, 3.1, 1.2, 1.9,  #>     3.6, 3.3, 3.5, 3.2, 3.3, 2.7, 3.4, 3.7, 2.7, 3.5, 2.3, 3,  #>     2.4, 2.4, 2.9, 2.6, 3.6, 2.1, 3.7, 3.1, 2.7, 3.1, 3.3, 2.3,  #>     2.5, 2.7, 2.8, 2.3, 3, 3.4, 3.4, 1.6, 3.8, 2.8, 3.3, 3.5,  #>     3.1, 3, 3.7, 3.2, 1.5, 2.9, 2.7, 2.6, 2.8, 1.1, 2.5, 2.8,  #>     2, 3.9, 3.5, 2.5, 2, 3.8, 2.2, 3.3, 3.1, 3.3, 3.3, 3.6, 2.5,  #>     1.4, 2.3, 3.8, 2.4, 3.6, 2.6, 1.5, 3.1, 2.3, 3.7, 2.8, 3.1,  #>     1.9, 3.7, 3, 2.9, 3.7, 3.2, 1.1, 3.4, 1.9, 3.1, 1.9, 2.7,  #>     2.9, 0.9, 3, 4, 2.7, 2, 2.1, 1.4, 2.8, 2.7, 2.2, 3.7, 2.8,  #>     2, 3.7, 2.4, 3.7, 2, 2.5, 2, 3.1, 3.3, 3.3, 1.9, 3.1, 3.3,  #>     1.7, 2.6, 2.6, 3.5, 2.1, 2, 1.8, 3.4, 3.9, 1.6, 3.4, 2.5,  #>     2.3, 3.8, 2.6, 2.8, 3.7, 2.4, 2.8, 3, 1.7, 2.7, 3.4, 2.4,  #>     2.9, 1, 2.9, 2.3, 3.3, 2.3, 2.9, 2.5, 3.3, 2.9, 2.1, 3.8,  #>     3.4, 2.4, 3.1, 3.6, 2.6, 2.7, 2.3, 3.6, 3.5, 2.6, 2.8, 2.1,  #>     3.7, 3.3, 2, 3.5, 3.5, 2.7, 2.1, 3.1, 3.1, 2.5, 2.8, 2.6,  #>     3.1, 1.4, 2.6, 1.8, 3.3, 2.2, 3.1, 2.8, 2.5, 2.4, 2, 3.6,  #>     2.3, 3.8, 2.1, 2.9, 2.1, 2.4, 3.1, 3.3, 3.9, 2.1, 2.8, 2.5,  #>     2.7, 3.6, 3.2, 3.3, 1.6, 2.5, 2, 2.7, 3.6, 2.8, 3.5, 3.2,  #>     3.3, 3.4, 3.6, 2.1, 2.8, 2.5, 2.9, 2.8, 2.2, 1.8, 3, 2.6,  #>     2.1, 2.3, 3.1, 2.2, 3.3, 2.4, 2.9, 2.8, 2.3, 2.1, 3.1, 3.3,  #>     3.1, 3.9, 3.5, 2.8, 1.9, 3.2, 3.6, 2.5, 2.6, 3.2, 3.1, 2.9,  #>     2.8, 2.6, 3.8, 2.8, 2.1, 3.5, 2.9, 2.5, 2.2, 1.1, 3.6, 2.9,  #>     3.6, 2, 3.7, 3.7, 3.4, 2, 3.8, 1.9, 3, 3.4, 3.2, 3.1, 2.6,  #>     3.4, 3.3, 1.6, 3.7, 3.1, 3.1, 2.8, 3.3, 0.9, 3.4, 3, 3, 2.4,  #>     3.4, 3, 3.6, 3.8, 2.4, 3.8, 2.4, 2.5, 3, 3.5, 2.9, 1.5, 3,  #>     2.5, 3.4, 3.1, 2.4, 3.4, 2.2, 2.4, 3.8, 3.1, 3.1, 3.3, 2.7,  #>     2, 2.4, 2.5, 3.4, 3.4, 3.7, 3.7, 2.7, 3.4, 3.7, 3.6, 2, 3.3,  #>     2.6, 3.2, 3.2, 3.3, 2.5, 3.4, 2.5, 3.2, 3.7, 3.4, 3.6, 1.8,  #>     1.7, 2.5, 2.4, 3.1, 2.6, 3.4, 3.1, 2.7, 2.8, 3.2, 3.1, 1.5,  #>     2.5, 3.2, 2.9, 3.5, 3, 2.5, 2.5, 3.3, 3.8, 3.4, 3.1, 1.8,  #>     3, 2.9, 1.8, 2.6, 2.5, 3.7, 2.7, 3.1, 3.5, 2.4, 3, 3.2, 1.6,  #>     2.7, 3.5, 1.5, 2.3, 2.7, 3.6, 3.9, 3.3, 3.5, 2, 3.1, 2.6,  #>     3.2, 3.7, 2.9, 3.1, 2.3, 3.3, 2.4, 3.2, 3.1, 3.6, 3.2, 3.9,  #>     1.2, 2.9, 3.2, 3.3, 2.1, 3.2, 2.7, 3.1, 2.7, 2.7, 3.5, 2.9,  #>     1.4, 3.8, 3.7, 2.3, 2, 2.1, 2.5, 2, 3.9, 3.3, 3.2, 3.1, 2.7,  #>     2.6, 3.5, 1.8, 2.1, 3.3, 3.7, 3.5, 1.6, 2.5, 2, 2.3, 2.8,  #>     2.2, 3.3, 3.5, 2.9, 3.2, 3.5, 2.3, 2.6, 2.6, 3.1, 3.3, 2.4,  #>     2.8, 1.9, 3.3, 3.9, 2.9, 2.5, 2.9, 2.9, 3.3, 3.4, 2.2, 3.1,  #>     2.2, 2.8, 3, 3.5, 2.7, 2.7, 1.7, 3.1, 1.5, 3.3, 3.3, 3.8,  #>     3.3, 2.2, 3.9, 2.3, 3.2, 1.6, 3.7, 3.2, 3.5, 3.7, 1.8, 3.7,  #>     3.6, 1.3, 2.1, 1.8, 2.5, 3.1, 3.9, 2.8, 3.1, 2.9, 3.2, 2.7,  #>     2.8, 2.4, 2.9, 3.5, 2.5, 2, 3.1, 3, 3.6, 3.9, 3.1, 3.6, 2.3,  #>     2.3, 1.8, 1.7, 1.8, 2.7, 3.5, 2.7, 2.6, 1.8, 2.7, 3.1, 3.1,  #>     3, 3.5, 2.4, 2.7, 2.6, 2, 3.7, 3.4, 3.6, 2.5, 2.7, 2.4, 2.6,  #>     2.2, 3.9, 3.1, 3.2, 1.8, 3.7, 2.5, 2.9, 3.2, 3.1, 3.1, 3.9,  #>     3.5, 3.1, 2.2, 3.8, 3, 3.8, 3.4, 3, 3.1, 2.7, 1.4, 3.2, 3,  #>     2.7, 2.8, 3.5, 3.2, 3, 2.2, 3.7, 3, 3, 3.8, 2, 3.5, 2.8,  #>     3.1, 2.6, 1.6, 2.8, 2.7, 2.2, 2.3, 4, 2.7, 2.6, 3.6, 3.4,  #>     2.8, 3.9, 2.2, 3, 1.7, 2.8, 3.6, 1.2, 3.2, 1.6, 3.6, 1.4,  #>     1.6, 2.8, 2.8, 3.6, 3.8, 3.4, 2.7, 3.2, 1.9, 2.7, 3.7, 3.7,  #>     1.3, 3.2, 2.8, 1.9, 2.1, 2.4, 2.4, 2.3, 3, 2.5, 2, 2.5, 2.4,  #>     2.6, 1.4, 1.6, 3.2, 2.9, 3.2, 3.1, 2.9, 1.3, 2.8, 2.5, 2.9,  #>     3.4, 1.7, 3.1, 2.7, 3.2, 1.4, 3, 3, 3.5, 3.2, 3.3, 1.9, 0.6,  #>     3.9, 3.2, 2.9, 2.6, 3.6, 2.6, 1.9, 3.3, 2.9, 3.2, 2.2, 3.1,  #>     3.5, 3, 3.2, 2.6, 3.3, 3.2, 2.8, 2.7, 1.4, 3.6, 1.7, 2.3,  #>     2.7, 3.2, 3, 3.7, 3.2, 3.5, 3.2, 3.2, 3.3, 2.5, 3.9, 3.5,  #>     3.1, 2.8, 2.9, 3.5, 3.9, 2.9, 2.6, 3.4, 2.7, 3.6, 1.7, 3.7,  #>     3.1, 3.8, 2.3, 2.8, 3.4, 3.1, 2.8, 2.9, 2.6, 2.9, 3.4, 3.6,  #>     3.1, 3.2, 3.9, 3, 2.8, 3, 3, 2.9, 2.5, 3, 2.6, 3.4, 3.6,  #>     3.2, 2.7, 3.3, 3.1, 2.7, 1.5, 1.1, 2.8, 3.8, 2.1, 2.4, 3.2,  #>     3, 3.3, 3.1, 3.5, 2, 3.3, 1.9, 2.4, 1.6, 3.5, 2.1, 3.8, 3.2,  #>     3.2, 2.8, 3.5, 3.9, 1.6, 2.6, 2.1, 3.1, 2, 2.7, 3.2, 3, 2.9,  #>     3.7, 3.6, 3.3, 2.9, 3.1, 3.6, 3.1, 2.7, 3.7, 2.9, 3.6, 2.5,  #>     1.8, 3, 3.8, 2.8, 2.8, 2.4, 1.2, 1.5, 3.6, 2.6, 3.5, 3.5,  #>     2.9, 2.4, 3.6, 2.1, 3.3, 3.4, 3.7, 2.4, 3.1, 2.9, 3.3, 3.4,  #>     3.2, 3.4, 3.6, 3.4, 2.2, 2.6, 2.7, 3.8, 2.7, 2.8, 3.5, 3.1,  #>     3.5, 2.7, 3.4, 3.6, 2.4, 2.9, 2.3, 3.6, 3.1, 3.2, 2.8, 2.3,  #>     3.1, 2.8, 3.4, 3.7, 2.4, 3.8, 2.7, 2.9, 3.6, 3.2, 3.8, 2,  #>     2, 1.8, 2.7, 2.9, 2, 3.8, 3.3, 2.9, 3.8, 3.6, 1.9, 2.7, 1.5,  #>     2.9, 3.9, 3.3, 3.6, 3.5, 3.7, 3.2, 3.3, 2.9, 2.4, 3.2, 3.6,  #>     2.7, 3.5, 2.4, 2.5, 2.6, 3.2, 3.1, 3.8, 2.1, 2.1, 1.5, 3.3,  #>     2.5, 3.2, 3.6, 2.4, 3.5, 3.3, 2.1, 2.7, 3.4, 2.7, 3.6, 3.1,  #>     1.2, 3.6, 2.9, 2.5, 2.9, 2.7, 2.8, 3.5, 2.6, 2.9, 2.9, 3.7,  #>     3.8, 3.3, 1.3, 2.8, 3.1, 3.8, 2.4, 3.9, 3.6, 2.1, 3.6, 2.9,  #>     2.1, 1, 2.7, 2.1, 3.4, 1.8, 2.9, 2.3, 3.7, 2.6, 2.8, 3.2,  #>     3.4, 1.5, 3.2, 3.9, 2.9, 3.3, 2.5, 2.7, 3.2, 3.8, 2.4, 2.8,  #>     3.4, 2, 3.3, 3.4, 3.4, 3, 1.6, 3.4, 3.6, 2.8, 3.1, 3.4, 2.9,  #>     3.2, 3.2, 2.6, 2.5, 1.9, 2.1, 3.3, 2.9, 3.9, 2, 3.5, 2.2,  #>     3.3, 3.6, 2, 3.8, 2.8, 3, 3.1, 3.5, 3.2, 3.4, 3.3, 2.7, 3,  #>     2.9, 3.2, 1.7, 3.2, 3.9, 3, 2, 3.5, 3.9, 1.9, 2.5, 3, 3.5,  #>     3.9, 2.6, 3, 3.9, 2.3, 3.4, 3, 3.3, 3, 3.4, 3.2, 3.3, 2.4,  #>     2.1, 3.6, 2.8, 2.1, 3.3, 2.5, 3, 3.6, 2.7, 1.8, 3.2, 3.6,  #>     2.8, 2.2, 3.2, 3.3, 1.4, 3.2, 2.7, 1.7, 3, 2.4, 0.9, 2.6,  #>     3.2, 3.5, 3.1, 2.9, 2.3, 3.4, 2.7, 3.8, 3, 3, 3.2, 2.8, 2.9,  #>     2.5, 2.9, 3.9, 3.5, 1.6, 3.1, 1.8, 3.5, 3.2, 2.2, 2, 3.2,  #>     3.6, 2, 3.1, 3.4, 2.2, 2.2, 3.3, 2.9, 3.3, 2, 2.4, 3.3, 1.7,  #>     3.3, 2.1, 2.1, 3.1, 3.3, 1.6, 2.8, 2.8, 2.9, 3.1, 3.2, 1.8,  #>     3.1, 1.1, 3.6, 2.7, 3.8, 2.9, 3.3, 2.2, 2.8, 3.3, 2.7, 2.8,  #>     2.1, 3.7, 2, 2.8, 3.6, 2.2, 1.1, 2.1, 3.5, 3.1, 3.3, 2.9,  #>     2.7, 3.5, 2.7, 3.8, 3.4, 2.1, 3, 3.3, 3, 2.3, 3.4, 3.8, 2.4,  #>     2.5, 1.7, 2.8, 3.6, 3.4, 1.3, 3.2, 3.1, 2.6, 3.4, 3.2, 2,  #>     2.9, 3, 2.3, 3.4, 2.2, 2.4, 3.2, 3, 3.1, 2.9, 1.9, 1.1, 3.1,  #>     2.1, 3.4, 3.8, 2.2, 3.6, 3.6, 3.1, 3.3, 3.2, 3.3, 3.4, 3.3,  #>     2.7, 1.2, 3.1, 2, 3.2, 3.4, 3.4, 2.5, 2.8, 3.3, 1.8, 1.3,  #>     3.6, 3.1, 0.9, 2.4, 3.2, 2.7, 3.1, 3.4, 3.2, 2.6, 2, 2.7,  #>     3.1, 3.5, 3.2, 1.8, 1.5, 3.1, 3.2, 2.9, 3.6, 2.8, 3.6, 3.3,  #>     3.4, 2.9, 2.7, 2.4, 2.4, 2.9, 2.4, 3.1, 3.1, 3.1, 1.6, 2.6,  #>     1.4, 3.5, 2.7, 3.6, 3, 2, 3.2, 3.8, 3.1, 2.1, 1.9, 3, 2.5,  #>     3, 3.4, 3.4, 2.5, 3.2, 3.2, 2.8, 2.6, 2.5, 3.3, 3, 2.5, 2.2,  #>     2.8, 2.6, 1.7, 3.6, 2.7, 3, 3.5, 2.7, 3.1, 2.4, 2.8, 3.6,  #>     3.4, 3.4, 2.4, 2.8, 2.6, 2.8, 2.9, 2.7, 2.4, 2.3, 3.8, 3.1,  #>     1.4, 2.8, 3.7, 2.3, 1.7, 2.7, 1.5, 2, 3.5, 2.9, 3.2, 2.4,  #>     3.8, 2.8, 3.1, 1.6, 1.7, 3.5, 2.9, 2.4, 3, 3.8, 3.2, 3.4,  #>     3.2, 3.7, 3.1, 3.5, 2.6, 2.2, 2.8, 2.3, 2.3, 2.6, 3.8, 3.2,  #>     3.6, 3.7, 3.1, 1.5, 3.6, 2.2, 3.6, 2.1, 2.7, 3.8, 3.4, 2.9,  #>     2.6, 3.5, 2.9, 3.2, 1.7, 2.9, 3.5, 3.4, 2.5, 3, 2.2, 3.2,  #>     3.5, 3.4, 3.5, 3.7, 1.2, 3.5, 2.8, 3, 2.5, 2.1, 2.6, 2.6,  #>     2.4, 3.2, 3.3, 3, 3.1, 2.9, 3.6, 3.8, 3.2, 3.5, 2.9, 3.6,  #>     2.6, 2.5, 2.8, 2.1, 2.6, 2.1, 3.2, 2.7, 2.1, 2.4, 3, 3.9,  #>     2.4, 1.8, 2.7, 3.3, 3.4, 3.4, 2.2, 3.8, 3.3, 3.5, 3.7, 1.7,  #>     1.7, 3, 3.4, 2.6, 3.1, 2.9, 3.1, 3.1, 2.9, 3.8, 2.3, 3.3,  #>     1.4, 3.8, 3.6, 3.5, 2.7, 3.6, 3.5, 2.5, 3.3, 3.2, 3.7, 2.5,  #>     2.3, 3.1, 3.4, 3.6, 2.6, 3.5, 3.8, 3.7, 2.9, 3.6, 3.6, 2,  #>     3.5, 2.8, 2.1, 2.1, 2.6, 3.4, 1.5, 1.8, 3.2, 3.5, 3.8, 2.5,  #>     3.7, 2, 2.8, 3.6, 2.2, 2.4, 2.4, 2.7, 2.6, 3.4, 2.9, 2.5,  #>     3.1, 2.4, 3.7, 2.4, 3.8, 3.7, 3.2, 3.3, 3.5, 1.7, 3.4, 3.8,  #>     2.9, 3.6, 3.5, 3.6, 2.5, 2, 3.6, 2.9, 3.7, 2.9, 2.9, 2.8,  #>     3.2, 3.5, 2.8, 2, 3.1, 1.4, 1.7, 1.4, 3.4, 3.1, 2.9, 2.8,  #>     3.6, 3.2, 2.9, 3.8, 2.4, 2.3, 3, 3.2, 2.8, 2.9, 2.3, 2.8,  #>     2.6, 1.4, 1.8, 3, 3.6, 2.5, 2.5, 2.9, 2.1, 2.7, 3, 0.9, 2.9,  #>     3.5, 3.2, 2.3, 3.6, 3, 2.2, 3.8, 3.5, 2.7, 2.2, 3.5, 2.7,  #>     2.2, 3.1, 3.1, 2.9, 1.8, 1.6, 1.2, 2.2, 1.6, 3.5, 2.3, 3.7,  #>     3.6, 3.1, 2.3, 2, 2.4, 2.6, 3.5, 3, 2.9, 2.8, 3.6, 3.1, 2.3,  #>     2.1, 4, 3.2, 1.5, 2.9, 3.9, 2.8, 2.9, 3.3, 3.4, 3.4, 2.6,  #>     3.2, 2.5, 2.8, 2.9, 2.2, 2.8, 3.3, 3.3, 3.5, 2.8, 3.3, 3.1,  #>     2.9, 2.7, 3.1, 2.2, 2.3, 3.4, 3, 2.1, 2.5, 1.7, 3.7, 2.4,  #>     2.4, 2.3, 2.8, 3.8, 2.9, 2.7, 2.1, 1.7, 3.2, 3.6, 3.8, 2.7,  #>     1.9, 1.3, 3.6, 2.2, 2.8, 1.7, 3, 2.6, 1.5, 3.8, 2.1, 3.1,  #>     3.3, 2, 3.6, 3.3, 2.1, 3.1, 3.6, 3.3, 3, 3.2, 2.7, 3, 2.8,  #>     3, 2.3, 2.6, 2.9, 3.2, 3.1, 1.8, 2.6, 2.4, 3.4, 3.4, 2.5,  #>     3.3, 2.4, 3.6, 3.1, 3.8, 3, 3.5, 2.8, 3.5, 2.8, 3.1, 3.1,  #>     3, 2.9, 3.2, 1.7, 1.7, 3, 2.1, 3.3, 2.6, 3.3, 3.2, 2.5, 2.4,  #>     3.4, 2.4, 3.7, 2, 2.8, 3.6, 3.7, 2.9, 2.6, 3.1, 2.7, 3.5,  #>     3.2, 3.6, 3.6, 2.4, 3.4, 3.6, 3, 3.4, 3.3, 3.5, 2.2, 3.2,  #>     2.8, 3.2, 1.5, 3.4, 2.7, 2.8, 3.1, 3.2, 2.3, 3.4, 3.5, 3.8,  #>     2.5, 3.5, 2.4, 3.9, 3.2, 3.1, 3.8, 3.7, 3.5, 3.4, 2.6, 3.6,  #>     2.7, 3.7, 2.8, 3.7, 3.5, 3, 3.2, 3, 2.7, 2.7, 2.5, 3.2, 3.3,  #>     2.9, 3.3, 3.1, 3.8, 3.2, 3.6, 2.5, 3.8, 3, 3.3, 3.7, 3.2,  #>     2.6, 2.7, 3.7, 2.2, 2.6, 2.9, 2.8, 2.3, 1.9, 2.3, 2.5, 2.3,  #>     2.8, 1.3, 3.7, 3.7, 2.6, 3.8, 1.5, 3.8, 3.1, 3.5, 2.9, 2.3,  #>     3.7, 3, 3.5, 2.5, 3.2, 2.8, 2.2, 2.7, 2.4, 3.6, 2.8, 2.4,  #>     2.7, 2.5, 3.7, 2, 3.5, 3.1, 2.9, 3.7, 0.9, 2, 2.9, 2.7, 3.3,  #>     2.4, 3.6, 1.4, 2.5, 2.4, 3, 3.3, 2.2, 3.7, 3.1, 3.2, 3.2,  #>     3, 2.3, 3.1, 2.3, 3.8, 3, 3.2, 3.7, 2.9, 2.4, 2.8, 2.2, 3.1,  #>     3.1, 1.6, 3.8, 3.5, 3.2, 2.9, 3.4, 2.5, 3.3, 3.4, 2.1, 3.5,  #>     2.6, 3.3, 2.4, 2.7, 2.3, 2.4, 2.7, 3, 1.7, 2.1, 2.6, 2.8,  #>     3.5, 2.1, 1.9, 2.5, 2, 3.2, 2.1, 3.6, 3.4, 1.6, 2.5, 1.6,  #>     3.2, 3.4, 2.9, 2, 3.1, 2.9, 2.4, 2.5, 3.5, 3.2, 2.4, 3.2,  #>     3.2, 2.7, 2, 2.4, 3.4, 3.3, 3.4, 3.6, 3.8, 2.6, 2.2, 2.3,  #>     3.2, 3.2, 3.2, 3.7, 3, 3, 3.2, 3, 1.7, 2.6, 3.3, 3.5, 3.5,  #>     2.8, 3.3, 3.8, 2.9, 2.5, 2.5, 2.5, 3.6, 3.2, 2.9, 2.1, 2.5,  #>     2.7, 1.1, 1.8, 3.9, 2.7, 2.9, 1.5, 3.7, 2.8, 1.3, 3, 3.6,  #>     2.8, 3, 2.8, 3.8, 2.9, 3.3, 2.5, 1.4, 3.2, 2.9, 2.9, 3.3,  #>     3.8, 2, 2.9, 2.6, 2.5, 2.4, 3.8, 3.1, 3.8, 1.9, 3.2, 2.8,  #>     3.3, 3.8, 3.3, 1.2, 2.1, 1.9, 1.3, 3.6, 2.9, 3.3, 3.6, 2.1,  #>     2.7, 2.5, 3.2, 3.8, 2.9, 2.8, 3.1, 2.5, 3.9, 3.4, 3.1, 2.4,  #>     2.4, 2.3, 2.7, 2.5, 2, 3.1, 3.2, 3.8, 2, 3.6, 3.2, 3.6, 3.5,  #>     2.3, 2.6, 3.2, 2.8, 2.7, 3.6, 3.3, 3.7, 2, 2.9, 3, 3, 3.1,  #>     2.6, 3.1, 3, 2.2, 3.1, 3.4, 1.7, 2.3, 2.4, 0.6, 1.8, 3.3,  #>     3.7, 3.5, 2.3, 1.7, 3.8, 3.2, 3.2, 3.4, 2.6, 2.7, 3.7, 3.1,  #>     1.9, 3.5, 2.3, 2.9, 2.3, 1, 1.9, 2.1, 2.7, 2.6, 3.4, 2.9,  #>     2.9, 3.1, 2.8, 2.8, 2.8, 2.5, 3, 3.5, 3.5, 1.5, 2.7, 3.8,  #>     3.4, 3.1, 3.1, 2.9, 3.7, 3.4, 3.3, 2.9, 3.2, 2.4, 2.3, 2.9,  #>     2.8, 1.9, 1.8, 2.4, 1.8, 2.4, 2.3, 2.2, 1.9, 3.2, 2.8, 3.2,  #>     2.8, 2.8, 2.3, 1.7, 2.4, 3.6, 2.1, 3.4, 2.8, 3.5, 1.6, 2.9,  #>     2.5, 0.9, 3.6, 3, 3.8, 2.4, 2.7, 2.4, 3.1, 3.2, 3.1, 2.3,  #>     3.1, 3.6, 2.7, 2.3, 3.5, 3.1, 3.6, 2.4, 3.9, 2.2, 2.7, 3.6,  #>     3.2, 3.7, 3.2, 2.3, 2.9, 2.8, 1.6, 3, 2.7, 3.1, 2.7, 2.9,  #>     3.3, 3.4, 3, 1.6, 3.8, 1.8, 2.2, 3.5, 2.8, 3.2, 2.8, 3.7,  #>     2.4, 1.7, 2.5, 3.6, 3.7, 3.4, 1.7, 3.6, 1.5, 2.4, 2.6, 3.3,  #>     2.9, 2.2, 2.5, 3.2, 3.5, 2.6, 2.3, 3.2, 1.5, 1.1, 2.7, 2.9,  #>     2.5, 2.1, 3.5, 3, 3.8, 2.8, 3.7, 3.6, 3.2, 3.4, 3, 3.5, 3.3,  #>     2.6, 2.7, 2.9, 3.8, 2.6, 2.5, 1.8, 3.1, 2.6, 2.9, 3.5, 3.2,  #>     1.6, 3.6, 2.4, 1.9, 2, 2.1, 4, 3.1, 2.4, 2, 3.4, 3.9, 2.6,  #>     2.8, 2, 3.5, 3.1, 3.4, 3, 2.7, 1.4, 1.2, 2.5, 3.2, 2, 1.9,  #>     2, 3.7, 3.7, 1.7, 3.1, 2.4, 2.9, 2.4, 2.8, 3.8, 1.4, 1.3,  #>     3.3, 1.6, 3.3, 3.6, 2.5, 3.2, 2.9, 2.8, 3.2, 2.4, 3.5, 3.2,  #>     3.5, 3.5, 2.6, 3.2, 3.2, 2.5, 3.7, 3.3, 3.1, 2.4, 2.6, 2.3,  #>     3.6, 3.3, 2.8, 3, 3.5, 3.8, 2.5, 2.2, 3, 3.5, 3.6, 3, 3.9,  #>     2.8, 1.5, 2.7, 3.1, 3, 3, 3.3, 2.9, 1.4, 3.1, 2.6, 3.4, 3,  #>     1.4, 2.6, 2.1, 3, 2.7, 3.7, 3.4, 1.8, 3.2, 2.7, 1.5, 3.2,  #>     3.6, 3.6, 2.9, 2.7, 3.5, 3.8, 1.9, 3, 2.5, 3, 2.9, 3.3, 3.1,  #>     2.9, 3.8, 2.3, 3.3, 3.1, 3.6, 2.2, 3.2, 2.7, 3.5, 2.9, 2.1,  #>     1.7, 2, 2.8, 3.7, 3.6, 3.8, 2.1, 2.4, 3.5, 3.3, 3.2, 2.7,  #>     3.5, 2.5, 3.7, 1.8, 3.3, 2.4, 1.6, 3.2, 3.7, 2.8, 3.4, 2.1,  #>     2.5, 1.8, 2.5, 3, 1, 2.6, 2.6, 3, 2.5, 3.6, 2.7, 2.2, 1.9,  #>     3.7, 3.2, 3.3, 3.7, 2.6, 3, 2.8, 2.9, 2.5, 2.4, 2.6, 3.2,  #>     3.3, 2.9, 2.2, 3.5, 3.2, 2.3, 2.7, 2.4, 3.2, 3.7, 3.4, 3.8,  #>     3.1, 3.2, 2.2, 2.6, 2.8, 3.9, 3.4, 1.7, 2.9, 3.2, 3.3, 3.7,  #>     1.2, 2.4, 3, 2.3, 2.6, 4, 2.5, 2.3, 2.5, 3.4, 2.8, 1.8, 3.7,  #>     1.8, 3.2, 3.2, 3.1, 2, 2.6, 3.5, 2.1, 3.4, 2.2, 2.6, 3.1,  #>     2.6, 2.4, 2.2, 2, 3.3, 2.8, 3.4, 2.9, 1.7, 2.4, 2.2, 2.5,  #>     1.5, 2.6, 4, 3.7, 3.4, 3.7, 2.7, 3.2, 3.3, 2, 3.6, 3.4, 2.1,  #>     3.2, 2.9, 3.4, 3.6, 2.8, 3.5, 1.4, 3.2, 3.2, 2.8, 3.2, 2.7,  #>     2.9, 2.7, 1.3, 3, 2.7, 3.4, 3.5, 3.6, 0.6, 2.8, 3.6, 1.9,  #>     1.6, 3.4, 2.7, 3.6, 3.2, 2, 3.6, 2.8, 2.5, 3.1, 1.6, 3.6,  #>     2.3, 3.5, 2.4, 3.2, 2.8, 3, 3, 2, 3.2, 3.3, 3.7, 2.8, 3.1,  #>     1.8, 1.9, 2.7, 3.2, 3.3, 2.7, 3, 3.3, 3.8, 1.8, 1.6, 3.3,  #>     2, 2.8, 3.2, 2.4, 3.3, 3, 2.1, 3.6, 2.3, 3.1, 3.6, 3, 2.9,  #>     3.6, 1.6, 2.8, 2.9, 1.6, 2.4, 2.4, 2.5, 1.7, 3.1, 2.6, 3.1,  #>     2.8, 2.3, 1, 2.7, 2.1, 3.4, 3, 2.1, 3.6, 3.4, 3.8, 3, 3.5,  #>     2.7, 3.5, 3.5, 3.5, 2.5, 1.7, 2.5, 3.1, 2, 2.4, 3.1, 3, 2.4,  #>     2.9, 2.6, 2.9, 2.1, 2.9, 3, 2.9, 3.6, 2.4, 3.5, 2.4, 1.9,  #>     3.2, 2.7, 3.5, 2.5, 2.6, 2.4, 3.7, 1.9, 1.8, 3.2, 2.7, 2.5,  #>     3.2, 2.6, 2.8, 3.5, 3.8, 3.1, 3.6, 2.9, 3.7, 1.8, 3.2, 3.1,  #>     3, 3.4, 3.6, 2.2, 3.8, 3.8, 1.9, 3.6, 3, 3, 3.1, 2.2, 3.2,  #>     2.1, 3.1, 2.9, 3.3, 3.2, 2.2, 2.7, 2.8, 3.7, 3.5, 3.5, 3.7,  #>     3.6, 2.5, 1.8, 3.1, 3.8, 2.4, 3.8, 3.1, 3, 3.8, 2.8, 2.9,  #>     3.4, 2.8, 2.8, 3, 1.7, 3.8, 2.3, 2.2, 3.5, 1.6, 2.8, 2.1,  #>     2.9, 3.7, 3, 2.3, 3, 2.7, 1.6, 2.9, 2, 3.3, 2.7, 2.9, 3.5,  #>     3.2, 2.9, 3.8, 3.3, 3, 3.1, 3.7, 2.5, 3.1, 2, 3.2, 3.3, 2.8,  #>     2.4, 2, 3.5, 3.6, 2.9, 2.5, 3.9, 2.1, 3.3, 2.9, 2.6, 2.8,  #>     3.3, 2.3, 2.6, 2.4, 3.1, 2.8, 2.1, 3.6, 3.5, 3.4, 2.3, 3,  #>     3.7, 3.5, 3.3, 1, 3.3, 3.8, 3.9, 3.3, 1.2, 2.5, 1.6, 3.2,  #>     3.6, 3, 1.9, 2.2, 1.5, 2.5, 2.4, 3.2, 3.4, 3.7, 2.4, 3.2,  #>     2.8, 3.4, 1.8, 2.9, 2.5, 2.3, 3.3, 3.2, 3.6, 3.4, 3.6, 2.7,  #>     3.3, 2.4, 3.6, 2.5, 3.5, 3.6, 3.8, 3.4, 3.6, 2.1, 1.7, 3.2,  #>     2.3, 3.1, 3.6, 1.6, 2.3, 3.4, 3.8, 3.9, 2.5, 2.6, 3.4, 3.5,  #>     3.3, 3.4, 3.6, 3.1, 1.6, 2.6, 3, 2.6, 3.1, 3.8, 3, 2.2, 3.4,  #>     2.6, 3.2, 1.4, 3.7, 2.8, 2.8, 3.3, 3.4, 3, 3.7, 3.4, 3.1,  #>     3.6, 2.3, 1.6, 2.3, 3.5, 3.7, 2.5, 2.8, 3.2, 1.3, 2.8, 3.2,  #>     3.6, 3, 3, 2.3, 1.7, 2.3, 2.8, 1.5, 1.8, 2.7, 2.9, 3.2, 3.2,  #>     2.6, 3.2, 3.1, 2.9, 3.1, 3.7, 3.8, 2.7, 2.9, 2.7, 3.2, 3.6,  #>     1.3, 2.7, 2.4, 3.3, 3.7, 2.5, 3.4, 1.5, 2.2, 3.4, 2.6, 3.4,  #>     3.2, 3.2, 2.8, 2.9, 3.4, 2, 3.4, 1.3, 2.9, 3, 3.4, 3, 2,  #>     3.6, 3.7, 2.7, 2.7, 2.4, 2.9, 2.5, 1.9, 3.8, 1.3, 3.6, 1.9,  #>     3.3, 2.9, 2.7, 3.7, 3.9, 2.7, 2.6, 2.3, 3.6, 3.7, 1.8, 2.2,  #>     3.2, 2.6, 3.7, 1, 2.8, 3.6, 3.5, 3, 3.5, 2.6, 3.4, 2.5, 2.2,  #>     3.6, 2.4, 3.5, 2, 3.3, 3.8, 2.4, 2.1, 2.4, 3.6, 3.1, 2.7,  #>     3.5, 3.3, 3.3, 3.5, 1.8, 3.2, 3, 3, 2.5, 2.8, 3.5, 2, 2.7,  #>     1.8, 2.2, 2.9, 3.7, 2.6, 3.6, 3.7, 3.6, 3.3, 2.3, 2.8, 2.3,  #>     3.8, 3.5, 3.5, 1.8, 2.6, 2.7, 3.2, 2.9, 3, 3.2, 3.5, 3.2,  #>     2.8, 3.3, 3.5, 1.8, 3.3, 3.5, 2.5, 2.2, 3.3, 3.5, 3.1, 3.4,  #>     3, 2.5, 3.6, 2.7, 1.6, 3.4, 2.6, 2.9, 3.6, 3.5, 3.8, 2.6,  #>     2.9, 3.6, 3.2, 2.1, 3.8, 3.5, 3.1, 2.5, 2.2, 2.4, 3.1, 3.2,  #>     3.3, 1.4, 2.4, 3.1, 3.5, 3.4, 3.3, 2.4, 0.9, 3.5, 3, 1.4,  #>     2.7, 2.9, 2.8, 3.5, 3.1, 3.6, 2.1, 2.4, 2.8, 2, 2.9, 2.9,  #>     1.9, 3.4, 2.2, 3.6, 3.1, 3, 3.5, 2.5, 3.8, 3.1, 2.1, 2.9,  #>     1.8, 3.6, 3.7, 2.6, 3.3, 3.6, 3.7, 2.7, 3.1, 3.3, 3.4, 3.3,  #>     3.8, 3.8, 2.6, 3.1, 2.4, 1.8, 2.2, 1.4, 2.1, 3.6, 2.5, 0.9,  #>     3.6, 2.4, 2, 2.3, 2.8, 2.6, 3.4, 1.1, 3.1, 1.2, 3, 2.5, 2.7,  #>     2.2, 3.6, 2.6, 3.5, 2.9, 3.8, 1.9, 1.6, 2.9, 2.5, 3.2, 3.2,  #>     3.8, 3.2, 3.2, 2.1, 3, 3, 1.8, 1.9, 3, 2.6, 3.4, 3.5, 1.4,  #>     2.1, 3.6, 2.7, 3.6, 2.4, 3.4, 2.4, 3.7, 2.7, 3, 3.3, 3.5,  #>     3.7, 1.2, 3.9, 2.9, 2.9, 2.9, 3.7, 2.7, 3.6, 3.2, 3.2, 3.1,  #>     2.9, 2.3, 2.8, 1.4, 3.4, 3.3, 3.4, 2.4, 3.6, 3.1, 3.6, 3.1,  #>     1.7, 3, 3.3, 3.7, 2.7, 3, 2.4, 3, 2.7, 3.6, 3, 2.3, 2.1,  #>     2.2, 1.4, 2.9, 2.2, 3.3, 2.5, 3.3, 3.5, 3.5, 2.6, 2.4, 2.4,  #>     3.3, 3.2, 2.9, 1.6, 3.2, 2.4, 3.7, 3.7, 2.6, 3.8, 2.2, 3.7,  #>     2.3, 2.5, 3, 2, 2.5, 3, 3, 2.6, 3.3, 3.4, 2.3, 2.6, 3.5,  #>     3, 1.6, 2.7, 3.4, 2.4, 3, 3.1, 2.8, 2.9, 3.4, 3.3, 3.4, 3,  #>     3.9, 1.1, 2.9, 3, 1.6, 2.9, 3.2, 3.2, 3.7, 2.5, 3.8, 2, 3.1,  #>     3.5, 3.3, 2.1, 1.9, 3.2, 2.8, 2.7, 2.6, 3.5, 2.8, 2.6, 3.2,  #>     3.4, 1.5, 1.9, 2.4, 3.5, 3.4, 2.3, 3, 1.5, 2.6, 3.7, 2.9,  #>     2.6, 3.3, 3.4, 3.6, 2.8, 1.8, 3.9, 1.8, 2.4, 3.8, 3.7, 3,  #>     2.8, 2.9, 1.8, 2.9, 3.4, 2.3, 1.7, 3, 3.6, 3.5, 3, 3.4, 3.6,  #>     3.9, 3.1, 2.4, 2.8, 2.2, 1.8, 3.3, 2.8, 3, 2.2, 2.6, 2.7,  #>     3.1, 2.6, 3.2, 2.4, 3, 2, 3.5, 2.4, 3.5, 3.2, 2.9, 2.2, 3.4,  #>     2.6, 2.8, 2.6, 1.9, 3.2, 2.9, 2.4, 2.8, 2.8, 3.1, 3.4, 3.7,  #>     3.1, 1.9, 3.4, 2.2, 2.9, 3.6, 2.3, 3.4, 3.4, 1, 1.8, 1.8,  #>     2, 3.6, 2.9, 3.2, 3.4, 2.5, 2.7, 2.7, 3.2, 3.3, 3.1, 2.8,  #>     1.5, 2, 3.7, 2.8, 2.6, 3.6, 2.5, 3.5, 3.3, 3.1, 2.2, 3.5,  #>     3.4, 3.4, 3.2, 2, 2.5, 3.3, 3, 2.6, 2.3, 2.2, 2.7, 3.5, 3,  #>     2.3, 2.4, 3.2, 3.6, 3.6, 1.1, 2.1, 2.4, 2.5, 2.9, 2.7, 1.8,  #>     2.7, 2.2, 3.1, 2.5, 1.2, 3.1, 2.1, 3.4, 2.5, 1.5, 3.4, 2.7,  #>     2.9, 3.1, 1.7, 3.2, 3.6, 2.7, 2.6, 2.5, 2.8, 3, 2.5, 3.1,  #>     3.7, 3.8, 3.1, 3.8, 3.1, 2.4, 3.5, 3.5, 2.7, 2.4, 3.2, 3.2,  #>     3.3, 3.2, 3.3, 3, 3.4, 2.7, 3.5, 2.6, 2.4, 3.7, 3.6, 1.6,  #>     3.1, 1.6, 2.9, 2.8, 2.4, 2.6, 2.5, 2.8, 2.6, 3, 2.8, 3.4,  #>     3, 2.4, 3.1, 3.7, 1.6, 3.3, 2.6, 1.7, 3.8, 2.9, 1.2, 2.1,  #>     3.1, 3.5, 3.5, 3.1, 2.6, 2.8, 3.7, 3.2, 3.2, 3.6, 1.6, 2.9,  #>     2.7, 3.9, 3, 3.3, 3.4, 3.5, 2.4, 3.6, 2.6, 3.3, 2.3, 1.6,  #>     3.7, 3.6, 2.9, 3.2, 3.7, 2.6, 3.4, 2.9, 3.8, 2.9, 3.1, 1.3,  #>     1.7, 2.5, 3.2, 3.1, 2.2, 2.4, 2.3, 1.3, 2.8, 3.2, 3.7, 3.9,  #>     2.5, 1.7, 2.4, 3.1, 2.7, 2.2, 3, 2.6, 3.4, 1.8, 2.8, 2, 2.9,  #>     3.7, 2.4, 3.8, 3, 3.3, 3.6, 2.3, 2.4, 2.1, 2, 3.1, 2.3, 2.2,  #>     3.7, 2, 3.4, 3, 2.8, 3.6, 3.3, 2.3, 3.1, 3.7, 2.8, 3.1, 3.1,  #>     3.4, 2.1, 3.5, 3.5, 3, 3, 3.4, 2, 2.7, 2.3, 1, 3.1, 3.3,  #>     2.9, 3.5, 3.2, 3.1, 3.7, 3.6, 3, 3.2, 3.4, 1.8, 3.1, 1.5,  #>     3.1, 3.4, 3.3, 3.5, 2, 2.1, 3, 2.7, 3.4, 2.9, 3.7, 3.5, 3,  #>     2.1, 3.3, 2.4, 3.3, 2.1, 2.9, 3.4, 3.6, 2.7, 3.1, 2.8, 0.8,  #>     3.3, 3.9, 3.5, 3.2, 3.1, 3.8, 1.6, 3.1, 2.9, 3.9, 1.8, 2.7,  #>     2.5, 2.7, 2.5, 1.8, 3.7, 3, 2.8, 2.5, 2.1, 3, 3.5, 3.3, 2.6,  #>     1.7, 2.7, 2.5, 1.9, 3.7, 2.1, 3.2, 3.5, 2.9, 2.8, 3.7, 3,  #>     2.6, 2.4, 2.8, 3.1, 3.6, 3.4, 1.7, 0.9, 3.7, 2.4, 2.7, 3.3,  #>     3.9, 3.2, 3.9, 3.3, 3.2, 2.2, 3.4, 3.5, 2.2, 3, 3.9, 2.7,  #>     3.5, 3.5, 3.4, 3.6, 3.2, 3.3, 3.6, 3, 2.7, 2.6, 2, 2.5, 2.6,  #>     2.9, 2.9, 1.7, 3.4, 3.3, 3.8, 3.5, 3.7, 1.7, 0.9, 2.6, 3.8,  #>     2.9, 2.8, 2.4, 2.4, 3.5, 3.2, 3.7, 3.7, 3.3, 3.1, 2.8, 1.5,  #>     1.2, 2.3, 2.7, 3.2, 3.6, 3.6, 2.6, 3, 1.6, 3, 2, 3.1, 3.5,  #>     3.6, 2.6, 2.3, 3.3, 3.1, 3.8, 3.5, 2.7, 3.2, 2.8, 2.4, 3.3,  #>     3.1, 1.3, 3.6, 3.1, 3.1, 3.1, 2.7, 2.2, 3, 1.7, 1.7, 2, 2.4,  #>     3.3, 2.8, 3.5, 2.6, 1.4, 3.3, 2.5, 2.9, 1.9, 3.7, 3.2, 3.2,  #>     3.1, 2.1, 2.3, 1.6, 2.9, 2.9, 3.8, 2.5, 1.8, 3.3, 2.5, 2.4,  #>     3.4, 2.9, 3.6, 1.9, 2.1, 2.7, 3.1, 2, 3.3, 2.9, 2.5, 2.7,  #>     2.7, 2.5, 3.9, 3.2, 2.7, 3.1, 3.3, 3.8, 1.6, 3, 3.5, 3.3,  #>     3, 2.8, 3.1, 3.6, 2.4, 3.2, 3.3, 3.5, 2.7, 2.2, 3.4, 2.7,  #>     2.8, 2.4, 3.8, 2.8, 3.7, 3.3, 3.3, 3.1, 3.3, 3.9, 3.3, 2.5,  #>     3, 2.2, 3.8, 1.2, 2.9, 3.3, 3.5, 3.3, 2.7, 3.7, 2.6, 2.9,  #>     2.8, 3.2, 1.7, 2.5, 3.5, 3.6, 2.8, 2.8, 2.3, 1.9, 2.8, 1.6,  #>     3.5, 2.7, 1.7, 3.5, 3.7, 2.5, 1.4, 2.7, 2.6, 3.3, 2.3, 2.8,  #>     2.4, 1.4, 1.7, 3.2, 3.3, 2.5, 3.1, 1.5, 3, 2.9, 3.1, 2.7,  #>     3.1, 3.3, 1.9, 2.4, 1.4, 3.1, 3.5, 3.6, 3.3, 3.5, 3.8, 3.7,  #>     3.3, 2.9, 3.2, 3.7, 3.4, 3.1, 1.9, 3.3, 1.7, 3, 2.5, 1.3,  #>     3.6, 3, 3.9, 3.1, 2.7, 3.4, 3.8, 2.1, 3.1, 2.4, 2.2, 2.8,  #>     2.7, 3.2, 3.2, 2.5, 2.3, 2.5, 3.9, 3.2, 2.7, 2.5, 2.5, 3.4,  #>     3.6, 2.7, 2.1, 2, 3.8, 3.6, 2.7, 3.5, 3, 3.3, 2.3, 3.4, 3.6,  #>     3.9, 2.9, 2.9, 3.2, 2.5, 2.6, 1.8, 2.9, 3.2, 2.7, 2.5, 3.5,  #>     3.7, 3.4, 3.5, 2.1, 3.4, 2.1, 3.4, 2.2, 2.8, 3.1, 2.8, 1.7,  #>     1.9, 3.7, 2.6, 2.1, 2.7, 2, 1.8, 2.5, 3.9, 2.4, 2.6, 2.7,  #>     2.5, 3.5, 3.6, 3.1, 3.8, 2.7, 3.4, 2.5, 3.2, 3.1, 3, 1.7,  #>     3.3, 2, 3.5, 3, 3.2, 3.3, 3.8, 2.9, 3, 3.5, 2.8, 2.5, 2.5,  #>     2.4, 2.7, 3.5, 2, 3.3, 2.9, 3.2, 2, 3.8, 2.6, 3.5, 3.7, 3.2,  #>     3.2, 2.8, 3.1, 2.9, 1.2, 3, 2.6, 1.3, 2.8, 1.7, 3.3, 3.1,  #>     3.2, 1.7, 3.8, 2.2, 1.6, 3.8, 2.1, 3.5, 2.9, 3.8, 3.6, 2.4,  #>     2.8, 1.5, 3, 3.8, 2.1, 3.1, 3.5, 2.4, 2.3, 3.1, 3.2, 2.9,  #>     3.6, 3.2, 2.7, 2.6, 3.5, 3, 1.9, 2.6, 1.4, 3.6, 0.5, 2.9,  #>     2.7, 3.1, 3.6, 3.4, 1.4, 3.2, 2.3, 1.7, 3.3, 2.7, 3.4, 2,  #>     1.5, 3.9, 2.4, 3.1, 1.6, 2.2, 3.4, 2.9, 3.1, 2.9, 2.9, 3.5,  #>     3.5, 3.3, 3.5, 3.1, 3.2, 3.5, 3.2, 2.9, 3.1, 2.8, 2.8, 2.4,  #>     2.5, 3.3, 3.3, 3.3, 3, 3.3, 1.8, 2.7, 3.9, 3.1, 3, 0.8, 3.3,  #>     2.9, 3.3, 2.6, 2.6, 3.1, 2.9, 2.4, 2, 2.3, 2.4, 3.3, 3.1,  #>     3.3, 3.7, 3.1, 3.5, 3.6, 3.6, 3, 3.1, 2.2, 2.1, 3.6, 3, 3.7,  #>     3.2, 1.7, 3.1, 3.3, 3.1, 3.7, 3.2, 1.7, 3.5, 2.3, 2, 2.5,  #>     3, 3, 2, 2.5, 1.6, 3.7, 3.7, 2.8, 3.1, 3.7, 2.1, 3.5, 2.7,  #>     1.9, 2.7, 1.4, 2, 3.3, 3.5, 3.7, 3.7, 3.3, 1.5, 2.7, 2.8,  #>     3.2, 3.8, 3.6, 2.9, 3.1, 3.6, 2.5, 2.4, 3.7, 3.1, 3.1, 2.9,  #>     3.9, 2.7, 1.5, 2.4, 2.5, 1.3, 2.5, 3.3, 3.8, 2.9, 2.5, 2,  #>     2.1, 3.4, 2.5, 3.3, 3, 2.9, 2.5, 3.9, 3.3, 2.9, 2.5, 3, 3.2,  #>     3.6, 2.9, 3.2, 1.5, 3.5, 2.4, 2.4, 1.7, 3.2, 1.9, 2.2, 2.6,  #>     2.9, 3.5, 2.4, 2.9, 3.7, 2.9, 3.8, 2, 3.4, 3, 2.9, 2.8, 2.9,  #>     2, 1.9, 2.7, 3.2, 3.5, 3.9, 3.8, 3.7, 3.3, 3.1, 3.4, 3.3,  #>     3.3, 3, 3.6, 1.7, 3.1, 2.5, 3.2, 2.6, 1.9, 2.6, 2.1, 2.6,  #>     2.8, 3.8, 1.8, 2.9, 3.3, 3.3, 2.9, 2.9, 3.4, 2.9, 3.3, 3.7,  #>     2.6, 3.4, 2.9, 3.1, 3.7, 2.1, 3.2, 3.6, 2.8, 2.6, 3.7, 3.8,  #>     1.9, 2.9, 2.2, 2.6, 2.7, 2.7, 2.7, 3.7, 2.4, 2.7, 2.9, 3.3,  #>     2.4, 2.3, 3.2, 3.1, 3.6, 2.9, 2.7, 3.2, 3.1, 1.9, 2.5, 2.5,  #>     2.5, 3.6, 3, 3.9, 1.9, 1.9, 2.2, 3.2, 2.4, 3.6, 2.6, 2.7,  #>     3.3, 3.2, 3.1, 0.9, 2.4, 3.4, 2.4, 3.8, 3.6, 2.7, 1.4, 3.1,  #>     3.7, 1.8, 2.3, 3, 2.9, 3.4, 3.2, 3.3, 2.9, 2.9, 1.7, 2.7,  #>     3, 2.4, 2.6, 3.1, 1.6, 2.6, 3.5, 2.7, 2.5, 3.5, 3.7, 2.4,  #>     1.7, 2.8, 3.6, 2.8, 2.8, 2.5, 2.9, 3.7, 2.4, 1.7, 2.8, 3.5,  #>     3.1, 2.1, 3.7, 2.7, 3.5, 3, 3.5, 3.2, 3.2, 2.2, 2.7, 2.7,  #>     3.7, 2.5, 2.7, 2.5, 3.8, 3.6, 2, 2.3, 3, 2.7, 3.7, 2.7, 2.4,  #>     3, 2.6, 3, 2.8, 2.8, 3.6, 3.9, 2.8, 2.6, 2.6, 2.8, 2.7, 2.3,  #>     2.7, 2.7, 2.9, 1.7, 3.8, 3.7, 3.7, 3.2, 2.8, 2.9, 2.5, 2.4,  #>     3.5, 3.3, 0.9, 3, 3.3, 3.3, 1.8, 3.4, 2.6, 3.6, 2.5, 2.7,  #>     1.5, 2.8, 3.2, 3.3, 3, 2.4, 3.4, 3.1, 3.2, 2.3, 3.1, 2.5,  #>     3.6, 2.2, 3.1, 2.4, 3, 3.2, 3.5, 3.5, 3, 2.6, 3.6, 3, 3.9,  #>     2.2, 3.8, 2.2, 3.6, 2.4, 3.4, 2.8, 2.3, 3.1, 2.8, 2.7, 3.2,  #>     3.5, 3.4, 3, 3.5, 2.3, 2.4, 1.8, 2.2, 3.3, 3.3, 2.3, 3.6,  #>     2.8, 1.8, 3.5, 3.7, 1.9, 2.7, 3.6, 2.7, 3, 3.6, 3.4, 3.4,  #>     2.6, 2.4, 2.3, 2.8, 2.3, 2.2, 2.4, 3, 3.4, 1.9, 2.8, 2.9,  #>     3.5, 2.7, 3.3, 3, 3.2, 2.7, 2.5, 2.1, 1.8, 3, 3.2, 3.7, 3.5,  #>     3.1, 2.4, 2.9, 2.5, 3.3, 3.7, 3.3, 3.3, 3.7, 2.4, 1.9, 3.6,  #>     1.6, 3, 2.8, 3.4, 2.4, 2.5, 3.3, 3.9, 2.7, 2.4, 2, 2.7, 3.5,  #>     2.7, 2.9, 3.6, 2.5, 3.2, 2.8, 1.4, 2.3, 3.4, 2.2, 3.2, 3.8,  #>     3.5, 3.4, 2.7, 3.3, 3.3, 2.7, 3.7, 3.8, 3.2, 2.9, 3.4, 2.9,  #>     3.2, 2.7, 3.5, 3.1, 2, 3, 2.2, 3.8, 1.8, 2.6, 2.7, 2.2, 3.2,  #>     3.5, 3.6, 3.5, 2.9, 2.1, 3.4, 2.2, 3.3, 3.3, 1.7, 1.6, 1.7,  #>     2.1, 3.2, 2, 3.3, 1.1, 3.3, 3.6, 3, 3.4, 3.2, 2.7, 2.4, 3.2,  #>     3.3, 3.3, 3.8, 3.4, 2.2, 2.7, 2.6, 2.1, 3.9, 3.6, 3.5, 3.6,  #>     2.9, 2.4, 3.6, 3.4, 3.2, 2.5, 2.7, 2.8, 3.1, 3.4, 3.7, 2.8,  #>     2.2, 3.6, 1.8, 2.6, 2.4, 3.7, 3.2, 3.4, 2.8, 2.9, 3.1, 1.7,  #>     2.9, 3.2, 2, 2.7, 3.4, 3.1, 3.1, 2.7, 2.6, 3, 2.2, 2.3, 1.6,  #>     1.3, 2.6, 2.3, 2.4, 2.4, 2.1, 3, 1.8, 3.6, 3.2, 3, 2.9, 1.9,  #>     2.6, 3.2, 3.3, 3.7, 2.7, 3.8, 3.1, 3.1, 3.9, 2.4, 3.6, 2.8,  #>     3, 2.3, 2.5, 3.2, 3.2, 2.4, 2.2, 3.3, 2.5, 2.5, 2.1, 2.1,  #>     1.3, 3, 1.4, 3.1, 2.9, 2.2, 2.2, 1, 1.7, 2.9, 3.2, 3.2, 1.7,  #>     2.9, 2.3, 3.6, 3.4, 3.6, 2.5, 2.8, 2.9, 3, 2.9, 3.7, 3.6,  #>     3.9, 3, 2.6, 2.7, 2.6, 3.2, 3.2, 3.5, 2.9, 3.3, 3.3, 3.8,  #>     3.6, 2.6, 3.3, 1.8, 2.4, 2.5, 2.4, 3.5, 3.1, 3.2, 3.3, 1.7,  #>     1.4, 3.4, 2.4, 1.7, 3.1, 2.7, 1.7, 3.4, 3.9, 2.9, 1.8, 3.6,  #>     3.2, 3.6, 3, 3, 3.1, 1.9, 3, 2.6, 3, 2.3, 3.6, 3.7, 3.7,  #>     2.5, 3.4, 2.8, 1.4, 2.1, 3.7, 3.1, 2.9, 3.5, 2.1, 3, 2.6,  #>     3.3, 3.7, 2.4, 2.8, 1.8, 2.2, 2.6, 2.9, 3.4, 3.5, 2.3, 3.7,  #>     2.1, 2.7, 2.6, 2.8, 3.3, 2.4, 2.9, 2.4, 2.6, 3.2, 3, 3.5,  #>     2.6, 2.6, 2, 2.5, 3.6, 2, 2.8, 3.9, 3.7, 2.4, 2.7, 2.4, 3.2,  #>     2.3, 3.4, 2.6, 2.6, 3.4, 2.1, 3, 3, 2.7, 2.7, 2, 2.1, 3.4,  #>     3.8, 3.9, 1.3, 2.7, 2, 3.5, 2.5, 3.5, 3.3, 2.3, 3.6, 2.3,  #>     3.5, 3, 3, 2.5, 2.9, 3.7, 3.5, 2.7, 3.2, 2.1, 2.3, 2.4, 3.2,  #>     3.7, 3.1, 2.1, 3.3, 1.7, 2.5, 3, 2.3, 2.7, 3.7, 1.9, 2, 3.4,  #>     2.4, 1, 2.2, 3, 3.7, 3.3, 3.2, 2.7, 3.5, 3.7, 3.5, 3.1, 3.7,  #>     3.5, 3.2, 3.6, 3.4, 2.2, 2.2, 2.1, 2.8, 2.4, 2, 2.4, 3.3,  #>     3.4, 3, 1.8, 3.4, 2.1, 2.1, 2.5, 3.2, 3.6, 2.6, 2.7, 3.5,  #>     3, 1.6, 2.5, 2, 3.6, 2.2, 2.5, 3.2, 2.1, 2.8, 3, 2.5, 2.4,  #>     3.1, 1.6, 2.9, 2.4, 2.1, 1.8, 2.9, 1.7, 2.1, 2.9, 2.2, 3.3,  #>     3.2, 2.4, 2.9, 3.7, 1.9, 3.1, 2.9, 3.7, 3.3, 3.5, 0.8, 3,  #>     2.5, 3.7, 3.7, 2.7, 3.1, 2.9, 3.5, 3.3, 3.1, 2.2, 2.2, 1.5,  #>     2.8, 2.9, 2.9, 3.5, 3.1, 2.8, 2, 3.7, 3.3, 3.1, 3.4, 2.6,  #>     3.2, 3.7, 1.8, 2.7, 2.9, 3.5, 2.9, 3.7, 3.8, 0.7, 2.2, 2.9,  #>     3.2, 2, 2.6, 3.5, 2.4, 3.2, 1.4, 3.2, 3.4, 3.3, 3, 2.8, 2.1,  #>     3.2, 3.2, 3.8, 3, 3.6, 3.1, 1.5, 2.3, 3.2, 2.5, 3.4, 2.5,  #>     2.3, 3.2, 3.5, 2.8, 3.1, 2.9, 3.1, 2.3, 3.5, 3.5, 1.1, 2.9,  #>     3.4, 3.8, 2.7, 2.7, 3.2, 3, 3.2, 2.4, 2.9, 2, 3.1, 3, 1.2,  #>     3.1, 3.4, 3.4, 3, 3.7, 1.6, 2.7, 2.7, 2.9, 2.6, 3.7, 2.7,  #>     2.7, 3.4, 3.3, 3.4, 3, 2.4, 1.7, 3.9, 2.7, 3.8, 2.4, 3.1,  #>     3.9, 2.2, 3.6, 3.4, 3.5, 3, 3.7, 2.5, 3.3, 3.6, 1.7, 3.2,  #>     1.8, 3.5, 3.3, 1.8, 2.2, 3.2, 3.1, 3.1, 3, 3, 2.9, 3.6, 1.6,  #>     1.8, 3.1, 2.5, 3.5, 2.5, 3.1, 3.6, 2.7, 2.7, 3.7, 2.7, 3.2,  #>     3.6, 1.9, 3.5, 3.4, 3.2, 2.7, 3.6, 2.2, 2.8, 2, 3, 2.4, 1.4,  #>     3, 3.6, 2.7, 2.4, 3, 2.8, 2.9, 3, 1.8, 2.4, 3, 2.8, 2, 3,  #>     2.8, 3.1, 2.7, 2.8, 3.3, 2.6, 3.3, 2, 1.1, 3.7, 3.5, 3.4,  #>     3.7, 2.8, 2.2, 2.9, 3.4, 2.7, 2.7, 2.9, 3.3, 3.6, 3.8, 2.8,  #>     3.2, 3.1, 2.7, 1.6, 3.5, 3.7, 3.1, 2.7, 3.3, 3.3, 2.9, 3.5,  #>     2, 3.8, 3.1, 3, 2.4, 1.6, 2.2, 3.8, 2.4, 3.1, 2.7, 3.8, 3.2,  #>     2.5, 2.1, 2.4, 2.1, 3.5, 3, 3.3, 1.8, 2.5, 2.5, 2.7, 2.5,  #>     3.3, 2.7, 3.7, 2.1, 3.4, 3.5, 3, 2.9, 1.7, 2.8, 3.7, 3.5,  #>     3.9, 3.1, 3.8, 1, 2.4, 2.7, 3.2, 2.4, 3.4, 3.2, 2.5, 3.8,  #>     1.2, 3.5, 2.7, 3.5, 3.3, 3.1, 1.7, 1.6, 3.4, 2.5, 2.8, 3.8,  #>     3.5, 2.7, 3, 1.2, 1.8, 1.8, 3.8, 3.9, 3.4, 3.2, 3.5, 3.2,  #>     3.8, 1.8, 2.8, 2.4, 3.6, 2.5, 2.9, 2.4, 3.4, 3.1, 2.7, 2.9,  #>     2.9, 2.5, 2.9, 1.3, 2.3, 3.6, 3.3, 1.9, 2.8, 3.3, 2.3, 3.7,  #>     3.3, 3.2, 2.6, 2.6, 2.9, 2.4, 2.1, 2.1, 3.2, 2.4, 3, 3, 2.5,  #>     2.3, 3, 3.6, 1.5, 1.9, 3.8, 3, 2.8, 2.1, 3.7, 2.8, 3.7, 2.2,  #>     3, 2.9, 2.7, 2.7, 2.4, 3.7, 2.6, 3.2, 2.2, 3.7, 2.2, 3.1,  #>     2.8, 3.4, 2.9, 2.1, 3.4, 2.9, 2.2, 2.2, 2.7, 2.5, 2.2, 3.3,  #>     2.7, 2.8, 3.3, 1.9, 3.9, 2.5, 1.7, 2.9, 2.8, 1.7, 1.5, 2.7,  #>     1.7, 3.9, 2.3, 3.2, 1.4, 3.5, 3.9, 2, 3.9, 3.6, 2, 2.6, 3.7,  #>     3.6, 2.4, 3.5, 2.7, 3.1, 3.4, 2.8, 3, 3.4, 2.6, 3.7, 3.1,  #>     1.6, 2.7, 3.1, 3.3, 3.4, 3.6, 3.6, 1.8, 3.1, 3.5, 3.2, 3,  #>     2.8, 2.9, 2.2, 3.5, 2.7, 1.4, 3.5, 2, 1.3, 3.3, 3.4, 3.2,  #>     3.4, 2.8, 3.1, 3.4, 3, 3.1, 2.4, 3.2, 2.2, 2.4, 1.2, 3.6,  #>     3.5, 1, 3.2, 2.2, 2.8, 3.5, 3, 3.8, 2.1, 3.4, 3.3, 3, 2.5,  #>     3, 3.7, 3.4, 3, 3, 2.3, 2.4, 3.7, 3.1, 2, 3.5, 3.5, 2.1,  #>     3.4, 2, 3.3, 2.2, 3.3, 1.8, 2.9, 2.2, 1.8, 3.3, 1.7, 3.4,  #>     3.2, 2.4, 3.7, 2.9, 2.3, 3.2, 2.7, 2.3, 2.5, 2.7, 2.4, 2.9,  #>     3.5, 3.4, 2.2, 3.4, 2.7, 2.1, 3.3, 3.9, 3, 2.2, 3.6, 3, 2.5,  #>     3.6, 3.2, 3.2, 3.6, 2.7, 3.5, 3.2, 2.8, 3.1, 2.9, 1.6, 3.1,  #>     1.8, 2.6, 1.4, 2.8, 3.2, 3.8, 2.2, 2.9, 3.3, 1.3, 3.2, 3.4,  #>     3.1, 2.8, 3.3, 3, 3.8, 3.2, 3.3, 2.6, 3.6, 2.9, 2.3, 2.4,  #>     2.5, 1.8, 2.8, 3.3, 3.4, 3, 2.2, 4, 2.9, 3.4, 3.1, 3.5, 3.1,  #>     3.1, 2.6, 3.5, 1.9, 2.8, 3.5, 2.9, 2.7, 3.1, 2.8, 2.3, 2.9,  #>     2.2, 2.3, 1.5, 1.9, 3, 2.9, 2, 1.7, 2.4, 4, 3.2, 2.6, 3.2,  #>     2.7, 3.1, 3.5, 3.4, 0.8, 3.2, 2.8, 2.8, 2.6, 2.9, 2.7, 2.6,  #>     2.5, 2.3, 3, 1.9, 3.8, 2.8, 3.3, 3.4, 2.6, 2.2, 1.7, 3.5,  #>     3.1, 3.8, 2.3, 2.8, 3.3, 3.7, 2.9, 3.7, 2.1, 2.4, 3.8, 2.7,  #>     2.1, 1.2, 2.7, 3.2, 1.4, 2.3, 2.5, 3.2, 3.2, 3.2, 3.3, 2.8,  #>     3.6, 3.6, 2.3, 3.1, 2.8, 3.7, 3.1, 2.4, 2.3, 2.3, 3.2, 1.5,  #>     3.5, 2.2, 3.5, 2.7, 3, 3.2, 3.8, 3.6, 3.8, 3.5, 3.2, 3.1,  #>     3.7, 3.3, 2.5, 2.5, 3.3, 3, 3.2, 3.4, 3.7, 2.1, 3.8, 3.6,  #>     2.3, 2.5, 2.1, 2.9, 2.7, 2.4, 3.3, 2.7, 2.7, 3.3, 3.1, 3.3,  #>     3.5, 2.1, 3.6, 1.5, 2.2, 3.5, 3.2, 3.8, 2.9, 2.7, 2.9, 3,  #>     2.6, 3.6, 2.3, 2.5, 3.4, 2.8, 2, 2.4, 2.7, 3.5, 2.9, 2.6,  #>     3.3, 2.2, 2.1, 3.3, 3.6, 3, 2.2, 2.7, 2.8, 3.8, 3.1, 1.5,  #>     2.6, 1.7, 3.1, 3.1, 2.6, 2.8, 2.7, 3.2, 2.7, 3, 2.5, 1.8,  #>     3.1, 1.6, 3.4, 3.9, 2.7, 2.5, 2.1, 3.4, 3.3, 2.7, 2.6, 3.4,  #>     1.5, 2.4, 1.4, 2.3, 3.6, 2.6, 3.4, 3.5, 2.7, 3, 2.2, 2.4,  #>     3.3, 3.2, 3.3, 3, 2.8, 3.7, 3, 2.4, 3, 3.5, 3, 3.5, 3, 1.5,  #>     1.6, 2.2, 2.7, 3.6, 2.5, 3.2, 3.3, 2.4, 3.1, 2.6, 2.4, 1.3,  #>     3.1, 3.2, 2.2, 2.2, 2.7, 3.2, 2.3, 3.7, 3, 3.3, 3.7, 3.6,  #>     3.3, 2.2, 2.6, 3.3, 1.7, 2.5, 2.8, 3.1, 3.4, 2.5, 2.5, 2,  #>     2.8, 2.6, 1.7, 3.3, 2.5, 3, 3.8, 2.7, 2.7, 2.5, 1.8, 2.7,  #>     1.8, 3.7, 2.8, 1.4, 3.1, 3.3, 2.7, 3.7, 3.3, 3.7, 3.6, 3.4,  #>     2.1, 2.9, 3.5, 2.3, 2.5, 3.5, 3.8, 2.4, 1.8, 2.6, 3.2, 2.6,  #>     2.9, 2.8, 2.9, 2.2, 3.3, 3, 2.4, 2.8, 2.2, 3.2, 3.5, 2.6,  #>     3.2, 2.9, 3.2, 1.9, 3.1, 3, 2.8, 2.7, 3.5, 2.5, 3.4, 3.9,  #>     3.5, 3.2, 3.5, 3.1, 3.7, 2.9, 3.7, 2.7, 3.3, 3.1, 2.1, 2.2,  #>     2.8, 2.9, 3.1, 2.7, 3.7, 3.5, 2.9, 3.3, 2.6, 2.8, 3.6, 2.2,  #>     3.4, 3, 3.4, 2.3, 3.3, 2.6, 2.3, 3.6, 2.7, 3.3, 1.7, 1.8,  #>     3.7, 2.3, 3.3, 1.8, 3.4, 2.8, 3, 3, 3.1, 3.3, 3.9, 2.1, 2.1,  #>     3.5, 3, 3.2, 3.5, 1.4, 2.7, 2.8, 3.8, 3.1, 2.7, 3.7, 3.9,  #>     2.9, 1.4, 3.3, 3.3, 3.6, 1.6, 3.5, 1.1, 2.5, 3.5, 3.7, 3,  #>     2.3, 2.7, 2.5, 3.5, 2.9, 3, 3.3, 3.8, 3.7, 2.7, 3.5, 3.1,  #>     3.7, 3.6, 1.6, 3.4, 3, 3, 3.5, 3, 1.8, 2.2, 2.8, 3.2, 3.1,  #>     1.9, 3.1, 3.4, 3.2, 3.1, 3.3, 3.7, 3.1, 1.9, 2.1, 2.7, 3.2,  #>     3, 2.7, 2.6, 3, 3.4, 3.3, 3.2, 3.5, 2.3, 3, 3.4, 3.6, 2.3,  #>     2, 3.5, 3, 2.5, 2, 1.7, 2.1, 3.3, 2.5, 3.6, 3.1, 3.7, 3.2,  #>     2.6, 3.5, 2.6, 3.1, 3.1, 1.8, 1.7, 3, 2.7, 3.4, 1.4, 1.9,  #>     1.3, 3, 3.8, 2.8, 3, 3.2, 2.5, 3, 3.8, 3.1, 3.6, 2.7, 2.4,  #>     3.8, 2, 2.9, 2.2, 3.3, 2.9, 3.1, 3.4, 3.6, 2.8, 2.8, 3.2,  #>     2.6, 3.4, 2.6, 2.7, 2.3, 3.5, 2.2, 3.3, 1.6, 2.6, 1.9, 2.2,  #>     2.3, 2.9, 2.9, 2.9, 2.5, 3.3, 1.2, 3.1, 1.7, 2.9, 3, 0.8,  #>     2.3, 2.3, 3.4, 3.7, 3.6, 3.4, 2.8, 2.5, 3.2, 2.4, 2.6, 2.7,  #>     2.5, 2.4, 2.9, 1.9, 3.8, 2.9, 3.1, 3.3, 2.4, 3.7, 2.5, 3.2,  #>     3.9, 3.1, 3.5, 2.8, 3.1, 3.3, 2.7, 3.2, 2.8, 2.7, 2.7, 3.3,  #>     2.5, 2.7, 3.1, 3.7, 2.4, 2.6, 2.7, 3.9, 3.6, 3.1, 2.4, 3.6,  #>     2.3, 2.9, 1.1, 1.9, 3, 3.8, 2.8, 2.8, 1.5, 2.6, 2.6, 1.8,  #>     2.3, 2.6, 3.5, 3.1, 3, 3.4, 3.7, 2.2, 3.2, 2, 3.8, 2.2, 3.6,  #>     3.4, 1.4, 1.6, 2.5, 3.4, 1.9, 3.8, 2.7, 3.7, 2.2, 2.7, 2.6,  #>     2.8, 1.7, 3.4, 1.8, 3.1, 2.6, 2.3, 2.4, 2.7, 3.3, 3.2, 3.1,  #>     2.9, 2.9, 3.1, 3.1, 1.9, 3.9, 3.3, 3.2, 3.6, 1.3, 2.4, 2.9,  #>     1.7, 2.7, 3.7, 2.8, 3.8, 3.3, 1.9, 2.9, 1.1, 2.4, 3.6, 3.5,  #>     3.4, 2.2, 2.7, 3, 3.2, 2.8, 3.1, 3.4, 3.2, 1.8, 2.4, 3.5,  #>     2.6, 3, 3, 3, 3.1, 3.2, 3.2, 0.7, 2.7, 3, 3.9, 2.1, 2, 2.8,  #>     2.7, 3.3, 1.9, 2.2, 3.4, 3.5, 3.3, 2.5, 2.1, 2.9, 3.3, 3.1,  #>     2.9, 2.9, 1.1, 2, 2.5, 3.5, 2.9, 1.6, 2.7, 2.6, 3.3, 2.3,  #>     3, 2.7, 3.2, 3.1, 3.4, 3.4, 3.1, 1.8, 3.1, 3.3, 2.8, 3.1,  #>     1.8, 2.2, 3.6, 3, 2.5, 3, 1.4, 1.7, 3.6, 1.6, 3.5, 2.5, 3.3,  #>     2.5, 2.8, 3.4, 3.2, 3.1, 1.1, 3.7, 2.8, 2.9, 2.6, 2.5, 2,  #>     3.7, 2.2, 2.9, 2.9, 2.9, 3.1, 3.6, 3.3, 3.4, 3.2, 3.4, 3.8,  #>     2.3, 3.5, 3.4, 3.6, 3.3, 1.2, 2.6, 2.9, 3.4, 3.3, 1.6, 3.1,  #>     3, 3.9, 3.1, 3, 1.1, 4, 3, 3.1, 2.8, 3.4, 3.6, 2.8, 2.9,  #>     2.3, 3, 3.2, 2.7, 3.2, 1.7, 3.4, 3, 3.3, 3.4, 2.9, 3.4, 3.8,  #>     1.7, 3, 3.5, 3.7, 1.8, 2.6, 2.2, 1.6, 3.7, 3.4, 2.8, 2.9,  #>     2.7, 2.4, 2.4, 1.9, 3, 3.1, 2.4, 3.1, 1.9, 3, 1.6, 3.5, 1.4,  #>     2.1, 2.2, 3.6, 2.8, 1.3, 2.2, 3.8, 3.5, 3.3, 3.3, 2.2, 3.5,  #>     3.4, 2.6, 3.3, 2.8, 2.5, 1.1, 2.2, 3.3, 3.4, 3, 3.7, 2.2,  #>     2.7, 3.7, 3.5, 3.8, 2.1, 2.7, 1.6, 2.1, 2.5, 3.2, 2.3, 3.6,  #>     2.1, 3.1, 1.9, 2.7, 2.3, 3.3, 2.7, 2.6, 2.9, 0.7, 3, 2.4,  #>     3.1, 1.7, 2.9, 2.7, 3.1, 2.8, 3.5, 3.5, 3.5, 2.6, 2.6, 2.7,  #>     3.9, 3, 2.2, 3.3, 2.4, 2, 3.3, 2.7, 1.9, 2.1, 2.7, 3.8, 3.3,  #>     2.2, 2.9, 2, 3.1, 3.7, 2.6, 2.7, 3.1, 3.2, 3.4, 2.1, 3.5,  #>     2.2, 2, 3.3, 2.9, 2, 3.9, 2.6, 2.4, 3.3, 2.7, 1.9, 3, 3.4,  #>     2.6, 2.3, 3.1, 3.4, 2.9, 1.5, 2.5, 2.6, 3.8, 3.2, 3.4, 3.4,  #>     3.1, 3.2, 2.5, 2.1, 2.3, 1.5, 2, 3.7, 2.3, 3.9, 2.5, 2.6,  #>     2.5, 3.3, 3.6, 2.6, 2.5, 2.9, 3.6, 2.9, 2.3, 3, 2, 3.2, 1.9,  #>     3.7, 2.9, 1.7, 2.6, 2.4, 2, 3.2, 3.3, 4, 1.3, 2.8, 3.2, 1.7,  #>     3, 3.5, 2.9, 3.6, 3.3, 2.7, 2.3, 2, 2.3, 3.1, 3.6, 2.4, 3.7,  #>     3.5, 3.4, 1.3, 3.1, 2.3, 2.4, 2.9, 1.6, 2.9, 3.1, 2.6, 3.6,  #>     3.5, 3.6, 3.1, 2.3, 2.3, 3.1, 2, 1.8, 2.8, 2.1, 2.6, 2, 3.2,  #>     2, 3.5, 2.2, 2.1, 2.5, 3.7, 2.9, 1.3, 1.9, 3.7, 4, 3.2, 3.6,  #>     2.9, 2.4, 3.5, 3.1, 1.2, 2.7, 3.7, 1.8, 2.7, 3.8, 2.4, 3.3,  #>     2.8, 3.6, 2.5, 3.5, 3.6, 3.6, 3.1, 3.1, 3.2, 2.2, 3.8, 3,  #>     3, 2.3, 3.6, 2.4, 2.6, 3.2, 3.1, 1.7, 2.2, 3.7, 2.7, 3.9,  #>     3.4, 3.3, 3.4, 2.9, 3.5, 3.8, 1.9, 3.1, 3.4, 3, 2, 3.4, 3.4,  #>     2.8, 2.8, 3.4, 3.3, 2.5, 2.6, 2.2, 2.6, 3.8, 1.5, 2.6, 3.2,  #>     2.5, 3, 1.4, 3.4, 2, 2.5, 2.4, 2.7, 3.2, 2.5, 2.8, 3.7, 3.4,  #>     3.6, 2.7, 3.2, 3.3, 2.9, 3.2, 1.9, 3.4, 1.9, 2.8, 3.1, 2.9,  #>     1.8, 1.7, 2.6, 2.6, 1.8, 2.6, 2.2, 3.9, 3.3, 1.6, 2.8, 3.7,  #>     1.8, 2.8, 2.9, 3, 3.6, 2.9, 3.4, 2.2, 2.4, 3.3, 3.1, 3.4,  #>     3.3, 3.5, 3.1, 3.1, 3.2, 3.6, 2.7, 3.4, 3.3, 2.8, 2.8, 3.7,  #>     2.9, 2.8, 3.5, 3.5, 3, 2.1, 3.8, 2.1, 3.7, 2.4, 3.5, 0.6,  #>     3, 3.4, 2.9, 3.2, 3.2, 3.8, 3.3, 3.8, 2.8, 2.2, 2.8, 1.5,  #>     2.9, 3, 3.6, 1.1, 2.9, 3, 1.7, 3.5, 3, 3.6, 3.2, 3.7, 1.4,  #>     2.4, 2.2, 2.9, 3.4, 3.1, 2.6, 3.7, 2.4, 2.4, 3.6, 1.7, 3.1,  #>     3.5, 2.9, 3.2, 3.5, 2.7, 2.2, 2.4, 2.2, 2.9, 3.4, 3.5, 3.9,  #>     2.1, 2.8, 3, 3.5, 1.9, 4, 3.4, 3, 1.1, 2.7, 3.1, 1.8, 3.4,  #>     3.2, 3.6, 1.1, 2.9, 3.6, 3, 2.8, 2.6, 2.4, 1.5, 2.9, 3, 3.7,  #>     2.9, 2.4, 1.9, 3.5, 2.5, 3.4, 3.7, 3.2, 3.9, 2.2, 2, 2.6,  #>     2, 3.2, 3.2, 2, 2.8, 3.4, 2.8, 2.5, 3.3, 3.3, 2.2, 3.3, 3.3,  #>     3.8, 3.3, 2.4, 2.2, 2.7, 3.2, 2.2, 3.8, 3.4, 3.1, 3.2, 2.7,  #>     2.4, 2, 2.6, 2.8, 3.1, 3.6, 2.7, 3.5, 2.7, 3.5, 2.6, 3.9,  #>     3.1, 3, 2.3, 3.1, 3.3, 1.1, 3.6, 3.3, 3.3, 2.7, 3.8, 2.9,  #>     1.6, 2.3, 2.6, 2.1, 2.8, 3.1, 3.6, 3.1, 3.4, 1.8, 3.1, 3.3,  #>     1.4, 2.3, 3.4, 2.7, 3, 2.8, 2.2, 2.4, 3.2, 3.5, 3.9, 3.8,  #>     3.2, 2.9, 2.3, 3.9, 3.6, 2.5, 2.6, 3.3, 2.2, 3.8, 3.4, 1.7,  #>     1.7, 2.5, 3, 2.1, 3.3, 2.9, 3.2, 3.5, 3.1, 2.6, 2.3, 2.9,  #>     2.9, 3.4, 2.6, 1.1, 3.3, 1.6, 1.5, 3, 2.4, 2.2, 3.2, 2.6,  #>     3.4, 3.5, 3.1, 2.1, 3, 3, 3, 3.3, 3, 3.8, 1.9, 1.3, 3.6,  #>     2.3, 3.5, 2.7, 3.2, 2.9, 3.4, 2.6, 2.1, 3.3, 3.3, 2.6, 3.4,  #>     2.9, 2.9, 2.8, 3.3, 2.4, 3, 2.5, 2.6, 2.2, 3.3, 1.9, 3.4,  #>     3.1, 3.4, 2.9, 2.7, 2.3, 2.8, 2.7, 1.8, 2.5, 0.9, 2.8, 3,  #>     2.1, 3.7, 1.8, 1.8, 3.6, 2.7, 3.3, 3, 3.3, 2.4, 2.8, 1.7,  #>     2.4, 2.8, 3.8, 2.4, 3.3, 2.4, 1.9, 1.4, 3.7, 1.3, 3.3, 3.3,  #>     3.1, 2.9, 3.2, 2.6, 2.2, 2.5, 3.7, 2.1, 2.3, 2.4, 3.8, 3.3,  #>     3.6, 3.3, 3, 2.7, 2.9, 2.8, 3.2, 3, 1.3, 2.2, 2.8, 2.1, 2.9,  #>     1.9, 2.9, 2.4, 1.9, 2.2, 2.5, 2.5, 3.4, 2.2, 3.1, 1.5, 3.4,  #>     3.5, 3.2, 2.6, 2.9, 2.6, 2.6, 3.6, 3.5, 3.1, 3.9, 2.7, 2.8,  #>     1.1, 2.5, 3.2, 3, 3, 2.3, 2.1, 3.2, 2.7, 3.1, 2.1, 2.8, 2.2,  #>     3.2, 2.8, 3.8, 2.6, 2.1, 2.9, 3.1, 3.5, 3, 1.8, 3.7, 3.3,  #>     3.4, 3.4, 2.8, 3.3, 3.6, 2.7, 3.2, 1.9, 2.6, 3.6, 2.9, 3.8,  #>     2.9, 3.5, 3, 2.6, 3.5, 3.3, 2.6, 2.8, 2.2, 2.8, 3.5, 3.1,  #>     2, 2.2, 1.3, 3.6, 2.7, 2.7, 2.1, 3.2, 1.9, 3.3, 2.6, 3, 2,  #>     3.3, 3.4, 3.4, 3, 3.3, 2.8, 2.9, 3.6, 1.7, 2.7, 2.8, 3.3,  #>     1.6, 2.3, 2.6, 3, 2.1, 2.7, 2.5, 3.9, 2.5, 3, 3.7, 2.5, 3.9,  #>     4, 3.1, 3, 2.8, 2.8, 3, 2.7, 2.1, 3.4, 2.5, 3.3, 3.1, 3.5,  #>     3.8, 3.1, 2.9, 3.3, 3.2, 1.9, 0.5, 3.5, 3.6, 3.2, 2.8, 3.7,  #>     2.1, 4, 2.5, 2, 1.7, 2.6, 3.7, 3.4, 3, 3.8, 3.1, 3.4, 2.4,  #>     1.5, 3.5, 2.9, 3.5, 2, 1.8, 2.3, 0.8, 2.7, 1.4, 3.6, 3.6,  #>     3.3, 1.4, 3.2, 3.9, 3.7, 2.7, 1.5, 3.4, 3.2, 2.9, 3.1, 3.1,  #>     3.5, 1.7, 0.6, 3.8, 3.1, 2.5, 3.6, 2, 2.6, 2.9, 2.8, 2.6,  #>     2.3, 3.9, 3.4, 3.7, 3.7, 2.4, 2.4, 2.8, 2.8, 2.8, 3.1, 3.1,  #>     3.9, 1.3, 2.7, 3.1, 2.7, 2.8, 3.6, 2.7, 3.6, 3.7, 2.1, 3.8,  #>     3.3, 3.2, 3, 3.2, 3.6, 2.4, 3.1, 1.8, 3.4, 2.9, 2.1, 3.6,  #>     3.7, 3, 3.5, 3.5, 1.3, 3.2, 3.6, 0.8, 3.1, 3.2, 3.1, 3.1,  #>     2.2, 3.6, 3, 2.5, 2.1, 2.9, 2.6, 3.3, 3, 3.5, 2.7, 3, 2.3,  #>     2.3, 2.1, 2.5, 2.8, 2.3, 3.1, 2.7, 2.3, 3, 3.5, 2.6, 2.9,  #>     3, 1.6, 2.8, 2.7, 3.5, 2.2, 2.2, 3.4, 2.8, 3.5, 3.4, 2.8,  #>     2.6, 2.5, 2.4, 3.2, 3, 3.6, 3.8, 3.5, 2.5, 2.5, 1.8, 3.8,  #>     2.6, 2.3, 2.5, 2.1, 2.7, 2.2, 3, 3.5, 3, 3.3, 3.7, 2.7, 2.9,  #>     3.4, 3.6, 3.2, 2.5, 3, 2.9, 2.1, 3.6, 3.5, 3.2, 2.7, 2, 3.1,  #>     1.7, 3.3, 2.6, 2.9, 2.1, 2.9, 2.4, 3.6, 3, 3.9, 1.6, 3.1,  #>     2.4, 2.7, 3.6, 2.5, 3.7, 2.6, 3.3, 3.4, 1.7, 2.9, 3.1, 3.4,  #>     2.7, 3.5, 1.4, 3.7, 2.5, 3.7, 4, 3.7, 3.5, 2, 1.2, 3.4, 2.7,  #>     2.4, 2.3, 2.8, 2, 3.4, 3.1, 2.9, 3.2, 3.7, 1.8, 3.5, 3.7,  #>     3.4, 3, 3, 2.3, 3.1, 3.8, 3, 3.6, 3, 3.5, 3.4, 2.4, 2.5,  #>     2.1, 3.6, 3.4, 2.4, 3.8, 3.7, 1.8, 2.7, 2.2, 2.3, 3.3, 2.8,  #>     1.4, 3.8, 3.5, 3.1, 3.9, 3.6, 2.5, 2.9, 2.3, 2.4, 3.2, 2,  #>     3.3, 3.4, 2.7, 3.3, 2.8, 3.2, 3.1, 2.4, 2.3, 3.7, 2.2, 2.4,  #>     3.6, 1.8, 1.5, 3, 3.5, 3.5, 1.7, 2.5, 2.7, 3.5, 3.3, 2.8,  #>     1.6, 3, 2.5, 1.4, 2.7, 3.6, 1.8, 2.9, 3.4, 2.8, 2.7, 3.7,  #>     2.4, 1.5, 2.9, 3, 2.9, 1.8, 2.5, 2.9, 4, 3.6, 2.1, 3.9, 2.9 #>     ), math = c(90, 79, 99, 79, 75, 86, 79, 84, 83, 64, 70, 71,  #>     65, 70, 66, 87, 76, 79, 76, 81, 68, 70, 79, 62, 84, 78, 60,  #>     93, 66, 99, 85, 88, 75, 78, 48, 62, 77, 96, 94, 86, 70, 45,  #>     68, 94, 88, 58, 89, 80, 61, 82, 100, 58, 100, 85, 87, 79,  #>     70, 77, 88, 75, 56, 60, 70, 88, 69, 100, 78, 84, 68, 80,  #>     70, 87, 87, 88, 71, 68, 98, 70, 74, 78, 65, 80, 67, 87, 87,  #>     87, 63, 98, 82, 64, 72, 96, 53, 79, 100, 85, 52, 92, 86,  #>     100, 70, 84, 69, 57, 75, 97, 71, 100, 80, 68, 83, 90, 49,  #>     92, 89, 88, 75, 51, 63, 53, 83, 71, 70, 68, 81, 68, 53, 83,  #>     94, 50, 100, 75, 67, 55, 83, 91, 67, 69, 77, 69, 89, 89,  #>     85, 79, 77, 50, 59, 53, 74, 78, 67, 84, 79, 85, 57, 100,  #>     76, 77, 90, 61, 91, 44, 99, 61, 67, 47, 70, 45, 74, 69, 80,  #>     75, 93, 85, 80, 46, 78, 50, 67, 59, 76, 63, 92, 100, 57,  #>     79, 66, 82, 80, 65, 64, 48, 92, 70, 80, 77, 80, 73, 68, 98,  #>     71, 91, 85, 71, 66, 51, 79, 71, 82, 88, 69, 58, 89, 62, 75,  #>     88, 73, 71, 75, 83, 85, 67, 62, 69, 60, 100, 58, 75, 75,  #>     86, 81, 72, 80, 74, 70, 86, 74, 95, 72, 89, 79, 70, 75, 64,  #>     70, 81, 86, 64, 76, 92, 71, 75, 63, 100, 65, 55, 52, 72,  #>     85, 48, 55, 94, 76, 61, 74, 47, 85, 88, 72, 66, 86, 85, 87,  #>     83, 90, 90, 95, 92, 83, 66, 86, 82, 80, 79, 88, 53, 53, 68,  #>     71, 49, 89, 76, 50, 79, 75, 93, 98, 100, 76, 95, 55, 99,  #>     94, 50, 75, 85, 48, 80, 87, 66, 77, 85, 74, 89, 70, 86, 71,  #>     75, 79, 79, 82, 51, 92, 60, 67, 78, 46, 72, 65, 99, 88, 58,  #>     82, 70, 83, 82, 87, 64, 86, 58, 87, 69, 59, 77, 80, 73, 68,  #>     84, 98, 77, 52, 66, 86, 93, 100, 55, 94, 74, 52, 82, 82,  #>     60, 83, 77, 75, 65, 95, 90, 74, 79, 90, 52, 70, 86, 74, 50,  #>     65, 72, 68, 79, 87, 69, 68, 81, 100, 93, 66, 97, 88, 93,  #>     85, 50, 77, 56, 91, 70, 76, 93, 81, 77, 91, 79, 100, 92,  #>     74, 86, 77, 81, 100, 82, 83, 89, 88, 94, 70, 73, 84, 69,  #>     50, 85, 92, 49, 95, 51, 97, 92, 90, 76, 55, 88, 67, 69, 81,  #>     90, 79, 99, 84, 63, 82, 67, 99, 68, 63, 81, 84, 94, 62, 98,  #>     83, 91, 51, 80, 76, 59, 74, 63, 86, 90, 64, 91, 80, 81, 51,  #>     82, 86, 86, 71, 63, 79, 64, 60, 71, 60, 71, 71, 89, 66, 56,  #>     71, 62, 68, 63, 80, 84, 87, 87, 68, 64, 56, 90, 72, 49, 88,  #>     67, 77, 75, 96, 74, 88, 85, 62, 55, 48, 66, 80, 85, 79, 58,  #>     72, 88, 66, 76, 47, 85, 72, 88, 80, 65, 65, 70, 78, 79, 94,  #>     98, 73, 58, 90, 65, 54, 77, 72, 90, 56, 69, 96, 51, 62, 95,  #>     40, 68, 54, 95, 68, 65, 84, 96, 75, 71, 73, 78, 80, 73, 98,  #>     79, 100, 85, 87, 53, 96, 74, 64, 59, 95, 62, 58, 91, 92,  #>     97, 83, 64, 47, 94, 97, 72, 63, 86, 92, 90, 84, 53, 56, 87,  #>     76, 83, 77, 56, 69, 80, 65, 74, 86, 98, 83, 85, 83, 87, 82,  #>     84, 67, 91, 63, 97, 59, 91, 84, 89, 54, 82, 80, 90, 84, 42,  #>     76, 53, 89, 75, 98, 71, 55, 74, 81, 73, 93, 79, 72, 89, 94,  #>     66, 75, 73, 82, 99, 66, 76, 90, 36, 64, 99, 70, 81, 71, 95,  #>     89, 89, 80, 78, 55, 72, 64, 91, 83, 43, 93, 72, 89, 64, 63,  #>     62, 100, 70, 73, 74, 95, 61, 59, 89, 61, 71, 84, 85, 82,  #>     44, 76, 91, 57, 41, 84, 83, 98, 90, 100, 74, 87, 69, 73,  #>     68, 82, 88, 87, 86, 82, 86, 83, 70, 59, 85, 52, 61, 75, 84,  #>     53, 82, 92, 63, 89, 90, 76, 96, 69, 99, 91, 73, 83, 75, 52,  #>     90, 84, 88, 56, 67, 75, 48, 81, 81, 82, 83, 66, 69, 94, 86,  #>     85, 58, 77, 80, 81, 91, 77, 72, 50, 76, 39, 89, 72, 47, 68,  #>     54, 62, 61, 88, 88, 69, 83, 95, 69, 56, 88, 81, 88, 89, 96,  #>     82, 67, 77, 65, 66, 92, 95, 81, 68, 60, 73, 76, 73, 69, 96,  #>     59, 69, 74, 70, 78, 73, 63, 75, 75, 64, 52, 94, 78, 56, 91,  #>     88, 58, 75, 91, 55, 86, 70, 64, 69, 96, 89, 88, 95, 78, 57,  #>     77, 58, 56, 100, 99, 88, 86, 83, 78, 77, 60, 58, 70, 53,  #>     75, 97, 56, 83, 76, 90, 77, 64, 81, 82, 82, 88, 88, 60, 91,  #>     88, 40, 86, 58, 86, 68, 71, 58, 59, 90, 90, 77, 76, 80, 74,  #>     80, 62, 82, 64, 95, 87, 74, 100, 97, 95, 71, 82, 88, 81,  #>     68, 59, 86, 91, 84, 98, 99, 85, 92, 60, 99, 60, 77, 62, 62,  #>     72, 75, 87, 68, 84, 93, 80, 84, 68, 71, 88, 64, 81, 67, 74,  #>     86, 93, 88, 92, 97, 85, 77, 96, 80, 93, 69, 75, 81, 69, 57,  #>     96, 62, 82, 66, 72, 84, 86, 78, 90, 62, 68, 96, 53, 96, 91,  #>     80, 84, 75, 53, 48, 88, 63, 66, 82, 66, 81, 98, 62, 67, 84,  #>     73, 75, 100, 91, 81, 58, 77, 88, 79, 75, 82, 74, 83, 100,  #>     68, 51, 84, 65, 93, 74, 56, 85, 83, 87, 60, 90, 97, 84, 67,  #>     87, 62, 76, 97, 74, 77, 86, 49, 100, 69, 51, 82, 83, 79,  #>     65, 62, 72, 61, 76, 80, 93, 73, 51, 57, 89, 78, 50, 78, 77,  #>     66, 95, 89, 63, 77, 88, 94, 60, 78, 61, 73, 81, 74, 51, 60,  #>     62, 97, 64, 82, 68, 78, 90, 74, 87, 87, 85, 100, 58, 86,  #>     73, 54, 87, 68, 82, 61, 75, 94, 61, 55, 91, 98, 84, 85, 95,  #>     81, 80, 67, 100, 98, 75, 75, 60, 95, 70, 57, 81, 78, 84,  #>     61, 66, 82, 91, 87, 63, 91, 86, 64, 80, 85, 89, 72, 63, 67,  #>     86, 99, 84, 97, 72, 87, 61, 75, 68, 83, 78, 49, 59, 57, 53,  #>     68, 80, 89, 65, 76, 54, 69, 83, 100, 73, 96, 82, 78, 48,  #>     72, 97, 88, 79, 85, 75, 57, 54, 66, 71, 71, 76, 55, 73, 69,  #>     89, 66, 90, 77, 78, 83, 100, 78, 82, 98, 66, 81, 91, 73,  #>     69, 78, 83, 58, 90, 97, 55, 88, 87, 85, 67, 85, 75, 75, 81,  #>     100, 89, 58, 48, 77, 62, 87, 59, 76, 76, 71, 75, 92, 53,  #>     50, 70, 80, 68, 49, 85, 84, 62, 58, 75, 86, 75, 45, 68, 99,  #>     57, 71, 97, 67, 83, 60, 94, 74, 55, 60, 79, 70, 57, 78, 73,  #>     66, 79, 93, 93, 68, 75, 75, 91, 82, 70, 53, 73, 82, 87, 85,  #>     73, 71, 70, 71, 47, 92, 73, 100, 91, 75, 96, 78, 79, 82,  #>     78, 96, 60, 75, 84, 79, 53, 73, 86, 78, 100, 88, 75, 85,  #>     90, 89, 63, 69, 100, 73, 97, 89, 82, 72, 77, 97, 100, 64,  #>     57, 87, 78, 74, 47, 82, 83, 67, 93, 85, 66, 67, 70, 84, 68,  #>     84, 53, 90, 92, 87, 71, 47, 85, 69, 94, 76, 91, 98, 92, 77,  #>     67, 95, 62, 65, 89, 82, 94, 75, 77, 83, 89, 88, 87, 83, 62,  #>     62, 95, 49, 81, 83, 79, 87, 78, 80, 88, 60, 66, 73, 88, 93,  #>     100, 100, 98, 42, 46, 92, 68, 76, 67, 78, 49, 73, 73, 77,  #>     87, 68, 82, 66, 73, 71, 61, 88, 62, 94, 57, 85, 89, 71, 95,  #>     78, 77, 61, 68, 88, 100, 74, 52, 87, 73, 50, 82, 62, 83,  #>     81, 93, 84, 50, 94, 80, 85, 87, 97, 65, 68, 92, 72, 79, 95,  #>     84, 93, 83, 92, 96, 87, 87, 65, 64, 41, 67, 97, 66, 62, 66,  #>     85, 50, 97, 68, 77, 88, 66, 78, 55, 90, 41, 73, 88, 62, 59,  #>     69, 46, 84, 78, 99, 59, 79, 68, 84, 92, 44, 74, 79, 81, 69,  #>     61, 38, 88, 62, 98, 95, 62, 87, 51, 76, 72, 68, 94, 78, 67,  #>     76, 76, 43, 84, 71, 100, 44, 83, 89, 53, 87, 45, 60, 68,  #>     91, 100, 95, 70, 81, 84, 83, 63, 71, 90, 71, 67, 87, 80,  #>     88, 78, 100, 81, 81, 83, 86, 80, 81, 81, 60, 83, 69, 54,  #>     95, 53, 100, 68, 58, 42, 90, 48, 79, 62, 63, 78, 82, 94,  #>     81, 94, 82, 52, 59, 73, 70, 87, 90, 57, 69, 87, 90, 59, 80,  #>     59, 64, 97, 74, 72, 67, 46, 91, 99, 85, 70, 77, 47, 91, 94,  #>     51, 81, 87, 66, 85, 71, 65, 95, 54, 70, 90, 83, 85, 65, 76,  #>     55, 63, 91, 78, 79, 62, 100, 87, 67, 75, 90, 95, 95, 79,  #>     71, 51, 60, 60, 50, 89, 74, 85, 75, 88, 74, 64, 72, 87, 64,  #>     100, 61, 72, 66, 94, 93, 80, 91, 88, 75, 86, 79, 61, 95,  #>     84, 67, 59, 93, 84, 59, 73, 53, 71, 65, 84, 100, 59, 68,  #>     93, 59, 95, 76, 80, 82, 86, 86, 80, 84, 81, 59, 57, 70, 85,  #>     73, 75, 97, 100, 55, 89, 70, 66, 97, 72, 82, 80, 69, 42,  #>     89, 92, 89, 89, 81, 85, 74, 64, 78, 75, 70, 95, 91, 60, 72,  #>     84, 92, 96, 74, 65, 87, 89, 59, 68, 69, 81, 99, 87, 87, 81,  #>     94, 69, 40, 82, 79, 87, 56, 66, 69, 64, 82, 52, 56, 64, 96,  #>     72, 70, 61, 89, 76, 63, 79, 80, 66, 55, 66, 58, 76, 79, 65,  #>     92, 78, 89, 80, 79, 53, 73, 62, 71, 63, 80, 90, 84, 67, 83,  #>     90, 76, 81, 80, 54, 85, 100, 58, 65, 79, 75, 76, 91, 76,  #>     65, 89, 81, 80, 65, 69, 70, 84, 80, 83, 63, 66, 67, 75, 73,  #>     50, 89, 50, 86, 64, 56, 82, 96, 60, 84, 76, 62, 81, 60, 71,  #>     58, 62, 67, 61, 82, 61, 86, 70, 92, 59, 94, 73, 49, 76, 100,  #>     82, 54, 81, 69, 80, 84, 79, 89, 88, 93, 97, 76, 84, 99, 73,  #>     100, 100, 89, 52, 94, 89, 81, 68, 83, 54, 58, 100, 60, 89,  #>     74, 88, 87, 75, 60, 74, 77, 94, 74, 80, 71, 81, 89, 50, 73,  #>     58, 69, 92, 68, 90, 64, 76, 63, 68, 73, 100, 71, 88, 72,  #>     80, 88, 70, 94, 90, 96, 79, 86, 82, 71, 58, 58, 55, 95, 51,  #>     72, 75, 60, 80, 99, 70, 98, 72, 87, 93, 62, 83, 100, 92,  #>     94, 48, 57, 65, 56, 81, 50, 86, 84, 86, 56, 94, 94, 69, 94,  #>     74, 82, 81, 98, 60, 58, 82, 79, 81, 87, 71, 72, 54, 83, 92,  #>     87, 68, 94, 86, 62, 82, 80, 80, 87, 84, 62, 64, 69, 82, 83,  #>     88, 79, 89, 79, 48, 51, 88, 75, 61, 91, 72, 91, 61, 71, 91,  #>     65, 88, 99, 49, 75, 50, 62, 49, 72, 78, 90, 90, 57, 79, 77,  #>     64, 74, 74, 95, 82, 52, 79, 56, 72, 75, 59, 60, 99, 78, 65,  #>     83, 74, 100, 89, 87, 69, 84, 45, 75, 76, 65, 60, 99, 79,  #>     62, 77, 98, 90, 78, 83, 81, 90, 75, 61, 64, 83, 59, 66, 83,  #>     78, 56, 73, 83, 98, 64, 93, 54, 69, 78, 71, 93, 80, 71, 90,  #>     81, 77, 69, 85, 75, 62, 70, 76, 43, 61, 57, 98, 87, 96, 63,  #>     67, 75, 82, 62, 61, 83, 98, 66, 93, 63, 84, 97, 95, 60, 86,  #>     74, 95, 83, 61, 84, 87, 63, 61, 74, 86, 100, 65, 83, 97,  #>     78, 65, 70, 57, 61, 75, 84, 80, 83, 96, 65, 86, 88, 67, 72,  #>     84, 66, 78, 74, 62, 80, 78, 75, 62, 81, 86, 62, 76, 85, 49,  #>     81, 69, 73, 97, 72, 67, 82, 98, 100, 47, 78, 81, 90, 48,  #>     78, 60, 39, 65, 95, 61, 62, 51, 55, 80, 85, 86, 76, 84, 53,  #>     53, 54, 85, 78, 70, 49, 76, 82, 71, 80, 65, 59, 82, 64, 82,  #>     74, 91, 74, 70, 93, 75, 73, 98, 88, 63, 73, 84, 75, 88, 41,  #>     59, 98, 88, 45, 86, 99, 93, 68, 84, 94, 56, 85, 54, 86, 61,  #>     51, 75, 65, 75, 78, 77, 88, 83, 95, 89, 51, 74, 69, 67, 82,  #>     90, 94, 92, 100, 82, 60, 64, 96, 51, 71, 73, 87, 58, 91,  #>     77, 97, 91, 95, 89, 83, 61, 99, 59, 72, 75, 77, 88, 73, 73,  #>     70, 69, 57, 96, 46, 87, 80, 80, 54, 59, 67, 91, 68, 82, 90,  #>     68, 66, 58, 91, 72, 69, 60, 61, 87, 47, 71, 55, 82, 69, 89,  #>     92, 70, 77, 51, 70, 88, 78, 97, 86, 82, 61, 78, 75, 90, 62,  #>     100, 82, 86, 62, 81, 91, 74, 94, 66, 76, 86, 68, 69, 88,  #>     66, 60, 71, 51, 73, 89, 86, 75, 83, 68, 99, 83, 62, 73, 51,  #>     84, 62, 87, 70, 90, 91, 95, 95, 48, 49, 88, 89, 91, 80, 84,  #>     95, 44, 53, 80, 97, 54, 77, 63, 95, 98, 57, 81, 100, 57,  #>     52, 84, 73, 73, 71, 92, 65, 73, 75, 81, 70, 65, 47, 83, 54,  #>     75, 73, 80, 76, 70, 73, 74, 47, 63, 72, 56, 93, 52, 55, 88,  #>     75, 69, 88, 56, 80, 87, 75, 89, 83, 83, 62, 97, 73, 92, 67,  #>     50, 87, 93, 60, 79, 90, 94, 66, 45, 68, 79, 81, 59, 48, 98,  #>     69, 79, 51, 97, 78, 70, 87, 61, 92, 84, 59, 85, 69, 70, 59,  #>     43, 81, 69, 81, 87, 97, 87, 91, 64, 63, 63, 58, 58, 65, 89,  #>     96, 83, 70, 90, 60, 56, 98, 73, 89, 79, 71, 91, 94, 64, 59,  #>     62, 78, 97, 55, 80, 58, 99, 49, 89, 68, 66, 81, 57, 80, 72,  #>     80, 71, 86, 89, 71, 57, 73, 69, 46, 53, 83, 94, 50, 76, 85,  #>     80, 98, 80, 74, 83, 98, 100, 90, 77, 74, 52, 73, 91, 68,  #>     52, 78, 72, 93, 62, 74, 76, 64, 69, 89, 78, 69, 81, 81, 87,  #>     70, 50, 47, 87, 78, 90, 82, 72, 60, 58, 94, 75, 48, 71, 71,  #>     49, 83, 82, 73, 76, 68, 100, 56, 79, 75, 98, 74, 55, 74,  #>     72, 87, 51, 67, 67, 62, 78, 69, 95, 63, 73, 95, 77, 97, 75,  #>     94, 85, 78, 42, 84, 88, 82, 56, 76, 62, 69, 96, 91, 59, 69,  #>     93, 51, 86, 62, 89, 92, 49, 84, 99, 85, 97, 80, 72, 61, 89,  #>     84, 81, 86, 41, 55, 57, 69, 60, 62, 76, 91, 57, 71, 65, 79,  #>     72, 92, 76, 60, 66, 75, 73, 78, 83, 78, 64, 92, 85, 90, 44,  #>     92, 64, 90, 71, 80, 61, 45, 61, 87, 80, 74, 88, 100, 66,  #>     73, 66, 69, 87, 92, 75, 95, 83, 95, 66, 54, 59, 87, 62, 83,  #>     90, 50, 42, 64, 80, 89, 67, 85, 76, 99, 89, 70, 51, 86, 64,  #>     72, 93, 82, 71, 73, 69, 73, 81, 83, 76, 47, 93, 62, 80, 69,  #>     75, 90, 89, 73, 87, 56, 100, 100, 63, 67, 91, 75, 85, 44,  #>     68, 75, 81, 69, 74, 100, 75, 100, 96, 77, 90, 96, 77, 70,  #>     67, 70, 89, 77, 92, 65, 81, 63, 96, 60, 78, 98, 87, 88, 63,  #>     78, 81, 80, 73, 57, 53, 69, 50, 56, 56, 64, 70, 74, 66, 100,  #>     86, 78, 83, 49, 74, 87, 73, 57, 74, 93, 94, 96, 87, 77, 86,  #>     70, 83, 56, 64, 94, 91, 95, 75, 89, 86, 65, 88, 79, 61, 79,  #>     72, 56, 76, 68, 79, 79, 52, 96, 95, 89, 60, 79, 66, 82, 83,  #>     70, 63, 77, 96, 67, 57, 61, 61, 90, 76, 65, 88, 81, 88, 58,  #>     68, 78, 81, 62, 83, 72, 61, 66, 62, 68, 84, 70, 73, 68, 68,  #>     85, 94, 69, 72, 80, 79, 89, 64, 61, 62, 75, 80, 59, 76, 74,  #>     71, 76, 81, 68, 78, 76, 98, 100, 43, 76, 86, 73, 76, 88,  #>     87, 97, 59, 57, 86, 59, 85, 80, 78, 61, 89, 65, 68, 100,  #>     79, 84, 82, 79, 60, 88, 84, 71, 72, 40, 85, 82, 55, 86, 71,  #>     58, 76, 36, 89, 80, 66, 72, 72, 83, 46, 71, 62, 79, 49, 100,  #>     93, 93, 51, 92, 61, 74, 56, 73, 79, 63, 84, 82, 79, 98, 83,  #>     75, 85, 77, 85, 72, 55, 63, 71, 100, 81, 83, 95, 82, 59,  #>     63, 74, 65, 93, 81, 72, 80, 100, 66, 81, 100, 45, 82, 57,  #>     94, 76, 79, 58, 68, 97, 100, 86, 69, 73, 76, 90, 100, 97,  #>     61, 74, 95, 79, 85, 96, 66, 90, 69, 82, 89, 70, 79, 77, 92,  #>     76, 85, 86, 85, 69, 89, 73, 86, 76, 88, 81, 72, 53, 97, 96,  #>     85, 54, 97, 94, 91, 84, 67, 68, 74, 58, 76, 79, 56, 78, 89,  #>     80, 75, 81, 100, 89, 74, 67, 66, 85, 92, 91, 62, 85, 80,  #>     60, 89, 88, 69, 99, 65, 76, 79, 72, 63, 83, 71, 73, 49, 89,  #>     77, 80, 78, 64, 65, 91, 83, 94, 76, 82, 91, 66, 100, 100,  #>     85, 81, 86, 84, 91, 76, 72, 81, 81, 84, 77, 80, 80, 89, 98,  #>     70, 83, 64, 66, 94, 80, 74, 97, 75, 70, 70, 76, 85, 90, 88,  #>     100, 74, 56, 93, 93, 98, 87, 85, 81, 71, 85, 69, 49, 77,  #>     70, 55, 59, 76, 75, 58, 78, 96, 97, 59, 59, 63, 92, 76, 64,  #>     98, 96, 73, 69, 57, 61, 92, 91, 83, 83, 82, 69, 54, 89, 62,  #>     81, 71, 72, 88, 72, 69, 99, 78, 92, 94, 83, 74, 84, 88, 97,  #>     85, 94, 56, 72, 41, 75, 88, 73, 64, 83, 80, 74, 47, 53, 80,  #>     92, 63, 82, 81, 90, 75, 70, 63, 41, 89, 77, 68, 64, 78, 71,  #>     73, 75, 90, 78, 69, 84, 87, 81, 68, 80, 44, 75, 81, 76, 90,  #>     75, 100, 65, 99, 58, 80, 93, 80, 73, 100, 97, 64, 69, 77,  #>     78, 85, 77, 76, 74, 49, 100, 80, 80, 51, 62, 76, 85, 65,  #>     89, 62, 91, 89, 93, 83, 90, 60, 79, 80, 87, 50, 58, 84, 100,  #>     93, 65, 84, 65, 61, 69, 52, 75, 54, 75, 67, 92, 93, 54, 86,  #>     98, 81, 70, 95, 82, 48, 85, 99, 77, 89, 69, 94, 74, 59, 70,  #>     72, 57, 99, 82, 55, 46, 61, 86, 56, 76, 72, 80, 79, 88, 100,  #>     51, 95, 79, 100, 86, 75, 86, 99, 74, 73, 94, 88, 62, 91,  #>     78, 66, 57, 90, 95, 77, 52, 57, 84, 50, 49, 49, 70, 88, 75,  #>     90, 70, 98, 63, 97, 84, 83, 60, 100, 90, 47, 70, 72, 78,  #>     67, 69, 77, 71, 98, 90, 65, 81, 68, 71, 82, 58, 57, 89, 71,  #>     85, 97, 92, 84, 86, 57, 72, 81, 48, 71, 61, 49, 71, 80, 62,  #>     55, 63, 93, 78, 55, 91, 82, 99, 71, 70, 84, 72, 53, 61, 61,  #>     88, 88, 98, 66, 67, 52, 69, 74, 86, 55, 81, 87, 70, 72, 72,  #>     81, 82, 100, 88, 80, 93, 92, 53, 81, 96, 61, 60, 67, 100,  #>     100, 78, 77, 77, 57, 100, 65, 82, 69, 89, 85, 66, 85, 52,  #>     83, 90, 99, 85, 85, 71, 69, 94, 85, 94, 100, 67, 67, 79,  #>     79, 90, 66, 66, 66, 78, 46, 86, 80, 74, 99, 65, 98, 65, 71,  #>     70, 79, 74, 75, 55, 73, 58, 40, 77, 53, 86, 90, 74, 88, 95,  #>     82, 72, 67, 86, 85, 90, 70, 73, 96, 86, 73, 84, 100, 79,  #>     63, 94, 68, 97, 46, 89, 77, 90, 73, 100, 88, 66, 56, 75,  #>     94, 96, 64, 50, 78, 43, 88, 70, 79, 58, 62, 73, 62, 71, 78,  #>     79, 73, 58, 67, 79, 71, 98, 95, 43, 64, 79, 66, 100, 89,  #>     75, 59, 91, 73, 78, 76, 86, 90, 49, 65, 88, 94, 75, 66, 76,  #>     83, 98, 79, 100, 82, 63, 71, 82, 93, 88, 99, 69, 90, 70,  #>     47, 86, 66, 76, 70, 74, 81, 87, 81, 76, 60, 79, 81, 72, 69,  #>     88, 52, 66, 97, 51, 60, 86, 89, 87, 70, 65, 87, 64, 81, 76,  #>     95, 60, 82, 90, 65, 81, 82, 91, 77, 82, 85, 67, 80, 86, 78,  #>     92, 86, 47, 48, 88, 57, 49, 76, 85, 48, 93, 100, 77, 66,  #>     72, 73, 42, 85, 97, 55, 79, 67, 52, 75, 78, 96, 88, 61, 100,  #>     93, 81, 78, 100, 83, 91, 97, 79, 79, 78, 94, 64, 50, 42,  #>     77, 92, 63, 64, 58, 78, 100, 90, 87, 61, 83, 90, 76, 76,  #>     72, 79, 51, 65, 89, 89, 78, 100, 82, 83, 90, 79, 76, 83,  #>     58, 60, 64, 91, 84, 52, 89, 97, 85, 50, 72, 98, 71, 63, 57,  #>     73, 67, 90, 92, 67, 84, 71, 74, 72, 95, 69, 82, 54, 74, 58,  #>     89, 46, 77, 77, 83, 82, 58, 71, 72, 59, 96, 85, 78, 81, 76,  #>     74, 81, 81, 67, 90, 77, 65, 78, 80, 96, 87, 56, 67, 69, 55,  #>     97, 59, 89, 51, 70, 98, 92, 99, 89, 68, 88, 90, 59, 78, 80,  #>     86, 68, 82, 80, 43, 63, 54, 79, 95, 58, 83, 87, 60, 85, 74,  #>     68, 55, 65, 71, 87, 72, 92, 61, 55, 60, 87, 64, 79, 61, 74,  #>     67, 85, 63, 75, 84, 59, 84, 88, 78, 77, 58, 92, 92, 83, 75,  #>     82, 72, 99, 75, 64, 45, 44, 82, 92, 57, 50, 78, 83, 75, 91,  #>     82, 91, 53, 67, 100, 67, 59, 82, 49, 73, 81, 85, 74, 54,  #>     97, 90, 67, 94, 72, 61, 66, 57, 88, 92, 81, 92, 86, 53, 57,  #>     91, 51, 74, 86, 84, 75, 42, 70, 85, 85, 43, 64, 98, 90, 96,  #>     83, 72, 100, 93, 63, 98, 90, 59, 93, 55, 79, 91, 82, 91,  #>     96, 76, 61, 90, 82, 91, 70, 74, 82, 75, 81, 86, 64, 75, 84,  #>     73, 80, 80, 100, 67, 54, 60, 79, 51, 97, 74, 63, 57, 93,  #>     67, 88, 89, 62, 71, 67, 95, 83, 41, 60, 71, 76, 77, 68, 88,  #>     69, 77, 93, 87, 67, 98, 76, 56, 91, 75, 66, 90, 93, 70, 53,  #>     81, 73, 85, 74, 95, 81, 86, 80, 94, 62, 53, 98, 82, 72, 56,  #>     71, 72, 78, 76, 71, 81, 71, 66, 62, 69, 63, 55, 68, 93, 62,  #>     70, 82, 63, 68, 84, 86, 67, 94, 94, 57, 73, 64, 60, 70, 55,  #>     82, 82, 86, 78, 75, 73, 72, 89, 91, 90, 60, 66, 87, 83, 62,  #>     80, 91, 85, 58, 65, 52, 63, 90, 86, 74, 75, 64, 98, 73, 63,  #>     59, 50, 84, 96, 79, 77, 77, 67, 89, 93, 45, 77, 72, 85, 91,  #>     71, 92, 60, 75, 77, 72, 87, 92, 91, 85, 67, 86, 72, 51, 90,  #>     48, 79, 63, 56, 98, 74, 75, 74, 91, 76, 98, 83, 85, 79, 100,  #>     100, 87, 65, 56, 46, 92, 77, 71, 74, 64, 75, 70, 73, 86,  #>     81, 95, 92, 70, 63, 83, 59, 75, 50, 84, 78, 51, 63, 56, 78,  #>     88, 77, 87, 92, 52, 83, 53, 77, 77, 52, 78, 49, 58, 87, 89,  #>     88, 70, 68, 52, 91, 87, 55, 69, 74, 61, 98, 97, 63, 92, 98,  #>     82, 72, 69, 95, 53, 73, 81, 76, 77, 83, 65, 66, 77, 88, 75,  #>     83, 75, 54, 89, 81, 92, 98, 64, 74, 91, 84, 74, 76, 80, 58,  #>     88, 94, 78, 59, 60, 84, 88, 97, 68, 59, 85, 82, 75, 90, 42,  #>     66, 85, 100, 76, 58, 62, 84, 96, 65, 87, 73, 61, 59, 99,  #>     75, 61, 82, 76, 81, 84, 48, 84, 56, 54, 82, 50, 93, 80, 80,  #>     80, 95, 60, 66, 55, 96, 86, 92, 74, 97, 73, 54, 90, 84, 72,  #>     62, 94, 81, 63, 78, 68, 57, 63, 85, 82, 69, 79, 78, 94, 86,  #>     73, 60, 89, 88, 91, 78, 97, 76, 94, 71, 77, 59, 85, 62, 100,  #>     87, 56, 53, 73, 62, 80, 83, 90, 74, 80, 83, 88, 85, 85, 81,  #>     71, 73, 62, 77, 77, 68, 85, 77, 82, 97, 55, 65, 54, 54, 86,  #>     63, 86, 77, 90, 81, 73, 71, 46, 87, 77, 100, 80, 87, 70,  #>     54, 84, 79, 81, 95, 66, 95, 53, 71, 73, 52, 92, 61, 54, 90,  #>     62, 71, 69, 65, 88, 64, 66, 50, 86, 65, 92, 53, 84, 50, 100,  #>     97, 77, 98, 91, 81, 66, 93, 76, 60, 84, 71, 81, 72, 89, 54,  #>     69, 55, 66, 87, 87, 63, 88, 68, 61, 85, 86, 77, 83, 82, 76,  #>     76, 99, 73, 56, 86, 71, 86, 52, 57, 90, 49, 61, 90, 95, 82,  #>     84, 87, 97, 93, 85, 99, 81, 88, 84, 87, 77, 66, 97, 86, 81,  #>     77, 78, 76, 66, 86, 81, 89, 94, 72, 87, 56, 66, 99, 84, 76,  #>     71, 97, 59, 84, 75, 72, 81, 64, 82, 77, 89, 69, 59, 82, 89,  #>     80, 69, 71, 81, 89, 63, 67, 86, 45, 83, 79, 92, 68, 46, 82,  #>     48, 62, 73, 76, 71, 95, 88, 67, 77, 86, 85, 88, 82, 87, 50,  #>     81, 85, 91, 89, 61, 85, 91, 70, 98, 55, 83, 98, 62, 83, 89,  #>     79, 99, 89, 81, 97, 89, 50, 81, 64, 67, 72, 87, 97, 98, 77,  #>     91, 80, 85, 74, 69, 53, 78, 63, 96, 94, 72, 79, 89, 89, 72,  #>     94, 93, 84, 95, 67, 72, 92, 66, 91, 100, 90, 59, 95, 49,  #>     78, 87, 55, 53, 91, 75, 68, 77, 77, 86, 68, 53, 91, 74, 73,  #>     72, 96, 100, 76, 48, 91, 86, 81, 50, 66, 55, 69, 91, 73,  #>     77, 86, 95, 81, 69, 85, 75, 63, 71, 97, 79, 71, 58, 92, 68,  #>     92, 91, 98, 60, 92, 73, 74, 85, 43, 65, 96, 56, 87, 94, 86,  #>     97, 97, 77, 57, 93, 95, 68, 59, 90, 75, 90, 92, 96, 90, 88,  #>     75, 63, 88, 78, 78, 76, 55, 90, 87, 71, 68, 52, 77, 95, 85,  #>     70, 55, 48, 96, 59, 91, 84, 62, 95, 98, 67, 71, 66, 59, 61,  #>     72, 86, 87, 95, 88, 68, 61, 75, 66, 77, 80, 91, 75, 90, 95,  #>     75, 87, 83, 99, 51, 97, 85, 90, 83, 86, 95, 77, 97, 76, 84,  #>     92, 88, 75, 84, 96, 54, 63, 68, 81, 92, 74, 86, 86, 75, 84,  #>     55, 90, 92, 84, 89, 86, 53, 83, 64, 91, 80, 80, 76, 68, 93,  #>     73, 56, 74, 88, 65, 99, 60, 87, 61, 97, 91, 92, 74, 83, 90,  #>     83, 61, 86, 56, 66, 94, 93, 73, 68, 76, 56, 72, 86, 87, 98,  #>     84, 70, 83, 49, 82, 72, 99, 88, 77, 84, 66, 64, 70, 52, 69,  #>     72, 52, 99, 74, 87, 60, 76, 86, 54, 74, 58, 82, 72, 79, 92,  #>     94, 74, 60, 77, 60, 97, 75, 96, 61, 68, 80, 60, 87, 83, 87,  #>     79, 74, 89, 79, 83, 83, 86, 78, 72, 100, 62, 77, 94, 60,  #>     94, 61, 69, 67, 79, 73, 79, 81, 68, 89, 52, 76, 72, 51, 91,  #>     76, 79, 62, 87, 78, 89, 51, 95, 75, 50, 72, 59, 69, 81, 76,  #>     96, 62, 98, 84, 90, 88, 48, 91, 85, 100, 83, 65, 53, 78,  #>     67, 93, 78, 58, 62, 99, 52, 74, 83, 78, 86, 54, 78, 92, 51,  #>     67, 74, 79, 76, 72, 99, 68, 54, 68, 68, 93, 73, 54, 74, 91,  #>     88, 60, 93, 70, 93, 78, 72, 93, 58, 80, 56, 98, 58, 72, 88,  #>     78, 88, 79, 78, 66, 74, 77, 59, 50, 69, 62, 54, 84, 93, 68,  #>     80, 81, 73, 56, 94, 100, 72, 73, 80, 54, 86, 53, 92, 63,  #>     76, 61, 80, 89, 86, 81, 84, 80, 87, 75, 63, 55, 54, 62, 59,  #>     69, 88, 68, 69, 92, 86, 85, 93, 100, 54, 58, 78, 82, 75,  #>     73, 78, 75, 89, 72, 84, 91, 59, 60, 58, 96, 50, 97, 80, 58,  #>     82, 77, 88, 57, 61, 87, 82, 80, 78, 66, 89, 77, 94, 81, 76,  #>     53, 62, 90, 77, 84, 66, 91, 85, 87, 80, 89, 82, 61, 67, 82,  #>     62, 80, 89, 95, 74, 78, 83, 73, 95, 77, 96, 91, 43, 86, 85,  #>     87, 62, 88, 93, 59, 76, 73, 92, 47, 66, 57, 76, 86, 61, 92,  #>     45, 50, 81, 60, 63, 82, 93, 98, 75, 79, 79, 69, 100, 41,  #>     59, 94, 76, 84, 70, 89, 72, 73, 74, 72, 68, 70, 94, 77, 77,  #>     98, 92, 72, 61, 98, 76, 49, 92, 83, 61, 55, 76, 92, 84, 65,  #>     100, 85, 61, 59, 89, 81, 54, 95, 80, 69, 80, 65, 74, 72,  #>     100, 58, 80, 80, 92, 64, 87, 99, 83, 73, 84, 55, 65, 87,  #>     71, 87, 74, 77, 68, 88, 95, 62, 78, 79, 62, 80, 97, 100,  #>     95, 100, 94, 48, 54, 65, 96, 81, 73, 82, 66, 64, 71, 84,  #>     85, 92, 64, 61, 89, 67, 73, 85, 100, 68, 64, 80, 72, 59,  #>     68, 90, 62, 62, 58, 72, 84, 91, 62, 59, 82, 84, 52, 92, 87,  #>     81, 92, 96, 75, 66, 60, 85, 88, 80, 100, 72, 78, 62, 76,  #>     78, 98, 64, 61, 92, 87, 81, 85, 97, 68, 72, 83, 100, 68,  #>     80, 83, 92, 87, 56, 65, 72, 93, 86, 46, 52, 88, 65, 82, 56,  #>     75, 74, 85, 86, 93, 63, 77, 62, 91, 48, 85, 65, 89, 72, 60,  #>     87, 85, 85, 79, 92, 95, 52, 100, 96, 80, 88, 68, 79, 90,  #>     79, 56, 85, 60, 81, 86, 64, 67, 86, 84, 97, 81, 57, 67, 85,  #>     89, 76, 67, 89, 72, 92, 88, 84, 93, 87, 83, 62, 81, 93, 62,  #>     76, 70, 82, 91, 84, 48, 89, 85, 98, 79, 91, 71, 50, 56, 73,  #>     72, 100, 85, 68, 67, 86, 77, 78, 72, 70, 86, 90, 56, 80,  #>     88, 70, 79, 54, 80, 94, 62, 74, 65, 75, 88, 90, 68, 72, 77,  #>     88, 82, 67, 72, 77, 72, 61, 53, 85, 95, 72, 56, 64, 64, 89,  #>     77, 82, 89, 97, 87, 86, 70, 84, 78, 61, 86, 99, 100, 86,  #>     83, 66, 74, 69, 54, 65, 98, 91, 70, 81, 89, 81, 75, 84, 90,  #>     52, 81, 85, 70, 83, 67, 87, 82, 84, 71, 86, 76, 95, 59, 62,  #>     80, 86, 92, 83, 78, 57, 90, 80, 46, 89, 64, 81, 68, 83, 70,  #>     81, 100, 77, 63, 86, 85, 88, 69, 58, 90, 92, 65, 95, 40,  #>     95, 91, 74, 64, 63, 91, 82, 72, 78, 43, 55, 75, 67, 84, 90,  #>     58, 99, 72, 46, 80, 64, 77, 60, 93, 81, 88, 82, 93, 89, 69,  #>     95, 59, 79, 54, 77, 68, 55, 78, 87, 93, 78, 73, 87, 81, 94,  #>     84, 46, 95, 88, 78, 76, 67, 89, 74, 85, 91, 90, 85, 48, 86,  #>     63, 68, 70, 93, 72, 65, 87, 73, 62, 82, 95, 72, 64, 94, 79,  #>     84, 71, 56, 62, 85, 90, 67, 98, 68, 76, 74, 75, 84, 79, 81,  #>     70, 86, 97, 71, 88, 90, 76, 70, 75, 77, 84, 76, 79, 82, 67,  #>     79, 77, 92, 94, 82, 60, 59, 86, 61, 99, 71, 99, 97, 100,  #>     66, 99, 79, 89, 83, 44, 47, 53, 84, 62, 81, 90, 89, 56, 73,  #>     97, 73, 78, 93, 60, 68, 73, 88, 63, 45, 98, 83, 86, 98, 77,  #>     63, 60, 69, 77, 95, 53, 96, 63, 91, 58, 86, 70, 62, 90, 59,  #>     94, 74, 80, 73, 80, 62, 63, 53, 73, 68, 84, 80, 67, 76, 100,  #>     94, 91, 60, 54, 95, 84, 78, 68, 90, 69, 82, 71, 67, 85, 87,  #>     66, 83, 89, 99, 98, 84, 56, 75, 89, 81, 46, 70, 73, 96, 63,  #>     87, 88, 84, 78, 80, 76, 53, 85, 71, 86, 55, 58, 80, 79, 66,  #>     90, 70, 94, 73, 75, 84, 63, 54, 66, 86, 84, 56, 69, 74, 93,  #>     61, 99, 62, 90, 53, 80, 58, 55, 73, 59, 85, 63, 75, 82, 79,  #>     82, 82, 59, 65, 86, 84, 95, 71, 91, 76, 52, 100, 83, 88,  #>     79, 90, 80, 94, 97, 69, 68, 59, 47, 58, 99, 68, 96, 66, 68,  #>     58, 49, 99, 82, 80, 93, 72, 78, 80, 92, 89, 55, 79, 86, 86,  #>     90, 79, 96, 66, 62, 68, 77, 99, 97, 92, 88, 91, 91, 61, 89,  #>     64, 100, 83, 76, 44, 60, 82, 53, 93, 100, 85, 50, 70, 56,  #>     74, 89, 83, 76, 84, 98, 82, 92, 44, 72, 77, 86, 99, 75, 61,  #>     60, 88, 78, 82, 76, 57, 61, 80, 73, 79, 77, 58, 92, 44, 66,  #>     64, 73, 84, 62, 79, 98, 82, 78, 65, 90, 80, 90, 70, 75, 76,  #>     56, 93, 90, 89, 82, 61, 60, 60, 73, 86, 61, 68, 90, 91, 84,  #>     96, 51, 89, 48, 91, 82, 84, 100, 57, 68, 73, 86, 92, 49,  #>     81, 70, 68, 72, 73, 65, 81, 61, 93, 78, 69, 59, 73, 66, 95,  #>     68, 62, 77, 88, 73, 58, 69, 87, 59, 67, 66, 87, 57, 83, 98,  #>     92, 49, 81, 70, 82, 94, 74, 61, 81, 90, 64, 69, 74, 79, 84,  #>     59, 92, 78, 92, 62, 72, 50, 94, 82, 74, 96, 63, 51, 56, 76,  #>     94, 76, 88, 99, 94, 70, 72, 83, 43, 100, 69, 62, 64, 87,  #>     85, 44, 65, 68, 74, 57, 75, 85, 98, 73, 78, 98, 71, 77, 73,  #>     51, 67, 89, 97, 68, 63, 86, 77, 82, 87, 92, 46, 49, 73, 94,  #>     80, 100, 57, 56, 58, 84, 90, 54, 68, 90, 72, 76, 72, 62,  #>     89, 68, 48, 70, 92, 93, 61, 63, 96, 80, 90, 47, 84, 84, 87,  #>     100, 94, 64, 80, 50, 71, 84, 82, 80, 88, 82, 62, 100, 58,  #>     84, 72, 79, 71, 91, 80, 92, 86, 97, 54, 89, 47, 83, 66, 95,  #>     85, 100, 72, 75, 63, 81, 56, 75, 80, 88, 93, 72, 97, 83,  #>     87, 88, 74, 74, 85, 53, 73, 75, 75, 90, 71, 95, 89, 76, 66,  #>     84, 96, 91, 81, 80, 65, 67, 65, 54, 91, 66, 86, 81, 75, 95,  #>     84, 90, 60, 80, 93, 92, 84, 69, 72, 67, 72, 89, 90, 75, 75,  #>     76, 97, 57, 58, 89, 73, 98, 83, 84, 71, 61, 83, 88, 82, 90,  #>     72, 74, 76, 69, 68, 87, 92, 65, 63, 87, 75, 94, 81, 74, 76,  #>     91, 73, 65, 67, 93, 58, 96, 87, 73, 53, 79, 85, 86, 88, 90,  #>     75, 51, 90, 86, 66, 80, 52, 66, 77, 81, 97, 54, 55, 98, 82,  #>     87, 87, 68, 79, 90, 68, 87, 90, 68, 66, 73, 79, 66, 62, 100,  #>     47, 51, 69, 68, 71, 96, 63, 87, 67, 72, 80, 80, 57, 72, 88,  #>     97, 63, 79, 65, 97, 73, 86, 83, 69, 84, 86, 73, 64, 91, 84,  #>     75, 55, 87, 72, 74, 93, 93, 91, 90, 76, 85, 50, 83, 77, 62,  #>     39, 69, 74, 58, 95, 93, 85, 92, 91, 95, 72, 79, 89, 67, 75,  #>     73, 52, 58, 86, 88, 78, 83, 94, 95, 47, 60, 72, 70, 77, 63,  #>     100, 72, 65, 77, 51, 58, 80, 76, 91, 70, 90, 68, 67, 65,  #>     71, 76, 60, 78, 76, 64, 88, 96, 93, 88, 91, 84, 85, 72, 82,  #>     66, 86, 96, 81, 61, 93, 77, 59, 83, 90, 94, 72, 55, 81, 52,  #>     100, 48, 96, 83, 83, 79, 85, 55, 100, 76, 80, 63, 66, 83,  #>     48, 80, 90, 82, 95, 62, 64, 75, 75, 85, 82, 72, 80, 85, 100,  #>     76, 87, 71, 69, 94, 63, 91, 93, 73, 75, 99, 76, 75, 79, 84,  #>     92, 90, 85, 64, 65, 77, 74, 70, 71, 62, 72, 42, 69, 97, 70,  #>     54, 56, 67, 79, 66, 43, 84, 68, 80, 91, 84, 100, 57, 93,  #>     92, 73, 78, 74, 76, 69, 83, 66, 49, 83, 80, 83, 86, 61, 95,  #>     80, 59, 62, 50, 71, 97, 89, 59, 54, 74, 72, 89, 91, 73, 95,  #>     60, 88, 64, 59, 54, 70, 76, 41, 79, 71, 99, 84, 78, 92, 61,  #>     79, 65, 99, 85, 53, 79, 67, 74, 87, 89, 72, 71, 60, 83, 66,  #>     87, 56, 74, 88, 97, 69, 70, 88, 70, 53, 96, 65, 75, 87, 64,  #>     73, 50, 77, 88, 95, 66, 100, 47, 89, 57, 45, 68, 89, 81,  #>     80, 68, 88, 86, 80, 67, 58, 80, 75, 62, 68, 97, 91, 84, 87,  #>     59, 77, 72, 71, 83, 86, 86, 73, 64, 82, 58, 59, 59, 89, 92,  #>     76, 84, 52, 64, 41, 75, 47, 62, 66, 90, 61, 72, 88, 90, 81,  #>     51, 90, 73, 71, 85, 70, 64, 81, 51, 77, 91, 84, 96, 84, 95,  #>     58, 86, 76, 71, 83, 58, 96, 89, 80, 94, 89, 66, 86, 74, 67,  #>     76, 79, 84, 97, 49, 71, 78, 82, 81, 82, 59, 64, 98, 75, 97,  #>     60, 90, 74, 85, 52, 74, 79, 56, 72, 74, 78, 50, 59, 95, 53,  #>     94, 66, 77, 61, 93, 94, 72, 90, 72, 87, 92, 51, 75, 82, 92,  #>     71, 46, 92, 93, 72, 65, 86, 78, 100, 71, 58, 82, 89, 90,  #>     87, 79, 71, 96, 71, 52, 64, 49, 78, 71, 84, 100, 59, 95,  #>     98, 62, 98, 70, 66, 84, 58, 94, 77, 81, 62, 74, 93, 51, 76,  #>     50, 72, 78, 63, 87, 61, 60, 76, 97, 64, 77, 68, 58, 69, 83,  #>     60, 69, 94, 79, 61, 63, 77, 96, 58, 56, 59, 86, 59, 88, 87,  #>     64, 68, 61, 64, 49, 59, 59, 88, 58, 76, 65, 87, 83, 100,  #>     92, 56, 98, 76, 51, 86, 95, 54, 100, 78, 71, 90, 66, 54,  #>     72, 63, 72, 55, 89, 54, 45, 75, 91, 69, 65, 82, 40, 86, 77,  #>     72, 61, 74, 82, 63, 67, 74, 58, 84, 79, 90, 92, 81, 81, 78,  #>     56, 95, 77, 70, 89, 73, 69, 88, 70, 81, 78, 72, 92, 68, 81,  #>     53, 78, 88, 86, 82, 63, 65, 65, 74, 58, 75, 93, 85, 75, 89,  #>     78, 82, 84, 59, 85, 78, 59, 91, 80, 57, 82, 69, 87, 91, 71,  #>     67, 82, 48, 82, 100, 81, 85, 69, 93, 92, 98, 69, 93, 82,  #>     90, 86, 70, 91, 64, 58, 92, 87, 60, 85, 76, 54, 69, 77, 81,  #>     89, 48, 92, 88, 69, 58, 72, 82, 61, 75, 62, 66, 50, 80, 64,  #>     88, 82, 71, 45, 77, 78, 75, 87, 96, 93, 80, 97, 75, 70, 66,  #>     88, 100, 93, 84, 62, 47, 89, 85, 56, 74, 74, 55, 69, 84,  #>     86, 87, 74, 69, 80, 64, 68, 92, 76, 92, 96, 55, 53, 64, 64,  #>     92, 75, 77, 49, 93, 49, 87, 50, 76, 82, 80, 57, 77, 86, 100,  #>     85, 86, 82, 44, 65, 56, 64, 90, 77, 60, 87, 64, 62, 63, 100,  #>     87, 77, 86, 75, 69, 43, 68, 100, 84, 59, 80, 57, 56, 69,  #>     88, 88, 76, 63, 54, 84, 96, 99, 80, 68, 73, 95, 61, 76, 84,  #>     91, 92, 90, 81, 88, 81, 86, 72, 72, 72, 47, 80, 75, 70, 78,  #>     63, 89, 64, 71, 70, 72, 75, 69, 69, 96, 81, 59, 74, 88, 59,  #>     82, 78, 96, 88, 98, 72, 98, 61, 55, 81, 68, 88, 64, 91, 54,  #>     62, 80, 64, 76, 70, 68, 100, 82, 83, 88, 85, 90, 67, 86,  #>     44, 72, 88, 70, 45, 88, 81, 87, 65, 81, 88, 82, 68, 68, 77,  #>     77, 73, 45, 83, 89, 75, 85, 49, 89, 83, 88, 74, 84, 48, 86,  #>     91, 51, 99, 66, 67, 76, 83, 76, 76, 62, 70, 57, 70, 66, 60,  #>     78, 80, 73, 74, 76, 88, 90, 88, 51, 56, 99, 74, 92, 78, 73,  #>     81, 76, 54, 73, 61, 54, 95, 97, 74, 82, 76, 84, 78, 78, 62,  #>     88, 83, 60, 55, 89, 87, 71, 85, 60, 58, 64, 66, 86, 93, 52,  #>     68, 74, 76, 60, 94, 80, 80, 74, 80, 88, 65, 95, 75, 86, 78,  #>     63, 78, 52, 84, 92, 86, 65, 85, 72, 100, 54, 81, 80, 90,  #>     78, 95, 79, 95, 60, 89, 86, 63, 63, 78, 69, 89, 87, 100,  #>     95, 54, 50, 91, 57, 94, 94, 58, 57, 95, 80, 85, 81, 54, 88,  #>     100, 74, 60, 75, 74, 97, 92, 90, 75, 59, 83, 94, 90, 67,  #>     72, 75, 86, 72, 75, 71, 60, 73, 59, 70, 58, 51, 76, 89, 66,  #>     54, 85, 81, 45, 77, 69, 64, 90, 88, 75, 76, 93, 64, 86, 59,  #>     64, 93, 74, 62, 89, 92, 70, 74, 67, 75, 72, 95, 95, 91, 96,  #>     83, 100, 81, 75, 88, 72, 96, 82, 94, 59, 89, 83, 100, 74,  #>     98, 88, 64, 93, 88, 71, 67, 62, 97, 74, 59, 81, 79, 98, 94,  #>     86, 75, 89, 73, 70, 51, 80, 55, 75, 73, 94, 87, 68, 61, 77,  #>     36, 71, 85, 81, 92, 73, 81, 60, 87, 62, 68, 80, 53, 61, 87,  #>     58, 95, 65, 62, 79, 93, 100, 80, 93, 69, 81, 76, 92, 74,  #>     90, 81, 50, 73, 77, 71, 98, 59, 71, 49, 92, 86, 58, 91, 89,  #>     87, 92, 80, 83, 83, 77, 66, 71, 99, 88, 100, 75, 95, 92,  #>     65, 75, 100, 58, 100, 78, 60, 54, 70, 83, 70, 74, 50, 85,  #>     67, 60, 50, 80, 76, 78, 82, 97, 69, 84, 61, 79, 70, 80, 49,  #>     68, 50, 95, 78, 59, 79, 98, 78, 70, 74, 53, 85, 82, 85, 78,  #>     89, 53, 84, 89, 98, 100, 58, 79, 91, 96, 82, 96, 70, 80,  #>     74, 80, 69, 81, 84, 75, 80, 70, 99, 53, 57, 61, 82, 93, 82,  #>     57, 64, 83, 79, 47, 87, 57, 75, 71, 100, 64, 85, 53, 57,  #>     75, 73, 65, 84, 70, 76, 85, 73, 85, 81, 92, 84, 77, 55, 98,  #>     97, 92, 82, 39, 72, 81, 94, 74, 86, 69, 65, 94, 85, 83, 88,  #>     72, 77, 77, 86, 80, 69, 81, 100, 59, 93, 48, 50, 74, 67,  #>     51, 83, 53, 72, 95, 62, 87, 66, 87, 74, 97, 64, 92, 85, 66,  #>     70, 80, 83, 49, 86, 84, 92, 66, 74, 68, 83, 86, 82, 94, 68,  #>     64, 85, 90, 98, 65, 66, 88, 77, 62, 73, 87, 67, 72, 67, 53,  #>     64, 85, 64, 79, 72, 65, 75, 89, 88, 71, 86, 90, 87, 69, 88,  #>     66, 72, 90, 82, 96, 80, 67, 97, 74, 68, 100, 77, 68, 81,  #>     95, 98, 62, 69, 73, 84, 73, 93, 92, 65, 78, 81, 91, 48, 68,  #>     50, 75, 72, 54, 45, 71, 96, 73, 82, 68, 66, 74, 90, 96, 98,  #>     77, 77, 70, 84, 93, 86, 69, 83, 78, 87, 97, 90, 77, 80, 88,  #>     90, 78, 92, 90, 81, 63, 70, 95, 91, 62, 88, 59, 84, 91, 66,  #>     61, 68, 78, 72, 89, 51, 87, 49, 81, 45, 57, 88, 55, 89, 60,  #>     92, 80, 63, 68, 84, 72, 61, 95, 74, 83, 66, 51, 58, 62, 79,  #>     63, 84, 76, 42, 67, 51, 85, 63, 44, 79, 82, 73, 80, 81, 71,  #>     74, 81, 82, 58, 59, 71, 81, 84, 66, 64, 76, 84, 79, 62, 82,  #>     76, 70, 79, 78, 91, 78, 82, 70, 87, 71, 51, 91, 78, 91, 90,  #>     81, 67, 88, 65, 74, 74, 82, 79, 84, 75, 70, 87, 77, 99, 88,  #>     62, 66, 54, 82, 79, 82, 61, 67, 72, 93, 57, 67, 73, 78, 85,  #>     70, 92, 92, 48, 68, 62, 99, 64, 57, 83, 79, 66, 72, 78, 78,  #>     87, 61, 90, 59, 62, 61, 72, 96, 84, 91, 70, 49, 76, 88, 69,  #>     79, 61, 67, 71, 100, 93, 88, 95, 86, 52, 85, 91, 63, 75,  #>     91, 69, 73, 75, 76, 73, 89, 82, 68, 94, 84, 86, 74, 83, 58,  #>     58, 76, 83, 76, 98, 87, 63, 75, 86, 70, 86, 55, 68, 59, 74,  #>     72, 87, 49, 55, 80, 73, 90, 69, 67, 62, 91, 57, 57, 62, 79,  #>     91, 93, 95, 88, 50, 75, 97, 66, 82, 86, 64, 73, 84, 80, 77,  #>     59, 89, 57, 64, 95, 86, 97, 76, 81, 71, 93, 70, 66, 65, 59,  #>     49, 68, 65, 49, 91, 54, 77, 80, 79, 64, 61, 66, 94, 89, 78,  #>     80, 74, 79, 74, 70, 73, 53, 77, 72, 62, 94, 60, 49, 88, 82,  #>     86, 77, 63, 82, 60, 94, 81, 66, 58, 58, 86, 42, 89, 58, 58,  #>     77, 81, 82, 86, 49, 73, 63, 50, 79, 65, 91, 57, 63, 100,  #>     93, 93, 78, 91, 59, 75, 80, 89, 84, 72, 59, 81, 60, 64, 77,  #>     58, 54, 55, 78, 75, 100, 58, 99, 64, 80, 84, 81, 75, 93,  #>     71, 81, 77, 57, 74, 75, 53, 50, 56, 86, 69, 48, 81, 92, 92,  #>     94, 80, 78, 65, 80, 93, 68, 65, 75, 77, 81, 81, 70, 73, 85,  #>     82, 58, 97, 55, 96, 68, 69, 79, 50, 95, 84, 98, 67, 76, 84,  #>     97, 74, 91, 70, 89, 79, 70, 83, 85, 100, 80, 56, 84, 76,  #>     69, 94, 75, 88, 57, 53, 69, 78, 99, 84, 71, 65, 82, 99, 77,  #>     62, 81, 77, 81, 62, 87, 44, 82, 75, 70, 100, 75, 91, 60,  #>     55, 91, 90, 41, 83, 89, 80, 78, 93, 93, 94, 67, 97, 53, 69,  #>     85, 56, 77, 56, 55, 76, 68, 83, 88, 79, 82, 62, 68, 93, 53,  #>     59, 62, 87, 61, 42, 82, 89, 84, 89, 80, 78, 67, 71, 95, 68,  #>     56, 79, 85, 98, 81, 93, 90, 67, 74, 91, 88, 64, 66, 64, 56,  #>     88, 98, 77, 77, 90, 65, 77, 86, 76, 88, 71, 73, 73, 66, 80,  #>     65, 81, 74, 72, 98, 86, 75, 79, 80, 97, 79, 70, 71, 90, 57,  #>     83, 100, 85, 63, 72, 90, 75, 65, 86, 87, 92, 98, 76, 69,  #>     57, 67, 99, 72, 92, 73, 84, 71, 51, 88, 82, 77, 58, 80, 93,  #>     97, 95, 72, 62, 63, 78, 68, 92, 91, 90, 68, 72, 77, 86, 69,  #>     100, 76, 84, 84, 91, 87, 63, 77, 59, 95, 87, 94, 87, 100,  #>     49, 63, 78, 67, 77, 79, 89, 79, 81, 88, 84, 66, 45, 84, 86,  #>     100, 65, 76, 56, 67, 67, 68, 64, 66, 94, 94, 62, 72, 99,  #>     90, 72, 84, 87, 88, 57, 62, 82, 79, 88, 80, 78, 65, 88, 72,  #>     98, 86, 77, 66, 84, 71, 69, 63, 71, 87, 81, 87, 95, 75, 100,  #>     100, 87, 82, 63, 96, 87, 98, 77, 67, 76, 70, 81, 54, 64,  #>     81, 61, 93, 52, 65, 88, 64, 87, 65, 64, 62, 89, 85, 91, 83,  #>     80, 57, 55, 75, 73, 73, 69, 88, 72, 55, 75, 99, 80, 93, 60,  #>     66, 75, 100, 69, 78, 84, 88, 73, 100, 72, 87, 79, 95, 89,  #>     83, 77, 73, 82, 89, 88, 84, 76, 76, 62, 50, 83, 68, 90, 91,  #>     66, 50, 69, 99, 71, 97, 48, 57, 94, 68, 99, 66, 66, 90, 94,  #>     95, 72, 100, 78, 83, 96, 73, 61, 62, 88, 46, 86, 47, 42,  #>     74, 73, 47, 65, 72, 97, 76, 73, 83, 75, 75, 68, 49, 82, 69,  #>     100, 93, 84, 57, 84, 91, 83, 82, 79, 99, 93, 74, 45, 86,  #>     74, 93, 96, 74, 84, 91, 76, 82, 67, 94, 74, 64, 72, 83, 73,  #>     84, 61, 81, 80, 47, 94, 86, 90, 67, 67, 90, 81, 87, 66, 54,  #>     63, 58, 64, 46, 88, 75, 60, 69, 79, 80, 72, 86, 70, 79, 99,  #>     74, 88, 86, 86, 58, 66, 76, 92, 96, 84, 64, 43, 74, 49, 84,  #>     75, 57, 52, 85, 84, 72, 83, 75, 74, 100, 94, 73, 64, 42,  #>     89, 100, 61, 60, 78, 65, 95, 95, 90, 88, 44, 92, 56, 78,  #>     78, 75, 58, 74, 86, 85, 49, 92, 81, 93, 72, 82, 94, 82, 90,  #>     76, 79, 48, 53, 79, 74, 82, 62, 97, 91, 90, 88, 66, 99, 89,  #>     87, 97, 66, 87, 87, 84, 71, 63, 85, 89, 91, 94, 56, 64, 63,  #>     100, 59, 65, 87, 46, 65, 50, 80, 67, 71, 95, 90, 79, 78,  #>     91, 78, 74, 61, 67, 60, 86, 54, 64, 40, 74, 71, 93, 67, 76,  #>     81, 78, 72, 63, 59, 73, 99, 81, 78, 88, 80, 67, 52, 86, 69,  #>     83, 49, 88, 90, 78, 62, 83, 62, 90, 45, 63, 93, 84, 85, 67,  #>     84, 100, 96, 78, 58, 68, 89, 67, 73, 78, 83, 89, 68, 90,  #>     84, 92, 70, 86, 87, 54, 88, 77, 93, 66, 68, 72, 80, 96, 78,  #>     73, 97, 82, 59, 95, 82, 69, 68, 80, 87, 100, 99, 61, 86,  #>     48, 89, 64, 55, 73, 69, 78, 93, 62, 65, 95, 67, 85, 60, 72,  #>     95, 73, 47, 84, 100, 71, 53, 99, 70, 69, 73, 81, 59, 65,  #>     76, 74, 52, 67, 88, 65, 68, 68, 58, 60, 77, 98, 82, 91, 75,  #>     94, 59, 60, 79, 99, 57, 54, 75, 83, 92, 94, 71, 78, 100,  #>     83, 98, 87, 96, 91, 81, 83, 96, 86, 83, 66, 87, 72, 76, 92,  #>     79, 71, 93, 84, 69, 71, 41, 80, 80, 100, 57, 80, 74, 77,  #>     91, 51, 76, 78, 66, 85, 79, 63, 100, 90, 86, 89, 85, 93,  #>     79, 76, 76, 54, 98, 94, 92, 91, 83, 95, 72, 77, 96, 86, 69,  #>     100, 83, 69, 84, 89, 56, 60, 75, 82, 77, 92, 71, 70, 69,  #>     79, 86, 72, 95, 91, 77, 43, 76, 69, 72, 85, 45, 67, 81, 82,  #>     76, 93, 56, 88, 62, 92, 74, 65, 84, 78, 86, 84, 69, 50, 99,  #>     83, 70, 93, 75, 59, 95, 50, 94, 79, 82, 97, 93, 48, 83, 94,  #>     85, 73, 77, 100, 76, 89, 85, 67, 61, 86, 93, 71, 68, 86,  #>     51, 77, 88, 79, 81, 64, 65, 65, 97, 67, 100, 74, 84, 72,  #>     90, 82, 95, 95, 95, 75, 88, 73, 54, 70, 73, 67, 78, 71, 89,  #>     69, 76, 93, 85, 88, 94, 75, 76, 84, 76, 72, 81, 82, 89, 86,  #>     82, 85, 71, 75, 59, 70, 74, 80, 75, 87, 88, 45, 77, 91, 81,  #>     70, 58, 69, 63, 82, 86, 74, 61, 67, 56, 62, 87, 90, 84, 61,  #>     70, 96, 60, 96, 82, 62, 55, 87, 64, 67, 50, 66, 51, 83, 85,  #>     71, 68, 50, 93, 63, 76, 47, 51, 73, 98, 46, 80, 61, 56, 99,  #>     80, 78, 57, 87, 82, 76, 67, 86, 60, 100, 74, 59, 66, 88,  #>     89, 78, 73, 73, 76, 88, 50, 44, 91, 65, 87, 63, 64, 100,  #>     71, 86, 87, 96, 60, 91, 94, 66, 97, 88, 79, 59, 66, 94, 75,  #>     56, 88, 82, 92, 69, 62, 51, 83, 97, 58, 80, 97, 74, 67, 60,  #>     67, 67, 63, 85, 81, 93, 60, 83, 74, 75, 69, 100, 82, 96,  #>     68, 67, 89, 91, 57, 58, 85, 98, 85, 80, 62, 93, 52, 100,  #>     92, 60, 93, 90, 69, 66, 78, 70, 72, 74, 52, 94, 79, 59, 82,  #>     61, 74, 66, 87, 78, 96, 65, 66, 87, 62, 68, 95, 81, 74, 87,  #>     81, 84, 84, 69, 54, 67, 80, 68, 54, 68, 53, 58, 63, 81, 79,  #>     81, 81, 91, 90, 53, 72, 97, 75, 61, 79, 75, 84, 59, 92, 70,  #>     58, 60, 91, 100, 62, 84, 61, 68, 64, 69, 63, 67, 89, 76,  #>     88, 75, 76, 73, 82, 72, 97, 66, 76, 73, 66, 60, 94, 99, 73,  #>     82, 69, 83, 94, 45, 92, 82, 80, 91, 98, 41, 62, 48, 86, 52,  #>     95, 63, 90, 96, 77, 66, 86, 80, 74, 77, 68, 83, 54, 100,  #>     78, 60, 82, 70, 86, 74, 66, 61, 85, 85, 95, 81, 66), `as.factor(grade)4` = c(1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0,  #>     0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1,  #>     1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0,  #>     0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,  #>     1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,  #>     1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1,  #>     0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0,  #>     1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,  #>     1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1,  #>     0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0,  #>     1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1,  #>     1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0,  #>     1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0,  #>     0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0,  #>     0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0,  #>     1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,  #>     0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,  #>     1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0,  #>     1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,  #>     1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0,  #>     0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1,  #>     1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,  #>     1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,  #>     0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1,  #>     0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1,  #>     0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,  #>     1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0,  #>     1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1,  #>     1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1,  #>     1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,  #>     0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,  #>     1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0,  #>     1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,  #>     1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,  #>     1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1,  #>     1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0,  #>     0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,  #>     1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0,  #>     1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1,  #>     1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0,  #>     0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1,  #>     1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1,  #>     1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1,  #>     1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,  #>     0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,  #>     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,  #>     1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1,  #>     1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,  #>     1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1,  #>     0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0,  #>     0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0,  #>     0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0,  #>     0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0,  #>     0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0,  #>     1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0,  #>     0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,  #>     1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,  #>     1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1,  #>     0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,  #>     0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1,  #>     1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,  #>     1, 1, 0, 1, 1, 1, 0, 0, 0, 0), `as.factor(grade)5` = c(0,  #>     0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0,  #>     1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0,  #>     1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0,  #>     0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,  #>     0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1,  #>     1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0,  #>     1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1,  #>     1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0,  #>     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,  #>     1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,  #>     1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1,  #>     1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1,  #>     1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1,  #>     0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0,  #>     1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0,  #>     0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,  #>     0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,  #>     0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0,  #>     0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,  #>     1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0,  #>     0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,  #>     1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0,  #>     1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0,  #>     1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0,  #>     1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1,  #>     1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0,  #>     1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1,  #>     0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1,  #>     1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,  #>     1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0,  #>     1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1,  #>     0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,  #>     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,  #>     1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,  #>     1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,  #>     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0,  #>     1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,  #>     1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0,  #>     0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1,  #>     0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0,  #>     1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1,  #>     1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,  #>     0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,  #>     1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1,  #>     1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1,  #>     1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0,  #>     1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1,  #>     0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1,  #>     1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,  #>     0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0,  #>     1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,  #>     1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0,  #>     1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1,  #>     1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1,  #>     1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1,  #>     0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,  #>     1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1,  #>     1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1,  #>     1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,  #>     0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,  #>     0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,  #>     0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,  #>     1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,  #>     1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0,  #>     1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0,  #>     1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0,  #>     1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,  #>     1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,  #>     1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0,  #>     1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1,  #>     0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1,  #>     0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1,  #>     0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1,  #>     0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1,  #>     0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,  #>     1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0,  #>     0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1,  #>     0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,  #>     0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,  #>     0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0,  #>     0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1,  #>     0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  #>     1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1,  #>     1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0,  #>     1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  #>     1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1,  #>     0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,  #>     1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,  #>     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0,  #>     0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,  #>     0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,  #>     1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,  #>     0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,  #>     1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0,  #>     1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,  #>     1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0), `treatment._as.factor(grade)3` = c(0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0), `treatment._as.factor(grade)4` = c(0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 1, 0, 0, 1, 0, 0, 0, 0, 0), `treatment._as.factor(grade)5` = c(0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,  #>     1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  #>     1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,  #>     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  #>     0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), class = \"data.frame\", row.names = c(\"1\",  #> \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\",  #> \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",  #> \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\",  #> \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\",  #> \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\",  #> \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\",  #> \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",  #> \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\",  #> \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\",  #> \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\",  #> \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\",  #> \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\",  #> \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\",  #> \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\",  #> \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\",  #> \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\",  #> \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\",  #> \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\",  #> \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\",  #> \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\",  #> \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\",  #> \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\",  #> \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\",  #> \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\",  #> \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\",  #> \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\",  #> \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\",  #> \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\",  #> \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\",  #> \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\",  #> \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\",  #> \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\",  #> \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\",  #> \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\",  #> \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\",  #> \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\",  #> \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\",  #> \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\",  #> \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\",  #> \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\",  #> \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\",  #> \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\",  #> \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\",  #> \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\",  #> \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\",  #> \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\",  #> \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\",  #> \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\",  #> \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\",  #> \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\",  #> \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\",  #> \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\",  #> \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\",  #> \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\",  #> \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\",  #> \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\",  #> \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\",  #> \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\",  #> \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\",  #> \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\",  #> \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\",  #> \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\",  #> \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\",  #> \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\",  #> \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\",  #> \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\",  #> \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\",  #> \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\",  #> \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\",  #> \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\",  #> \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\",  #> \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\",  #> \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\",  #> \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\",  #> \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\",  #> \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\",  #> \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\",  #> \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\",  #> \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\",  #> \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\",  #> \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\",  #> \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\",  #> \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\",  #> \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\",  #> \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\",  #> \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\",  #> \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\",  #> \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\",  #> \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\",  #> \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\",  #> \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\",  #> \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\",  #> \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\",  #> \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\",  #> \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\",  #> \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\",  #> \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\",  #> \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\",  #> \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\",  #> \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\",  #> \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\",  #> \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\",  #> \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\",  #> \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\",  #> \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\",  #> \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\",  #> \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\",  #> \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\",  #> \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\",  #> \"1001\", \"1002\", \"1003\", \"1004\", \"1005\", \"1006\", \"1007\", \"1008\",  #> \"1009\", \"1010\", \"1011\", \"1012\", \"1013\", \"1014\", \"1015\", \"1016\",  #> \"1017\", \"1018\", \"1019\", \"1020\", \"1021\", \"1022\", \"1023\", \"1024\",  #> \"1025\", \"1026\", \"1027\", \"1028\", \"1029\", \"1030\", \"1031\", \"1032\",  #> \"1033\", \"1034\", \"1035\", \"1036\", \"1037\", \"1038\", \"1039\", \"1040\",  #> \"1041\", \"1042\", \"1043\", \"1044\", \"1045\", \"1046\", \"1047\", \"1048\",  #> \"1049\", \"1050\", \"1051\", \"1052\", \"1053\", \"1054\", \"1055\", \"1056\",  #> \"1057\", \"1058\", \"1059\", \"1060\", \"1061\", \"1062\", \"1063\", \"1064\",  #> \"1065\", \"1066\", \"1067\", \"1068\", \"1069\", \"1070\", \"1071\", \"1072\",  #> \"1073\", \"1074\", \"1075\", \"1076\", \"1077\", \"1078\", \"1079\", \"1080\",  #> \"1081\", \"1082\", \"1083\", \"1084\", \"1085\", \"1086\", \"1087\", \"1088\",  #> \"1089\", \"1090\", \"1091\", \"1092\", \"1093\", \"1094\", \"1095\", \"1096\",  #> \"1097\", \"1098\", \"1099\", \"1100\", \"1101\", \"1102\", \"1103\", \"1104\",  #> \"1105\", \"1106\", \"1107\", \"1108\", \"1109\", \"1110\", \"1111\", \"1112\",  #> \"1113\", \"1114\", \"1115\", \"1116\", \"1117\", \"1118\", \"1119\", \"1120\",  #> \"1121\", \"1122\", \"1123\", \"1124\", \"1125\", \"1126\", \"1127\", \"1128\",  #> \"1129\", \"1130\", \"1131\", \"1132\", \"1133\", \"1134\", \"1135\", \"1136\",  #> \"1137\", \"1138\", \"1139\", \"1140\", \"1141\", \"1142\", \"1143\", \"1144\",  #> \"1145\", \"1146\", \"1147\", \"1148\", \"1149\", \"1150\", \"1151\", \"1152\",  #> \"1153\", \"1154\", \"1155\", \"1156\", \"1157\", \"1158\", \"1159\", \"1160\",  #> \"1161\", \"1162\", \"1163\", \"1164\", \"1165\", \"1166\", \"1167\", \"1168\",  #> \"1169\", \"1170\", \"1171\", \"1172\", \"1173\", \"1174\", \"1175\", \"1176\",  #> \"1177\", \"1178\", \"1179\", \"1180\", \"1181\", \"1182\", \"1183\", \"1184\",  #> \"1185\", \"1186\", \"1187\", \"1188\", \"1189\", \"1190\", \"1191\", \"1192\",  #> \"1193\", \"1194\", \"1195\", \"1196\", \"1197\", \"1198\", \"1199\", \"1200\",  #> \"1201\", \"1202\", \"1203\", \"1204\", \"1205\", \"1206\", \"1207\", \"1208\",  #> \"1209\", \"1210\", \"1211\", \"1212\", \"1213\", \"1214\", \"1215\", \"1216\",  #> \"1217\", \"1218\", \"1219\", \"1220\", \"1221\", \"1222\", \"1223\", \"1224\",  #> \"1225\", \"1226\", \"1227\", \"1228\", \"1229\", \"1230\", \"1231\", \"1232\",  #> \"1233\", \"1234\", \"1235\", \"1236\", \"1237\", \"1238\", \"1239\", \"1240\",  #> \"1241\", \"1242\", \"1243\", \"1244\", \"1245\", \"1246\", \"1247\", \"1248\",  #> \"1249\", \"1250\", \"1251\", \"1252\", \"1253\", \"1254\", \"1255\", \"1256\",  #> \"1257\", \"1258\", \"1259\", \"1260\", \"1261\", \"1262\", \"1263\", \"1264\",  #> \"1265\", \"1266\", \"1267\", \"1268\", \"1269\", \"1270\", \"1271\", \"1272\",  #> \"1273\", \"1274\", \"1275\", \"1276\", \"1277\", \"1278\", \"1279\", \"1280\",  #> \"1281\", \"1282\", \"1283\", \"1284\", \"1285\", \"1286\", \"1287\", \"1288\",  #> \"1289\", \"1290\", \"1291\", \"1292\", \"1293\", \"1294\", \"1295\", \"1296\",  #> \"1297\", \"1298\", \"1299\", \"1300\", \"1301\", \"1302\", \"1303\", \"1304\",  #> \"1305\", \"1306\", \"1307\", \"1308\", \"1309\", \"1310\", \"1311\", \"1312\",  #> \"1313\", \"1314\", \"1315\", \"1316\", \"1317\", \"1318\", \"1319\", \"1320\",  #> \"1321\", \"1322\", \"1323\", \"1324\", \"1325\", \"1326\", \"1327\", \"1328\",  #> \"1329\", \"1330\", \"1331\", \"1332\", \"1333\", \"1334\", \"1335\", \"1336\",  #> \"1337\", \"1338\", \"1339\", \"1340\", \"1341\", \"1342\", \"1343\", \"1344\",  #> \"1345\", \"1346\", \"1347\", \"1348\", \"1349\", \"1350\", \"1351\", \"1352\",  #> \"1353\", \"1354\", \"1355\", \"1356\", \"1357\", \"1358\", \"1359\", \"1360\",  #> \"1361\", \"1362\", \"1363\", \"1364\", \"1365\", \"1366\", \"1367\", \"1368\",  #> \"1369\", \"1370\", \"1371\", \"1372\", \"1373\", \"1374\", \"1375\", \"1376\",  #> \"1377\", \"1378\", \"1379\", \"1380\", \"1381\", \"1382\", \"1383\", \"1384\",  #> \"1385\", \"1386\", \"1387\", \"1388\", \"1389\", \"1390\", \"1391\", \"1392\",  #> \"1393\", \"1394\", \"1395\", \"1396\", \"1397\", \"1398\", \"1399\", \"1400\",  #> \"1401\", \"1402\", \"1403\", \"1404\", \"1405\", \"1406\", \"1407\", \"1408\",  #> \"1409\", \"1410\", \"1411\", \"1412\", \"1413\", \"1414\", \"1415\", \"1416\",  #> \"1417\", \"1418\", \"1419\", \"1420\", \"1421\", \"1422\", \"1423\", \"1424\",  #> \"1425\", \"1426\", \"1427\", \"1428\", \"1429\", \"1430\", \"1431\", \"1432\",  #> \"1433\", \"1434\", \"1435\", \"1436\", \"1437\", \"1438\", \"1439\", \"1440\",  #> \"1441\", \"1442\", \"1443\", \"1444\", \"1445\", \"1446\", \"1447\", \"1448\",  #> \"1449\", \"1450\", \"1451\", \"1452\", \"1453\", \"1454\", \"1455\", \"1456\",  #> \"1457\", \"1458\", \"1459\", \"1460\", \"1461\", \"1462\", \"1463\", \"1464\",  #> \"1465\", \"1466\", \"1467\", \"1468\", \"1469\", \"1470\", \"1471\", \"1472\",  #> \"1473\", \"1474\", \"1475\", \"1476\", \"1477\", \"1478\", \"1479\", \"1480\",  #> \"1481\", \"1482\", \"1483\", \"1484\", \"1485\", \"1486\", \"1487\", \"1488\",  #> \"1489\", \"1490\", \"1491\", \"1492\", \"1493\", \"1494\", \"1495\", \"1496\",  #> \"1497\", \"1498\", \"1499\", \"1500\", \"1501\", \"1502\", \"1503\", \"1504\",  #> \"1505\", \"1506\", \"1507\", \"1508\", \"1509\", \"1510\", \"1511\", \"1512\",  #> \"1513\", \"1514\", \"1515\", \"1516\", \"1517\", \"1518\", \"1519\", \"1520\",  #> \"1521\", \"1522\", \"1523\", \"1524\", \"1525\", \"1526\", \"1527\", \"1528\",  #> \"1529\", \"1530\", \"1531\", \"1532\", \"1533\", \"1534\", \"1535\", \"1536\",  #> \"1537\", \"1538\", \"1539\", \"1540\", \"1541\", \"1542\", \"1543\", \"1544\",  #> \"1545\", \"1546\", \"1547\", \"1548\", \"1549\", \"1550\", \"1551\", \"1552\",  #> \"1553\", \"1554\", \"1555\", \"1556\", \"1557\", \"1558\", \"1559\", \"1560\",  #> \"1561\", \"1562\", \"1563\", \"1564\", \"1565\", \"1566\", \"1567\", \"1568\",  #> \"1569\", \"1570\", \"1571\", \"1572\", \"1573\", \"1574\", \"1575\", \"1576\",  #> \"1577\", \"1578\", \"1579\", \"1580\", \"1581\", \"1582\", \"1583\", \"1584\",  #> \"1585\", \"1586\", \"1587\", \"1588\", \"1589\", \"1590\", \"1591\", \"1592\",  #> \"1593\", \"1594\", \"1595\", \"1596\", \"1597\", \"1598\", \"1599\", \"1600\",  #> \"1601\", \"1602\", \"1603\", \"1604\", \"1605\", \"1606\", \"1607\", \"1608\",  #> \"1609\", \"1610\", \"1611\", \"1612\", \"1613\", \"1614\", \"1615\", \"1616\",  #> \"1617\", \"1618\", \"1619\", \"1620\", \"1621\", \"1622\", \"1623\", \"1624\",  #> \"1625\", \"1626\", \"1627\", \"1628\", \"1629\", \"1630\", \"1631\", \"1632\",  #> \"1633\", \"1634\", \"1635\", \"1636\", \"1637\", \"1638\", \"1639\", \"1640\",  #> \"1641\", \"1642\", \"1643\", \"1644\", \"1645\", \"1646\", \"1647\", \"1648\",  #> \"1649\", \"1650\", \"1651\", \"1652\", \"1653\", \"1654\", \"1655\", \"1656\",  #> \"1657\", \"1658\", \"1659\", \"1660\", \"1661\", \"1662\", \"1663\", \"1664\",  #> \"1665\", \"1666\", \"1667\", \"1668\", \"1669\", \"1670\", \"1671\", \"1672\",  #> \"1673\", \"1674\", \"1675\", \"1676\", \"1677\", \"1678\", \"1679\", \"1680\",  #> \"1681\", \"1682\", \"1683\", \"1684\", \"1685\", \"1686\", \"1687\", \"1688\",  #> \"1689\", \"1690\", \"1691\", \"1692\", \"1693\", \"1694\", \"1695\", \"1696\",  #> \"1697\", \"1698\", \"1699\", \"1700\", \"1701\", \"1702\", \"1703\", \"1704\",  #> \"1705\", \"1706\", \"1707\", \"1708\", \"1709\", \"1710\", \"1711\", \"1712\",  #> \"1713\", \"1714\", \"1715\", \"1716\", \"1717\", \"1718\", \"1719\", \"1720\",  #> \"1721\", \"1722\", \"1723\", \"1724\", \"1725\", \"1726\", \"1727\", \"1728\",  #> \"1729\", \"1730\", \"1731\", \"1732\", \"1733\", \"1734\", \"1735\", \"1736\",  #> \"1737\", \"1738\", \"1739\", \"1740\", \"1741\", \"1742\", \"1743\", \"1744\",  #> \"1745\", \"1746\", \"1747\", \"1748\", \"1749\", \"1750\", \"1751\", \"1752\",  #> \"1753\", \"1754\", \"1755\", \"1756\", \"1757\", \"1758\", \"1759\", \"1760\",  #> \"1761\", \"1762\", \"1763\", \"1764\", \"1765\", \"1766\", \"1767\", \"1768\",  #> \"1769\", \"1770\", \"1771\", \"1772\", \"1773\", \"1774\", \"1775\", \"1776\",  #> \"1777\", \"1778\", \"1779\", \"1780\", \"1781\", \"1782\", \"1783\", \"1784\",  #> \"1785\", \"1786\", \"1787\", \"1788\", \"1789\", \"1790\", \"1791\", \"1792\",  #> \"1793\", \"1794\", \"1795\", \"1796\", \"1797\", \"1798\", \"1799\", \"1800\",  #> \"1801\", \"1802\", \"1803\", \"1804\", \"1805\", \"1806\", \"1807\", \"1808\",  #> \"1809\", \"1810\", \"1811\", \"1812\", \"1813\", \"1814\", \"1815\", \"1816\",  #> \"1817\", \"1818\", \"1819\", \"1820\", \"1821\", \"1822\", \"1823\", \"1824\",  #> \"1825\", \"1826\", \"1827\", \"1828\", \"1829\", \"1830\", \"1831\", \"1832\",  #> \"1833\", \"1834\", \"1835\", \"1836\", \"1837\", \"1838\", \"1839\", \"1840\",  #> \"1841\", \"1842\", \"1843\", \"1844\", \"1845\", \"1846\", \"1847\", \"1848\",  #> \"1849\", \"1850\", \"1851\", \"1852\", \"1853\", \"1854\", \"1855\", \"1856\",  #> \"1857\", \"1858\", \"1859\", \"1860\", \"1861\", \"1862\", \"1863\", \"1864\",  #> \"1865\", \"1866\", \"1867\", \"1868\", \"1869\", \"1870\", \"1871\", \"1872\",  #> \"1873\", \"1874\", \"1875\", \"1876\", \"1877\", \"1878\", \"1879\", \"1880\",  #> \"1881\", \"1882\", \"1883\", \"1884\", \"1885\", \"1886\", \"1887\", \"1888\",  #> \"1889\", \"1890\", \"1891\", \"1892\", \"1893\", \"1894\", \"1895\", \"1896\",  #> \"1897\", \"1898\", \"1899\", \"1900\", \"1901\", \"1902\", \"1903\", \"1904\",  #> \"1905\", \"1906\", \"1907\", \"1908\", \"1909\", \"1910\", \"1911\", \"1912\",  #> \"1913\", \"1914\", \"1915\", \"1916\", \"1917\", \"1918\", \"1919\", \"1920\",  #> \"1921\", \"1922\", \"1923\", \"1924\", \"1925\", \"1926\", \"1927\", \"1928\",  #> \"1929\", \"1930\", \"1931\", \"1932\", \"1933\", \"1934\", \"1935\", \"1936\",  #> \"1937\", \"1938\", \"1939\", \"1940\", \"1941\", \"1942\", \"1943\", \"1944\",  #> \"1945\", \"1946\", \"1947\", \"1948\", \"1949\", \"1950\", \"1951\", \"1952\",  #> \"1953\", \"1954\", \"1955\", \"1956\", \"1957\", \"1958\", \"1959\", \"1960\",  #> \"1961\", \"1962\", \"1963\", \"1964\", \"1965\", \"1966\", \"1967\", \"1968\",  #> \"1969\", \"1970\", \"1971\", \"1972\", \"1973\", \"1974\", \"1975\", \"1976\",  #> \"1977\", \"1978\", \"1979\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\",  #> \"1985\", \"1986\", \"1987\", \"1988\", \"1989\", \"1990\", \"1991\", \"1992\",  #> \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\",  #> \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\",  #> \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\",  #> \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\",  #> \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\",  #> \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\",  #> \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\",  #> \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\",  #> \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\",  #> \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\",  #> \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\",  #> \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\",  #> \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\",  #> \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\",  #> \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\",  #> \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\",  #> \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\",  #> \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\",  #> \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\",  #> \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\",  #> \"2153\", \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\",  #> \"2161\", \"2162\", \"2163\", \"2164\", \"2165\", \"2166\", \"2167\", \"2168\",  #> \"2169\", \"2170\", \"2171\", \"2172\", \"2173\", \"2174\", \"2175\", \"2176\",  #> \"2177\", \"2178\", \"2179\", \"2180\", \"2181\", \"2182\", \"2183\", \"2184\",  #> \"2185\", \"2186\", \"2187\", \"2188\", \"2189\", \"2190\", \"2191\", \"2192\",  #> \"2193\", \"2194\", \"2195\", \"2196\", \"2197\", \"2198\", \"2199\", \"2200\",  #> \"2201\", \"2202\", \"2203\", \"2204\", \"2205\", \"2206\", \"2207\", \"2208\",  #> \"2209\", \"2210\", \"2211\", \"2212\", \"2213\", \"2214\", \"2215\", \"2216\",  #> \"2217\", \"2218\", \"2219\", \"2220\", \"2221\", \"2222\", \"2223\", \"2224\",  #> \"2225\", \"2226\", \"2227\", \"2228\", \"2229\", \"2230\", \"2231\", \"2232\",  #> \"2233\", \"2234\", \"2235\", \"2236\", \"2237\", \"2238\", \"2239\", \"2240\",  #> \"2241\", \"2242\", \"2243\", \"2244\", \"2245\", \"2246\", \"2247\", \"2248\",  #> \"2249\", \"2250\", \"2251\", \"2252\", \"2253\", \"2254\", \"2255\", \"2256\",  #> \"2257\", \"2258\", \"2259\", \"2260\", \"2261\", \"2262\", \"2263\", \"2264\",  #> \"2265\", \"2266\", \"2267\", \"2268\", \"2269\", \"2270\", \"2271\", \"2272\",  #> \"2273\", \"2274\", \"2275\", \"2276\", \"2277\", \"2278\", \"2279\", \"2280\",  #> \"2281\", \"2282\", \"2283\", \"2284\", \"2285\", \"2286\", \"2287\", \"2288\",  #> \"2289\", \"2290\", \"2291\", \"2292\", \"2293\", \"2294\", \"2295\", \"2296\",  #> \"2297\", \"2298\", \"2299\", \"2300\", \"2301\", \"2302\", \"2303\", \"2304\",  #> \"2305\", \"2306\", \"2307\", \"2308\", \"2309\", \"2310\", \"2311\", \"2312\",  #> \"2313\", \"2314\", \"2315\", \"2316\", \"2317\", \"2318\", \"2319\", \"2320\",  #> \"2321\", \"2322\", \"2323\", \"2324\", \"2325\", \"2326\", \"2327\", \"2328\",  #> \"2329\", \"2330\", \"2331\", \"2332\", \"2333\", \"2334\", \"2335\", \"2336\",  #> \"2337\", \"2338\", \"2339\", \"2340\", \"2341\", \"2342\", \"2343\", \"2344\",  #> \"2345\", \"2346\", \"2347\", \"2348\", \"2349\", \"2350\", \"2351\", \"2352\",  #> \"2353\", \"2354\", \"2355\", \"2356\", \"2357\", \"2358\", \"2359\", \"2360\",  #> \"2361\", \"2362\", \"2363\", \"2364\", \"2365\", \"2366\", \"2367\", \"2368\",  #> \"2369\", \"2370\", \"2371\", \"2372\", \"2373\", \"2374\", \"2375\", \"2376\",  #> \"2377\", \"2378\", \"2379\", \"2380\", \"2381\", \"2382\", \"2383\", \"2384\",  #> \"2385\", \"2386\", \"2387\", \"2388\", \"2389\", \"2390\", \"2391\", \"2392\",  #> \"2393\", \"2394\", \"2395\", \"2396\", \"2397\", \"2398\", \"2399\", \"2400\",  #> \"2401\", \"2402\", \"2403\", \"2404\", \"2405\", \"2406\", \"2407\", \"2408\",  #> \"2409\", \"2410\", \"2411\", \"2412\", \"2413\", \"2414\", \"2415\", \"2416\",  #> \"2417\", \"2418\", \"2419\", \"2420\", \"2421\", \"2422\", \"2423\", \"2424\",  #> \"2425\", \"2426\", \"2427\", \"2428\", \"2429\", \"2430\", \"2431\", \"2432\",  #> \"2433\", \"2434\", \"2435\", \"2436\", \"2437\", \"2438\", \"2439\", \"2440\",  #> \"2441\", \"2442\", \"2443\", \"2444\", \"2445\", \"2446\", \"2447\", \"2448\",  #> \"2449\", \"2450\", \"2451\", \"2452\", \"2453\", \"2454\", \"2455\", \"2456\",  #> \"2457\", \"2458\", \"2459\", \"2460\", \"2461\", \"2462\", \"2463\", \"2464\",  #> \"2465\", \"2466\", \"2467\", \"2468\", \"2469\", \"2470\", \"2471\", \"2472\",  #> \"2473\", \"2474\", \"2475\", \"2476\", \"2477\", \"2478\", \"2479\", \"2480\",  #> \"2481\", \"2482\", \"2483\", \"2484\", \"2485\", \"2486\", \"2487\", \"2488\",  #> \"2489\", \"2490\", \"2491\", \"2492\", \"2493\", \"2494\", \"2495\", \"2496\",  #> \"2497\", \"2498\", \"2499\", \"2500\", \"2501\", \"2502\", \"2503\", \"2504\",  #> \"2505\", \"2506\", \"2507\", \"2508\", \"2509\", \"2510\", \"2511\", \"2512\",  #> \"2513\", \"2514\", \"2515\", \"2516\", \"2517\", \"2518\", \"2519\", \"2520\",  #> \"2521\", \"2522\", \"2523\", \"2524\", \"2525\", \"2526\", \"2527\", \"2528\",  #> \"2529\", \"2530\", \"2531\", \"2532\", \"2533\", \"2534\", \"2535\", \"2536\",  #> \"2537\", \"2538\", \"2539\", \"2540\", \"2541\", \"2542\", \"2543\", \"2544\",  #> \"2545\", \"2546\", \"2547\", \"2548\", \"2549\", \"2550\", \"2551\", \"2552\",  #> \"2553\", \"2554\", \"2555\", \"2556\", \"2557\", \"2558\", \"2559\", \"2560\",  #> \"2561\", \"2562\", \"2563\", \"2564\", \"2565\", \"2566\", \"2567\", \"2568\",  #> \"2569\", \"2570\", \"2571\", \"2572\", \"2573\", \"2574\", \"2575\", \"2576\",  #> \"2577\", \"2578\", \"2579\", \"2580\", \"2581\", \"2582\", \"2583\", \"2584\",  #> \"2585\", \"2586\", \"2587\", \"2588\", \"2589\", \"2590\", \"2591\", \"2592\",  #> \"2593\", \"2594\", \"2595\", \"2596\", \"2597\", \"2598\", \"2599\", \"2600\",  #> \"2601\", \"2602\", \"2603\", \"2604\", \"2605\", \"2606\", \"2607\", \"2608\",  #> \"2609\", \"2610\", \"2611\", \"2612\", \"2613\", \"2614\", \"2615\", \"2616\",  #> \"2617\", \"2618\", \"2619\", \"2620\", \"2621\", \"2622\", \"2623\", \"2624\",  #> \"2625\", \"2626\", \"2627\", \"2628\", \"2629\", \"2630\", \"2631\", \"2632\",  #> \"2633\", \"2634\", \"2635\", \"2636\", \"2637\", \"2638\", \"2639\", \"2640\",  #> \"2641\", \"2642\", \"2643\", \"2644\", \"2645\", \"2646\", \"2647\", \"2648\",  #> \"2649\", \"2650\", \"2651\", \"2652\", \"2653\", \"2654\", \"2655\", \"2656\",  #> \"2657\", \"2658\", \"2659\", \"2660\", \"2661\", \"2662\", \"2663\", \"2664\",  #> \"2665\", \"2666\", \"2667\", \"2668\", \"2669\", \"2670\", \"2671\", \"2672\",  #> \"2673\", \"2674\", \"2675\", \"2676\", \"2677\", \"2678\", \"2679\", \"2680\",  #> \"2681\", \"2682\", \"2683\", \"2684\", \"2685\", \"2686\", \"2687\", \"2688\",  #> \"2689\", \"2690\", \"2691\", \"2692\", \"2693\", \"2694\", \"2695\", \"2696\",  #> \"2697\", \"2698\", \"2699\", \"2700\", \"2701\", \"2702\", \"2703\", \"2704\",  #> \"2705\", \"2706\", \"2707\", \"2708\", \"2709\", \"2710\", \"2711\", \"2712\",  #> \"2713\", \"2714\", \"2715\", \"2716\", \"2717\", \"2718\", \"2719\", \"2720\",  #> \"2721\", \"2722\", \"2723\", \"2724\", \"2725\", \"2726\", \"2727\", \"2728\",  #> \"2729\", \"2730\", \"2731\", \"2732\", \"2733\", \"2734\", \"2735\", \"2736\",  #> \"2737\", \"2738\", \"2739\", \"2740\", \"2741\", \"2742\", \"2743\", \"2744\",  #> \"2745\", \"2746\", \"2747\", \"2748\", \"2749\", \"2750\", \"2751\", \"2752\",  #> \"2753\", \"2754\", \"2755\", \"2756\", \"2757\", \"2758\", \"2759\", \"2760\",  #> \"2761\", \"2762\", \"2763\", \"2764\", \"2765\", \"2766\", \"2767\", \"2768\",  #> \"2769\", \"2770\", \"2771\", \"2772\", \"2773\", \"2774\", \"2775\", \"2776\",  #> \"2777\", \"2778\", \"2779\", \"2780\", \"2781\", \"2782\", \"2783\", \"2784\",  #> \"2785\", \"2786\", \"2787\", \"2788\", \"2789\", \"2790\", \"2791\", \"2792\",  #> \"2793\", \"2794\", \"2795\", \"2796\", \"2797\", \"2798\", \"2799\", \"2800\",  #> \"2801\", \"2802\", \"2803\", \"2804\", \"2805\", \"2806\", \"2807\", \"2808\",  #> \"2809\", \"2810\", \"2811\", \"2812\", \"2813\", \"2814\", \"2815\", \"2816\",  #> \"2817\", \"2818\", \"2819\", \"2820\", \"2821\", \"2822\", \"2823\", \"2824\",  #> \"2825\", \"2826\", \"2827\", \"2828\", \"2829\", \"2830\", \"2831\", \"2832\",  #> \"2833\", \"2834\", \"2835\", \"2836\", \"2837\", \"2838\", \"2839\", \"2840\",  #> \"2841\", \"2842\", \"2843\", \"2844\", \"2845\", \"2846\", \"2847\", \"2848\",  #> \"2849\", \"2850\", \"2851\", \"2852\", \"2853\", \"2854\", \"2855\", \"2856\",  #> \"2857\", \"2858\", \"2859\", \"2860\", \"2861\", \"2862\", \"2863\", \"2864\",  #> \"2865\", \"2866\", \"2867\", \"2868\", \"2869\", \"2870\", \"2871\", \"2872\",  #> \"2873\", \"2874\", \"2875\", \"2876\", \"2877\", \"2878\", \"2879\", \"2880\",  #> \"2881\", \"2882\", \"2883\", \"2884\", \"2885\", \"2886\", \"2887\", \"2888\",  #> \"2889\", \"2890\", \"2891\", \"2892\", \"2893\", \"2894\", \"2895\", \"2896\",  #> \"2897\", \"2898\", \"2899\", \"2900\", \"2901\", \"2902\", \"2903\", \"2904\",  #> \"2905\", \"2906\", \"2907\", \"2908\", \"2909\", \"2910\", \"2911\", \"2912\",  #> \"2913\", \"2914\", \"2915\", \"2916\", \"2917\", \"2918\", \"2919\", \"2920\",  #> \"2921\", \"2922\", \"2923\", \"2924\", \"2925\", \"2926\", \"2927\", \"2928\",  #> \"2929\", \"2930\", \"2931\", \"2932\", \"2933\", \"2934\", \"2935\", \"2936\",  #> \"2937\", \"2938\", \"2939\", \"2940\", \"2941\", \"2942\", \"2943\", \"2944\",  #> \"2945\", \"2946\", \"2947\", \"2948\", \"2949\", \"2950\", \"2951\", \"2952\",  #> \"2953\", \"2954\", \"2955\", \"2956\", \"2957\", \"2958\", \"2959\", \"2960\",  #> \"2961\", \"2962\", \"2963\", \"2964\", \"2965\", \"2966\", \"2967\", \"2968\",  #> \"2969\", \"2970\", \"2971\", \"2972\", \"2973\", \"2974\", \"2975\", \"2976\",  #> \"2977\", \"2978\", \"2979\", \"2980\", \"2981\", \"2982\", \"2983\", \"2984\",  #> \"2985\", \"2986\", \"2987\", \"2988\", \"2989\", \"2990\", \"2991\", \"2992\",  #> \"2993\", \"2994\", \"2995\", \"2996\", \"2997\", \"2998\", \"2999\", \"3000\",  #> \"3001\", \"3002\", \"3003\", \"3004\", \"3005\", \"3006\", \"3007\", \"3008\",  #> \"3009\", \"3010\", \"3011\", \"3012\", \"3013\", \"3014\", \"3015\", \"3016\",  #> \"3017\", \"3018\", \"3019\", \"3020\", \"3021\", \"3022\", \"3023\", \"3024\",  #> \"3025\", \"3026\", \"3027\", \"3028\", \"3029\", \"3030\", \"3031\", \"3032\",  #> \"3033\", \"3034\", \"3035\", \"3036\", \"3037\", \"3038\", \"3039\", \"3040\",  #> \"3041\", \"3042\", \"3043\", \"3044\", \"3045\", \"3046\", \"3047\", \"3048\",  #> \"3049\", \"3050\", \"3051\", \"3052\", \"3053\", \"3054\", \"3055\", \"3056\",  #> \"3057\", \"3058\", \"3059\", \"3060\", \"3061\", \"3062\", \"3063\", \"3064\",  #> \"3065\", \"3066\", \"3067\", \"3068\", \"3069\", \"3070\", \"3071\", \"3072\",  #> \"3073\", \"3074\", \"3075\", \"3076\", \"3077\", \"3078\", \"3079\", \"3080\",  #> \"3081\", \"3082\", \"3083\", \"3084\", \"3085\", \"3086\", \"3087\", \"3088\",  #> \"3089\", \"3090\", \"3091\", \"3092\", \"3093\", \"3094\", \"3095\", \"3096\",  #> \"3097\", \"3098\", \"3099\", \"3100\", \"3101\", \"3102\", \"3103\", \"3104\",  #> \"3105\", \"3106\", \"3107\", \"3108\", \"3109\", \"3110\", \"3111\", \"3112\",  #> \"3113\", \"3114\", \"3115\", \"3116\", \"3117\", \"3118\", \"3119\", \"3120\",  #> \"3121\", \"3122\", \"3123\", \"3124\", \"3125\", \"3126\", \"3127\", \"3128\",  #> \"3129\", \"3130\", \"3131\", \"3132\", \"3133\", \"3134\", \"3135\", \"3136\",  #> \"3137\", \"3138\", \"3139\", \"3140\", \"3141\", \"3142\", \"3143\", \"3144\",  #> \"3145\", \"3146\", \"3147\", \"3148\", \"3149\", \"3150\", \"3151\", \"3152\",  #> \"3153\", \"3154\", \"3155\", \"3156\", \"3157\", \"3158\", \"3159\", \"3160\",  #> \"3161\", \"3162\", \"3163\", \"3164\", \"3165\", \"3166\", \"3167\", \"3168\",  #> \"3169\", \"3170\", \"3171\", \"3172\", \"3173\", \"3174\", \"3175\", \"3176\",  #> \"3177\", \"3178\", \"3179\", \"3180\", \"3181\", \"3182\", \"3183\", \"3184\",  #> \"3185\", \"3186\", \"3187\", \"3188\", \"3189\", \"3190\", \"3191\", \"3192\",  #> \"3193\", \"3194\", \"3195\", \"3196\", \"3197\", \"3198\", \"3199\", \"3200\",  #> \"3201\", \"3202\", \"3203\", \"3204\", \"3205\", \"3206\", \"3207\", \"3208\",  #> \"3209\", \"3210\", \"3211\", \"3212\", \"3213\", \"3214\", \"3215\", \"3216\",  #> \"3217\", \"3218\", \"3219\", \"3220\", \"3221\", \"3222\", \"3223\", \"3224\",  #> \"3225\", \"3226\", \"3227\", \"3228\", \"3229\", \"3230\", \"3231\", \"3232\",  #> \"3233\", \"3234\", \"3235\", \"3236\", \"3237\", \"3238\", \"3239\", \"3240\",  #> \"3241\", \"3242\", \"3243\", \"3244\", \"3245\", \"3246\", \"3247\", \"3248\",  #> \"3249\", \"3250\", \"3251\", \"3252\", \"3253\", \"3254\", \"3255\", \"3256\",  #> \"3257\", \"3258\", \"3259\", \"3260\", \"3261\", \"3262\", \"3263\", \"3264\",  #> \"3265\", \"3266\", \"3267\", \"3268\", \"3269\", \"3270\", \"3271\", \"3272\",  #> \"3273\", \"3274\", \"3275\", \"3276\", \"3277\", \"3278\", \"3279\", \"3280\",  #> \"3281\", \"3282\", \"3283\", \"3284\", \"3285\", \"3286\", \"3287\", \"3288\",  #> \"3289\", \"3290\", \"3291\", \"3292\", \"3293\", \"3294\", \"3295\", \"3296\",  #> \"3297\", \"3298\", \"3299\", \"3300\", \"3301\", \"3302\", \"3303\", \"3304\",  #> \"3305\", \"3306\", \"3307\", \"3308\", \"3309\", \"3310\", \"3311\", \"3312\",  #> \"3313\", \"3314\", \"3315\", \"3316\", \"3317\", \"3318\", \"3319\", \"3320\",  #> \"3321\", \"3322\", \"3323\", \"3324\", \"3325\", \"3326\", \"3327\", \"3328\",  #> \"3329\", \"3330\", \"3331\", \"3332\", \"3333\", \"3334\", \"3335\", \"3336\",  #> \"3337\", \"3338\", \"3339\", \"3340\", \"3341\", \"3342\", \"3343\", \"3344\",  #> \"3345\", \"3346\", \"3347\", \"3348\", \"3349\", \"3350\", \"3351\", \"3352\",  #> \"3353\", \"3354\", \"3355\", \"3356\", \"3357\", \"3358\", \"3359\", \"3360\",  #> \"3361\", \"3362\", \"3363\", \"3364\", \"3365\", \"3366\", \"3367\", \"3368\",  #> \"3369\", \"3370\", \"3371\", \"3372\", \"3373\", \"3374\", \"3375\", \"3376\",  #> \"3377\", \"3378\", \"3379\", \"3380\", \"3381\", \"3382\", \"3383\", \"3384\",  #> \"3385\", \"3386\", \"3387\", \"3388\", \"3389\", \"3390\", \"3391\", \"3392\",  #> \"3393\", \"3394\", \"3395\", \"3396\", \"3397\", \"3398\", \"3399\", \"3400\",  #> \"3401\", \"3402\", \"3403\", \"3404\", \"3405\", \"3406\", \"3407\", \"3408\",  #> \"3409\", \"3410\", \"3411\", \"3412\", \"3413\", \"3414\", \"3415\", \"3416\",  #> \"3417\", \"3418\", \"3419\", \"3420\", \"3421\", \"3422\", \"3423\", \"3424\",  #> \"3425\", \"3426\", \"3427\", \"3428\", \"3429\", \"3430\", \"3431\", \"3432\",  #> \"3433\", \"3434\", \"3435\", \"3436\", \"3437\", \"3438\", \"3439\", \"3440\",  #> \"3441\", \"3442\", \"3443\", \"3444\", \"3445\", \"3446\", \"3447\", \"3448\",  #> \"3449\", \"3450\", \"3451\", \"3452\", \"3453\", \"3454\", \"3455\", \"3456\",  #> \"3457\", \"3458\", \"3459\", \"3460\", \"3461\", \"3462\", \"3463\", \"3464\",  #> \"3465\", \"3466\", \"3467\", \"3468\", \"3469\", \"3470\", \"3471\", \"3472\",  #> \"3473\", \"3474\", \"3475\", \"3476\", \"3477\", \"3478\", \"3479\", \"3480\",  #> \"3481\", \"3482\", \"3483\", \"3484\", \"3485\", \"3486\", \"3487\", \"3488\",  #> \"3489\", \"3490\", \"3491\", \"3492\", \"3493\", \"3494\", \"3495\", \"3496\",  #> \"3497\", \"3498\", \"3499\", \"3500\", \"3501\", \"3502\", \"3503\", \"3504\",  #> \"3505\", \"3506\", \"3507\", \"3508\", \"3509\", \"3510\", \"3511\", \"3512\",  #> \"3513\", \"3514\", \"3515\", \"3516\", \"3517\", \"3518\", \"3519\", \"3520\",  #> \"3521\", \"3522\", \"3523\", \"3524\", \"3525\", \"3526\", \"3527\", \"3528\",  #> \"3529\", \"3530\", \"3531\", \"3532\", \"3533\", \"3534\", \"3535\", \"3536\",  #> \"3537\", \"3538\", \"3539\", \"3540\", \"3541\", \"3542\", \"3543\", \"3544\",  #> \"3545\", \"3546\", \"3547\", \"3548\", \"3549\", \"3550\", \"3551\", \"3552\",  #> \"3553\", \"3554\", \"3555\", \"3556\", \"3557\", \"3558\", \"3559\", \"3560\",  #> \"3561\", \"3562\", \"3563\", \"3564\", \"3565\", \"3566\", \"3567\", \"3568\",  #> \"3569\", \"3570\", \"3571\", \"3572\", \"3573\", \"3574\", \"3575\", \"3576\",  #> \"3577\", \"3578\", \"3579\", \"3580\", \"3581\", \"3582\", \"3583\", \"3584\",  #> \"3585\", \"3586\", \"3587\", \"3588\", \"3589\", \"3590\", \"3591\", \"3592\",  #> \"3593\", \"3594\", \"3595\", \"3596\", \"3597\", \"3598\", \"3599\", \"3600\",  #> \"3601\", \"3602\", \"3603\", \"3604\", \"3605\", \"3606\", \"3607\", \"3608\",  #> \"3609\", \"3610\", \"3611\", \"3612\", \"3613\", \"3614\", \"3615\", \"3616\",  #> \"3617\", \"3618\", \"3619\", \"3620\", \"3621\", \"3622\", \"3623\", \"3624\",  #> \"3625\", \"3626\", \"3627\", \"3628\", \"3629\", \"3630\", \"3631\", \"3632\",  #> \"3633\", \"3634\", \"3635\", \"3636\", \"3637\", \"3638\", \"3639\", \"3640\",  #> \"3641\", \"3642\", \"3643\", \"3644\", \"3645\", \"3646\", \"3647\", \"3648\",  #> \"3649\", \"3650\", \"3651\", \"3652\", \"3653\", \"3654\", \"3655\", \"3656\",  #> \"3657\", \"3658\", \"3659\", \"3660\", \"3661\", \"3662\", \"3663\", \"3664\",  #> \"3665\", \"3666\", \"3667\", \"3668\", \"3669\", \"3670\", \"3671\", \"3672\",  #> \"3673\", \"3674\", \"3675\", \"3676\", \"3677\", \"3678\", \"3679\", \"3680\",  #> \"3681\", \"3682\", \"3683\", \"3684\", \"3685\", \"3686\", \"3687\", \"3688\",  #> \"3689\", \"3690\", \"3691\", \"3692\", \"3693\", \"3694\", \"3695\", \"3696\",  #> \"3697\", \"3698\", \"3699\", \"3700\", \"3701\", \"3702\", \"3703\", \"3704\",  #> \"3705\", \"3706\", \"3707\", \"3708\", \"3709\", \"3710\", \"3711\", \"3712\",  #> \"3713\", \"3714\", \"3715\", \"3716\", \"3717\", \"3718\", \"3719\", \"3720\",  #> \"3721\", \"3722\", \"3723\", \"3724\", \"3725\", \"3726\", \"3727\", \"3728\",  #> \"3729\", \"3730\", \"3731\", \"3732\", \"3733\", \"3734\", \"3735\", \"3736\",  #> \"3737\", \"3738\", \"3739\", \"3740\", \"3741\", \"3742\", \"3743\", \"3744\",  #> \"3745\", \"3746\", \"3747\", \"3748\", \"3749\", \"3750\", \"3751\", \"3752\",  #> \"3753\", \"3754\", \"3755\", \"3756\", \"3757\", \"3758\", \"3759\", \"3760\",  #> \"3761\", \"3762\", \"3763\", \"3764\", \"3765\", \"3766\", \"3767\", \"3768\",  #> \"3769\", \"3770\", \"3771\", \"3772\", \"3773\", \"3774\", \"3775\", \"3776\",  #> \"3777\", \"3778\", \"3779\", \"3780\", \"3781\", \"3782\", \"3783\", \"3784\",  #> \"3785\", \"3786\", \"3787\", \"3788\", \"3789\", \"3790\", \"3791\", \"3792\",  #> \"3793\", \"3794\", \"3795\", \"3796\", \"3797\", \"3798\", \"3799\", \"3800\",  #> \"3801\", \"3802\", \"3803\", \"3804\", \"3805\", \"3806\", \"3807\", \"3808\",  #> \"3809\", \"3810\", \"3811\", \"3812\", \"3813\", \"3814\", \"3815\", \"3816\",  #> \"3817\", \"3818\", \"3819\", \"3820\", \"3821\", \"3822\", \"3823\", \"3824\",  #> \"3825\", \"3826\", \"3827\", \"3828\", \"3829\", \"3830\", \"3831\", \"3832\",  #> \"3833\", \"3834\", \"3835\", \"3836\", \"3837\", \"3838\", \"3839\", \"3840\",  #> \"3841\", \"3842\", \"3843\", \"3844\", \"3845\", \"3846\", \"3847\", \"3848\",  #> \"3849\", \"3850\", \"3851\", \"3852\", \"3853\", \"3854\", \"3855\", \"3856\",  #> \"3857\", \"3858\", \"3859\", \"3860\", \"3861\", \"3862\", \"3863\", \"3864\",  #> \"3865\", \"3866\", \"3867\", \"3868\", \"3869\", \"3870\", \"3871\", \"3872\",  #> \"3873\", \"3874\", \"3875\", \"3876\", \"3877\", \"3878\", \"3879\", \"3880\",  #> \"3881\", \"3882\", \"3883\", \"3884\", \"3885\", \"3886\", \"3887\", \"3888\",  #> \"3889\", \"3890\", \"3891\", \"3892\", \"3893\", \"3894\", \"3895\", \"3896\",  #> \"3897\", \"3898\", \"3899\", \"3900\", \"3901\", \"3902\", \"3903\", \"3904\",  #> \"3905\", \"3906\", \"3907\", \"3908\", \"3909\", \"3910\", \"3911\", \"3912\",  #> \"3913\", \"3914\", \"3915\", \"3916\", \"3917\", \"3918\", \"3919\", \"3920\",  #> \"3921\", \"3922\", \"3923\", \"3924\", \"3925\", \"3926\", \"3927\", \"3928\",  #> \"3929\", \"3930\", \"3931\", \"3932\", \"3933\", \"3934\", \"3935\", \"3936\",  #> \"3937\", \"3938\", \"3939\", \"3940\", \"3941\", \"3942\", \"3943\", \"3944\",  #> \"3945\", \"3946\", \"3947\", \"3948\", \"3949\", \"3950\", \"3951\", \"3952\",  #> \"3953\", \"3954\", \"3955\", \"3956\", \"3957\", \"3958\", \"3959\", \"3960\",  #> \"3961\", \"3962\", \"3963\", \"3964\", \"3965\", \"3966\", \"3967\", \"3968\",  #> \"3969\", \"3970\", \"3971\", \"3972\", \"3973\", \"3974\", \"3975\", \"3976\",  #> \"3977\", \"3978\", \"3979\", \"3980\", \"3981\", \"3982\", \"3983\", \"3984\",  #> \"3985\", \"3986\", \"3987\", \"3988\", \"3989\", \"3990\", \"3991\", \"3992\",  #> \"3993\", \"3994\", \"3995\", \"3996\", \"3997\", \"3998\", \"3999\", \"4000\",  #> \"4001\", \"4002\", \"4003\", \"4004\", \"4005\", \"4006\", \"4007\", \"4008\",  #> \"4009\", \"4010\", \"4011\", \"4012\", \"4013\", \"4014\", \"4015\", \"4016\",  #> \"4017\", \"4018\", \"4019\", \"4020\", \"4021\", \"4022\", \"4023\", \"4024\",  #> \"4025\", \"4026\", \"4027\", \"4028\", \"4029\", \"4030\", \"4031\", \"4032\",  #> \"4033\", \"4034\", \"4035\", \"4036\", \"4037\", \"4038\", \"4039\", \"4040\",  #> \"4041\", \"4042\", \"4043\", \"4044\", \"4045\", \"4046\", \"4047\", \"4048\",  #> \"4049\", \"4050\", \"4051\", \"4052\", \"4053\", \"4054\", \"4055\", \"4056\",  #> \"4057\", \"4058\", \"4059\", \"4060\", \"4061\", \"4062\", \"4063\", \"4064\",  #> \"4065\", \"4066\", \"4067\", \"4068\", \"4069\", \"4070\", \"4071\", \"4072\",  #> \"4073\", \"4074\", \"4075\", \"4076\", \"4077\", \"4078\", \"4079\", \"4080\",  #> \"4081\", \"4082\", \"4083\", \"4084\", \"4085\", \"4086\", \"4087\", \"4088\",  #> \"4089\", \"4090\", \"4091\", \"4092\", \"4093\", \"4094\", \"4095\", \"4096\",  #> \"4097\", \"4098\", \"4099\", \"4100\", \"4101\", \"4102\", \"4103\", \"4104\",  #> \"4105\", \"4106\", \"4107\", \"4108\", \"4109\", \"4110\", \"4111\", \"4112\",  #> \"4113\", \"4114\", \"4115\", \"4116\", \"4117\", \"4118\", \"4119\", \"4120\",  #> \"4121\", \"4122\", \"4123\", \"4124\", \"4125\", \"4126\", \"4127\", \"4128\",  #> \"4129\", \"4130\", \"4131\", \"4132\", \"4133\", \"4134\", \"4135\", \"4136\",  #> \"4137\", \"4138\", \"4139\", \"4140\", \"4141\", \"4142\", \"4143\", \"4144\",  #> \"4145\", \"4146\", \"4147\", \"4148\", \"4149\", \"4150\", \"4151\", \"4152\",  #> \"4153\", \"4154\", \"4155\", \"4156\", \"4157\", \"4158\", \"4159\", \"4160\",  #> \"4161\", \"4162\", \"4163\", \"4164\", \"4165\", \"4166\", \"4167\", \"4168\",  #> \"4169\", \"4170\", \"4171\", \"4172\", \"4173\", \"4174\", \"4175\", \"4176\",  #> \"4177\", \"4178\", \"4179\", \"4180\", \"4181\", \"4182\", \"4183\", \"4184\",  #> \"4185\", \"4186\", \"4187\", \"4188\", \"4189\", \"4190\", \"4191\", \"4192\",  #> \"4193\", \"4194\", \"4195\", \"4196\", \"4197\", \"4198\", \"4199\", \"4200\",  #> \"4201\", \"4202\", \"4203\", \"4204\", \"4205\", \"4206\", \"4207\", \"4208\",  #> \"4209\", \"4210\", \"4211\", \"4212\", \"4213\", \"4214\", \"4215\", \"4216\",  #> \"4217\", \"4218\", \"4219\", \"4220\", \"4221\", \"4222\", \"4223\", \"4224\",  #> \"4225\", \"4226\", \"4227\", \"4228\", \"4229\", \"4230\", \"4231\", \"4232\",  #> \"4233\", \"4234\", \"4235\", \"4236\", \"4237\", \"4238\", \"4239\", \"4240\",  #> \"4241\", \"4242\", \"4243\", \"4244\", \"4245\", \"4246\", \"4247\", \"4248\",  #> \"4249\", \"4250\", \"4251\", \"4252\", \"4253\", \"4254\", \"4255\", \"4256\",  #> \"4257\", \"4258\", \"4259\", \"4260\", \"4261\", \"4262\", \"4263\", \"4264\",  #> \"4265\", \"4266\", \"4267\", \"4268\", \"4269\", \"4270\", \"4271\", \"4272\",  #> \"4273\", \"4274\", \"4275\", \"4276\", \"4277\", \"4278\", \"4279\", \"4280\",  #> \"4281\", \"4282\", \"4283\", \"4284\", \"4285\", \"4286\", \"4287\", \"4288\",  #> \"4289\", \"4290\", \"4291\", \"4292\", \"4293\", \"4294\", \"4295\", \"4296\",  #> \"4297\", \"4298\", \"4299\", \"4300\", \"4301\", \"4302\", \"4303\", \"4304\",  #> \"4305\", \"4306\", \"4307\", \"4308\", \"4309\", \"4310\", \"4311\", \"4312\",  #> \"4313\", \"4314\", \"4315\", \"4316\", \"4317\", \"4318\", \"4319\", \"4320\",  #> \"4321\", \"4322\", \"4323\", \"4324\", \"4325\", \"4326\", \"4327\", \"4328\",  #> \"4329\", \"4330\", \"4331\", \"4332\", \"4333\", \"4334\", \"4335\", \"4336\",  #> \"4337\", \"4338\", \"4339\", \"4340\", \"4341\", \"4342\", \"4343\", \"4344\",  #> \"4345\", \"4346\", \"4347\", \"4348\", \"4349\", \"4350\", \"4351\", \"4352\",  #> \"4353\", \"4354\", \"4355\", \"4356\", \"4357\", \"4358\", \"4359\", \"4360\",  #> \"4361\", \"4362\", \"4363\", \"4364\", \"4365\", \"4366\", \"4367\", \"4368\",  #> \"4369\", \"4370\", \"4371\", \"4372\", \"4373\", \"4374\", \"4375\", \"4376\",  #> \"4377\", \"4378\", \"4379\", \"4380\", \"4381\", \"4382\", \"4383\", \"4384\",  #> \"4385\", \"4386\", \"4387\", \"4388\", \"4389\", \"4390\", \"4391\", \"4392\",  #> \"4393\", \"4394\", \"4395\", \"4396\", \"4397\", \"4398\", \"4399\", \"4400\",  #> \"4401\", \"4402\", \"4403\", \"4404\", \"4405\", \"4406\", \"4407\", \"4408\",  #> \"4409\", \"4410\", \"4411\", \"4412\", \"4413\", \"4414\", \"4415\", \"4416\",  #> \"4417\", \"4418\", \"4419\", \"4420\", \"4421\", \"4422\", \"4423\", \"4424\",  #> \"4425\", \"4426\", \"4427\", \"4428\", \"4429\", \"4430\", \"4431\", \"4432\",  #> \"4433\", \"4434\", \"4435\", \"4436\", \"4437\", \"4438\", \"4439\", \"4440\",  #> \"4441\", \"4442\", \"4443\", \"4444\", \"4445\", \"4446\", \"4447\", \"4448\",  #> \"4449\", \"4450\", \"4451\", \"4452\", \"4453\", \"4454\", \"4455\", \"4456\",  #> \"4457\", \"4458\", \"4459\", \"4460\", \"4461\", \"4462\", \"4463\", \"4464\",  #> \"4465\", \"4466\", \"4467\", \"4468\", \"4469\", \"4470\", \"4471\", \"4472\",  #> \"4473\", \"4474\", \"4475\", \"4476\", \"4477\", \"4478\", \"4479\", \"4480\",  #> \"4481\", \"4482\", \"4483\", \"4484\", \"4485\", \"4486\", \"4487\", \"4488\",  #> \"4489\", \"4490\", \"4491\", \"4492\", \"4493\", \"4494\", \"4495\", \"4496\",  #> \"4497\", \"4498\", \"4499\", \"4500\", \"4501\", \"4502\", \"4503\", \"4504\",  #> \"4505\", \"4506\", \"4507\", \"4508\", \"4509\", \"4510\", \"4511\", \"4512\",  #> \"4513\", \"4514\", \"4515\", \"4516\", \"4517\", \"4518\", \"4519\", \"4520\",  #> \"4521\", \"4522\", \"4523\", \"4524\", \"4525\", \"4526\", \"4527\", \"4528\",  #> \"4529\", \"4530\", \"4531\", \"4532\", \"4533\", \"4534\", \"4535\", \"4536\",  #> \"4537\", \"4538\", \"4539\", \"4540\", \"4541\", \"4542\", \"4543\", \"4544\",  #> \"4545\", \"4546\", \"4547\", \"4548\", \"4549\", \"4550\", \"4551\", \"4552\",  #> \"4553\", \"4554\", \"4555\", \"4556\", \"4557\", \"4558\", \"4559\", \"4560\",  #> \"4561\", \"4562\", \"4563\", \"4564\", \"4565\", \"4566\", \"4567\", \"4568\",  #> \"4569\", \"4570\", \"4571\", \"4572\", \"4573\", \"4574\", \"4575\", \"4576\",  #> \"4577\", \"4578\", \"4579\", \"4580\", \"4581\", \"4582\", \"4583\", \"4584\",  #> \"4585\", \"4586\", \"4587\", \"4588\", \"4589\", \"4590\", \"4591\", \"4592\",  #> \"4593\", \"4594\", \"4595\", \"4596\", \"4597\", \"4598\", \"4599\", \"4600\",  #> \"4601\", \"4602\", \"4603\", \"4604\", \"4605\", \"4606\", \"4607\", \"4608\",  #> \"4609\", \"4610\", \"4611\", \"4612\", \"4613\", \"4614\", \"4615\", \"4616\",  #> \"4617\", \"4618\", \"4619\", \"4620\", \"4621\", \"4622\", \"4623\", \"4624\",  #> \"4625\", \"4626\", \"4627\", \"4628\", \"4629\", \"4630\", \"4631\", \"4632\",  #> \"4633\", \"4634\", \"4635\", \"4636\", \"4637\", \"4638\", \"4639\", \"4640\",  #> \"4641\", \"4642\", \"4643\", \"4644\", \"4645\", \"4646\", \"4647\", \"4648\",  #> \"4649\", \"4650\", \"4651\", \"4652\", \"4653\", \"4654\", \"4655\", \"4656\",  #> \"4657\", \"4658\", \"4659\", \"4660\", \"4661\", \"4662\", \"4663\", \"4664\",  #> \"4665\", \"4666\", \"4667\", \"4668\", \"4669\", \"4670\", \"4671\", \"4672\",  #> \"4673\", \"4674\", \"4675\", \"4676\", \"4677\", \"4678\", \"4679\", \"4680\",  #> \"4681\", \"4682\", \"4683\", \"4684\", \"4685\", \"4686\", \"4687\", \"4688\",  #> \"4689\", \"4690\", \"4691\", \"4692\", \"4693\", \"4694\", \"4695\", \"4696\",  #> \"4697\", \"4698\", \"4699\", \"4700\", \"4701\", \"4702\", \"4703\", \"4704\",  #> \"4705\", \"4706\", \"4707\", \"4708\", \"4709\", \"4710\", \"4711\", \"4712\",  #> \"4713\", \"4714\", \"4715\", \"4716\", \"4717\", \"4718\", \"4719\", \"4720\",  #> \"4721\", \"4722\", \"4723\", \"4724\", \"4725\", \"4726\", \"4727\", \"4728\",  #> \"4729\", \"4730\", \"4731\", \"4732\", \"4733\", \"4734\", \"4735\", \"4736\",  #> \"4737\", \"4738\", \"4739\", \"4740\", \"4741\", \"4742\", \"4743\", \"4744\",  #> \"4745\", \"4746\", \"4747\", \"4748\", \"4749\", \"4750\", \"4751\", \"4752\",  #> \"4753\", \"4754\", \"4755\", \"4756\", \"4757\", \"4758\", \"4759\", \"4760\",  #> \"4761\", \"4762\", \"4763\", \"4764\", \"4765\", \"4766\", \"4767\", \"4768\",  #> \"4769\", \"4770\", \"4771\", \"4772\", \"4773\", \"4774\", \"4775\", \"4776\",  #> \"4777\", \"4778\", \"4779\", \"4780\", \"4781\", \"4782\", \"4783\", \"4784\",  #> \"4785\", \"4786\", \"4787\", \"4788\", \"4789\", \"4790\", \"4791\", \"4792\",  #> \"4793\", \"4794\", \"4795\", \"4796\", \"4797\", \"4798\", \"4799\", \"4800\",  #> \"4801\", \"4802\", \"4803\", \"4804\", \"4805\", \"4806\", \"4807\", \"4808\",  #> \"4809\", \"4810\", \"4811\", \"4812\", \"4813\", \"4814\", \"4815\", \"4816\",  #> \"4817\", \"4818\", \"4819\", \"4820\", \"4821\", \"4822\", \"4823\", \"4824\",  #> \"4825\", \"4826\", \"4827\", \"4828\", \"4829\", \"4830\", \"4831\", \"4832\",  #> \"4833\", \"4834\", \"4835\", \"4836\", \"4837\", \"4838\", \"4839\", \"4840\",  #> \"4841\", \"4842\", \"4843\", \"4844\", \"4845\", \"4846\", \"4847\", \"4848\",  #> \"4849\", \"4850\", \"4851\", \"4852\", \"4853\", \"4854\", \"4855\", \"4856\",  #> \"4857\", \"4858\", \"4859\", \"4860\", \"4861\", \"4862\", \"4863\", \"4864\",  #> \"4865\", \"4866\", \"4867\", \"4868\", \"4869\", \"4870\", \"4871\", \"4872\",  #> \"4873\", \"4874\", \"4875\", \"4876\", \"4877\", \"4878\", \"4879\", \"4880\",  #> \"4881\", \"4882\", \"4883\", \"4884\", \"4885\", \"4886\", \"4887\", \"4888\",  #> \"4889\", \"4890\", \"4891\", \"4892\", \"4893\", \"4894\", \"4895\", \"4896\",  #> \"4897\", \"4898\", \"4899\", \"4900\", \"4901\", \"4902\", \"4903\", \"4904\",  #> \"4905\", \"4906\", \"4907\", \"4908\", \"4909\", \"4910\", \"4911\", \"4912\",  #> \"4913\", \"4914\", \"4915\", \"4916\", \"4917\", \"4918\", \"4919\", \"4920\",  #> \"4921\", \"4922\", \"4923\", \"4924\", \"4925\", \"4926\", \"4927\", \"4928\",  #> \"4929\", \"4930\", \"4931\", \"4932\", \"4933\", \"4934\", \"4935\", \"4936\",  #> \"4937\", \"4938\", \"4939\", \"4940\", \"4941\", \"4942\", \"4943\", \"4944\",  #> \"4945\", \"4946\", \"4947\", \"4948\", \"4949\", \"4950\", \"4951\", \"4952\",  #> \"4953\", \"4954\", \"4955\", \"4956\", \"4957\", \"4958\", \"4959\", \"4960\",  #> \"4961\", \"4962\", \"4963\", \"4964\", \"4965\", \"4966\", \"4967\", \"4968\",  #> \"4969\", \"4970\", \"4971\", \"4972\", \"4973\", \"4974\", \"4975\", \"4976\",  #> \"4977\", \"4978\", \"4979\", \"4980\", \"4981\", \"4982\", \"4983\", \"4984\",  #> \"4985\", \"4986\", \"4987\", \"4988\", \"4989\", \"4990\", \"4991\", \"4992\",  #> \"4993\", \"4994\", \"4995\", \"4996\", \"4997\", \"4998\", \"4999\", \"5000\",  #> \"5001\", \"5002\", \"5003\", \"5004\", \"5005\", \"5006\", \"5007\", \"5008\",  #> \"5009\", \"5010\", \"5011\", \"5012\", \"5013\", \"5014\", \"5015\", \"5016\",  #> \"5017\", \"5018\", \"5019\", \"5020\", \"5021\", \"5022\", \"5023\", \"5024\",  #> \"5025\", \"5026\", \"5027\", \"5028\", \"5029\", \"5030\", \"5031\", \"5032\",  #> \"5033\", \"5034\", \"5035\", \"5036\", \"5037\", \"5038\", \"5039\", \"5040\",  #> \"5041\", \"5042\", \"5043\", \"5044\", \"5045\", \"5046\", \"5047\", \"5048\",  #> \"5049\", \"5050\", \"5051\", \"5052\", \"5053\", \"5054\", \"5055\", \"5056\",  #> \"5057\", \"5058\", \"5059\", \"5060\", \"5061\", \"5062\", \"5063\", \"5064\",  #> \"5065\", \"5066\", \"5067\", \"5068\", \"5069\", \"5070\", \"5071\", \"5072\",  #> \"5073\", \"5074\", \"5075\", \"5076\", \"5077\", \"5078\", \"5079\", \"5080\",  #> \"5081\", \"5082\", \"5083\", \"5084\", \"5085\", \"5086\", \"5087\", \"5088\",  #> \"5089\", \"5090\", \"5091\", \"5092\", \"5093\", \"5094\", \"5095\", \"5096\",  #> \"5097\", \"5098\", \"5099\", \"5100\", \"5101\", \"5102\", \"5103\", \"5104\",  #> \"5105\", \"5106\", \"5107\", \"5108\", \"5109\", \"5110\", \"5111\", \"5112\",  #> \"5113\", \"5114\", \"5115\", \"5116\", \"5117\", \"5118\", \"5119\", \"5120\",  #> \"5121\", \"5122\", \"5123\", \"5124\", \"5125\", \"5126\", \"5127\", \"5128\",  #> \"5129\", \"5130\", \"5131\", \"5132\", \"5133\", \"5134\", \"5135\", \"5136\",  #> \"5137\", \"5138\", \"5139\", \"5140\", \"5141\", \"5142\", \"5143\", \"5144\",  #> \"5145\", \"5146\", \"5147\", \"5148\", \"5149\", \"5150\", \"5151\", \"5152\",  #> \"5153\", \"5154\", \"5155\", \"5156\", \"5157\", \"5158\", \"5159\", \"5160\",  #> \"5161\", \"5162\", \"5163\", \"5164\", \"5165\", \"5166\", \"5167\", \"5168\",  #> \"5169\", \"5170\", \"5171\", \"5172\", \"5173\", \"5174\", \"5175\", \"5176\",  #> \"5177\", \"5178\", \"5179\", \"5180\", \"5181\", \"5182\", \"5183\", \"5184\",  #> \"5185\", \"5186\", \"5187\", \"5188\", \"5189\", \"5190\", \"5191\", \"5192\",  #> \"5193\", \"5194\", \"5195\", \"5196\", \"5197\", \"5198\", \"5199\", \"5200\",  #> \"5201\", \"5202\", \"5203\", \"5204\", \"5205\", \"5206\", \"5207\", \"5208\",  #> \"5209\", \"5210\", \"5211\", \"5212\", \"5213\", \"5214\", \"5215\", \"5216\",  #> \"5217\", \"5218\", \"5219\", \"5220\", \"5221\", \"5222\", \"5223\", \"5224\",  #> \"5225\", \"5226\", \"5227\", \"5228\", \"5229\", \"5230\", \"5231\", \"5232\",  #> \"5233\", \"5234\", \"5235\", \"5236\", \"5237\", \"5238\", \"5239\", \"5240\",  #> \"5241\", \"5242\", \"5243\", \"5244\", \"5245\", \"5246\", \"5247\", \"5248\",  #> \"5249\", \"5250\", \"5251\", \"5252\", \"5253\", \"5254\", \"5255\", \"5256\",  #> \"5257\", \"5258\", \"5259\", \"5260\", \"5261\", \"5262\", \"5263\", \"5264\",  #> \"5265\", \"5266\", \"5267\", \"5268\", \"5269\", \"5270\", \"5271\", \"5272\",  #> \"5273\", \"5274\", \"5275\", \"5276\", \"5277\", \"5278\", \"5279\", \"5280\",  #> \"5281\", \"5282\", \"5283\", \"5284\", \"5285\", \"5286\", \"5287\", \"5288\",  #> \"5289\", \"5290\", \"5291\", \"5292\", \"5293\", \"5294\", \"5295\", \"5296\",  #> \"5297\", \"5298\", \"5299\", \"5300\", \"5301\", \"5302\", \"5303\", \"5304\",  #> \"5305\", \"5306\", \"5307\", \"5308\", \"5309\", \"5310\", \"5311\", \"5312\",  #> \"5313\", \"5314\", \"5315\", \"5316\", \"5317\", \"5318\", \"5319\", \"5320\",  #> \"5321\", \"5322\", \"5323\", \"5324\", \"5325\", \"5326\", \"5327\", \"5328\",  #> \"5329\", \"5330\", \"5331\", \"5332\", \"5333\", \"5334\", \"5335\", \"5336\",  #> \"5337\", \"5338\", \"5339\", \"5340\", \"5341\", \"5342\", \"5343\", \"5344\",  #> \"5345\", \"5346\", \"5347\", \"5348\", \"5349\", \"5350\", \"5351\", \"5352\",  #> \"5353\", \"5354\", \"5355\", \"5356\", \"5357\", \"5358\", \"5359\", \"5360\",  #> \"5361\", \"5362\", \"5363\", \"5364\", \"5365\", \"5366\", \"5367\", \"5368\",  #> \"5369\", \"5370\", \"5371\", \"5372\", \"5373\", \"5374\", \"5375\", \"5376\",  #> \"5377\", \"5378\", \"5379\", \"5380\", \"5381\", \"5382\", \"5383\", \"5384\",  #> \"5385\", \"5386\", \"5387\", \"5388\", \"5389\", \"5390\", \"5391\", \"5392\",  #> \"5393\", \"5394\", \"5395\", \"5396\", \"5397\", \"5398\", \"5399\", \"5400\",  #> \"5401\", \"5402\", \"5403\", \"5404\", \"5405\", \"5406\", \"5407\", \"5408\",  #> \"5409\", \"5410\", \"5411\", \"5412\", \"5413\", \"5414\", \"5415\", \"5416\",  #> \"5417\", \"5418\", \"5419\", \"5420\", \"5421\", \"5422\", \"5423\", \"5424\",  #> \"5425\", \"5426\", \"5427\", \"5428\", \"5429\", \"5430\", \"5431\", \"5432\",  #> \"5433\", \"5434\", \"5435\", \"5436\", \"5437\", \"5438\", \"5439\", \"5440\",  #> \"5441\", \"5442\", \"5443\", \"5444\", \"5445\", \"5446\", \"5447\", \"5448\",  #> \"5449\", \"5450\", \"5451\", \"5452\", \"5453\", \"5454\", \"5455\", \"5456\",  #> \"5457\", \"5458\", \"5459\", \"5460\", \"5461\", \"5462\", \"5463\", \"5464\",  #> \"5465\", \"5466\", \"5467\", \"5468\", \"5469\", \"5470\", \"5471\", \"5472\",  #> \"5473\", \"5474\", \"5475\", \"5476\", \"5477\", \"5478\", \"5479\", \"5480\",  #> \"5481\", \"5482\", \"5483\", \"5484\", \"5485\", \"5486\", \"5487\", \"5488\",  #> \"5489\", \"5490\", \"5491\", \"5492\", \"5493\", \"5494\", \"5495\", \"5496\",  #> \"5497\", \"5498\", \"5499\", \"5500\", \"5501\", \"5502\", \"5503\", \"5504\",  #> \"5505\", \"5506\", \"5507\", \"5508\", \"5509\", \"5510\", \"5511\", \"5512\",  #> \"5513\", \"5514\", \"5515\", \"5516\", \"5517\", \"5518\", \"5519\", \"5520\",  #> \"5521\", \"5522\", \"5523\", \"5524\", \"5525\", \"5526\", \"5527\", \"5528\",  #> \"5529\", \"5530\", \"5531\", \"5532\", \"5533\", \"5534\", \"5535\", \"5536\",  #> \"5537\", \"5538\", \"5539\", \"5540\", \"5541\", \"5542\", \"5543\", \"5544\",  #> \"5545\", \"5546\", \"5547\", \"5548\", \"5549\", \"5550\", \"5551\", \"5552\",  #> \"5553\", \"5554\", \"5555\", \"5556\", \"5557\", \"5558\", \"5559\", \"5560\",  #> \"5561\", \"5562\", \"5563\", \"5564\", \"5565\", \"5566\", \"5567\", \"5568\",  #> \"5569\", \"5570\", \"5571\", \"5572\", \"5573\", \"5574\", \"5575\", \"5576\",  #> \"5577\", \"5578\", \"5579\", \"5580\", \"5581\", \"5582\", \"5583\", \"5584\",  #> \"5585\", \"5586\", \"5587\", \"5588\", \"5589\", \"5590\", \"5591\", \"5592\",  #> \"5593\", \"5594\", \"5595\", \"5596\", \"5597\", \"5598\", \"5599\", \"5600\",  #> \"5601\", \"5602\", \"5603\", \"5604\", \"5605\", \"5606\", \"5607\", \"5608\",  #> \"5609\", \"5610\", \"5611\", \"5612\", \"5613\", \"5614\", \"5615\", \"5616\",  #> \"5617\", \"5618\", \"5619\", \"5620\", \"5621\", \"5622\", \"5623\", \"5624\",  #> \"5625\", \"5626\", \"5627\", \"5628\", \"5629\", \"5630\", \"5631\", \"5632\",  #> \"5633\", \"5634\", \"5635\", \"5636\", \"5637\", \"5638\", \"5639\", \"5640\",  #> \"5641\", \"5642\", \"5643\", \"5644\", \"5645\", \"5646\", \"5647\", \"5648\",  #> \"5649\", \"5650\", \"5651\", \"5652\", \"5653\", \"5654\", \"5655\", \"5656\",  #> \"5657\", \"5658\", \"5659\", \"5660\", \"5661\", \"5662\", \"5663\", \"5664\",  #> \"5665\", \"5666\", \"5667\", \"5668\", \"5669\", \"5670\", \"5671\", \"5672\",  #> \"5673\", \"5674\", \"5675\", \"5676\", \"5677\", \"5678\", \"5679\", \"5680\",  #> \"5681\", \"5682\", \"5683\", \"5684\", \"5685\", \"5686\", \"5687\", \"5688\",  #> \"5689\", \"5690\", \"5691\", \"5692\", \"5693\", \"5694\", \"5695\", \"5696\",  #> \"5697\", \"5698\", \"5699\", \"5700\", \"5701\", \"5702\", \"5703\", \"5704\",  #> \"5705\", \"5706\", \"5707\", \"5708\", \"5709\", \"5710\", \"5711\", \"5712\",  #> \"5713\", \"5714\", \"5715\", \"5716\", \"5717\", \"5718\", \"5719\", \"5720\",  #> \"5721\", \"5722\", \"5723\", \"5724\", \"5725\", \"5726\", \"5727\", \"5728\",  #> \"5729\", \"5730\", \"5731\", \"5732\", \"5733\", \"5734\", \"5735\", \"5736\",  #> \"5737\", \"5738\", \"5739\", \"5740\", \"5741\", \"5742\", \"5743\", \"5744\",  #> \"5745\", \"5746\", \"5747\", \"5748\", \"5749\", \"5750\", \"5751\", \"5752\",  #> \"5753\", \"5754\", \"5755\", \"5756\", \"5757\", \"5758\", \"5759\", \"5760\",  #> \"5761\", \"5762\", \"5763\", \"5764\", \"5765\", \"5766\", \"5767\", \"5768\",  #> \"5769\", \"5770\", \"5771\", \"5772\", \"5773\", \"5774\", \"5775\", \"5776\",  #> \"5777\", \"5778\", \"5779\", \"5780\", \"5781\", \"5782\", \"5783\", \"5784\",  #> \"5785\", \"5786\", \"5787\", \"5788\", \"5789\", \"5790\", \"5791\", \"5792\",  #> \"5793\", \"5794\", \"5795\", \"5796\", \"5797\", \"5798\", \"5799\", \"5800\",  #> \"5801\", \"5802\", \"5803\", \"5804\", \"5805\", \"5806\", \"5807\", \"5808\",  #> \"5809\", \"5810\", \"5811\", \"5812\", \"5813\", \"5814\", \"5815\", \"5816\",  #> \"5817\", \"5818\", \"5819\", \"5820\", \"5821\", \"5822\", \"5823\", \"5824\",  #> \"5825\", \"5826\", \"5827\", \"5828\", \"5829\", \"5830\", \"5831\", \"5832\",  #> \"5833\", \"5834\", \"5835\", \"5836\", \"5837\", \"5838\", \"5839\", \"5840\",  #> \"5841\", \"5842\", \"5843\", \"5844\", \"5845\", \"5846\", \"5847\", \"5848\",  #> \"5849\", \"5850\", \"5851\", \"5852\", \"5853\", \"5854\", \"5855\", \"5856\",  #> \"5857\", \"5858\", \"5859\", \"5860\", \"5861\", \"5862\", \"5863\", \"5864\",  #> \"5865\", \"5866\", \"5867\", \"5868\", \"5869\", \"5870\", \"5871\", \"5872\",  #> \"5873\", \"5874\", \"5875\", \"5876\", \"5877\", \"5878\", \"5879\", \"5880\",  #> \"5881\", \"5882\", \"5883\", \"5884\", \"5885\", \"5886\", \"5887\", \"5888\",  #> \"5889\", \"5890\", \"5891\", \"5892\", \"5893\", \"5894\", \"5895\", \"5896\",  #> \"5897\", \"5898\", \"5899\", \"5900\", \"5901\", \"5902\", \"5903\", \"5904\",  #> \"5905\", \"5906\", \"5907\", \"5908\", \"5909\", \"5910\", \"5911\", \"5912\",  #> \"5913\", \"5914\", \"5915\", \"5916\", \"5917\", \"5918\", \"5919\", \"5920\",  #> \"5921\", \"5922\", \"5923\", \"5924\", \"5925\", \"5926\", \"5927\", \"5928\",  #> \"5929\", \"5930\", \"5931\", \"5932\", \"5933\", \"5934\", \"5935\", \"5936\",  #> \"5937\", \"5938\", \"5939\", \"5940\", \"5941\", \"5942\", \"5943\", \"5944\",  #> \"5945\", \"5946\", \"5947\", \"5948\", \"5949\", \"5950\", \"5951\", \"5952\",  #> \"5953\", \"5954\", \"5955\", \"5956\", \"5957\", \"5958\", \"5959\", \"5960\",  #> \"5961\", \"5962\", \"5963\", \"5964\", \"5965\", \"5966\", \"5967\", \"5968\",  #> \"5969\", \"5970\", \"5971\", \"5972\", \"5973\", \"5974\", \"5975\", \"5976\",  #> \"5977\", \"5978\", \"5979\", \"5980\", \"5981\", \"5982\", \"5983\", \"5984\",  #> \"5985\", \"5986\", \"5987\", \"5988\", \"5989\", \"5990\", \"5991\", \"5992\",  #> \"5993\", \"5994\", \"5995\", \"5996\", \"5997\", \"5998\", \"5999\", \"6000\",  #> \"6001\", \"6002\", \"6003\", \"6004\", \"6005\", \"6006\", \"6007\", \"6008\",  #> \"6009\", \"6010\", \"6011\", \"6012\", \"6013\", \"6014\", \"6015\", \"6016\",  #> \"6017\", \"6018\", \"6019\", \"6020\", \"6021\", \"6022\", \"6023\", \"6024\",  #> \"6025\", \"6026\", \"6027\", \"6028\", \"6029\", \"6030\", \"6031\", \"6032\",  #> \"6033\", \"6034\", \"6035\", \"6036\", \"6037\", \"6038\", \"6039\", \"6040\",  #> \"6041\", \"6042\", \"6043\", \"6044\", \"6045\", \"6046\", \"6047\", \"6048\",  #> \"6049\", \"6050\", \"6051\", \"6052\", \"6053\", \"6054\", \"6055\", \"6056\",  #> \"6057\", \"6058\", \"6059\", \"6060\", \"6061\", \"6062\", \"6063\", \"6064\",  #> \"6065\", \"6066\", \"6067\", \"6068\", \"6069\", \"6070\", \"6071\", \"6072\",  #> \"6073\", \"6074\", \"6075\", \"6076\", \"6077\", \"6078\", \"6079\", \"6080\",  #> \"6081\", \"6082\", \"6083\", \"6084\", \"6085\", \"6086\", \"6087\", \"6088\",  #> \"6089\", \"6090\", \"6091\", \"6092\", \"6093\", \"6094\", \"6095\", \"6096\",  #> \"6097\", \"6098\", \"6099\", \"6100\", \"6101\", \"6102\", \"6103\", \"6104\",  #> \"6105\", \"6106\", \"6107\", \"6108\", \"6109\", \"6110\", \"6111\", \"6112\",  #> \"6113\", \"6114\", \"6115\", \"6116\", \"6117\", \"6118\", \"6119\", \"6120\",  #> \"6121\", \"6122\", \"6123\", \"6124\", \"6125\", \"6126\", \"6127\", \"6128\",  #> \"6129\", \"6130\", \"6131\", \"6132\", \"6133\", \"6134\", \"6135\", \"6136\",  #> \"6137\", \"6138\", \"6139\", \"6140\", \"6141\", \"6142\", \"6143\", \"6144\",  #> \"6145\", \"6146\", \"6147\", \"6148\", \"6149\", \"6150\", \"6151\", \"6152\",  #> \"6153\", \"6154\", \"6155\", \"6156\", \"6157\", \"6158\", \"6159\", \"6160\",  #> \"6161\", \"6162\", \"6163\", \"6164\", \"6165\", \"6166\", \"6167\", \"6168\",  #> \"6169\", \"6170\", \"6171\", \"6172\", \"6173\", \"6174\", \"6175\", \"6176\",  #> \"6177\", \"6178\", \"6179\", \"6180\", \"6181\", \"6182\", \"6183\", \"6184\",  #> \"6185\", \"6186\", \"6187\", \"6188\", \"6189\", \"6190\", \"6191\", \"6192\",  #> \"6193\", \"6194\", \"6195\", \"6196\", \"6197\", \"6198\", \"6199\", \"6200\",  #> \"6201\", \"6202\", \"6203\", \"6204\", \"6205\", \"6206\", \"6207\", \"6208\",  #> \"6209\", \"6210\", \"6211\", \"6212\", \"6213\", \"6214\", \"6215\", \"6216\",  #> \"6217\", \"6218\", \"6219\", \"6220\", \"6221\", \"6222\", \"6223\", \"6224\",  #> \"6225\", \"6226\", \"6227\", \"6228\", \"6229\", \"6230\", \"6231\", \"6232\",  #> \"6233\", \"6234\", \"6235\", \"6236\", \"6237\", \"6238\", \"6239\", \"6240\",  #> \"6241\", \"6242\", \"6243\", \"6244\", \"6245\", \"6246\", \"6247\", \"6248\",  #> \"6249\", \"6250\", \"6251\", \"6252\", \"6253\", \"6254\", \"6255\", \"6256\",  #> \"6257\", \"6258\", \"6259\", \"6260\", \"6261\", \"6262\", \"6263\", \"6264\",  #> \"6265\", \"6266\", \"6267\", \"6268\", \"6269\", \"6270\", \"6271\", \"6272\",  #> \"6273\", \"6274\", \"6275\", \"6276\", \"6277\", \"6278\", \"6279\", \"6280\",  #> \"6281\", \"6282\", \"6283\", \"6284\", \"6285\", \"6286\", \"6287\", \"6288\",  #> \"6289\", \"6290\", \"6291\", \"6292\", \"6293\", \"6294\", \"6295\", \"6296\",  #> \"6297\", \"6298\", \"6299\", \"6300\", \"6301\", \"6302\", \"6303\", \"6304\",  #> \"6305\", \"6306\", \"6307\", \"6308\", \"6309\", \"6310\", \"6311\", \"6312\",  #> \"6313\", \"6314\", \"6315\", \"6316\", \"6317\", \"6318\", \"6319\", \"6320\",  #> \"6321\", \"6322\", \"6323\", \"6324\", \"6325\", \"6326\", \"6327\", \"6328\",  #> \"6329\", \"6330\", \"6331\", \"6332\", \"6333\", \"6334\", \"6335\", \"6336\",  #> \"6337\", \"6338\", \"6339\", \"6340\", \"6341\", \"6342\", \"6343\", \"6344\",  #> \"6345\", \"6346\", \"6347\", \"6348\", \"6349\", \"6350\", \"6351\", \"6352\",  #> \"6353\", \"6354\", \"6355\", \"6356\", \"6357\", \"6358\", \"6359\", \"6360\",  #> \"6361\", \"6362\", \"6363\", \"6364\", \"6365\", \"6366\", \"6367\", \"6368\",  #> \"6369\", \"6370\", \"6371\", \"6372\", \"6373\", \"6374\", \"6375\", \"6376\",  #> \"6377\", \"6378\", \"6379\", \"6380\", \"6381\", \"6382\", \"6383\", \"6384\",  #> \"6385\", \"6386\", \"6387\", \"6388\", \"6389\", \"6390\", \"6391\", \"6392\",  #> \"6393\", \"6394\", \"6395\", \"6396\", \"6397\", \"6398\", \"6399\", \"6400\",  #> \"6401\", \"6402\", \"6403\", \"6404\", \"6405\", \"6406\", \"6407\", \"6408\",  #> \"6409\", \"6410\", \"6411\", \"6412\", \"6413\", \"6414\", \"6415\", \"6416\",  #> \"6417\", \"6418\", \"6419\", \"6420\", \"6421\", \"6422\", \"6423\", \"6424\",  #> \"6425\", \"6426\", \"6427\", \"6428\", \"6429\", \"6430\", \"6431\", \"6432\",  #> \"6433\", \"6434\", \"6435\", \"6436\", \"6437\", \"6438\", \"6439\", \"6440\",  #> \"6441\", \"6442\", \"6443\", \"6444\", \"6445\", \"6446\", \"6447\", \"6448\",  #> \"6449\", \"6450\", \"6451\", \"6452\", \"6453\", \"6454\", \"6455\", \"6456\",  #> \"6457\", \"6458\", \"6459\", \"6460\", \"6461\", \"6462\", \"6463\", \"6464\",  #> \"6465\", \"6466\", \"6467\", \"6468\", \"6469\", \"6470\", \"6471\", \"6472\",  #> \"6473\", \"6474\", \"6475\", \"6476\", \"6477\", \"6478\", \"6479\", \"6480\",  #> \"6481\", \"6482\", \"6483\", \"6484\", \"6485\", \"6486\", \"6487\", \"6488\",  #> \"6489\", \"6490\", \"6491\", \"6492\", \"6493\", \"6494\", \"6495\", \"6496\",  #> \"6497\", \"6498\", \"6499\", \"6500\", \"6501\", \"6502\", \"6503\", \"6504\",  #> \"6505\", \"6506\", \"6507\", \"6508\", \"6509\", \"6510\", \"6511\", \"6512\",  #> \"6513\", \"6514\", \"6515\", \"6516\", \"6517\", \"6518\", \"6519\", \"6520\",  #> \"6521\", \"6522\", \"6523\", \"6524\", \"6525\", \"6526\", \"6527\", \"6528\",  #> \"6529\", \"6530\", \"6531\", \"6532\", \"6533\", \"6534\", \"6535\", \"6536\",  #> \"6537\", \"6538\", \"6539\", \"6540\", \"6541\", \"6542\", \"6543\", \"6544\",  #> \"6545\", \"6546\", \"6547\", \"6548\", \"6549\", \"6550\", \"6551\", \"6552\",  #> \"6553\", \"6554\", \"6555\", \"6556\", \"6557\", \"6558\", \"6559\", \"6560\",  #> \"6561\", \"6562\", \"6563\", \"6564\", \"6565\", \"6566\", \"6567\", \"6568\",  #> \"6569\", \"6570\", \"6571\", \"6572\", \"6573\", \"6574\", \"6575\", \"6576\",  #> \"6577\", \"6578\", \"6579\", \"6580\", \"6581\", \"6582\", \"6583\", \"6584\",  #> \"6585\", \"6586\", \"6587\", \"6588\", \"6589\", \"6590\", \"6591\", \"6592\",  #> \"6593\", \"6594\", \"6595\", \"6596\", \"6597\", \"6598\", \"6599\", \"6600\",  #> \"6601\", \"6602\", \"6603\", \"6604\", \"6605\", \"6606\", \"6607\", \"6608\",  #> \"6609\", \"6610\", \"6611\", \"6612\", \"6613\", \"6614\", \"6615\", \"6616\",  #> \"6617\", \"6618\", \"6619\", \"6620\", \"6621\", \"6622\", \"6623\", \"6624\",  #> \"6625\", \"6626\", \"6627\", \"6628\", \"6629\", \"6630\", \"6631\", \"6632\",  #> \"6633\", \"6634\", \"6635\", \"6636\", \"6637\", \"6638\", \"6639\", \"6640\",  #> \"6641\", \"6642\", \"6643\", \"6644\", \"6645\", \"6646\", \"6647\", \"6648\",  #> \"6649\", \"6650\", \"6651\", \"6652\", \"6653\", \"6654\", \"6655\", \"6656\",  #> \"6657\", \"6658\", \"6659\", \"6660\", \"6661\", \"6662\", \"6663\", \"6664\",  #> \"6665\", \"6666\", \"6667\", \"6668\", \"6669\", \"6670\", \"6671\", \"6672\",  #> \"6673\", \"6674\", \"6675\", \"6676\", \"6677\", \"6678\", \"6679\", \"6680\",  #> \"6681\", \"6682\", \"6683\", \"6684\", \"6685\", \"6686\", \"6687\", \"6688\",  #> \"6689\", \"6690\", \"6691\", \"6692\", \"6693\", \"6694\", \"6695\", \"6696\",  #> \"6697\", \"6698\", \"6699\", \"6700\", \"6701\", \"6702\", \"6703\", \"6704\",  #> \"6705\", \"6706\", \"6707\", \"6708\", \"6709\", \"6710\", \"6711\", \"6712\",  #> \"6713\", \"6714\", \"6715\", \"6716\", \"6717\", \"6718\", \"6719\", \"6720\",  #> \"6721\", \"6722\", \"6723\", \"6724\", \"6725\", \"6726\", \"6727\", \"6728\",  #> \"6729\", \"6730\", \"6731\", \"6732\", \"6733\", \"6734\", \"6735\", \"6736\",  #> \"6737\", \"6738\", \"6739\", \"6740\", \"6741\", \"6742\", \"6743\", \"6744\",  #> \"6745\", \"6746\", \"6747\", \"6748\", \"6749\", \"6750\", \"6751\", \"6752\",  #> \"6753\", \"6754\", \"6755\", \"6756\", \"6757\", \"6758\", \"6759\", \"6760\",  #> \"6761\", \"6762\", \"6763\", \"6764\", \"6765\", \"6766\", \"6767\", \"6768\",  #> \"6769\", \"6770\", \"6771\", \"6772\", \"6773\", \"6774\", \"6775\", \"6776\",  #> \"6777\", \"6778\", \"6779\", \"6780\", \"6781\", \"6782\", \"6783\", \"6784\",  #> \"6785\", \"6786\", \"6787\", \"6788\", \"6789\", \"6790\", \"6791\", \"6792\",  #> \"6793\", \"6794\", \"6795\", \"6796\", \"6797\", \"6798\", \"6799\", \"6800\",  #> \"6801\", \"6802\", \"6803\", \"6804\", \"6805\", \"6806\", \"6807\", \"6808\",  #> \"6809\", \"6810\", \"6811\", \"6812\", \"6813\", \"6814\", \"6815\", \"6816\",  #> \"6817\", \"6818\", \"6819\", \"6820\", \"6821\", \"6822\", \"6823\", \"6824\",  #> \"6825\", \"6826\", \"6827\", \"6828\", \"6829\", \"6830\", \"6831\", \"6832\",  #> \"6833\", \"6834\", \"6835\", \"6836\", \"6837\", \"6838\", \"6839\", \"6840\",  #> \"6841\", \"6842\", \"6843\", \"6844\", \"6845\", \"6846\", \"6847\", \"6848\",  #> \"6849\", \"6850\", \"6851\", \"6852\", \"6853\", \"6854\", \"6855\", \"6856\",  #> \"6857\", \"6858\", \"6859\", \"6860\", \"6861\", \"6862\", \"6863\", \"6864\",  #> \"6865\", \"6866\", \"6867\", \"6868\", \"6869\", \"6870\", \"6871\", \"6872\",  #> \"6873\", \"6874\", \"6875\", \"6876\", \"6877\", \"6878\", \"6879\", \"6880\",  #> \"6881\", \"6882\", \"6883\", \"6884\", \"6885\", \"6886\", \"6887\", \"6888\",  #> \"6889\", \"6890\", \"6891\", \"6892\", \"6893\", \"6894\", \"6895\", \"6896\",  #> \"6897\", \"6898\", \"6899\", \"6900\", \"6901\", \"6902\", \"6903\", \"6904\",  #> \"6905\", \"6906\", \"6907\", \"6908\", \"6909\", \"6910\", \"6911\", \"6912\",  #> \"6913\", \"6914\", \"6915\", \"6916\", \"6917\", \"6918\", \"6919\", \"6920\",  #> \"6921\", \"6922\", \"6923\", \"6924\", \"6925\", \"6926\", \"6927\", \"6928\",  #> \"6929\", \"6930\", \"6931\", \"6932\", \"6933\", \"6934\", \"6935\", \"6936\",  #> \"6937\", \"6938\", \"6939\", \"6940\", \"6941\", \"6942\", \"6943\", \"6944\",  #> \"6945\", \"6946\", \"6947\", \"6948\", \"6949\", \"6950\", \"6951\", \"6952\",  #> \"6953\", \"6954\", \"6955\", \"6956\", \"6957\", \"6958\", \"6959\", \"6960\",  #> \"6961\", \"6962\", \"6963\", \"6964\", \"6965\", \"6966\", \"6967\", \"6968\",  #> \"6969\", \"6970\", \"6971\", \"6972\", \"6973\", \"6974\", \"6975\", \"6976\",  #> \"6977\", \"6978\", \"6979\", \"6980\", \"6981\", \"6982\", \"6983\", \"6984\",  #> \"6985\", \"6986\", \"6987\", \"6988\", \"6989\", \"6990\", \"6991\", \"6992\",  #> \"6993\", \"6994\", \"6995\", \"6996\", \"6997\", \"6998\", \"6999\", \"7000\",  #> \"7001\", \"7002\", \"7003\", \"7004\", \"7005\", \"7006\", \"7007\", \"7008\",  #> \"7009\", \"7010\", \"7011\", \"7012\", \"7013\", \"7014\", \"7015\", \"7016\",  #> \"7017\", \"7018\", \"7019\", \"7020\", \"7021\", \"7022\", \"7023\", \"7024\",  #> \"7025\", \"7026\", \"7027\", \"7028\", \"7029\", \"7030\", \"7031\", \"7032\",  #> \"7033\", \"7034\", \"7035\", \"7036\", \"7037\", \"7038\", \"7039\", \"7040\",  #> \"7041\", \"7042\", \"7043\", \"7044\", \"7045\", \"7046\", \"7047\", \"7048\",  #> \"7049\", \"7050\", \"7051\", \"7052\", \"7053\", \"7054\", \"7055\", \"7056\",  #> \"7057\", \"7058\", \"7059\", \"7060\", \"7061\", \"7062\", \"7063\", \"7064\",  #> \"7065\", \"7066\", \"7067\", \"7068\", \"7069\", \"7070\", \"7071\", \"7072\",  #> \"7073\", \"7074\", \"7075\", \"7076\", \"7077\", \"7078\", \"7079\", \"7080\",  #> \"7081\", \"7082\", \"7083\", \"7084\", \"7085\", \"7086\", \"7087\", \"7088\",  #> \"7089\", \"7090\", \"7091\", \"7092\", \"7093\", \"7094\", \"7095\", \"7096\",  #> \"7097\", \"7098\", \"7099\", \"7100\", \"7101\", \"7102\", \"7103\", \"7104\",  #> \"7105\", \"7106\", \"7107\", \"7108\", \"7109\", \"7110\", \"7111\", \"7112\",  #> \"7113\", \"7114\", \"7115\", \"7116\", \"7117\", \"7118\", \"7119\", \"7120\",  #> \"7121\", \"7122\", \"7123\", \"7124\", \"7125\", \"7126\", \"7127\", \"7128\",  #> \"7129\", \"7130\", \"7131\", \"7132\", \"7133\", \"7134\", \"7135\", \"7136\",  #> \"7137\", \"7138\", \"7139\", \"7140\", \"7141\", \"7142\", \"7143\", \"7144\",  #> \"7145\", \"7146\", \"7147\", \"7148\", \"7149\", \"7150\", \"7151\", \"7152\",  #> \"7153\", \"7154\", \"7155\", \"7156\", \"7157\", \"7158\", \"7159\", \"7160\",  #> \"7161\", \"7162\", \"7163\", \"7164\", \"7165\", \"7166\", \"7167\", \"7168\",  #> \"7169\", \"7170\", \"7171\", \"7172\", \"7173\", \"7174\", \"7175\", \"7176\",  #> \"7177\", \"7178\", \"7179\", \"7180\", \"7181\", \"7182\", \"7183\", \"7184\",  #> \"7185\", \"7186\", \"7187\", \"7188\", \"7189\", \"7190\", \"7191\", \"7192\",  #> \"7193\", \"7194\", \"7195\", \"7196\", \"7197\", \"7198\", \"7199\", \"7200\",  #> \"7201\", \"7202\", \"7203\", \"7204\", \"7205\", \"7206\", \"7207\", \"7208\",  #> \"7209\", \"7210\", \"7211\", \"7212\", \"7213\", \"7214\", \"7215\", \"7216\",  #> \"7217\", \"7218\", \"7219\", \"7220\", \"7221\", \"7222\", \"7223\", \"7224\",  #> \"7225\", \"7226\", \"7227\", \"7228\", \"7229\", \"7230\", \"7231\", \"7232\",  #> \"7233\", \"7234\", \"7235\", \"7236\", \"7237\", \"7238\", \"7239\", \"7240\",  #> \"7241\", \"7242\", \"7243\", \"7244\", \"7245\", \"7246\", \"7247\", \"7248\",  #> \"7249\", \"7250\", \"7251\", \"7252\", \"7253\", \"7254\", \"7255\", \"7256\",  #> \"7257\", \"7258\", \"7259\", \"7260\", \"7261\", \"7262\", \"7263\", \"7264\",  #> \"7265\", \"7266\", \"7267\", \"7268\", \"7269\", \"7270\", \"7271\", \"7272\",  #> \"7273\", \"7274\", \"7275\", \"7276\", \"7277\", \"7278\", \"7279\", \"7280\",  #> \"7281\", \"7282\", \"7283\", \"7284\", \"7285\", \"7286\", \"7287\", \"7288\",  #> \"7289\", \"7290\", \"7291\", \"7292\", \"7293\", \"7294\", \"7295\", \"7296\",  #> \"7297\", \"7298\", \"7299\", \"7300\", \"7301\", \"7302\", \"7303\", \"7304\",  #> \"7305\", \"7306\", \"7307\", \"7308\", \"7309\", \"7310\", \"7311\", \"7312\",  #> \"7313\", \"7314\", \"7315\", \"7316\", \"7317\", \"7318\", \"7319\", \"7320\",  #> \"7321\", \"7322\", \"7323\", \"7324\", \"7325\", \"7326\", \"7327\", \"7328\",  #> \"7329\", \"7330\", \"7331\", \"7332\", \"7333\", \"7334\", \"7335\", \"7336\",  #> \"7337\", \"7338\", \"7339\", \"7340\", \"7341\", \"7342\", \"7343\", \"7344\",  #> \"7345\", \"7346\", \"7347\", \"7348\", \"7349\", \"7350\", \"7351\", \"7352\",  #> \"7353\", \"7354\", \"7355\", \"7356\", \"7357\", \"7358\", \"7359\", \"7360\",  #> \"7361\", \"7362\", \"7363\", \"7364\", \"7365\", \"7366\", \"7367\", \"7368\",  #> \"7369\", \"7370\", \"7371\", \"7372\", \"7373\", \"7374\", \"7375\", \"7376\",  #> \"7377\", \"7378\", \"7379\", \"7380\", \"7381\", \"7382\", \"7383\", \"7384\",  #> \"7385\", \"7386\", \"7387\", \"7388\", \"7389\", \"7390\", \"7391\", \"7392\",  #> \"7393\", \"7394\", \"7395\", \"7396\", \"7397\", \"7398\", \"7399\", \"7400\",  #> \"7401\", \"7402\", \"7403\", \"7404\", \"7405\", \"7406\", \"7407\", \"7408\",  #> \"7409\", \"7410\", \"7411\", \"7412\", \"7413\", \"7414\", \"7415\", \"7416\",  #> \"7417\", \"7418\", \"7419\", \"7420\", \"7421\", \"7422\", \"7423\", \"7424\",  #> \"7425\", \"7426\", \"7427\", \"7428\", \"7429\", \"7430\", \"7431\", \"7432\",  #> \"7433\", \"7434\", \"7435\", \"7436\", \"7437\", \"7438\", \"7439\", \"7440\",  #> \"7441\", \"7442\", \"7443\", \"7444\", \"7445\", \"7446\", \"7447\", \"7448\",  #> \"7449\", \"7450\", \"7451\", \"7452\", \"7453\", \"7454\", \"7455\", \"7456\",  #> \"7457\", \"7458\", \"7459\", \"7460\", \"7461\", \"7462\", \"7463\", \"7464\",  #> \"7465\", \"7466\", \"7467\", \"7468\", \"7469\", \"7470\", \"7471\", \"7472\",  #> \"7473\", \"7474\", \"7475\", \"7476\", \"7477\", \"7478\", \"7479\", \"7480\",  #> \"7481\", \"7482\", \"7483\", \"7484\", \"7485\", \"7486\", \"7487\", \"7488\",  #> \"7489\", \"7490\", \"7491\", \"7492\", \"7493\", \"7494\", \"7495\", \"7496\",  #> \"7497\", \"7498\", \"7499\", \"7500\", \"7501\", \"7502\", \"7503\", \"7504\",  #> \"7505\", \"7506\", \"7507\", \"7508\", \"7509\", \"7510\", \"7511\", \"7512\",  #> \"7513\", \"7514\", \"7515\", \"7516\", \"7517\", \"7518\", \"7519\", \"7520\",  #> \"7521\", \"7522\", \"7523\", \"7524\", \"7525\", \"7526\", \"7527\", \"7528\",  #> \"7529\", \"7530\", \"7531\", \"7532\", \"7533\", \"7534\", \"7535\", \"7536\",  #> \"7537\", \"7538\", \"7539\", \"7540\", \"7541\", \"7542\", \"7543\", \"7544\",  #> \"7545\", \"7546\", \"7547\", \"7548\", \"7549\", \"7550\", \"7551\", \"7552\",  #> \"7553\", \"7554\", \"7555\", \"7556\", \"7557\", \"7558\", \"7559\", \"7560\",  #> \"7561\", \"7562\", \"7563\", \"7564\", \"7565\", \"7566\", \"7567\", \"7568\",  #> \"7569\", \"7570\", \"7571\", \"7572\", \"7573\", \"7574\", \"7575\", \"7576\",  #> \"7577\", \"7578\", \"7579\", \"7580\", \"7581\", \"7582\", \"7583\", \"7584\",  #> \"7585\", \"7586\", \"7587\", \"7588\", \"7589\", \"7590\", \"7591\", \"7592\",  #> \"7593\", \"7594\", \"7595\", \"7596\", \"7597\", \"7598\", \"7599\", \"7600\",  #> \"7601\", \"7602\", \"7603\", \"7604\", \"7605\", \"7606\", \"7607\", \"7608\",  #> \"7609\", \"7610\", \"7611\", \"7612\", \"7613\", \"7614\", \"7615\", \"7616\",  #> \"7617\", \"7618\", \"7619\", \"7620\", \"7621\", \"7622\", \"7623\", \"7624\",  #> \"7625\", \"7626\", \"7627\", \"7628\", \"7629\", \"7630\", \"7631\", \"7632\",  #> \"7633\", \"7634\", \"7635\", \"7636\", \"7637\", \"7638\", \"7639\", \"7640\",  #> \"7641\", \"7642\", \"7643\", \"7644\", \"7645\", \"7646\", \"7647\", \"7648\",  #> \"7649\", \"7650\", \"7651\", \"7652\", \"7653\", \"7654\", \"7655\", \"7656\",  #> \"7657\", \"7658\", \"7659\", \"7660\", \"7661\", \"7662\", \"7663\", \"7664\",  #> \"7665\", \"7666\", \"7667\", \"7668\", \"7669\", \"7670\", \"7671\", \"7672\",  #> \"7673\", \"7674\", \"7675\", \"7676\", \"7677\", \"7678\", \"7679\", \"7680\",  #> \"7681\", \"7682\", \"7683\", \"7684\", \"7685\", \"7686\", \"7687\", \"7688\",  #> \"7689\", \"7690\", \"7691\", \"7692\", \"7693\", \"7694\", \"7695\", \"7696\",  #> \"7697\", \"7698\", \"7699\", \"7700\", \"7701\", \"7702\", \"7703\", \"7704\",  #> \"7705\", \"7706\", \"7707\", \"7708\", \"7709\", \"7710\", \"7711\", \"7712\",  #> \"7713\", \"7714\", \"7715\", \"7716\", \"7717\", \"7718\", \"7719\", \"7720\",  #> \"7721\", \"7722\", \"7723\", \"7724\", \"7725\", \"7726\", \"7727\", \"7728\",  #> \"7729\", \"7730\", \"7731\", \"7732\", \"7733\", \"7734\", \"7735\", \"7736\",  #> \"7737\", \"7738\", \"7739\", \"7740\", \"7741\", \"7742\", \"7743\", \"7744\",  #> \"7745\", \"7746\", \"7747\", \"7748\", \"7749\", \"7750\", \"7751\", \"7752\",  #> \"7753\", \"7754\", \"7755\", \"7756\", \"7757\", \"7758\", \"7759\", \"7760\",  #> \"7761\", \"7762\", \"7763\", \"7764\", \"7765\", \"7766\", \"7767\", \"7768\",  #> \"7769\", \"7770\", \"7771\", \"7772\", \"7773\", \"7774\", \"7775\", \"7776\",  #> \"7777\", \"7778\", \"7779\", \"7780\", \"7781\", \"7782\", \"7783\", \"7784\",  #> \"7785\", \"7786\", \"7787\", \"7788\", \"7789\", \"7790\", \"7791\", \"7792\",  #> \"7793\", \"7794\", \"7795\", \"7796\", \"7797\", \"7798\", \"7799\", \"7800\",  #> \"7801\", \"7802\", \"7803\", \"7804\", \"7805\", \"7806\", \"7807\", \"7808\",  #> \"7809\", \"7810\", \"7811\", \"7812\", \"7813\", \"7814\", \"7815\", \"7816\",  #> \"7817\", \"7818\", \"7819\", \"7820\", \"7821\", \"7822\", \"7823\", \"7824\",  #> \"7825\", \"7826\", \"7827\", \"7828\", \"7829\", \"7830\", \"7831\", \"7832\",  #> \"7833\", \"7834\", \"7835\", \"7836\", \"7837\", \"7838\", \"7839\", \"7840\",  #> \"7841\", \"7842\", \"7843\", \"7844\", \"7845\", \"7846\", \"7847\", \"7848\",  #> \"7849\", \"7850\", \"7851\", \"7852\", \"7853\", \"7854\", \"7855\", \"7856\",  #> \"7857\", \"7858\", \"7859\", \"7860\", \"7861\", \"7862\", \"7863\", \"7864\",  #> \"7865\", \"7866\", \"7867\", \"7868\", \"7869\", \"7870\", \"7871\", \"7872\",  #> \"7873\", \"7874\", \"7875\", \"7876\", \"7877\", \"7878\", \"7879\", \"7880\",  #> \"7881\", \"7882\", \"7883\", \"7884\", \"7885\", \"7886\", \"7887\", \"7888\",  #> \"7889\", \"7890\", \"7891\", \"7892\", \"7893\", \"7894\", \"7895\", \"7896\",  #> \"7897\", \"7898\", \"7899\", \"7900\", \"7901\", \"7902\", \"7903\", \"7904\",  #> \"7905\", \"7906\", \"7907\", \"7908\", \"7909\", \"7910\", \"7911\", \"7912\",  #> \"7913\", \"7914\", \"7915\", \"7916\", \"7917\", \"7918\", \"7919\", \"7920\",  #> \"7921\", \"7922\", \"7923\", \"7924\", \"7925\", \"7926\", \"7927\", \"7928\",  #> \"7929\", \"7930\", \"7931\", \"7932\", \"7933\", \"7934\", \"7935\", \"7936\",  #> \"7937\", \"7938\", \"7939\", \"7940\", \"7941\", \"7942\", \"7943\", \"7944\",  #> \"7945\", \"7946\", \"7947\", \"7948\", \"7949\", \"7950\", \"7951\", \"7952\",  #> \"7953\", \"7954\", \"7955\", \"7956\", \"7957\", \"7958\", \"7959\", \"7960\",  #> \"7961\", \"7962\", \"7963\", \"7964\", \"7965\", \"7966\", \"7967\", \"7968\",  #> \"7969\", \"7970\", \"7971\", \"7972\", \"7973\", \"7974\", \"7975\", \"7976\",  #> \"7977\", \"7978\", \"7979\", \"7980\", \"7981\", \"7982\", \"7983\", \"7984\",  #> \"7985\", \"7986\", \"7987\", \"7988\", \"7989\", \"7990\", \"7991\", \"7992\",  #> \"7993\", \"7994\", \"7995\", \"7996\", \"7997\", \"7998\", \"7999\", \"8000\",  #> \"8001\", \"8002\", \"8003\", \"8004\", \"8005\", \"8006\", \"8007\", \"8008\",  #> \"8009\", \"8010\", \"8011\", \"8012\", \"8013\", \"8014\", \"8015\", \"8016\",  #> \"8017\", \"8018\", \"8019\", \"8020\", \"8021\", \"8022\", \"8023\", \"8024\",  #> \"8025\", \"8026\", \"8027\", \"8028\", \"8029\", \"8030\", \"8031\", \"8032\",  #> \"8033\", \"8034\", \"8035\", \"8036\", \"8037\", \"8038\", \"8039\", \"8040\",  #> \"8041\", \"8042\", \"8043\", \"8044\", \"8045\", \"8046\", \"8047\", \"8048\",  #> \"8049\", \"8050\", \"8051\", \"8052\", \"8053\", \"8054\", \"8055\", \"8056\",  #> \"8057\", \"8058\", \"8059\", \"8060\", \"8061\", \"8062\", \"8063\", \"8064\",  #> \"8065\", \"8066\", \"8067\", \"8068\", \"8069\", \"8070\", \"8071\", \"8072\",  #> \"8073\", \"8074\", \"8075\", \"8076\", \"8077\", \"8078\", \"8079\", \"8080\",  #> \"8081\", \"8082\", \"8083\", \"8084\", \"8085\", \"8086\", \"8087\", \"8088\",  #> \"8089\", \"8090\", \"8091\", \"8092\", \"8093\", \"8094\", \"8095\", \"8096\",  #> \"8097\", \"8098\", \"8099\", \"8100\", \"8101\", \"8102\", \"8103\", \"8104\",  #> \"8105\", \"8106\", \"8107\", \"8108\", \"8109\", \"8110\", \"8111\", \"8112\",  #> \"8113\", \"8114\", \"8115\", \"8116\", \"8117\", \"8118\", \"8119\", \"8120\",  #> \"8121\", \"8122\", \"8123\", \"8124\", \"8125\", \"8126\", \"8127\", \"8128\",  #> \"8129\", \"8130\", \"8131\", \"8132\", \"8133\", \"8134\", \"8135\", \"8136\",  #> \"8137\", \"8138\", \"8139\", \"8140\", \"8141\", \"8142\", \"8143\", \"8144\",  #> \"8145\", \"8146\", \"8147\", \"8148\", \"8149\", \"8150\", \"8151\", \"8152\",  #> \"8153\", \"8154\", \"8155\", \"8156\", \"8157\", \"8158\", \"8159\", \"8160\",  #> \"8161\", \"8162\", \"8163\", \"8164\", \"8165\", \"8166\", \"8167\", \"8168\",  #> \"8169\", \"8170\", \"8171\", \"8172\", \"8173\", \"8174\", \"8175\", \"8176\",  #> \"8177\", \"8178\", \"8179\", \"8180\", \"8181\", \"8182\", \"8183\", \"8184\",  #> \"8185\", \"8186\", \"8187\", \"8188\", \"8189\", \"8190\", \"8191\", \"8192\",  #> \"8193\", \"8194\", \"8195\", \"8196\", \"8197\", \"8198\", \"8199\", \"8200\",  #> \"8201\", \"8202\", \"8203\", \"8204\", \"8205\", \"8206\", \"8207\", \"8208\",  #> \"8209\", \"8210\", \"8211\", \"8212\", \"8213\", \"8214\", \"8215\", \"8216\",  #> \"8217\", \"8218\", \"8219\", \"8220\", \"8221\", \"8222\", \"8223\", \"8224\",  #> \"8225\", \"8226\", \"8227\", \"8228\", \"8229\", \"8230\", \"8231\", \"8232\",  #> \"8233\", \"8234\", \"8235\", \"8236\", \"8237\", \"8238\", \"8239\", \"8240\",  #> \"8241\", \"8242\", \"8243\", \"8244\", \"8245\", \"8246\", \"8247\", \"8248\",  #> \"8249\", \"8250\", \"8251\", \"8252\", \"8253\", \"8254\", \"8255\", \"8256\",  #> \"8257\", \"8258\", \"8259\", \"8260\", \"8261\", \"8262\", \"8263\", \"8264\",  #> \"8265\", \"8266\", \"8267\", \"8268\", \"8269\", \"8270\", \"8271\", \"8272\",  #> \"8273\", \"8274\", \"8275\", \"8276\", \"8277\", \"8278\", \"8279\", \"8280\",  #> \"8281\", \"8282\", \"8283\", \"8284\", \"8285\", \"8286\", \"8287\", \"8288\",  #> \"8289\", \"8290\", \"8291\", \"8292\", \"8293\", \"8294\", \"8295\", \"8296\",  #> \"8297\", \"8298\", \"8299\", \"8300\", \"8301\", \"8302\", \"8303\", \"8304\",  #> \"8305\", \"8306\", \"8307\", \"8308\", \"8309\", \"8310\", \"8311\", \"8312\",  #> \"8313\", \"8314\", \"8315\", \"8316\", \"8317\", \"8318\", \"8319\", \"8320\",  #> \"8321\", \"8322\", \"8323\", \"8324\", \"8325\", \"8326\", \"8327\", \"8328\",  #> \"8329\", \"8330\", \"8331\", \"8332\", \"8333\", \"8334\", \"8335\", \"8336\",  #> \"8337\", \"8338\", \"8339\", \"8340\", \"8341\", \"8342\", \"8343\", \"8344\",  #> \"8345\", \"8346\", \"8347\", \"8348\", \"8349\", \"8350\", \"8351\", \"8352\",  #> \"8353\", \"8354\", \"8355\", \"8356\", \"8357\", \"8358\", \"8359\", \"8360\",  #> \"8361\", \"8362\", \"8363\", \"8364\", \"8365\", \"8366\", \"8367\", \"8368\",  #> \"8369\", \"8370\", \"8371\", \"8372\", \"8373\", \"8374\", \"8375\", \"8376\",  #> \"8377\", \"8378\", \"8379\", \"8380\", \"8381\", \"8382\", \"8383\", \"8384\",  #> \"8385\", \"8386\", \"8387\", \"8388\", \"8389\", \"8390\", \"8391\", \"8392\",  #> \"8393\", \"8394\", \"8395\", \"8396\", \"8397\", \"8398\", \"8399\", \"8400\",  #> \"8401\", \"8402\", \"8403\", \"8404\", \"8405\", \"8406\", \"8407\", \"8408\",  #> \"8409\", \"8410\", \"8411\", \"8412\", \"8413\", \"8414\", \"8415\", \"8416\",  #> \"8417\", \"8418\", \"8419\", \"8420\", \"8421\", \"8422\", \"8423\", \"8424\",  #> \"8425\", \"8426\", \"8427\", \"8428\", \"8429\", \"8430\", \"8431\", \"8432\",  #> \"8433\", \"8434\", \"8435\", \"8436\", \"8437\", \"8438\", \"8439\", \"8440\",  #> \"8441\", \"8442\", \"8443\", \"8444\", \"8445\", \"8446\", \"8447\", \"8448\",  #> \"8449\", \"8450\", \"8451\", \"8452\", \"8453\", \"8454\", \"8455\", \"8456\",  #> \"8457\", \"8458\", \"8459\", \"8460\", \"8461\", \"8462\", \"8463\", \"8464\",  #> \"8465\", \"8466\", \"8467\", \"8468\", \"8469\", \"8470\", \"8471\", \"8472\",  #> \"8473\", \"8474\", \"8475\", \"8476\", \"8477\", \"8478\", \"8479\", \"8480\",  #> \"8481\", \"8482\", \"8483\", \"8484\", \"8485\", \"8486\", \"8487\", \"8488\",  #> \"8489\", \"8490\", \"8491\", \"8492\", \"8493\", \"8494\", \"8495\", \"8496\",  #> \"8497\", \"8498\", \"8499\", \"8500\", \"8501\", \"8502\", \"8503\", \"8504\",  #> \"8505\", \"8506\", \"8507\", \"8508\", \"8509\", \"8510\", \"8511\", \"8512\",  #> \"8513\", \"8514\", \"8515\", \"8516\", \"8517\", \"8518\", \"8519\", \"8520\",  #> \"8521\", \"8522\", \"8523\", \"8524\", \"8525\", \"8526\", \"8527\", \"8528\",  #> \"8529\", \"8530\", \"8531\", \"8532\", \"8533\", \"8534\", \"8535\", \"8536\",  #> \"8537\", \"8538\", \"8539\", \"8540\", \"8541\", \"8542\", \"8543\", \"8544\",  #> \"8545\", \"8546\", \"8547\", \"8548\", \"8549\", \"8550\", \"8551\", \"8552\",  #> \"8553\", \"8554\", \"8555\", \"8556\", \"8557\", \"8558\", \"8559\", \"8560\",  #> \"8561\", \"8562\", \"8563\", \"8564\", \"8565\", \"8566\", \"8567\", \"8568\",  #> \"8569\", \"8570\", \"8571\", \"8572\", \"8573\", \"8574\", \"8575\", \"8576\",  #> \"8577\", \"8578\", \"8579\", \"8580\", \"8581\", \"8582\", \"8583\", \"8584\",  #> \"8585\", \"8586\", \"8587\", \"8588\", \"8589\", \"8590\", \"8591\", \"8592\",  #> \"8593\", \"8594\", \"8595\", \"8596\", \"8597\", \"8598\", \"8599\", \"8600\",  #> \"8601\", \"8602\", \"8603\", \"8604\", \"8605\", \"8606\", \"8607\", \"8608\",  #> \"8609\", \"8610\", \"8611\", \"8612\", \"8613\", \"8614\", \"8615\", \"8616\",  #> \"8617\", \"8618\", \"8619\", \"8620\", \"8621\", \"8622\", \"8623\", \"8624\",  #> \"8625\", \"8626\", \"8627\", \"8628\", \"8629\", \"8630\", \"8631\", \"8632\",  #> \"8633\", \"8634\", \"8635\", \"8636\", \"8637\", \"8638\", \"8639\", \"8640\",  #> \"8641\", \"8642\", \"8643\", \"8644\", \"8645\", \"8646\", \"8647\", \"8648\",  #> \"8649\", \"8650\", \"8651\", \"8652\", \"8653\", \"8654\", \"8655\", \"8656\",  #> \"8657\", \"8658\", \"8659\", \"8660\", \"8661\", \"8662\", \"8663\", \"8664\",  #> \"8665\", \"8666\", \"8667\", \"8668\", \"8669\", \"8670\", \"8671\", \"8672\",  #> \"8673\", \"8674\", \"8675\", \"8676\", \"8677\", \"8678\", \"8679\", \"8680\",  #> \"8681\", \"8682\", \"8683\", \"8684\", \"8685\", \"8686\", \"8687\", \"8688\",  #> \"8689\", \"8690\", \"8691\", \"8692\", \"8693\", \"8694\", \"8695\", \"8696\",  #> \"8697\", \"8698\", \"8699\", \"8700\", \"8701\", \"8702\", \"8703\", \"8704\",  #> \"8705\", \"8706\", \"8707\", \"8708\", \"8709\", \"8710\", \"8711\", \"8712\",  #> \"8713\"))) #>  #> Coefficients: #>                    (Intercept)             `as.factor(grade)4`   #>                        74.3583                          2.0907   #>            `as.factor(grade)5`  `treatment._as.factor(grade)3`   #>                         2.1321                          2.5742   #> `treatment._as.factor(grade)4`  `treatment._as.factor(grade)5`   #>                         3.7144                         -0.4864   #>"},{"path":"www.github.com/dev/reference/summary.Design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary of Design object — summary.Design","title":"Create summary of Design object — summary.Design","text":"Create summary Design object","code":""},{"path":"www.github.com/dev/reference/summary.Design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary of Design object — summary.Design","text":"","code":"# S3 method for Design summary(object, ..., treatment_binary = TRUE)"},{"path":"www.github.com/dev/reference/summary.Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary of Design object — summary.Design","text":"object Design object ... args treatment_binary treatment dichotomized object contains dichotomy? Ignored object contain dichotomy.","code":""},{"path":"www.github.com/dev/reference/summary.Design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary of Design object — summary.Design","text":"object class summary.Design","code":""},{"path":"www.github.com/dev/reference/summary.DirectAdjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary of DirectAdjusted object — summary.DirectAdjusted","title":"Create summary of DirectAdjusted object — summary.DirectAdjusted","text":"DirectAdjusted object fit SandwichLayer offset, usual stats::summary.lm() output enhanced use covariance-adjusted sandwich standard errors, t-test values recalculated reflect new standard errors.","code":""},{"path":"www.github.com/dev/reference/summary.DirectAdjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary of DirectAdjusted object — summary.DirectAdjusted","text":"","code":"# S3 method for DirectAdjusted summary(object, vcov.type = \"CR0\", ...)"},{"path":"www.github.com/dev/reference/summary.DirectAdjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary of DirectAdjusted object — summary.DirectAdjusted","text":"object DirectAdjusted object vcov.type string indicating desired variance estimator. See help vcovDA details accepted types. ... Additional arguments vcovDA(), desired finite sample heteroskedasticity-robust standard error adjustment.","code":""},{"path":"www.github.com/dev/reference/summary.DirectAdjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary of DirectAdjusted object — summary.DirectAdjusted","text":"object class summary.DirectAdjusted","code":""},{"path":"www.github.com/dev/reference/var_estimators.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute covariance-adjusted cluster-robust sandwich variance estimates — vcovDA","title":"Compute covariance-adjusted cluster-robust sandwich variance estimates — vcovDA","text":"Compute covariance-adjusted cluster-robust sandwich variance estimates Model-based standard errors HC0 adjustment Model-based standard errors HC1 adjustment","code":""},{"path":"www.github.com/dev/reference/var_estimators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute covariance-adjusted cluster-robust sandwich variance estimates — vcovDA","text":"","code":"vcovDA(x, type = \"CR0\", cluster = NULL, ...)  .vcov_CR0(x, ...)  .vcov_HC0(x, ...)  .vcov_MB0(x, ...)  .vcov_CR1(x, ...)  .vcov_HC1(x, ...)  .vcov_MB1(x, ...)"},{"path":"www.github.com/dev/reference/var_estimators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute covariance-adjusted cluster-robust sandwich variance estimates — vcovDA","text":"x fitted DirectAdjusted model object type string indicating desired variance estimator. Currently accepts \"CR0\", \"MB0\", \"HC0\" cluster Defaults NULL, means unit assignment columns indicated Design used generate clustered covariance estimates. non-NULL argument cluster specifies string character vector column names appearing covariance adjustment quasiexperimental samples used clustering covariance estimates. ... Arguments passed internal variance estimation function.","code":""},{"path":"www.github.com/dev/reference/var_estimators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute covariance-adjusted cluster-robust sandwich variance estimates — vcovDA","text":"\\(2\\times 2\\) matrix dimensions given intercept treatment variable terms ITT effect model","code":""},{"path":"www.github.com/dev/reference/var_estimators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute covariance-adjusted cluster-robust sandwich variance estimates — vcovDA","text":"Supported type include: \"CR0\", \"MB0\", \"HC0\" synonyms ... Others... create type, simply define function .vcov_XXX. type = \"XXX\" now use method. method return matrix appropriate dimension, attribute type = \"XXX\".","code":""},{"path":"www.github.com/dev/reference/var_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Return names of variables defining the Design — var_names","title":"Return names of variables defining the Design — var_names","text":"Return names variables defining Design","code":""},{"path":"www.github.com/dev/reference/var_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return names of variables defining the Design — var_names","text":"","code":"var_names(x, type)"},{"path":"www.github.com/dev/reference/var_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return names of variables defining the Design — var_names","text":"x Design object type one \"t\", \"u\", \"b\", \"f\"; \"treatment\", \"unit_of_assignment\", \"block\", \"forcing\" respectively","code":""},{"path":"www.github.com/dev/reference/var_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return names of variables defining the Design — var_names","text":"character vector variable names given type","code":""},{"path":"www.github.com/dev/reference/var_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return names of variables defining the Design — var_names","text":"","code":"des <- obs_design(o ~ unitid(cid1, cid2), data = simdata) var_names(des, \"t\") #> [1] \"o\" var_names(des, \"u\") #> [1] \"cid1\" \"cid2\" var_names(des, \"b\") #> character(0)"},{"path":"www.github.com/dev/reference/var_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of variable names and their role in the Design. — var_table","title":"Table of variable names and their role in the Design. — var_table","text":"Generates table identifying element structure Design (e.g. treatment, unit analysis, etc) variable(s) associated element.","code":""},{"path":"www.github.com/dev/reference/var_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of variable names and their role in the Design. — var_table","text":"","code":"var_table(design, compress = TRUE, report_all = FALSE)"},{"path":"www.github.com/dev/reference/var_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of variable names and their role in the Design. — var_table","text":"design Design object compress multiple variables compressed comma-separated string? Default TRUE. report_all report possible structures even exist Design? Default FALSE.","code":""},{"path":"www.github.com/dev/reference/var_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of variable names and their role in the Design. — var_table","text":"matrix variables Design structure","code":""},{"path":"www.github.com/dev/reference/var_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of variable names and their role in the Design. — var_table","text":"compress TRUE, result always two columns. FALSE, result number columns equal largest number variables particular role, plus one. E.g., call rct_design(z ~ unitid(, b, c, d) ... 4+1=5 columns output matrix compress = FALSE. report_all TRUE, matrix guaranteed 3 rows (design RCT Obs) 4 rows (design RD), empty variable entries appropriate. FALSE, matrix minimum 2 rows (treatment unit assignment/unitid/cluster), additional rows blocks forcing included Design.","code":""},{"path":"www.github.com/dev/reference/var_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of variable names and their role in the Design. — var_table","text":"","code":"des <- rct_design(z ~ uoa(cid1, cid2) + block(bid), data = simdata) var_table(des) #>      Structure            Variables    #> [1,] \"Treatment\"          \"z\"          #> [2,] \"Unit of Assignment\" \"cid1, cid2\" #> [3,] \"Block\"              \"bid\"        var_table(des, compress = FALSE) #>      Structure            Variable 1 Variable 2 #> [1,] \"Treatment\"          \"z\"        NA         #> [2,] \"Unit of Assignment\" \"cid1\"     \"cid2\"     #> [3,] \"Block\"              \"bid\"      NA"},{"path":"www.github.com/dev/reference/vcov.DirectAdjusted.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-Covariance matrix of DirectAdjusted object — vcov.DirectAdjusted","title":"Variance-Covariance matrix of DirectAdjusted object — vcov.DirectAdjusted","text":"Variance-Covariance matrix DirectAdjusted object","code":""},{"path":"www.github.com/dev/reference/vcov.DirectAdjusted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-Covariance matrix of DirectAdjusted object — vcov.DirectAdjusted","text":"","code":"# S3 method for DirectAdjusted vcov(object, ...)"},{"path":"www.github.com/dev/reference/vcov.DirectAdjusted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-Covariance matrix of DirectAdjusted object — vcov.DirectAdjusted","text":"object DirectAdjusted ... Additional arguments vcovDA() stats:::vcov.lm().","code":""},{"path":"www.github.com/dev/reference/vcov.DirectAdjusted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-Covariance matrix of DirectAdjusted object — vcov.DirectAdjusted","text":"Variance-Covariance matrix","code":""},{"path":"www.github.com/dev/reference/vcov.DirectAdjusted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance-Covariance matrix of DirectAdjusted object — vcov.DirectAdjusted","text":"DirectAdjusted object fit SandwichLayer offset, vcov() method provides sandwich estimate covariance-adjusted variance-covariance matrix. Otherwise, provides default OLS estimate matrix.","code":""},{"path":"www.github.com/dev/reference/weights-WeightedDesign-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"Extract Weights WeightedDesign","code":""},{"path":"www.github.com/dev/reference/weights-WeightedDesign-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"","code":"# S4 method for WeightedDesign weights(object, ...)"},{"path":"www.github.com/dev/reference/weights-WeightedDesign-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"object WeightedDesign object ... Ignored","code":""},{"path":"www.github.com/dev/reference/weights-WeightedDesign-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Weights from WeightedDesign — weights,WeightedDesign-method","text":"vector weights","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"breaking-changes-0-3-8","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"propertee 0.3.8","text":"model-based standard errors clustered level assignment called blocked design, vcovDA() clusters units assignment small blocks, blocks one treated control unit, together.","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"breaking-changes-0-3-7","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"propertee 0.3.7","text":"vcovDA() scales estimating equations using different constants ","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"bug-fixes-0-3-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"propertee 0.3.6","text":"Previous procedure aligning contributions estimating equations first-stage second-stage models failed column(s) used alignment NA’s. Outputs vcovDA() liable change call call result. fixed.","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"improvements-0-3-5","dir":"Changelog","previous_headings":"","what":"Improvements","title":"propertee 0.3.5","text":"Diagonal elements vcovDA() matrices lacking sufficient degrees freedom estimation returned NA’s rather numeric zeros. deviation sandwich package aims provide clarity results may otherwise appear negative diagonal elements vcov matrix","code":""},{"path":"www.github.com/dev/news/index.html","id":"bug-fixes-0-3-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"propertee 0.3.5","text":"lmitt() called blocked design absorb=TRUE, block-centered assignment , applicable, moderator assignment:moderator interaction columns, longer centered grand mean column. ensures blocks satisfy positivity assignment variable (positivity within factor level) contribute effect estimation lmitt() now accepts references formula objects","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"Improvements","title":"propertee 0.3.4","text":"Computational performance estfun.DirectAdjusted improved","code":""},{"path":"www.github.com/dev/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"propertee 0.3.4","text":"errors due --hood duplication moderator variable absorb=TRUE estimates corrected case observations stratum 0 weights due treated control units assignment existing stratum","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"added-features-0-3-3","dir":"Changelog","previous_headings":"","what":"Added Features","title":"propertee 0.3.3","text":"vcovDA() can accept user-created variance estimation functions start prefix .vcov_; type argument take rest function name input Variance estimation robust GLM’s (models fit using robustbase::glmrob) now accommodated HC1 variance estimates now accommodated","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"added-features-0-3-2","dir":"Changelog","previous_headings":"","what":"Added Features","title":"propertee 0.3.2","text":"Effect estimation continuous moderator variables now supported","code":""},{"path":"www.github.com/dev/news/index.html","id":"non-breaking-changes-0-3-2","dir":"Changelog","previous_headings":"","what":"Non-Breaking Changes","title":"propertee 0.3.2","text":"vcovDA() return NA’s entries covariance matrix lack sufficient degrees freedom estimate. Informative warnings accompany matrix, indicating standard errors NA’d .","code":""},{"path":"www.github.com/dev/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"propertee 0.3.2","text":"Functions generating weights, ate() ett(), return weights 0 rather infinity blocks contain treated units control units. Prior covariate adjustment fits previously incorporated variance estimation differently depending whether one created SandwichLayer object calling lmitt() called cov_adj() offset argument lmitt() call. corrected, ways return variance estimates. Covariate adjustment models admit rectangular bread matrices, produced robustbase::lmrob, now accommodated given reformulated estimating equations versions v0.1.1 later. contrasts error raised model.matrix() certain cov_adj() calls resolved.","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"breaking-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"propertee 0.3.1","text":"now order DirectAdjusted objects’ matrix estimating equations based user-specified ID columns unit assignment ID’s. stats::update function can longer called DirectAdjusted objects.","code":""},{"path":"www.github.com/dev/news/index.html","id":"non-breaking-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Non-Breaking Changes","title":"propertee 0.3.1","text":"DirectAdjusted objects now lmitt_call slots. summary calls DirectAdjusted objects accept vcov.type arguments specify desired standard error calculation shown output. Acceptable types follow documentation vcovDA. Shown printed DirectAdjusted objects return comprehensible labels ITT effect outputs.","code":""},{"path":"www.github.com/dev/news/index.html","id":"r-version-compatibility-0-3-1","dir":"Changelog","previous_headings":"","what":"R Version Compatibility","title":"propertee 0.3.1","text":"Now compatible R 4.3. Particularly, advise users working R 4.3 avoid expand.model.frame calls DirectAdjusted objects instead use internal function .expand.model.frame.DA necessary.","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"breaking-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"propertee 0.2.1","text":"Stratum fixed effects subgroup moderating effects can now accounted via absorb argument. Previous versions properly support functionality. Valid standard errors absorption, however, confirmed.","code":""},{"path":[]},{"path":"www.github.com/dev/news/index.html","id":"breaking-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"propertee 0.1.1","text":"reformulated estimating equations used derive standard errors. estimation settings accommodate, testing revealed differences standard error estimates previous current estimating equations, assure case possible situations.","code":""},{"path":"www.github.com/dev/news/index.html","id":"propertee-001","dir":"Changelog","previous_headings":"","what":"propertee 0.0.1","title":"propertee 0.0.1","text":"Compatible R 4.2.3 Introduces functionality direct adjusted design-informed standard errors accommodating covariance adjustment model-based setting Cluster-robust standard errors can estimated using HC0 estimator","code":""}]
